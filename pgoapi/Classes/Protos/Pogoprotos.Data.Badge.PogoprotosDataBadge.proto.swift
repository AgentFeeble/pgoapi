// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Data.Badge.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Data.Badge {
  public struct PogoprotosDataBadgeRoot {
    public static let `default` = PogoprotosDataBadgeRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class BadgeCaptureReward : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Badge.BadgeCaptureReward, rhs: Pogoprotos.Data.Badge.BadgeCaptureReward) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasCaptureRewardMultiplier == rhs.hasCaptureRewardMultiplier) && (!lhs.hasCaptureRewardMultiplier || lhs.captureRewardMultiplier == rhs.captureRewardMultiplier)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var captureRewardMultiplier:Float = Float(0)
    public fileprivate(set) var hasCaptureRewardMultiplier:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasCaptureRewardMultiplier {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:captureRewardMultiplier)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCaptureRewardMultiplier {
        serialize_size += captureRewardMultiplier.computeFloatSize(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
      return Pogoprotos.Data.Badge.BadgeCaptureReward.classBuilder() as! Pogoprotos.Data.Badge.BadgeCaptureReward.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
      return classBuilder() as! Pogoprotos.Data.Badge.BadgeCaptureReward.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Badge.BadgeCaptureReward.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Badge.BadgeCaptureReward.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
      return try Pogoprotos.Data.Badge.BadgeCaptureReward.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Badge.BadgeCaptureReward) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
      return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasCaptureRewardMultiplier {
        jsonMap["captureRewardMultiplier"] = Float(captureRewardMultiplier)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
      return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
      return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasCaptureRewardMultiplier {
        output += "\(indent) captureRewardMultiplier: \(captureRewardMultiplier) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCaptureRewardMultiplier {
               hashCode = (hashCode &* 31) &+ captureRewardMultiplier.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Badge.BadgeCaptureReward"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Badge.BadgeCaptureReward"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Badge.BadgeCaptureReward = Pogoprotos.Data.Badge.BadgeCaptureReward()
      public func getMessage() -> Pogoprotos.Data.Badge.BadgeCaptureReward {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCaptureRewardMultiplier:Bool {
           get {
                return builderResult.hasCaptureRewardMultiplier
           }
      }
      public var captureRewardMultiplier:Float {
           get {
                return builderResult.captureRewardMultiplier
           }
           set (value) {
               builderResult.hasCaptureRewardMultiplier = true
               builderResult.captureRewardMultiplier = value
           }
      }
      @discardableResult
      public func setCaptureRewardMultiplier(_ value:Float) -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
        self.captureRewardMultiplier = value
        return self
      }
      @discardableResult
      public func clearCaptureRewardMultiplier() -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder{
           builderResult.hasCaptureRewardMultiplier = false
           builderResult.captureRewardMultiplier = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
        builderResult = Pogoprotos.Data.Badge.BadgeCaptureReward()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
        return try Pogoprotos.Data.Badge.BadgeCaptureReward.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Badge.BadgeCaptureReward {
        let returnMe:Pogoprotos.Data.Badge.BadgeCaptureReward = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Badge.BadgeCaptureReward) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
        if other == Pogoprotos.Data.Badge.BadgeCaptureReward() {
         return self
        }
        if other.hasCaptureRewardMultiplier {
             captureRewardMultiplier = other.captureRewardMultiplier
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            captureRewardMultiplier = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Badge.BadgeCaptureReward.Builder()
        if let jsonValueCaptureRewardMultiplier = jsonMap["captureRewardMultiplier"] as? Float {
          resultDecodedBuilder.captureRewardMultiplier = Float(jsonValueCaptureRewardMultiplier)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Data.Badge.BadgeCaptureReward: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Badge.BadgeCaptureReward> {
    var mergedArray = Array<Pogoprotos.Data.Badge.BadgeCaptureReward>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward? {
    return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
    return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Badge.PogoprotosDataBadgeRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
    return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
    return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
    return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
    return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Badge.BadgeCaptureReward {
    return try Pogoprotos.Data.Badge.BadgeCaptureReward.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
