// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Settings.Master.Item.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Settings.Master.Item {
  public struct PogoprotosSettingsMasterItemRoot {
    public static let `default` = PogoprotosSettingsMasterItemRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Inventory.PogoprotosInventoryRoot.default.registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class BattleAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.BattleAttributes, rhs: Pogoprotos.Settings.Master.Item.BattleAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasStaPercent == rhs.hasStaPercent) && (!lhs.hasStaPercent || lhs.staPercent == rhs.staPercent)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var staPercent:Float = Float(0)
    public fileprivate(set) var hasStaPercent:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasStaPercent {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:staPercent)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStaPercent {
        serialize_size += staPercent.computeFloatSize(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.BattleAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.BattleAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.BattleAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.BattleAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.BattleAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.BattleAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.BattleAttributes) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasStaPercent {
        jsonMap["staPercent"] = Float(staPercent)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
      return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
      return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStaPercent {
        output += "\(indent) staPercent: \(staPercent) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStaPercent {
               hashCode = (hashCode &* 31) &+ staPercent.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.BattleAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.BattleAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.BattleAttributes = Pogoprotos.Settings.Master.Item.BattleAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.BattleAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStaPercent:Bool {
           get {
                return builderResult.hasStaPercent
           }
      }
      public var staPercent:Float {
           get {
                return builderResult.staPercent
           }
           set (value) {
               builderResult.hasStaPercent = true
               builderResult.staPercent = value
           }
      }
      @discardableResult
      public func setStaPercent(_ value:Float) -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        self.staPercent = value
        return self
      }
      @discardableResult
      public func clearStaPercent() -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder{
           builderResult.hasStaPercent = false
           builderResult.staPercent = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.BattleAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.BattleAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.BattleAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.BattleAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.BattleAttributes) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.BattleAttributes() {
         return self
        }
        if other.hasStaPercent {
             staPercent = other.staPercent
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            staPercent = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.BattleAttributes.Builder()
        if let jsonValueStaPercent = jsonMap["staPercent"] as? Float {
          resultDecodedBuilder.staPercent = Float(jsonValueStaPercent)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class EggIncubatorAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.EggIncubatorAttributes, rhs: Pogoprotos.Settings.Master.Item.EggIncubatorAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasIncubatorType == rhs.hasIncubatorType) && (!lhs.hasIncubatorType || lhs.incubatorType == rhs.incubatorType)
      fieldCheck = fieldCheck && (lhs.hasUses == rhs.hasUses) && (!lhs.hasUses || lhs.uses == rhs.uses)
      fieldCheck = fieldCheck && (lhs.hasDistanceMultiplier == rhs.hasDistanceMultiplier) && (!lhs.hasDistanceMultiplier || lhs.distanceMultiplier == rhs.distanceMultiplier)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var incubatorType:Pogoprotos.Inventory.EggIncubatorType = Pogoprotos.Inventory.EggIncubatorType.incubatorUnset
    public fileprivate(set) var hasIncubatorType:Bool = false
    public fileprivate(set) var uses:Int32 = Int32(0)
    public fileprivate(set) var hasUses:Bool = false

    public fileprivate(set) var distanceMultiplier:Float = Float(0)
    public fileprivate(set) var hasDistanceMultiplier:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasIncubatorType {
        try codedOutputStream.writeEnum(fieldNumber: 1, value:incubatorType.rawValue)
      }
      if hasUses {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:uses)
      }
      if hasDistanceMultiplier {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:distanceMultiplier)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasIncubatorType) {
        serialize_size += incubatorType.rawValue.computeEnumSize(fieldNumber: 1)
      }
      if hasUses {
        serialize_size += uses.computeInt32Size(fieldNumber: 2)
      }
      if hasDistanceMultiplier {
        serialize_size += distanceMultiplier.computeFloatSize(fieldNumber: 3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasIncubatorType {
        jsonMap["incubatorType"] = incubatorType.toString()
      }
      if hasUses {
        jsonMap["uses"] = Int(uses)
      }
      if hasDistanceMultiplier {
        jsonMap["distanceMultiplier"] = Float(distanceMultiplier)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
      return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
      return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasIncubatorType) {
        output += "\(indent) incubatorType: \(incubatorType.description)\n"
      }
      if hasUses {
        output += "\(indent) uses: \(uses) \n"
      }
      if hasDistanceMultiplier {
        output += "\(indent) distanceMultiplier: \(distanceMultiplier) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIncubatorType {
               hashCode = (hashCode &* 31) &+ Int(incubatorType.rawValue)
            }
            if hasUses {
               hashCode = (hashCode &* 31) &+ uses.hashValue
            }
            if hasDistanceMultiplier {
               hashCode = (hashCode &* 31) &+ distanceMultiplier.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.EggIncubatorAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.EggIncubatorAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes = Pogoprotos.Settings.Master.Item.EggIncubatorAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasIncubatorType:Bool{
            get {
                return builderResult.hasIncubatorType
            }
        }
        public var incubatorType:Pogoprotos.Inventory.EggIncubatorType {
            get {
                return builderResult.incubatorType
            }
            set (value) {
                builderResult.hasIncubatorType = true
                builderResult.incubatorType = value
            }
        }
      @discardableResult
        public func setIncubatorType(_ value:Pogoprotos.Inventory.EggIncubatorType) -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
          self.incubatorType = value
          return self
        }
      @discardableResult
        public func clearIncubatorType() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
           builderResult.hasIncubatorType = false
           builderResult.incubatorType = .incubatorUnset
           return self
        }
      public var hasUses:Bool {
           get {
                return builderResult.hasUses
           }
      }
      public var uses:Int32 {
           get {
                return builderResult.uses
           }
           set (value) {
               builderResult.hasUses = true
               builderResult.uses = value
           }
      }
      @discardableResult
      public func setUses(_ value:Int32) -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        self.uses = value
        return self
      }
      @discardableResult
      public func clearUses() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder{
           builderResult.hasUses = false
           builderResult.uses = Int32(0)
           return self
      }
      public var hasDistanceMultiplier:Bool {
           get {
                return builderResult.hasDistanceMultiplier
           }
      }
      public var distanceMultiplier:Float {
           get {
                return builderResult.distanceMultiplier
           }
           set (value) {
               builderResult.hasDistanceMultiplier = true
               builderResult.distanceMultiplier = value
           }
      }
      @discardableResult
      public func setDistanceMultiplier(_ value:Float) -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        self.distanceMultiplier = value
        return self
      }
      @discardableResult
      public func clearDistanceMultiplier() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder{
           builderResult.hasDistanceMultiplier = false
           builderResult.distanceMultiplier = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.EggIncubatorAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.EggIncubatorAttributes() {
         return self
        }
        if other.hasIncubatorType {
             incubatorType = other.incubatorType
        }
        if other.hasUses {
             uses = other.uses
        }
        if other.hasDistanceMultiplier {
             distanceMultiplier = other.distanceMultiplier
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntincubatorType = try codedInputStream.readEnum()
            if let enumsincubatorType = Pogoprotos.Inventory.EggIncubatorType(rawValue:valueIntincubatorType){
                 incubatorType = enumsincubatorType
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntincubatorType))
            }

          case 16:
            uses = try codedInputStream.readInt32()

          case 29:
            distanceMultiplier = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder()
        if let jsonValueIncubatorType = jsonMap["incubatorType"] as? String {
          resultDecodedBuilder.incubatorType = try Pogoprotos.Inventory.EggIncubatorType.fromString(str: jsonValueIncubatorType)
        }
        if let jsonValueUses = jsonMap["uses"] as? Int {
          resultDecodedBuilder.uses = Int32(jsonValueUses)
        }
        if let jsonValueDistanceMultiplier = jsonMap["distanceMultiplier"] as? Float {
          resultDecodedBuilder.distanceMultiplier = Float(jsonValueDistanceMultiplier)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class ExperienceBoostAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes, rhs: Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasXpMultiplier == rhs.hasXpMultiplier) && (!lhs.hasXpMultiplier || lhs.xpMultiplier == rhs.xpMultiplier)
      fieldCheck = fieldCheck && (lhs.hasBoostDurationMs == rhs.hasBoostDurationMs) && (!lhs.hasBoostDurationMs || lhs.boostDurationMs == rhs.boostDurationMs)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var xpMultiplier:Float = Float(0)
    public fileprivate(set) var hasXpMultiplier:Bool = false

    public fileprivate(set) var boostDurationMs:Int32 = Int32(0)
    public fileprivate(set) var hasBoostDurationMs:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasXpMultiplier {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:xpMultiplier)
      }
      if hasBoostDurationMs {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:boostDurationMs)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasXpMultiplier {
        serialize_size += xpMultiplier.computeFloatSize(fieldNumber: 1)
      }
      if hasBoostDurationMs {
        serialize_size += boostDurationMs.computeInt32Size(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasXpMultiplier {
        jsonMap["xpMultiplier"] = Float(xpMultiplier)
      }
      if hasBoostDurationMs {
        jsonMap["boostDurationMs"] = Int(boostDurationMs)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
      return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
      return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasXpMultiplier {
        output += "\(indent) xpMultiplier: \(xpMultiplier) \n"
      }
      if hasBoostDurationMs {
        output += "\(indent) boostDurationMs: \(boostDurationMs) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasXpMultiplier {
               hashCode = (hashCode &* 31) &+ xpMultiplier.hashValue
            }
            if hasBoostDurationMs {
               hashCode = (hashCode &* 31) &+ boostDurationMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes = Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasXpMultiplier:Bool {
           get {
                return builderResult.hasXpMultiplier
           }
      }
      public var xpMultiplier:Float {
           get {
                return builderResult.xpMultiplier
           }
           set (value) {
               builderResult.hasXpMultiplier = true
               builderResult.xpMultiplier = value
           }
      }
      @discardableResult
      public func setXpMultiplier(_ value:Float) -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        self.xpMultiplier = value
        return self
      }
      @discardableResult
      public func clearXpMultiplier() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder{
           builderResult.hasXpMultiplier = false
           builderResult.xpMultiplier = Float(0)
           return self
      }
      public var hasBoostDurationMs:Bool {
           get {
                return builderResult.hasBoostDurationMs
           }
      }
      public var boostDurationMs:Int32 {
           get {
                return builderResult.boostDurationMs
           }
           set (value) {
               builderResult.hasBoostDurationMs = true
               builderResult.boostDurationMs = value
           }
      }
      @discardableResult
      public func setBoostDurationMs(_ value:Int32) -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        self.boostDurationMs = value
        return self
      }
      @discardableResult
      public func clearBoostDurationMs() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder{
           builderResult.hasBoostDurationMs = false
           builderResult.boostDurationMs = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes() {
         return self
        }
        if other.hasXpMultiplier {
             xpMultiplier = other.xpMultiplier
        }
        if other.hasBoostDurationMs {
             boostDurationMs = other.boostDurationMs
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            xpMultiplier = try codedInputStream.readFloat()

          case 16:
            boostDurationMs = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder()
        if let jsonValueXpMultiplier = jsonMap["xpMultiplier"] as? Float {
          resultDecodedBuilder.xpMultiplier = Float(jsonValueXpMultiplier)
        }
        if let jsonValueBoostDurationMs = jsonMap["boostDurationMs"] as? Int {
          resultDecodedBuilder.boostDurationMs = Int32(jsonValueBoostDurationMs)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class FoodAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.FoodAttributes, rhs: Pogoprotos.Settings.Master.Item.FoodAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.itemEffect == rhs.itemEffect)
      fieldCheck = fieldCheck && (lhs.itemEffectPercent == rhs.itemEffectPercent)
      fieldCheck = fieldCheck && (lhs.hasGrowthPercent == rhs.hasGrowthPercent) && (!lhs.hasGrowthPercent || lhs.growthPercent == rhs.growthPercent)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    private var itemEffectMemoizedSerializedSize:Int32 = 0
    public fileprivate(set) var itemEffect:Array<Pogoprotos.Enums.ItemEffect> = Array<Pogoprotos.Enums.ItemEffect>()
    public fileprivate(set) var itemEffectPercent:Array<Float> = Array<Float>()
    private var itemEffectPercentMemoizedSerializedSize:Int32 = -1
    public fileprivate(set) var growthPercent:Float = Float(0)
    public fileprivate(set) var hasGrowthPercent:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if !itemEffect.isEmpty {
        try codedOutputStream.writeRawVarint32(value: 10)
        try codedOutputStream.writeRawVarint32(value: itemEffectMemoizedSerializedSize)
      }
      for oneValueOfitemEffect in itemEffect {
          try codedOutputStream.writeEnumNoTag(value: oneValueOfitemEffect.rawValue)
      }
      if !itemEffectPercent.isEmpty {
        try codedOutputStream.writeRawVarint32(value: 18)
        try codedOutputStream.writeRawVarint32(value: itemEffectPercentMemoizedSerializedSize)
        for oneValueitemEffectPercent in itemEffectPercent {
          try codedOutputStream.writeFloatNoTag(value: oneValueitemEffectPercent)
        }
      }
      if hasGrowthPercent {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:growthPercent)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeitemEffect:Int32 = 0
      for oneValueOfitemEffect in itemEffect {
          dataSizeitemEffect += oneValueOfitemEffect.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeitemEffect
      if !itemEffect.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeitemEffect.computeRawVarint32Size()
      }
      itemEffectMemoizedSerializedSize = dataSizeitemEffect
      var dataSizeItemEffectPercent:Int32 = 0
      dataSizeItemEffectPercent = 4 * Int32(itemEffectPercent.count)
      serialize_size += dataSizeItemEffectPercent
      if !itemEffectPercent.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeItemEffectPercent.computeInt32SizeNoTag()
      }
      itemEffectPercentMemoizedSerializedSize = dataSizeItemEffectPercent
      if hasGrowthPercent {
        serialize_size += growthPercent.computeFloatSize(fieldNumber: 3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.FoodAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.FoodAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.FoodAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.FoodAttributes) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if !itemEffect.isEmpty {
        var jsonArrayItemEffect:Array<String> = []
          for oneValueItemEffect in itemEffect {
            jsonArrayItemEffect.append(oneValueItemEffect.toString())
          }
        jsonMap["itemEffect"] = jsonArrayItemEffect
      }
      if !itemEffectPercent.isEmpty {
        var jsonArrayItemEffectPercent:Array<Float> = []
          for oneValueItemEffectPercent in itemEffectPercent {
            jsonArrayItemEffectPercent.append(Float(oneValueItemEffectPercent))
          }
        jsonMap["itemEffectPercent"] = jsonArrayItemEffectPercent
      }
      if hasGrowthPercent {
        jsonMap["growthPercent"] = Float(growthPercent)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
      return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var itemEffectElementIndex:Int = 0
      for oneValueOfitemEffect in itemEffect {
          output += "\(indent) itemEffect[\(itemEffectElementIndex)]: \(oneValueOfitemEffect.description)\n"
          itemEffectElementIndex += 1
      }
      var itemEffectPercentElementIndex:Int = 0
      for oneValueItemEffectPercent in itemEffectPercent  {
          output += "\(indent) itemEffectPercent[\(itemEffectPercentElementIndex)]: \(oneValueItemEffectPercent)\n"
          itemEffectPercentElementIndex += 1
      }
      if hasGrowthPercent {
        output += "\(indent) growthPercent: \(growthPercent) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueOfitemEffect in itemEffect {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfitemEffect.rawValue)
            }
            for oneValueItemEffectPercent in itemEffectPercent {
                hashCode = (hashCode &* 31) &+ oneValueItemEffectPercent.hashValue
            }
            if hasGrowthPercent {
               hashCode = (hashCode &* 31) &+ growthPercent.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.FoodAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.FoodAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.FoodAttributes = Pogoprotos.Settings.Master.Item.FoodAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.FoodAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var itemEffect:Array<Pogoprotos.Enums.ItemEffect> {
          get {
              return builderResult.itemEffect
          }
          set (value) {
              builderResult.itemEffect = value
          }
      }
      @discardableResult
      public func setItemEffect(_ value:Array<Pogoprotos.Enums.ItemEffect>) -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        self.itemEffect = value
        return self
      }
      @discardableResult
      public func clearItemEffect() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        builderResult.itemEffect.removeAll(keepingCapacity: false)
        return self
      }
      public var itemEffectPercent:Array<Float> {
           get {
               return builderResult.itemEffectPercent
           }
           set (array) {
               builderResult.itemEffectPercent = array
           }
      }
      @discardableResult
      public func setItemEffectPercent(_ value:Array<Float>) -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        self.itemEffectPercent = value
        return self
      }
      @discardableResult
      public func clearItemEffectPercent() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
         builderResult.itemEffectPercent.removeAll(keepingCapacity: false)
         return self
      }
      public var hasGrowthPercent:Bool {
           get {
                return builderResult.hasGrowthPercent
           }
      }
      public var growthPercent:Float {
           get {
                return builderResult.growthPercent
           }
           set (value) {
               builderResult.hasGrowthPercent = true
               builderResult.growthPercent = value
           }
      }
      @discardableResult
      public func setGrowthPercent(_ value:Float) -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        self.growthPercent = value
        return self
      }
      @discardableResult
      public func clearGrowthPercent() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder{
           builderResult.hasGrowthPercent = false
           builderResult.growthPercent = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.FoodAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.FoodAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.FoodAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.FoodAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.FoodAttributes) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.FoodAttributes() {
         return self
        }
        if !other.itemEffect.isEmpty {
           builderResult.itemEffect += other.itemEffect
        }
        if !other.itemEffectPercent.isEmpty {
            builderResult.itemEffectPercent += other.itemEffectPercent
        }
        if other.hasGrowthPercent {
             growthPercent = other.growthPercent
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length = Int(try codedInputStream.readRawVarint32())
            let oldLimit = try codedInputStream.pushLimit(byteLimit: length)
            while codedInputStream.bytesUntilLimit() > 0 {
            let valueIntitemEffect = try codedInputStream.readEnum()
            if let enumsitemEffect = Pogoprotos.Enums.ItemEffect(rawValue:valueIntitemEffect) {
                 builderResult.itemEffect.append(enumsitemEffect)
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntitemEffect))
            }
            }
            codedInputStream.popLimit(oldLimit: oldLimit)

          case 18:
            let length = Int(try codedInputStream.readRawVarint32())
            let limit = try codedInputStream.pushLimit(byteLimit: length)
            while (codedInputStream.bytesUntilLimit() > 0) {
              builderResult.itemEffectPercent.append(try codedInputStream.readFloat())
            }
            codedInputStream.popLimit(oldLimit: limit)

          case 29:
            growthPercent = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
        if let jsonValueItemEffect = jsonMap["itemEffect"] as? Array<String> {
          var jsonArrayItemEffect:Array<Pogoprotos.Enums.ItemEffect> = []
          for oneValueItemEffect in jsonValueItemEffect {
            let enumFromStringItemEffect = try Pogoprotos.Enums.ItemEffect.fromString(str: oneValueItemEffect)
            jsonArrayItemEffect.append(enumFromStringItemEffect)
          }
          resultDecodedBuilder.itemEffect = jsonArrayItemEffect
        }
        if let jsonValueItemEffectPercent = jsonMap["itemEffectPercent"] as? Array<Float> {
          var jsonArrayItemEffectPercent:Array<Float> = []
          for oneValueItemEffectPercent in jsonValueItemEffectPercent {
            jsonArrayItemEffectPercent.append(Float(oneValueItemEffectPercent))
          }
          resultDecodedBuilder.itemEffectPercent = jsonArrayItemEffectPercent
        }
        if let jsonValueGrowthPercent = jsonMap["growthPercent"] as? Float {
          resultDecodedBuilder.growthPercent = Float(jsonValueGrowthPercent)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class FortModifierAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.FortModifierAttributes, rhs: Pogoprotos.Settings.Master.Item.FortModifierAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasModifierLifetimeSeconds == rhs.hasModifierLifetimeSeconds) && (!lhs.hasModifierLifetimeSeconds || lhs.modifierLifetimeSeconds == rhs.modifierLifetimeSeconds)
      fieldCheck = fieldCheck && (lhs.hasTroyDiskNumPokemonSpawned == rhs.hasTroyDiskNumPokemonSpawned) && (!lhs.hasTroyDiskNumPokemonSpawned || lhs.troyDiskNumPokemonSpawned == rhs.troyDiskNumPokemonSpawned)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var modifierLifetimeSeconds:Int32 = Int32(0)
    public fileprivate(set) var hasModifierLifetimeSeconds:Bool = false

    public fileprivate(set) var troyDiskNumPokemonSpawned:Int32 = Int32(0)
    public fileprivate(set) var hasTroyDiskNumPokemonSpawned:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasModifierLifetimeSeconds {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:modifierLifetimeSeconds)
      }
      if hasTroyDiskNumPokemonSpawned {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:troyDiskNumPokemonSpawned)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasModifierLifetimeSeconds {
        serialize_size += modifierLifetimeSeconds.computeInt32Size(fieldNumber: 1)
      }
      if hasTroyDiskNumPokemonSpawned {
        serialize_size += troyDiskNumPokemonSpawned.computeInt32Size(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.FortModifierAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.FortModifierAttributes) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasModifierLifetimeSeconds {
        jsonMap["modifierLifetimeSeconds"] = Int(modifierLifetimeSeconds)
      }
      if hasTroyDiskNumPokemonSpawned {
        jsonMap["troyDiskNumPokemonSpawned"] = Int(troyDiskNumPokemonSpawned)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
      return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
      return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasModifierLifetimeSeconds {
        output += "\(indent) modifierLifetimeSeconds: \(modifierLifetimeSeconds) \n"
      }
      if hasTroyDiskNumPokemonSpawned {
        output += "\(indent) troyDiskNumPokemonSpawned: \(troyDiskNumPokemonSpawned) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasModifierLifetimeSeconds {
               hashCode = (hashCode &* 31) &+ modifierLifetimeSeconds.hashValue
            }
            if hasTroyDiskNumPokemonSpawned {
               hashCode = (hashCode &* 31) &+ troyDiskNumPokemonSpawned.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.FortModifierAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.FortModifierAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.FortModifierAttributes = Pogoprotos.Settings.Master.Item.FortModifierAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasModifierLifetimeSeconds:Bool {
           get {
                return builderResult.hasModifierLifetimeSeconds
           }
      }
      public var modifierLifetimeSeconds:Int32 {
           get {
                return builderResult.modifierLifetimeSeconds
           }
           set (value) {
               builderResult.hasModifierLifetimeSeconds = true
               builderResult.modifierLifetimeSeconds = value
           }
      }
      @discardableResult
      public func setModifierLifetimeSeconds(_ value:Int32) -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        self.modifierLifetimeSeconds = value
        return self
      }
      @discardableResult
      public func clearModifierLifetimeSeconds() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder{
           builderResult.hasModifierLifetimeSeconds = false
           builderResult.modifierLifetimeSeconds = Int32(0)
           return self
      }
      public var hasTroyDiskNumPokemonSpawned:Bool {
           get {
                return builderResult.hasTroyDiskNumPokemonSpawned
           }
      }
      public var troyDiskNumPokemonSpawned:Int32 {
           get {
                return builderResult.troyDiskNumPokemonSpawned
           }
           set (value) {
               builderResult.hasTroyDiskNumPokemonSpawned = true
               builderResult.troyDiskNumPokemonSpawned = value
           }
      }
      @discardableResult
      public func setTroyDiskNumPokemonSpawned(_ value:Int32) -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        self.troyDiskNumPokemonSpawned = value
        return self
      }
      @discardableResult
      public func clearTroyDiskNumPokemonSpawned() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder{
           builderResult.hasTroyDiskNumPokemonSpawned = false
           builderResult.troyDiskNumPokemonSpawned = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.FortModifierAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.FortModifierAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.FortModifierAttributes) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.FortModifierAttributes() {
         return self
        }
        if other.hasModifierLifetimeSeconds {
             modifierLifetimeSeconds = other.modifierLifetimeSeconds
        }
        if other.hasTroyDiskNumPokemonSpawned {
             troyDiskNumPokemonSpawned = other.troyDiskNumPokemonSpawned
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            modifierLifetimeSeconds = try codedInputStream.readInt32()

          case 16:
            troyDiskNumPokemonSpawned = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder()
        if let jsonValueModifierLifetimeSeconds = jsonMap["modifierLifetimeSeconds"] as? Int {
          resultDecodedBuilder.modifierLifetimeSeconds = Int32(jsonValueModifierLifetimeSeconds)
        }
        if let jsonValueTroyDiskNumPokemonSpawned = jsonMap["troyDiskNumPokemonSpawned"] as? Int {
          resultDecodedBuilder.troyDiskNumPokemonSpawned = Int32(jsonValueTroyDiskNumPokemonSpawned)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class IncenseAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.IncenseAttributes, rhs: Pogoprotos.Settings.Master.Item.IncenseAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasIncenseLifetimeSeconds == rhs.hasIncenseLifetimeSeconds) && (!lhs.hasIncenseLifetimeSeconds || lhs.incenseLifetimeSeconds == rhs.incenseLifetimeSeconds)
      fieldCheck = fieldCheck && (lhs.pokemonType == rhs.pokemonType)
      fieldCheck = fieldCheck && (lhs.hasPokemonIncenseTypeProbability == rhs.hasPokemonIncenseTypeProbability) && (!lhs.hasPokemonIncenseTypeProbability || lhs.pokemonIncenseTypeProbability == rhs.pokemonIncenseTypeProbability)
      fieldCheck = fieldCheck && (lhs.hasStandingTimeBetweenEncountersSeconds == rhs.hasStandingTimeBetweenEncountersSeconds) && (!lhs.hasStandingTimeBetweenEncountersSeconds || lhs.standingTimeBetweenEncountersSeconds == rhs.standingTimeBetweenEncountersSeconds)
      fieldCheck = fieldCheck && (lhs.hasMovingTimeBetweenEncounterSeconds == rhs.hasMovingTimeBetweenEncounterSeconds) && (!lhs.hasMovingTimeBetweenEncounterSeconds || lhs.movingTimeBetweenEncounterSeconds == rhs.movingTimeBetweenEncounterSeconds)
      fieldCheck = fieldCheck && (lhs.hasDistanceRequiredForShorterIntervalMeters == rhs.hasDistanceRequiredForShorterIntervalMeters) && (!lhs.hasDistanceRequiredForShorterIntervalMeters || lhs.distanceRequiredForShorterIntervalMeters == rhs.distanceRequiredForShorterIntervalMeters)
      fieldCheck = fieldCheck && (lhs.hasPokemonAttractedLengthSec == rhs.hasPokemonAttractedLengthSec) && (!lhs.hasPokemonAttractedLengthSec || lhs.pokemonAttractedLengthSec == rhs.pokemonAttractedLengthSec)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var incenseLifetimeSeconds:Int32 = Int32(0)
    public fileprivate(set) var hasIncenseLifetimeSeconds:Bool = false

    private var pokemonTypeMemoizedSerializedSize:Int32 = 0
    public fileprivate(set) var pokemonType:Array<Pogoprotos.Enums.PokemonType> = Array<Pogoprotos.Enums.PokemonType>()
    public fileprivate(set) var pokemonIncenseTypeProbability:Float = Float(0)
    public fileprivate(set) var hasPokemonIncenseTypeProbability:Bool = false

    public fileprivate(set) var standingTimeBetweenEncountersSeconds:Int32 = Int32(0)
    public fileprivate(set) var hasStandingTimeBetweenEncountersSeconds:Bool = false

    public fileprivate(set) var movingTimeBetweenEncounterSeconds:Int32 = Int32(0)
    public fileprivate(set) var hasMovingTimeBetweenEncounterSeconds:Bool = false

    public fileprivate(set) var distanceRequiredForShorterIntervalMeters:Int32 = Int32(0)
    public fileprivate(set) var hasDistanceRequiredForShorterIntervalMeters:Bool = false

    public fileprivate(set) var pokemonAttractedLengthSec:Int32 = Int32(0)
    public fileprivate(set) var hasPokemonAttractedLengthSec:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasIncenseLifetimeSeconds {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:incenseLifetimeSeconds)
      }
      if !pokemonType.isEmpty {
        try codedOutputStream.writeRawVarint32(value: 18)
        try codedOutputStream.writeRawVarint32(value: pokemonTypeMemoizedSerializedSize)
      }
      for oneValueOfpokemonType in pokemonType {
          try codedOutputStream.writeEnumNoTag(value: oneValueOfpokemonType.rawValue)
      }
      if hasPokemonIncenseTypeProbability {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:pokemonIncenseTypeProbability)
      }
      if hasStandingTimeBetweenEncountersSeconds {
        try codedOutputStream.writeInt32(fieldNumber: 4, value:standingTimeBetweenEncountersSeconds)
      }
      if hasMovingTimeBetweenEncounterSeconds {
        try codedOutputStream.writeInt32(fieldNumber: 5, value:movingTimeBetweenEncounterSeconds)
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        try codedOutputStream.writeInt32(fieldNumber: 6, value:distanceRequiredForShorterIntervalMeters)
      }
      if hasPokemonAttractedLengthSec {
        try codedOutputStream.writeInt32(fieldNumber: 7, value:pokemonAttractedLengthSec)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIncenseLifetimeSeconds {
        serialize_size += incenseLifetimeSeconds.computeInt32Size(fieldNumber: 1)
      }
      var dataSizepokemonType:Int32 = 0
      for oneValueOfpokemonType in pokemonType {
          dataSizepokemonType += oneValueOfpokemonType.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizepokemonType
      if !pokemonType.isEmpty {
        serialize_size += 1
        serialize_size += dataSizepokemonType.computeRawVarint32Size()
      }
      pokemonTypeMemoizedSerializedSize = dataSizepokemonType
      if hasPokemonIncenseTypeProbability {
        serialize_size += pokemonIncenseTypeProbability.computeFloatSize(fieldNumber: 3)
      }
      if hasStandingTimeBetweenEncountersSeconds {
        serialize_size += standingTimeBetweenEncountersSeconds.computeInt32Size(fieldNumber: 4)
      }
      if hasMovingTimeBetweenEncounterSeconds {
        serialize_size += movingTimeBetweenEncounterSeconds.computeInt32Size(fieldNumber: 5)
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        serialize_size += distanceRequiredForShorterIntervalMeters.computeInt32Size(fieldNumber: 6)
      }
      if hasPokemonAttractedLengthSec {
        serialize_size += pokemonAttractedLengthSec.computeInt32Size(fieldNumber: 7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.IncenseAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.IncenseAttributes) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasIncenseLifetimeSeconds {
        jsonMap["incenseLifetimeSeconds"] = Int(incenseLifetimeSeconds)
      }
      if !pokemonType.isEmpty {
        var jsonArrayPokemonType:Array<String> = []
          for oneValuePokemonType in pokemonType {
            jsonArrayPokemonType.append(oneValuePokemonType.toString())
          }
        jsonMap["pokemonType"] = jsonArrayPokemonType
      }
      if hasPokemonIncenseTypeProbability {
        jsonMap["pokemonIncenseTypeProbability"] = Float(pokemonIncenseTypeProbability)
      }
      if hasStandingTimeBetweenEncountersSeconds {
        jsonMap["standingTimeBetweenEncountersSeconds"] = Int(standingTimeBetweenEncountersSeconds)
      }
      if hasMovingTimeBetweenEncounterSeconds {
        jsonMap["movingTimeBetweenEncounterSeconds"] = Int(movingTimeBetweenEncounterSeconds)
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        jsonMap["distanceRequiredForShorterIntervalMeters"] = Int(distanceRequiredForShorterIntervalMeters)
      }
      if hasPokemonAttractedLengthSec {
        jsonMap["pokemonAttractedLengthSec"] = Int(pokemonAttractedLengthSec)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
      return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasIncenseLifetimeSeconds {
        output += "\(indent) incenseLifetimeSeconds: \(incenseLifetimeSeconds) \n"
      }
      var pokemonTypeElementIndex:Int = 0
      for oneValueOfpokemonType in pokemonType {
          output += "\(indent) pokemonType[\(pokemonTypeElementIndex)]: \(oneValueOfpokemonType.description)\n"
          pokemonTypeElementIndex += 1
      }
      if hasPokemonIncenseTypeProbability {
        output += "\(indent) pokemonIncenseTypeProbability: \(pokemonIncenseTypeProbability) \n"
      }
      if hasStandingTimeBetweenEncountersSeconds {
        output += "\(indent) standingTimeBetweenEncountersSeconds: \(standingTimeBetweenEncountersSeconds) \n"
      }
      if hasMovingTimeBetweenEncounterSeconds {
        output += "\(indent) movingTimeBetweenEncounterSeconds: \(movingTimeBetweenEncounterSeconds) \n"
      }
      if hasDistanceRequiredForShorterIntervalMeters {
        output += "\(indent) distanceRequiredForShorterIntervalMeters: \(distanceRequiredForShorterIntervalMeters) \n"
      }
      if hasPokemonAttractedLengthSec {
        output += "\(indent) pokemonAttractedLengthSec: \(pokemonAttractedLengthSec) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIncenseLifetimeSeconds {
               hashCode = (hashCode &* 31) &+ incenseLifetimeSeconds.hashValue
            }
            for oneValueOfpokemonType in pokemonType {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfpokemonType.rawValue)
            }
            if hasPokemonIncenseTypeProbability {
               hashCode = (hashCode &* 31) &+ pokemonIncenseTypeProbability.hashValue
            }
            if hasStandingTimeBetweenEncountersSeconds {
               hashCode = (hashCode &* 31) &+ standingTimeBetweenEncountersSeconds.hashValue
            }
            if hasMovingTimeBetweenEncounterSeconds {
               hashCode = (hashCode &* 31) &+ movingTimeBetweenEncounterSeconds.hashValue
            }
            if hasDistanceRequiredForShorterIntervalMeters {
               hashCode = (hashCode &* 31) &+ distanceRequiredForShorterIntervalMeters.hashValue
            }
            if hasPokemonAttractedLengthSec {
               hashCode = (hashCode &* 31) &+ pokemonAttractedLengthSec.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.IncenseAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.IncenseAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.IncenseAttributes = Pogoprotos.Settings.Master.Item.IncenseAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasIncenseLifetimeSeconds:Bool {
           get {
                return builderResult.hasIncenseLifetimeSeconds
           }
      }
      public var incenseLifetimeSeconds:Int32 {
           get {
                return builderResult.incenseLifetimeSeconds
           }
           set (value) {
               builderResult.hasIncenseLifetimeSeconds = true
               builderResult.incenseLifetimeSeconds = value
           }
      }
      @discardableResult
      public func setIncenseLifetimeSeconds(_ value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.incenseLifetimeSeconds = value
        return self
      }
      @discardableResult
      public func clearIncenseLifetimeSeconds() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasIncenseLifetimeSeconds = false
           builderResult.incenseLifetimeSeconds = Int32(0)
           return self
      }
      public var pokemonType:Array<Pogoprotos.Enums.PokemonType> {
          get {
              return builderResult.pokemonType
          }
          set (value) {
              builderResult.pokemonType = value
          }
      }
      @discardableResult
      public func setPokemonType(_ value:Array<Pogoprotos.Enums.PokemonType>) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.pokemonType = value
        return self
      }
      @discardableResult
      public func clearPokemonType() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        builderResult.pokemonType.removeAll(keepingCapacity: false)
        return self
      }
      public var hasPokemonIncenseTypeProbability:Bool {
           get {
                return builderResult.hasPokemonIncenseTypeProbability
           }
      }
      public var pokemonIncenseTypeProbability:Float {
           get {
                return builderResult.pokemonIncenseTypeProbability
           }
           set (value) {
               builderResult.hasPokemonIncenseTypeProbability = true
               builderResult.pokemonIncenseTypeProbability = value
           }
      }
      @discardableResult
      public func setPokemonIncenseTypeProbability(_ value:Float) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.pokemonIncenseTypeProbability = value
        return self
      }
      @discardableResult
      public func clearPokemonIncenseTypeProbability() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasPokemonIncenseTypeProbability = false
           builderResult.pokemonIncenseTypeProbability = Float(0)
           return self
      }
      public var hasStandingTimeBetweenEncountersSeconds:Bool {
           get {
                return builderResult.hasStandingTimeBetweenEncountersSeconds
           }
      }
      public var standingTimeBetweenEncountersSeconds:Int32 {
           get {
                return builderResult.standingTimeBetweenEncountersSeconds
           }
           set (value) {
               builderResult.hasStandingTimeBetweenEncountersSeconds = true
               builderResult.standingTimeBetweenEncountersSeconds = value
           }
      }
      @discardableResult
      public func setStandingTimeBetweenEncountersSeconds(_ value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.standingTimeBetweenEncountersSeconds = value
        return self
      }
      @discardableResult
      public func clearStandingTimeBetweenEncountersSeconds() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasStandingTimeBetweenEncountersSeconds = false
           builderResult.standingTimeBetweenEncountersSeconds = Int32(0)
           return self
      }
      public var hasMovingTimeBetweenEncounterSeconds:Bool {
           get {
                return builderResult.hasMovingTimeBetweenEncounterSeconds
           }
      }
      public var movingTimeBetweenEncounterSeconds:Int32 {
           get {
                return builderResult.movingTimeBetweenEncounterSeconds
           }
           set (value) {
               builderResult.hasMovingTimeBetweenEncounterSeconds = true
               builderResult.movingTimeBetweenEncounterSeconds = value
           }
      }
      @discardableResult
      public func setMovingTimeBetweenEncounterSeconds(_ value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.movingTimeBetweenEncounterSeconds = value
        return self
      }
      @discardableResult
      public func clearMovingTimeBetweenEncounterSeconds() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasMovingTimeBetweenEncounterSeconds = false
           builderResult.movingTimeBetweenEncounterSeconds = Int32(0)
           return self
      }
      public var hasDistanceRequiredForShorterIntervalMeters:Bool {
           get {
                return builderResult.hasDistanceRequiredForShorterIntervalMeters
           }
      }
      public var distanceRequiredForShorterIntervalMeters:Int32 {
           get {
                return builderResult.distanceRequiredForShorterIntervalMeters
           }
           set (value) {
               builderResult.hasDistanceRequiredForShorterIntervalMeters = true
               builderResult.distanceRequiredForShorterIntervalMeters = value
           }
      }
      @discardableResult
      public func setDistanceRequiredForShorterIntervalMeters(_ value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.distanceRequiredForShorterIntervalMeters = value
        return self
      }
      @discardableResult
      public func clearDistanceRequiredForShorterIntervalMeters() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasDistanceRequiredForShorterIntervalMeters = false
           builderResult.distanceRequiredForShorterIntervalMeters = Int32(0)
           return self
      }
      public var hasPokemonAttractedLengthSec:Bool {
           get {
                return builderResult.hasPokemonAttractedLengthSec
           }
      }
      public var pokemonAttractedLengthSec:Int32 {
           get {
                return builderResult.pokemonAttractedLengthSec
           }
           set (value) {
               builderResult.hasPokemonAttractedLengthSec = true
               builderResult.pokemonAttractedLengthSec = value
           }
      }
      @discardableResult
      public func setPokemonAttractedLengthSec(_ value:Int32) -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        self.pokemonAttractedLengthSec = value
        return self
      }
      @discardableResult
      public func clearPokemonAttractedLengthSec() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder{
           builderResult.hasPokemonAttractedLengthSec = false
           builderResult.pokemonAttractedLengthSec = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.IncenseAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.IncenseAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.IncenseAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.IncenseAttributes) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.IncenseAttributes() {
         return self
        }
        if other.hasIncenseLifetimeSeconds {
             incenseLifetimeSeconds = other.incenseLifetimeSeconds
        }
        if !other.pokemonType.isEmpty {
           builderResult.pokemonType += other.pokemonType
        }
        if other.hasPokemonIncenseTypeProbability {
             pokemonIncenseTypeProbability = other.pokemonIncenseTypeProbability
        }
        if other.hasStandingTimeBetweenEncountersSeconds {
             standingTimeBetweenEncountersSeconds = other.standingTimeBetweenEncountersSeconds
        }
        if other.hasMovingTimeBetweenEncounterSeconds {
             movingTimeBetweenEncounterSeconds = other.movingTimeBetweenEncounterSeconds
        }
        if other.hasDistanceRequiredForShorterIntervalMeters {
             distanceRequiredForShorterIntervalMeters = other.distanceRequiredForShorterIntervalMeters
        }
        if other.hasPokemonAttractedLengthSec {
             pokemonAttractedLengthSec = other.pokemonAttractedLengthSec
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            incenseLifetimeSeconds = try codedInputStream.readInt32()

          case 18:
            let length = Int(try codedInputStream.readRawVarint32())
            let oldLimit = try codedInputStream.pushLimit(byteLimit: length)
            while codedInputStream.bytesUntilLimit() > 0 {
            let valueIntpokemonType = try codedInputStream.readEnum()
            if let enumspokemonType = Pogoprotos.Enums.PokemonType(rawValue:valueIntpokemonType) {
                 builderResult.pokemonType.append(enumspokemonType)
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntpokemonType))
            }
            }
            codedInputStream.popLimit(oldLimit: oldLimit)

          case 29:
            pokemonIncenseTypeProbability = try codedInputStream.readFloat()

          case 32:
            standingTimeBetweenEncountersSeconds = try codedInputStream.readInt32()

          case 40:
            movingTimeBetweenEncounterSeconds = try codedInputStream.readInt32()

          case 48:
            distanceRequiredForShorterIntervalMeters = try codedInputStream.readInt32()

          case 56:
            pokemonAttractedLengthSec = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
        if let jsonValueIncenseLifetimeSeconds = jsonMap["incenseLifetimeSeconds"] as? Int {
          resultDecodedBuilder.incenseLifetimeSeconds = Int32(jsonValueIncenseLifetimeSeconds)
        }
        if let jsonValuePokemonType = jsonMap["pokemonType"] as? Array<String> {
          var jsonArrayPokemonType:Array<Pogoprotos.Enums.PokemonType> = []
          for oneValuePokemonType in jsonValuePokemonType {
            let enumFromStringPokemonType = try Pogoprotos.Enums.PokemonType.fromString(str: oneValuePokemonType)
            jsonArrayPokemonType.append(enumFromStringPokemonType)
          }
          resultDecodedBuilder.pokemonType = jsonArrayPokemonType
        }
        if let jsonValuePokemonIncenseTypeProbability = jsonMap["pokemonIncenseTypeProbability"] as? Float {
          resultDecodedBuilder.pokemonIncenseTypeProbability = Float(jsonValuePokemonIncenseTypeProbability)
        }
        if let jsonValueStandingTimeBetweenEncountersSeconds = jsonMap["standingTimeBetweenEncountersSeconds"] as? Int {
          resultDecodedBuilder.standingTimeBetweenEncountersSeconds = Int32(jsonValueStandingTimeBetweenEncountersSeconds)
        }
        if let jsonValueMovingTimeBetweenEncounterSeconds = jsonMap["movingTimeBetweenEncounterSeconds"] as? Int {
          resultDecodedBuilder.movingTimeBetweenEncounterSeconds = Int32(jsonValueMovingTimeBetweenEncounterSeconds)
        }
        if let jsonValueDistanceRequiredForShorterIntervalMeters = jsonMap["distanceRequiredForShorterIntervalMeters"] as? Int {
          resultDecodedBuilder.distanceRequiredForShorterIntervalMeters = Int32(jsonValueDistanceRequiredForShorterIntervalMeters)
        }
        if let jsonValuePokemonAttractedLengthSec = jsonMap["pokemonAttractedLengthSec"] as? Int {
          resultDecodedBuilder.pokemonAttractedLengthSec = Int32(jsonValuePokemonAttractedLengthSec)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class InventoryUpgradeAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes, rhs: Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasAdditionalStorage == rhs.hasAdditionalStorage) && (!lhs.hasAdditionalStorage || lhs.additionalStorage == rhs.additionalStorage)
      fieldCheck = fieldCheck && (lhs.hasUpgradeType == rhs.hasUpgradeType) && (!lhs.hasUpgradeType || lhs.upgradeType == rhs.upgradeType)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var additionalStorage:Int32 = Int32(0)
    public fileprivate(set) var hasAdditionalStorage:Bool = false

    public fileprivate(set) var upgradeType:Pogoprotos.Inventory.InventoryUpgradeType = Pogoprotos.Inventory.InventoryUpgradeType.upgradeUnset
    public fileprivate(set) var hasUpgradeType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasAdditionalStorage {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:additionalStorage)
      }
      if hasUpgradeType {
        try codedOutputStream.writeEnum(fieldNumber: 2, value:upgradeType.rawValue)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAdditionalStorage {
        serialize_size += additionalStorage.computeInt32Size(fieldNumber: 1)
      }
      if (hasUpgradeType) {
        serialize_size += upgradeType.rawValue.computeEnumSize(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasAdditionalStorage {
        jsonMap["additionalStorage"] = Int(additionalStorage)
      }
      if hasUpgradeType {
        jsonMap["upgradeType"] = upgradeType.toString()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
      return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
      return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasAdditionalStorage {
        output += "\(indent) additionalStorage: \(additionalStorage) \n"
      }
      if (hasUpgradeType) {
        output += "\(indent) upgradeType: \(upgradeType.description)\n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAdditionalStorage {
               hashCode = (hashCode &* 31) &+ additionalStorage.hashValue
            }
            if hasUpgradeType {
               hashCode = (hashCode &* 31) &+ Int(upgradeType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes = Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasAdditionalStorage:Bool {
           get {
                return builderResult.hasAdditionalStorage
           }
      }
      public var additionalStorage:Int32 {
           get {
                return builderResult.additionalStorage
           }
           set (value) {
               builderResult.hasAdditionalStorage = true
               builderResult.additionalStorage = value
           }
      }
      @discardableResult
      public func setAdditionalStorage(_ value:Int32) -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        self.additionalStorage = value
        return self
      }
      @discardableResult
      public func clearAdditionalStorage() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder{
           builderResult.hasAdditionalStorage = false
           builderResult.additionalStorage = Int32(0)
           return self
      }
        public var hasUpgradeType:Bool{
            get {
                return builderResult.hasUpgradeType
            }
        }
        public var upgradeType:Pogoprotos.Inventory.InventoryUpgradeType {
            get {
                return builderResult.upgradeType
            }
            set (value) {
                builderResult.hasUpgradeType = true
                builderResult.upgradeType = value
            }
        }
      @discardableResult
        public func setUpgradeType(_ value:Pogoprotos.Inventory.InventoryUpgradeType) -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
          self.upgradeType = value
          return self
        }
      @discardableResult
        public func clearUpgradeType() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
           builderResult.hasUpgradeType = false
           builderResult.upgradeType = .upgradeUnset
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes() {
         return self
        }
        if other.hasAdditionalStorage {
             additionalStorage = other.additionalStorage
        }
        if other.hasUpgradeType {
             upgradeType = other.upgradeType
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            additionalStorage = try codedInputStream.readInt32()

          case 16:
            let valueIntupgradeType = try codedInputStream.readEnum()
            if let enumsupgradeType = Pogoprotos.Inventory.InventoryUpgradeType(rawValue:valueIntupgradeType){
                 upgradeType = enumsupgradeType
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntupgradeType))
            }

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder()
        if let jsonValueAdditionalStorage = jsonMap["additionalStorage"] as? Int {
          resultDecodedBuilder.additionalStorage = Int32(jsonValueAdditionalStorage)
        }
        if let jsonValueUpgradeType = jsonMap["upgradeType"] as? String {
          resultDecodedBuilder.upgradeType = try Pogoprotos.Inventory.InventoryUpgradeType.fromString(str: jsonValueUpgradeType)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PokeballAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.PokeballAttributes, rhs: Pogoprotos.Settings.Master.Item.PokeballAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasItemEffect == rhs.hasItemEffect) && (!lhs.hasItemEffect || lhs.itemEffect == rhs.itemEffect)
      fieldCheck = fieldCheck && (lhs.hasCaptureMulti == rhs.hasCaptureMulti) && (!lhs.hasCaptureMulti || lhs.captureMulti == rhs.captureMulti)
      fieldCheck = fieldCheck && (lhs.hasCaptureMultiEffect == rhs.hasCaptureMultiEffect) && (!lhs.hasCaptureMultiEffect || lhs.captureMultiEffect == rhs.captureMultiEffect)
      fieldCheck = fieldCheck && (lhs.hasItemEffectMod == rhs.hasItemEffectMod) && (!lhs.hasItemEffectMod || lhs.itemEffectMod == rhs.itemEffectMod)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var itemEffect:Pogoprotos.Enums.ItemEffect = Pogoprotos.Enums.ItemEffect.itemEffectNone
    public fileprivate(set) var hasItemEffect:Bool = false
    public fileprivate(set) var captureMulti:Float = Float(0)
    public fileprivate(set) var hasCaptureMulti:Bool = false

    public fileprivate(set) var captureMultiEffect:Float = Float(0)
    public fileprivate(set) var hasCaptureMultiEffect:Bool = false

    public fileprivate(set) var itemEffectMod:Float = Float(0)
    public fileprivate(set) var hasItemEffectMod:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasItemEffect {
        try codedOutputStream.writeEnum(fieldNumber: 1, value:itemEffect.rawValue)
      }
      if hasCaptureMulti {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:captureMulti)
      }
      if hasCaptureMultiEffect {
        try codedOutputStream.writeFloat(fieldNumber: 3, value:captureMultiEffect)
      }
      if hasItemEffectMod {
        try codedOutputStream.writeFloat(fieldNumber: 4, value:itemEffectMod)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemEffect) {
        serialize_size += itemEffect.rawValue.computeEnumSize(fieldNumber: 1)
      }
      if hasCaptureMulti {
        serialize_size += captureMulti.computeFloatSize(fieldNumber: 2)
      }
      if hasCaptureMultiEffect {
        serialize_size += captureMultiEffect.computeFloatSize(fieldNumber: 3)
      }
      if hasItemEffectMod {
        serialize_size += itemEffectMod.computeFloatSize(fieldNumber: 4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.PokeballAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.PokeballAttributes) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasItemEffect {
        jsonMap["itemEffect"] = itemEffect.toString()
      }
      if hasCaptureMulti {
        jsonMap["captureMulti"] = Float(captureMulti)
      }
      if hasCaptureMultiEffect {
        jsonMap["captureMultiEffect"] = Float(captureMultiEffect)
      }
      if hasItemEffectMod {
        jsonMap["itemEffectMod"] = Float(itemEffectMod)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
      return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemEffect) {
        output += "\(indent) itemEffect: \(itemEffect.description)\n"
      }
      if hasCaptureMulti {
        output += "\(indent) captureMulti: \(captureMulti) \n"
      }
      if hasCaptureMultiEffect {
        output += "\(indent) captureMultiEffect: \(captureMultiEffect) \n"
      }
      if hasItemEffectMod {
        output += "\(indent) itemEffectMod: \(itemEffectMod) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemEffect {
               hashCode = (hashCode &* 31) &+ Int(itemEffect.rawValue)
            }
            if hasCaptureMulti {
               hashCode = (hashCode &* 31) &+ captureMulti.hashValue
            }
            if hasCaptureMultiEffect {
               hashCode = (hashCode &* 31) &+ captureMultiEffect.hashValue
            }
            if hasItemEffectMod {
               hashCode = (hashCode &* 31) &+ itemEffectMod.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.PokeballAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.PokeballAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.PokeballAttributes = Pogoprotos.Settings.Master.Item.PokeballAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemEffect:Bool{
            get {
                return builderResult.hasItemEffect
            }
        }
        public var itemEffect:Pogoprotos.Enums.ItemEffect {
            get {
                return builderResult.itemEffect
            }
            set (value) {
                builderResult.hasItemEffect = true
                builderResult.itemEffect = value
            }
        }
      @discardableResult
        public func setItemEffect(_ value:Pogoprotos.Enums.ItemEffect) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
          self.itemEffect = value
          return self
        }
      @discardableResult
        public func clearItemEffect() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
           builderResult.hasItemEffect = false
           builderResult.itemEffect = .itemEffectNone
           return self
        }
      public var hasCaptureMulti:Bool {
           get {
                return builderResult.hasCaptureMulti
           }
      }
      public var captureMulti:Float {
           get {
                return builderResult.captureMulti
           }
           set (value) {
               builderResult.hasCaptureMulti = true
               builderResult.captureMulti = value
           }
      }
      @discardableResult
      public func setCaptureMulti(_ value:Float) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        self.captureMulti = value
        return self
      }
      @discardableResult
      public func clearCaptureMulti() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder{
           builderResult.hasCaptureMulti = false
           builderResult.captureMulti = Float(0)
           return self
      }
      public var hasCaptureMultiEffect:Bool {
           get {
                return builderResult.hasCaptureMultiEffect
           }
      }
      public var captureMultiEffect:Float {
           get {
                return builderResult.captureMultiEffect
           }
           set (value) {
               builderResult.hasCaptureMultiEffect = true
               builderResult.captureMultiEffect = value
           }
      }
      @discardableResult
      public func setCaptureMultiEffect(_ value:Float) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        self.captureMultiEffect = value
        return self
      }
      @discardableResult
      public func clearCaptureMultiEffect() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder{
           builderResult.hasCaptureMultiEffect = false
           builderResult.captureMultiEffect = Float(0)
           return self
      }
      public var hasItemEffectMod:Bool {
           get {
                return builderResult.hasItemEffectMod
           }
      }
      public var itemEffectMod:Float {
           get {
                return builderResult.itemEffectMod
           }
           set (value) {
               builderResult.hasItemEffectMod = true
               builderResult.itemEffectMod = value
           }
      }
      @discardableResult
      public func setItemEffectMod(_ value:Float) -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        self.itemEffectMod = value
        return self
      }
      @discardableResult
      public func clearItemEffectMod() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder{
           builderResult.hasItemEffectMod = false
           builderResult.itemEffectMod = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.PokeballAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.PokeballAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.PokeballAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.PokeballAttributes) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.PokeballAttributes() {
         return self
        }
        if other.hasItemEffect {
             itemEffect = other.itemEffect
        }
        if other.hasCaptureMulti {
             captureMulti = other.captureMulti
        }
        if other.hasCaptureMultiEffect {
             captureMultiEffect = other.captureMultiEffect
        }
        if other.hasItemEffectMod {
             itemEffectMod = other.itemEffectMod
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemEffect = try codedInputStream.readEnum()
            if let enumsitemEffect = Pogoprotos.Enums.ItemEffect(rawValue:valueIntitemEffect){
                 itemEffect = enumsitemEffect
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntitemEffect))
            }

          case 21:
            captureMulti = try codedInputStream.readFloat()

          case 29:
            captureMultiEffect = try codedInputStream.readFloat()

          case 37:
            itemEffectMod = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
        if let jsonValueItemEffect = jsonMap["itemEffect"] as? String {
          resultDecodedBuilder.itemEffect = try Pogoprotos.Enums.ItemEffect.fromString(str: jsonValueItemEffect)
        }
        if let jsonValueCaptureMulti = jsonMap["captureMulti"] as? Float {
          resultDecodedBuilder.captureMulti = Float(jsonValueCaptureMulti)
        }
        if let jsonValueCaptureMultiEffect = jsonMap["captureMultiEffect"] as? Float {
          resultDecodedBuilder.captureMultiEffect = Float(jsonValueCaptureMultiEffect)
        }
        if let jsonValueItemEffectMod = jsonMap["itemEffectMod"] as? Float {
          resultDecodedBuilder.itemEffectMod = Float(jsonValueItemEffectMod)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PotionAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.PotionAttributes, rhs: Pogoprotos.Settings.Master.Item.PotionAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasStaPercent == rhs.hasStaPercent) && (!lhs.hasStaPercent || lhs.staPercent == rhs.staPercent)
      fieldCheck = fieldCheck && (lhs.hasStaAmount == rhs.hasStaAmount) && (!lhs.hasStaAmount || lhs.staAmount == rhs.staAmount)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var staPercent:Float = Float(0)
    public fileprivate(set) var hasStaPercent:Bool = false

    public fileprivate(set) var staAmount:Int32 = Int32(0)
    public fileprivate(set) var hasStaAmount:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasStaPercent {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:staPercent)
      }
      if hasStaAmount {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:staAmount)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStaPercent {
        serialize_size += staPercent.computeFloatSize(fieldNumber: 1)
      }
      if hasStaAmount {
        serialize_size += staAmount.computeInt32Size(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.PotionAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.PotionAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.PotionAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.PotionAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.PotionAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.PotionAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.PotionAttributes) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasStaPercent {
        jsonMap["staPercent"] = Float(staPercent)
      }
      if hasStaAmount {
        jsonMap["staAmount"] = Int(staAmount)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
      return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
      return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStaPercent {
        output += "\(indent) staPercent: \(staPercent) \n"
      }
      if hasStaAmount {
        output += "\(indent) staAmount: \(staAmount) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStaPercent {
               hashCode = (hashCode &* 31) &+ staPercent.hashValue
            }
            if hasStaAmount {
               hashCode = (hashCode &* 31) &+ staAmount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.PotionAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.PotionAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.PotionAttributes = Pogoprotos.Settings.Master.Item.PotionAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.PotionAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStaPercent:Bool {
           get {
                return builderResult.hasStaPercent
           }
      }
      public var staPercent:Float {
           get {
                return builderResult.staPercent
           }
           set (value) {
               builderResult.hasStaPercent = true
               builderResult.staPercent = value
           }
      }
      @discardableResult
      public func setStaPercent(_ value:Float) -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        self.staPercent = value
        return self
      }
      @discardableResult
      public func clearStaPercent() -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder{
           builderResult.hasStaPercent = false
           builderResult.staPercent = Float(0)
           return self
      }
      public var hasStaAmount:Bool {
           get {
                return builderResult.hasStaAmount
           }
      }
      public var staAmount:Int32 {
           get {
                return builderResult.staAmount
           }
           set (value) {
               builderResult.hasStaAmount = true
               builderResult.staAmount = value
           }
      }
      @discardableResult
      public func setStaAmount(_ value:Int32) -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        self.staAmount = value
        return self
      }
      @discardableResult
      public func clearStaAmount() -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder{
           builderResult.hasStaAmount = false
           builderResult.staAmount = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.PotionAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.PotionAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.PotionAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.PotionAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.PotionAttributes) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.PotionAttributes() {
         return self
        }
        if other.hasStaPercent {
             staPercent = other.staPercent
        }
        if other.hasStaAmount {
             staAmount = other.staAmount
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            staPercent = try codedInputStream.readFloat()

          case 16:
            staAmount = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.PotionAttributes.Builder()
        if let jsonValueStaPercent = jsonMap["staPercent"] as? Float {
          resultDecodedBuilder.staPercent = Float(jsonValueStaPercent)
        }
        if let jsonValueStaAmount = jsonMap["staAmount"] as? Int {
          resultDecodedBuilder.staAmount = Int32(jsonValueStaAmount)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class ReviveAttributes : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Settings.Master.Item.ReviveAttributes, rhs: Pogoprotos.Settings.Master.Item.ReviveAttributes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasStaPercent == rhs.hasStaPercent) && (!lhs.hasStaPercent || lhs.staPercent == rhs.staPercent)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var staPercent:Float = Float(0)
    public fileprivate(set) var hasStaPercent:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasStaPercent {
        try codedOutputStream.writeFloat(fieldNumber: 1, value:staPercent)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStaPercent {
        serialize_size += staPercent.computeFloatSize(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
      return Pogoprotos.Settings.Master.Item.ReviveAttributes.classBuilder() as! Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.ReviveAttributes.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.Item.ReviveAttributes) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
      return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasStaPercent {
        jsonMap["staPercent"] = Float(staPercent)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
      return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
      return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStaPercent {
        output += "\(indent) staPercent: \(staPercent) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStaPercent {
               hashCode = (hashCode &* 31) &+ staPercent.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.Item.ReviveAttributes"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.Item.ReviveAttributes"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Settings.Master.Item.ReviveAttributes = Pogoprotos.Settings.Master.Item.ReviveAttributes()
      public func getMessage() -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStaPercent:Bool {
           get {
                return builderResult.hasStaPercent
           }
      }
      public var staPercent:Float {
           get {
                return builderResult.staPercent
           }
           set (value) {
               builderResult.hasStaPercent = true
               builderResult.staPercent = value
           }
      }
      @discardableResult
      public func setStaPercent(_ value:Float) -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        self.staPercent = value
        return self
      }
      @discardableResult
      public func clearStaPercent() -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder{
           builderResult.hasStaPercent = false
           builderResult.staPercent = Float(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        builderResult = Pogoprotos.Settings.Master.Item.ReviveAttributes()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        return try Pogoprotos.Settings.Master.Item.ReviveAttributes.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
        let returnMe:Pogoprotos.Settings.Master.Item.ReviveAttributes = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Settings.Master.Item.ReviveAttributes) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        if other == Pogoprotos.Settings.Master.Item.ReviveAttributes() {
         return self
        }
        if other.hasStaPercent {
             staPercent = other.staPercent
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            staPercent = try codedInputStream.readFloat()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder()
        if let jsonValueStaPercent = jsonMap["staPercent"] as? Float {
          resultDecodedBuilder.staPercent = Float(jsonValueStaPercent)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Settings.Master.Item.BattleAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.BattleAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.BattleAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes? {
    return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
    return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
    return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
    return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
    return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
    return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.BattleAttributes {
    return try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.EggIncubatorAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.EggIncubatorAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.EggIncubatorAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes? {
    return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
    return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
    return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
    return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
    return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
    return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes {
    return try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes? {
    return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
    return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
    return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
    return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
    return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
    return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes {
    return try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.FoodAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.FoodAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.FoodAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes? {
    return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
    return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
    return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
    return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
    return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
    return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FoodAttributes {
    return try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.FortModifierAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.FortModifierAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.FortModifierAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes? {
    return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
    return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
    return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
    return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
    return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
    return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.FortModifierAttributes {
    return try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.IncenseAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.IncenseAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.IncenseAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes? {
    return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
    return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
    return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
    return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
    return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
    return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.IncenseAttributes {
    return try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes? {
    return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
    return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
    return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
    return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
    return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
    return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes {
    return try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.PokeballAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.PokeballAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.PokeballAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes? {
    return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
    return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
    return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
    return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
    return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
    return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PokeballAttributes {
    return try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.PotionAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.PotionAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.PotionAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes? {
    return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
    return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
    return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
    return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
    return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
    return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.PotionAttributes {
    return try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Settings.Master.Item.ReviveAttributes: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Settings.Master.Item.ReviveAttributes> {
    var mergedArray = Array<Pogoprotos.Settings.Master.Item.ReviveAttributes>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes? {
    return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
    return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
    return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
    return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
    return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
    return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.Item.ReviveAttributes {
    return try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
