// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Data.Player.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Data.Player {
  public struct PogoprotosDataPlayerRoot {
    public static let `default` = PogoprotosDataPlayerRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class ContactSettings : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.ContactSettings, rhs: Pogoprotos.Data.Player.ContactSettings) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasSendMarketingEmails == rhs.hasSendMarketingEmails) && (!lhs.hasSendMarketingEmails || lhs.sendMarketingEmails == rhs.sendMarketingEmails)
      fieldCheck = fieldCheck && (lhs.hasSendPushNotifications == rhs.hasSendPushNotifications) && (!lhs.hasSendPushNotifications || lhs.sendPushNotifications == rhs.sendPushNotifications)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var sendMarketingEmails:Bool = false
    public fileprivate(set) var hasSendMarketingEmails:Bool = false

    public fileprivate(set) var sendPushNotifications:Bool = false
    public fileprivate(set) var hasSendPushNotifications:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasSendMarketingEmails {
        try codedOutputStream.writeBool(fieldNumber: 1, value:sendMarketingEmails)
      }
      if hasSendPushNotifications {
        try codedOutputStream.writeBool(fieldNumber: 2, value:sendPushNotifications)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSendMarketingEmails {
        serialize_size += sendMarketingEmails.computeBoolSize(fieldNumber: 1)
      }
      if hasSendPushNotifications {
        serialize_size += sendPushNotifications.computeBoolSize(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.ContactSettings.Builder {
      return Pogoprotos.Data.Player.ContactSettings.classBuilder() as! Pogoprotos.Data.Player.ContactSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.ContactSettings.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.ContactSettings.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.ContactSettings.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.ContactSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
      return try Pogoprotos.Data.Player.ContactSettings.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.ContactSettings) throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
      return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasSendMarketingEmails {
        jsonMap["sendMarketingEmails"] = sendMarketingEmails
      }
      if hasSendPushNotifications {
        jsonMap["sendPushNotifications"] = sendPushNotifications
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.ContactSettings {
      return try Pogoprotos.Data.Player.ContactSettings.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.ContactSettings {
      return try Pogoprotos.Data.Player.ContactSettings.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSendMarketingEmails {
        output += "\(indent) sendMarketingEmails: \(sendMarketingEmails) \n"
      }
      if hasSendPushNotifications {
        output += "\(indent) sendPushNotifications: \(sendPushNotifications) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSendMarketingEmails {
               hashCode = (hashCode &* 31) &+ sendMarketingEmails.hashValue
            }
            if hasSendPushNotifications {
               hashCode = (hashCode &* 31) &+ sendPushNotifications.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.ContactSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.ContactSettings"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.ContactSettings = Pogoprotos.Data.Player.ContactSettings()
      public func getMessage() -> Pogoprotos.Data.Player.ContactSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSendMarketingEmails:Bool {
           get {
                return builderResult.hasSendMarketingEmails
           }
      }
      public var sendMarketingEmails:Bool {
           get {
                return builderResult.sendMarketingEmails
           }
           set (value) {
               builderResult.hasSendMarketingEmails = true
               builderResult.sendMarketingEmails = value
           }
      }
      @discardableResult
      public func setSendMarketingEmails(_ value:Bool) -> Pogoprotos.Data.Player.ContactSettings.Builder {
        self.sendMarketingEmails = value
        return self
      }
      @discardableResult
      public func clearSendMarketingEmails() -> Pogoprotos.Data.Player.ContactSettings.Builder{
           builderResult.hasSendMarketingEmails = false
           builderResult.sendMarketingEmails = false
           return self
      }
      public var hasSendPushNotifications:Bool {
           get {
                return builderResult.hasSendPushNotifications
           }
      }
      public var sendPushNotifications:Bool {
           get {
                return builderResult.sendPushNotifications
           }
           set (value) {
               builderResult.hasSendPushNotifications = true
               builderResult.sendPushNotifications = value
           }
      }
      @discardableResult
      public func setSendPushNotifications(_ value:Bool) -> Pogoprotos.Data.Player.ContactSettings.Builder {
        self.sendPushNotifications = value
        return self
      }
      @discardableResult
      public func clearSendPushNotifications() -> Pogoprotos.Data.Player.ContactSettings.Builder{
           builderResult.hasSendPushNotifications = false
           builderResult.sendPushNotifications = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.ContactSettings.Builder {
        builderResult = Pogoprotos.Data.Player.ContactSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
        return try Pogoprotos.Data.Player.ContactSettings.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.ContactSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.ContactSettings {
        let returnMe:Pogoprotos.Data.Player.ContactSettings = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.ContactSettings) throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
        if other == Pogoprotos.Data.Player.ContactSettings() {
         return self
        }
        if other.hasSendMarketingEmails {
             sendMarketingEmails = other.sendMarketingEmails
        }
        if other.hasSendPushNotifications {
             sendPushNotifications = other.sendPushNotifications
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            sendMarketingEmails = try codedInputStream.readBool()

          case 16:
            sendPushNotifications = try codedInputStream.readBool()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.ContactSettings.Builder()
        if let jsonValueSendMarketingEmails = jsonMap["sendMarketingEmails"] as? Bool {
          resultDecodedBuilder.sendMarketingEmails = jsonValueSendMarketingEmails
        }
        if let jsonValueSendPushNotifications = jsonMap["sendPushNotifications"] as? Bool {
          resultDecodedBuilder.sendPushNotifications = jsonValueSendPushNotifications
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.ContactSettings.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.ContactSettings.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class Currency : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.Currency, rhs: Pogoprotos.Data.Player.Currency) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
      fieldCheck = fieldCheck && (lhs.hasAmount == rhs.hasAmount) && (!lhs.hasAmount || lhs.amount == rhs.amount)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var name:String = ""
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var amount:Int32 = Int32(0)
    public fileprivate(set) var hasAmount:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasName {
        try codedOutputStream.writeString(fieldNumber: 1, value:name)
      }
      if hasAmount {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:amount)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(fieldNumber: 1)
      }
      if hasAmount {
        serialize_size += amount.computeInt32Size(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
      return Pogoprotos.Data.Player.Currency.classBuilder() as! Pogoprotos.Data.Player.Currency.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.Currency.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.Currency.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.Currency.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.Currency.Builder {
      return try Pogoprotos.Data.Player.Currency.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Data.Player.Currency.Builder {
      return try Pogoprotos.Data.Player.Currency.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasName {
        jsonMap["name"] = name
      }
      if hasAmount {
        jsonMap["amount"] = Int(amount)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.Currency {
      return try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.Currency {
      return try Pogoprotos.Data.Player.Currency.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasAmount {
        output += "\(indent) amount: \(amount) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasAmount {
               hashCode = (hashCode &* 31) &+ amount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.Currency"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.Currency"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.Currency = Pogoprotos.Data.Player.Currency()
      public func getMessage() -> Pogoprotos.Data.Player.Currency {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      @discardableResult
      public func setName(_ value:String) -> Pogoprotos.Data.Player.Currency.Builder {
        self.name = value
        return self
      }
      @discardableResult
      public func clearName() -> Pogoprotos.Data.Player.Currency.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasAmount:Bool {
           get {
                return builderResult.hasAmount
           }
      }
      public var amount:Int32 {
           get {
                return builderResult.amount
           }
           set (value) {
               builderResult.hasAmount = true
               builderResult.amount = value
           }
      }
      @discardableResult
      public func setAmount(_ value:Int32) -> Pogoprotos.Data.Player.Currency.Builder {
        self.amount = value
        return self
      }
      @discardableResult
      public func clearAmount() -> Pogoprotos.Data.Player.Currency.Builder{
           builderResult.hasAmount = false
           builderResult.amount = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.Currency.Builder {
        builderResult = Pogoprotos.Data.Player.Currency()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.Currency.Builder {
        return try Pogoprotos.Data.Player.Currency.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.Currency {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.Currency {
        let returnMe:Pogoprotos.Data.Player.Currency = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Data.Player.Currency.Builder {
        if other == Pogoprotos.Data.Player.Currency() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if other.hasAmount {
             amount = other.amount
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.Currency.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.Currency.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            name = try codedInputStream.readString()

          case 16:
            amount = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.Currency.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.Currency.Builder()
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueAmount = jsonMap["amount"] as? Int {
          resultDecodedBuilder.amount = Int32(jsonValueAmount)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.Currency.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class DailyBonus : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.DailyBonus, rhs: Pogoprotos.Data.Player.DailyBonus) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasNextCollectedTimestampMs == rhs.hasNextCollectedTimestampMs) && (!lhs.hasNextCollectedTimestampMs || lhs.nextCollectedTimestampMs == rhs.nextCollectedTimestampMs)
      fieldCheck = fieldCheck && (lhs.hasNextDefenderBonusCollectTimestampMs == rhs.hasNextDefenderBonusCollectTimestampMs) && (!lhs.hasNextDefenderBonusCollectTimestampMs || lhs.nextDefenderBonusCollectTimestampMs == rhs.nextDefenderBonusCollectTimestampMs)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var nextCollectedTimestampMs:Int64 = Int64(0)
    public fileprivate(set) var hasNextCollectedTimestampMs:Bool = false

    public fileprivate(set) var nextDefenderBonusCollectTimestampMs:Int64 = Int64(0)
    public fileprivate(set) var hasNextDefenderBonusCollectTimestampMs:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasNextCollectedTimestampMs {
        try codedOutputStream.writeInt64(fieldNumber: 1, value:nextCollectedTimestampMs)
      }
      if hasNextDefenderBonusCollectTimestampMs {
        try codedOutputStream.writeInt64(fieldNumber: 2, value:nextDefenderBonusCollectTimestampMs)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasNextCollectedTimestampMs {
        serialize_size += nextCollectedTimestampMs.computeInt64Size(fieldNumber: 1)
      }
      if hasNextDefenderBonusCollectTimestampMs {
        serialize_size += nextDefenderBonusCollectTimestampMs.computeInt64Size(fieldNumber: 2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.DailyBonus.Builder {
      return Pogoprotos.Data.Player.DailyBonus.classBuilder() as! Pogoprotos.Data.Player.DailyBonus.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.DailyBonus.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.DailyBonus.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.DailyBonus.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.DailyBonus.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
      return try Pogoprotos.Data.Player.DailyBonus.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.DailyBonus) throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
      return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasNextCollectedTimestampMs {
        jsonMap["nextCollectedTimestampMs"] = "\(nextCollectedTimestampMs)"
      }
      if hasNextDefenderBonusCollectTimestampMs {
        jsonMap["nextDefenderBonusCollectTimestampMs"] = "\(nextDefenderBonusCollectTimestampMs)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.DailyBonus {
      return try Pogoprotos.Data.Player.DailyBonus.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.DailyBonus {
      return try Pogoprotos.Data.Player.DailyBonus.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasNextCollectedTimestampMs {
        output += "\(indent) nextCollectedTimestampMs: \(nextCollectedTimestampMs) \n"
      }
      if hasNextDefenderBonusCollectTimestampMs {
        output += "\(indent) nextDefenderBonusCollectTimestampMs: \(nextDefenderBonusCollectTimestampMs) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNextCollectedTimestampMs {
               hashCode = (hashCode &* 31) &+ nextCollectedTimestampMs.hashValue
            }
            if hasNextDefenderBonusCollectTimestampMs {
               hashCode = (hashCode &* 31) &+ nextDefenderBonusCollectTimestampMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.DailyBonus"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.DailyBonus"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.DailyBonus = Pogoprotos.Data.Player.DailyBonus()
      public func getMessage() -> Pogoprotos.Data.Player.DailyBonus {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasNextCollectedTimestampMs:Bool {
           get {
                return builderResult.hasNextCollectedTimestampMs
           }
      }
      public var nextCollectedTimestampMs:Int64 {
           get {
                return builderResult.nextCollectedTimestampMs
           }
           set (value) {
               builderResult.hasNextCollectedTimestampMs = true
               builderResult.nextCollectedTimestampMs = value
           }
      }
      @discardableResult
      public func setNextCollectedTimestampMs(_ value:Int64) -> Pogoprotos.Data.Player.DailyBonus.Builder {
        self.nextCollectedTimestampMs = value
        return self
      }
      @discardableResult
      public func clearNextCollectedTimestampMs() -> Pogoprotos.Data.Player.DailyBonus.Builder{
           builderResult.hasNextCollectedTimestampMs = false
           builderResult.nextCollectedTimestampMs = Int64(0)
           return self
      }
      public var hasNextDefenderBonusCollectTimestampMs:Bool {
           get {
                return builderResult.hasNextDefenderBonusCollectTimestampMs
           }
      }
      public var nextDefenderBonusCollectTimestampMs:Int64 {
           get {
                return builderResult.nextDefenderBonusCollectTimestampMs
           }
           set (value) {
               builderResult.hasNextDefenderBonusCollectTimestampMs = true
               builderResult.nextDefenderBonusCollectTimestampMs = value
           }
      }
      @discardableResult
      public func setNextDefenderBonusCollectTimestampMs(_ value:Int64) -> Pogoprotos.Data.Player.DailyBonus.Builder {
        self.nextDefenderBonusCollectTimestampMs = value
        return self
      }
      @discardableResult
      public func clearNextDefenderBonusCollectTimestampMs() -> Pogoprotos.Data.Player.DailyBonus.Builder{
           builderResult.hasNextDefenderBonusCollectTimestampMs = false
           builderResult.nextDefenderBonusCollectTimestampMs = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.DailyBonus.Builder {
        builderResult = Pogoprotos.Data.Player.DailyBonus()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
        return try Pogoprotos.Data.Player.DailyBonus.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.DailyBonus {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.DailyBonus {
        let returnMe:Pogoprotos.Data.Player.DailyBonus = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.DailyBonus) throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
        if other == Pogoprotos.Data.Player.DailyBonus() {
         return self
        }
        if other.hasNextCollectedTimestampMs {
             nextCollectedTimestampMs = other.nextCollectedTimestampMs
        }
        if other.hasNextDefenderBonusCollectTimestampMs {
             nextDefenderBonusCollectTimestampMs = other.nextDefenderBonusCollectTimestampMs
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            nextCollectedTimestampMs = try codedInputStream.readInt64()

          case 16:
            nextDefenderBonusCollectTimestampMs = try codedInputStream.readInt64()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.DailyBonus.Builder()
        if let jsonValueNextCollectedTimestampMs = jsonMap["nextCollectedTimestampMs"] as? String {
          resultDecodedBuilder.nextCollectedTimestampMs = Int64(jsonValueNextCollectedTimestampMs)!
        }
        if let jsonValueNextDefenderBonusCollectTimestampMs = jsonMap["nextDefenderBonusCollectTimestampMs"] as? String {
          resultDecodedBuilder.nextDefenderBonusCollectTimestampMs = Int64(jsonValueNextDefenderBonusCollectTimestampMs)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.DailyBonus.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.DailyBonus.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class EquippedBadge : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.EquippedBadge, rhs: Pogoprotos.Data.Player.EquippedBadge) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasBadgeType == rhs.hasBadgeType) && (!lhs.hasBadgeType || lhs.badgeType == rhs.badgeType)
      fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
      fieldCheck = fieldCheck && (lhs.hasNextEquipChangeAllowedTimestampMs == rhs.hasNextEquipChangeAllowedTimestampMs) && (!lhs.hasNextEquipChangeAllowedTimestampMs || lhs.nextEquipChangeAllowedTimestampMs == rhs.nextEquipChangeAllowedTimestampMs)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var badgeType:Pogoprotos.Enums.BadgeType = Pogoprotos.Enums.BadgeType.badgeUnset
    public fileprivate(set) var hasBadgeType:Bool = false
    public fileprivate(set) var level:Int32 = Int32(0)
    public fileprivate(set) var hasLevel:Bool = false

    public fileprivate(set) var nextEquipChangeAllowedTimestampMs:Int64 = Int64(0)
    public fileprivate(set) var hasNextEquipChangeAllowedTimestampMs:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasBadgeType {
        try codedOutputStream.writeEnum(fieldNumber: 1, value:badgeType.rawValue)
      }
      if hasLevel {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:level)
      }
      if hasNextEquipChangeAllowedTimestampMs {
        try codedOutputStream.writeInt64(fieldNumber: 3, value:nextEquipChangeAllowedTimestampMs)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasBadgeType) {
        serialize_size += badgeType.rawValue.computeEnumSize(fieldNumber: 1)
      }
      if hasLevel {
        serialize_size += level.computeInt32Size(fieldNumber: 2)
      }
      if hasNextEquipChangeAllowedTimestampMs {
        serialize_size += nextEquipChangeAllowedTimestampMs.computeInt64Size(fieldNumber: 3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return Pogoprotos.Data.Player.EquippedBadge.classBuilder() as! Pogoprotos.Data.Player.EquippedBadge.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.EquippedBadge.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.EquippedBadge.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.EquippedBadge.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return try Pogoprotos.Data.Player.EquippedBadge.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.EquippedBadge) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasBadgeType {
        jsonMap["badgeType"] = badgeType.toString()
      }
      if hasLevel {
        jsonMap["level"] = Int(level)
      }
      if hasNextEquipChangeAllowedTimestampMs {
        jsonMap["nextEquipChangeAllowedTimestampMs"] = "\(nextEquipChangeAllowedTimestampMs)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.EquippedBadge {
      return try Pogoprotos.Data.Player.EquippedBadge.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasBadgeType) {
        output += "\(indent) badgeType: \(badgeType.description)\n"
      }
      if hasLevel {
        output += "\(indent) level: \(level) \n"
      }
      if hasNextEquipChangeAllowedTimestampMs {
        output += "\(indent) nextEquipChangeAllowedTimestampMs: \(nextEquipChangeAllowedTimestampMs) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBadgeType {
               hashCode = (hashCode &* 31) &+ Int(badgeType.rawValue)
            }
            if hasLevel {
               hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasNextEquipChangeAllowedTimestampMs {
               hashCode = (hashCode &* 31) &+ nextEquipChangeAllowedTimestampMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.EquippedBadge"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.EquippedBadge"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.EquippedBadge = Pogoprotos.Data.Player.EquippedBadge()
      public func getMessage() -> Pogoprotos.Data.Player.EquippedBadge {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasBadgeType:Bool{
            get {
                return builderResult.hasBadgeType
            }
        }
        public var badgeType:Pogoprotos.Enums.BadgeType {
            get {
                return builderResult.badgeType
            }
            set (value) {
                builderResult.hasBadgeType = true
                builderResult.badgeType = value
            }
        }
      @discardableResult
        public func setBadgeType(_ value:Pogoprotos.Enums.BadgeType) -> Pogoprotos.Data.Player.EquippedBadge.Builder {
          self.badgeType = value
          return self
        }
      @discardableResult
        public func clearBadgeType() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
           builderResult.hasBadgeType = false
           builderResult.badgeType = .badgeUnset
           return self
        }
      public var hasLevel:Bool {
           get {
                return builderResult.hasLevel
           }
      }
      public var level:Int32 {
           get {
                return builderResult.level
           }
           set (value) {
               builderResult.hasLevel = true
               builderResult.level = value
           }
      }
      @discardableResult
      public func setLevel(_ value:Int32) -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        self.level = value
        return self
      }
      @discardableResult
      public func clearLevel() -> Pogoprotos.Data.Player.EquippedBadge.Builder{
           builderResult.hasLevel = false
           builderResult.level = Int32(0)
           return self
      }
      public var hasNextEquipChangeAllowedTimestampMs:Bool {
           get {
                return builderResult.hasNextEquipChangeAllowedTimestampMs
           }
      }
      public var nextEquipChangeAllowedTimestampMs:Int64 {
           get {
                return builderResult.nextEquipChangeAllowedTimestampMs
           }
           set (value) {
               builderResult.hasNextEquipChangeAllowedTimestampMs = true
               builderResult.nextEquipChangeAllowedTimestampMs = value
           }
      }
      @discardableResult
      public func setNextEquipChangeAllowedTimestampMs(_ value:Int64) -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        self.nextEquipChangeAllowedTimestampMs = value
        return self
      }
      @discardableResult
      public func clearNextEquipChangeAllowedTimestampMs() -> Pogoprotos.Data.Player.EquippedBadge.Builder{
           builderResult.hasNextEquipChangeAllowedTimestampMs = false
           builderResult.nextEquipChangeAllowedTimestampMs = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        builderResult = Pogoprotos.Data.Player.EquippedBadge()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        return try Pogoprotos.Data.Player.EquippedBadge.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.EquippedBadge {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.EquippedBadge {
        let returnMe:Pogoprotos.Data.Player.EquippedBadge = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.EquippedBadge) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        if other == Pogoprotos.Data.Player.EquippedBadge() {
         return self
        }
        if other.hasBadgeType {
             badgeType = other.badgeType
        }
        if other.hasLevel {
             level = other.level
        }
        if other.hasNextEquipChangeAllowedTimestampMs {
             nextEquipChangeAllowedTimestampMs = other.nextEquipChangeAllowedTimestampMs
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntbadgeType = try codedInputStream.readEnum()
            if let enumsbadgeType = Pogoprotos.Enums.BadgeType(rawValue:valueIntbadgeType){
                 badgeType = enumsbadgeType
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntbadgeType))
            }

          case 16:
            level = try codedInputStream.readInt32()

          case 24:
            nextEquipChangeAllowedTimestampMs = try codedInputStream.readInt64()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.EquippedBadge.Builder()
        if let jsonValueBadgeType = jsonMap["badgeType"] as? String {
          resultDecodedBuilder.badgeType = try Pogoprotos.Enums.BadgeType.fromString(str: jsonValueBadgeType)
        }
        if let jsonValueLevel = jsonMap["level"] as? Int {
          resultDecodedBuilder.level = Int32(jsonValueLevel)
        }
        if let jsonValueNextEquipChangeAllowedTimestampMs = jsonMap["nextEquipChangeAllowedTimestampMs"] as? String {
          resultDecodedBuilder.nextEquipChangeAllowedTimestampMs = Int64(jsonValueNextEquipChangeAllowedTimestampMs)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.EquippedBadge.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PlayerAvatar : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.PlayerAvatar, rhs: Pogoprotos.Data.Player.PlayerAvatar) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasSkin == rhs.hasSkin) && (!lhs.hasSkin || lhs.skin == rhs.skin)
      fieldCheck = fieldCheck && (lhs.hasHair == rhs.hasHair) && (!lhs.hasHair || lhs.hair == rhs.hair)
      fieldCheck = fieldCheck && (lhs.hasShirt == rhs.hasShirt) && (!lhs.hasShirt || lhs.shirt == rhs.shirt)
      fieldCheck = fieldCheck && (lhs.hasPants == rhs.hasPants) && (!lhs.hasPants || lhs.pants == rhs.pants)
      fieldCheck = fieldCheck && (lhs.hasHat == rhs.hasHat) && (!lhs.hasHat || lhs.hat == rhs.hat)
      fieldCheck = fieldCheck && (lhs.hasShoes == rhs.hasShoes) && (!lhs.hasShoes || lhs.shoes == rhs.shoes)
      fieldCheck = fieldCheck && (lhs.hasGender == rhs.hasGender) && (!lhs.hasGender || lhs.gender == rhs.gender)
      fieldCheck = fieldCheck && (lhs.hasEyes == rhs.hasEyes) && (!lhs.hasEyes || lhs.eyes == rhs.eyes)
      fieldCheck = fieldCheck && (lhs.hasBackpack == rhs.hasBackpack) && (!lhs.hasBackpack || lhs.backpack == rhs.backpack)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var skin:Int32 = Int32(0)
    public fileprivate(set) var hasSkin:Bool = false

    public fileprivate(set) var hair:Int32 = Int32(0)
    public fileprivate(set) var hasHair:Bool = false

    public fileprivate(set) var shirt:Int32 = Int32(0)
    public fileprivate(set) var hasShirt:Bool = false

    public fileprivate(set) var pants:Int32 = Int32(0)
    public fileprivate(set) var hasPants:Bool = false

    public fileprivate(set) var hat:Int32 = Int32(0)
    public fileprivate(set) var hasHat:Bool = false

    public fileprivate(set) var shoes:Int32 = Int32(0)
    public fileprivate(set) var hasShoes:Bool = false

    public fileprivate(set) var gender:Pogoprotos.Enums.Gender = Pogoprotos.Enums.Gender.male
    public fileprivate(set) var hasGender:Bool = false
    public fileprivate(set) var eyes:Int32 = Int32(0)
    public fileprivate(set) var hasEyes:Bool = false

    public fileprivate(set) var backpack:Int32 = Int32(0)
    public fileprivate(set) var hasBackpack:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasSkin {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:skin)
      }
      if hasHair {
        try codedOutputStream.writeInt32(fieldNumber: 3, value:hair)
      }
      if hasShirt {
        try codedOutputStream.writeInt32(fieldNumber: 4, value:shirt)
      }
      if hasPants {
        try codedOutputStream.writeInt32(fieldNumber: 5, value:pants)
      }
      if hasHat {
        try codedOutputStream.writeInt32(fieldNumber: 6, value:hat)
      }
      if hasShoes {
        try codedOutputStream.writeInt32(fieldNumber: 7, value:shoes)
      }
      if hasGender {
        try codedOutputStream.writeEnum(fieldNumber: 8, value:gender.rawValue)
      }
      if hasEyes {
        try codedOutputStream.writeInt32(fieldNumber: 9, value:eyes)
      }
      if hasBackpack {
        try codedOutputStream.writeInt32(fieldNumber: 10, value:backpack)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSkin {
        serialize_size += skin.computeInt32Size(fieldNumber: 2)
      }
      if hasHair {
        serialize_size += hair.computeInt32Size(fieldNumber: 3)
      }
      if hasShirt {
        serialize_size += shirt.computeInt32Size(fieldNumber: 4)
      }
      if hasPants {
        serialize_size += pants.computeInt32Size(fieldNumber: 5)
      }
      if hasHat {
        serialize_size += hat.computeInt32Size(fieldNumber: 6)
      }
      if hasShoes {
        serialize_size += shoes.computeInt32Size(fieldNumber: 7)
      }
      if (hasGender) {
        serialize_size += gender.rawValue.computeEnumSize(fieldNumber: 8)
      }
      if hasEyes {
        serialize_size += eyes.computeInt32Size(fieldNumber: 9)
      }
      if hasBackpack {
        serialize_size += backpack.computeInt32Size(fieldNumber: 10)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
      return Pogoprotos.Data.Player.PlayerAvatar.classBuilder() as! Pogoprotos.Data.Player.PlayerAvatar.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.PlayerAvatar.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerAvatar.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerAvatar.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
      return try Pogoprotos.Data.Player.PlayerAvatar.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.PlayerAvatar) throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
      return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasSkin {
        jsonMap["skin"] = Int(skin)
      }
      if hasHair {
        jsonMap["hair"] = Int(hair)
      }
      if hasShirt {
        jsonMap["shirt"] = Int(shirt)
      }
      if hasPants {
        jsonMap["pants"] = Int(pants)
      }
      if hasHat {
        jsonMap["hat"] = Int(hat)
      }
      if hasShoes {
        jsonMap["shoes"] = Int(shoes)
      }
      if hasGender {
        jsonMap["gender"] = gender.toString()
      }
      if hasEyes {
        jsonMap["eyes"] = Int(eyes)
      }
      if hasBackpack {
        jsonMap["backpack"] = Int(backpack)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerAvatar {
      return try Pogoprotos.Data.Player.PlayerAvatar.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.PlayerAvatar {
      return try Pogoprotos.Data.Player.PlayerAvatar.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSkin {
        output += "\(indent) skin: \(skin) \n"
      }
      if hasHair {
        output += "\(indent) hair: \(hair) \n"
      }
      if hasShirt {
        output += "\(indent) shirt: \(shirt) \n"
      }
      if hasPants {
        output += "\(indent) pants: \(pants) \n"
      }
      if hasHat {
        output += "\(indent) hat: \(hat) \n"
      }
      if hasShoes {
        output += "\(indent) shoes: \(shoes) \n"
      }
      if (hasGender) {
        output += "\(indent) gender: \(gender.description)\n"
      }
      if hasEyes {
        output += "\(indent) eyes: \(eyes) \n"
      }
      if hasBackpack {
        output += "\(indent) backpack: \(backpack) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSkin {
               hashCode = (hashCode &* 31) &+ skin.hashValue
            }
            if hasHair {
               hashCode = (hashCode &* 31) &+ hair.hashValue
            }
            if hasShirt {
               hashCode = (hashCode &* 31) &+ shirt.hashValue
            }
            if hasPants {
               hashCode = (hashCode &* 31) &+ pants.hashValue
            }
            if hasHat {
               hashCode = (hashCode &* 31) &+ hat.hashValue
            }
            if hasShoes {
               hashCode = (hashCode &* 31) &+ shoes.hashValue
            }
            if hasGender {
               hashCode = (hashCode &* 31) &+ Int(gender.rawValue)
            }
            if hasEyes {
               hashCode = (hashCode &* 31) &+ eyes.hashValue
            }
            if hasBackpack {
               hashCode = (hashCode &* 31) &+ backpack.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.PlayerAvatar"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.PlayerAvatar"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.PlayerAvatar = Pogoprotos.Data.Player.PlayerAvatar()
      public func getMessage() -> Pogoprotos.Data.Player.PlayerAvatar {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSkin:Bool {
           get {
                return builderResult.hasSkin
           }
      }
      public var skin:Int32 {
           get {
                return builderResult.skin
           }
           set (value) {
               builderResult.hasSkin = true
               builderResult.skin = value
           }
      }
      @discardableResult
      public func setSkin(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.skin = value
        return self
      }
      @discardableResult
      public func clearSkin() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasSkin = false
           builderResult.skin = Int32(0)
           return self
      }
      public var hasHair:Bool {
           get {
                return builderResult.hasHair
           }
      }
      public var hair:Int32 {
           get {
                return builderResult.hair
           }
           set (value) {
               builderResult.hasHair = true
               builderResult.hair = value
           }
      }
      @discardableResult
      public func setHair(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.hair = value
        return self
      }
      @discardableResult
      public func clearHair() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasHair = false
           builderResult.hair = Int32(0)
           return self
      }
      public var hasShirt:Bool {
           get {
                return builderResult.hasShirt
           }
      }
      public var shirt:Int32 {
           get {
                return builderResult.shirt
           }
           set (value) {
               builderResult.hasShirt = true
               builderResult.shirt = value
           }
      }
      @discardableResult
      public func setShirt(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.shirt = value
        return self
      }
      @discardableResult
      public func clearShirt() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasShirt = false
           builderResult.shirt = Int32(0)
           return self
      }
      public var hasPants:Bool {
           get {
                return builderResult.hasPants
           }
      }
      public var pants:Int32 {
           get {
                return builderResult.pants
           }
           set (value) {
               builderResult.hasPants = true
               builderResult.pants = value
           }
      }
      @discardableResult
      public func setPants(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.pants = value
        return self
      }
      @discardableResult
      public func clearPants() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasPants = false
           builderResult.pants = Int32(0)
           return self
      }
      public var hasHat:Bool {
           get {
                return builderResult.hasHat
           }
      }
      public var hat:Int32 {
           get {
                return builderResult.hat
           }
           set (value) {
               builderResult.hasHat = true
               builderResult.hat = value
           }
      }
      @discardableResult
      public func setHat(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.hat = value
        return self
      }
      @discardableResult
      public func clearHat() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasHat = false
           builderResult.hat = Int32(0)
           return self
      }
      public var hasShoes:Bool {
           get {
                return builderResult.hasShoes
           }
      }
      public var shoes:Int32 {
           get {
                return builderResult.shoes
           }
           set (value) {
               builderResult.hasShoes = true
               builderResult.shoes = value
           }
      }
      @discardableResult
      public func setShoes(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.shoes = value
        return self
      }
      @discardableResult
      public func clearShoes() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasShoes = false
           builderResult.shoes = Int32(0)
           return self
      }
        public var hasGender:Bool{
            get {
                return builderResult.hasGender
            }
        }
        public var gender:Pogoprotos.Enums.Gender {
            get {
                return builderResult.gender
            }
            set (value) {
                builderResult.hasGender = true
                builderResult.gender = value
            }
        }
      @discardableResult
        public func setGender(_ value:Pogoprotos.Enums.Gender) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
          self.gender = value
          return self
        }
      @discardableResult
        public func clearGender() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
           builderResult.hasGender = false
           builderResult.gender = .male
           return self
        }
      public var hasEyes:Bool {
           get {
                return builderResult.hasEyes
           }
      }
      public var eyes:Int32 {
           get {
                return builderResult.eyes
           }
           set (value) {
               builderResult.hasEyes = true
               builderResult.eyes = value
           }
      }
      @discardableResult
      public func setEyes(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.eyes = value
        return self
      }
      @discardableResult
      public func clearEyes() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasEyes = false
           builderResult.eyes = Int32(0)
           return self
      }
      public var hasBackpack:Bool {
           get {
                return builderResult.hasBackpack
           }
      }
      public var backpack:Int32 {
           get {
                return builderResult.backpack
           }
           set (value) {
               builderResult.hasBackpack = true
               builderResult.backpack = value
           }
      }
      @discardableResult
      public func setBackpack(_ value:Int32) -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        self.backpack = value
        return self
      }
      @discardableResult
      public func clearBackpack() -> Pogoprotos.Data.Player.PlayerAvatar.Builder{
           builderResult.hasBackpack = false
           builderResult.backpack = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        builderResult = Pogoprotos.Data.Player.PlayerAvatar()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        return try Pogoprotos.Data.Player.PlayerAvatar.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.PlayerAvatar {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.PlayerAvatar {
        let returnMe:Pogoprotos.Data.Player.PlayerAvatar = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.PlayerAvatar) throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        if other == Pogoprotos.Data.Player.PlayerAvatar() {
         return self
        }
        if other.hasSkin {
             skin = other.skin
        }
        if other.hasHair {
             hair = other.hair
        }
        if other.hasShirt {
             shirt = other.shirt
        }
        if other.hasPants {
             pants = other.pants
        }
        if other.hasHat {
             hat = other.hat
        }
        if other.hasShoes {
             shoes = other.shoes
        }
        if other.hasGender {
             gender = other.gender
        }
        if other.hasEyes {
             eyes = other.eyes
        }
        if other.hasBackpack {
             backpack = other.backpack
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 16:
            skin = try codedInputStream.readInt32()

          case 24:
            hair = try codedInputStream.readInt32()

          case 32:
            shirt = try codedInputStream.readInt32()

          case 40:
            pants = try codedInputStream.readInt32()

          case 48:
            hat = try codedInputStream.readInt32()

          case 56:
            shoes = try codedInputStream.readInt32()

          case 64:
            let valueIntgender = try codedInputStream.readEnum()
            if let enumsgender = Pogoprotos.Enums.Gender(rawValue:valueIntgender){
                 gender = enumsgender
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 8, value:Int64(valueIntgender))
            }

          case 72:
            eyes = try codedInputStream.readInt32()

          case 80:
            backpack = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.PlayerAvatar.Builder()
        if let jsonValueSkin = jsonMap["skin"] as? Int {
          resultDecodedBuilder.skin = Int32(jsonValueSkin)
        }
        if let jsonValueHair = jsonMap["hair"] as? Int {
          resultDecodedBuilder.hair = Int32(jsonValueHair)
        }
        if let jsonValueShirt = jsonMap["shirt"] as? Int {
          resultDecodedBuilder.shirt = Int32(jsonValueShirt)
        }
        if let jsonValuePants = jsonMap["pants"] as? Int {
          resultDecodedBuilder.pants = Int32(jsonValuePants)
        }
        if let jsonValueHat = jsonMap["hat"] as? Int {
          resultDecodedBuilder.hat = Int32(jsonValueHat)
        }
        if let jsonValueShoes = jsonMap["shoes"] as? Int {
          resultDecodedBuilder.shoes = Int32(jsonValueShoes)
        }
        if let jsonValueGender = jsonMap["gender"] as? String {
          resultDecodedBuilder.gender = try Pogoprotos.Enums.Gender.fromString(str: jsonValueGender)
        }
        if let jsonValueEyes = jsonMap["eyes"] as? Int {
          resultDecodedBuilder.eyes = Int32(jsonValueEyes)
        }
        if let jsonValueBackpack = jsonMap["backpack"] as? Int {
          resultDecodedBuilder.backpack = Int32(jsonValueBackpack)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.PlayerAvatar.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PlayerCamera : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.PlayerCamera, rhs: Pogoprotos.Data.Player.PlayerCamera) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasIsDefaultCamera == rhs.hasIsDefaultCamera) && (!lhs.hasIsDefaultCamera || lhs.isDefaultCamera == rhs.isDefaultCamera)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var isDefaultCamera:Bool = false
    public fileprivate(set) var hasIsDefaultCamera:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasIsDefaultCamera {
        try codedOutputStream.writeBool(fieldNumber: 1, value:isDefaultCamera)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasIsDefaultCamera {
        serialize_size += isDefaultCamera.computeBoolSize(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.PlayerCamera.Builder {
      return Pogoprotos.Data.Player.PlayerCamera.classBuilder() as! Pogoprotos.Data.Player.PlayerCamera.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.PlayerCamera.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.PlayerCamera.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerCamera.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerCamera.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
      return try Pogoprotos.Data.Player.PlayerCamera.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.PlayerCamera) throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
      return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasIsDefaultCamera {
        jsonMap["isDefaultCamera"] = isDefaultCamera
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerCamera {
      return try Pogoprotos.Data.Player.PlayerCamera.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.PlayerCamera {
      return try Pogoprotos.Data.Player.PlayerCamera.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasIsDefaultCamera {
        output += "\(indent) isDefaultCamera: \(isDefaultCamera) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIsDefaultCamera {
               hashCode = (hashCode &* 31) &+ isDefaultCamera.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.PlayerCamera"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.PlayerCamera"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.PlayerCamera = Pogoprotos.Data.Player.PlayerCamera()
      public func getMessage() -> Pogoprotos.Data.Player.PlayerCamera {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasIsDefaultCamera:Bool {
           get {
                return builderResult.hasIsDefaultCamera
           }
      }
      public var isDefaultCamera:Bool {
           get {
                return builderResult.isDefaultCamera
           }
           set (value) {
               builderResult.hasIsDefaultCamera = true
               builderResult.isDefaultCamera = value
           }
      }
      @discardableResult
      public func setIsDefaultCamera(_ value:Bool) -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        self.isDefaultCamera = value
        return self
      }
      @discardableResult
      public func clearIsDefaultCamera() -> Pogoprotos.Data.Player.PlayerCamera.Builder{
           builderResult.hasIsDefaultCamera = false
           builderResult.isDefaultCamera = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        builderResult = Pogoprotos.Data.Player.PlayerCamera()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        return try Pogoprotos.Data.Player.PlayerCamera.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.PlayerCamera {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.PlayerCamera {
        let returnMe:Pogoprotos.Data.Player.PlayerCamera = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.PlayerCamera) throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        if other == Pogoprotos.Data.Player.PlayerCamera() {
         return self
        }
        if other.hasIsDefaultCamera {
             isDefaultCamera = other.isDefaultCamera
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            isDefaultCamera = try codedInputStream.readBool()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.PlayerCamera.Builder()
        if let jsonValueIsDefaultCamera = jsonMap["isDefaultCamera"] as? Bool {
          resultDecodedBuilder.isDefaultCamera = jsonValueIsDefaultCamera
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.PlayerCamera.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.PlayerCamera.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PlayerCurrency : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.PlayerCurrency, rhs: Pogoprotos.Data.Player.PlayerCurrency) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasGems == rhs.hasGems) && (!lhs.hasGems || lhs.gems == rhs.gems)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var gems:Int32 = Int32(0)
    public fileprivate(set) var hasGems:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasGems {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:gems)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasGems {
        serialize_size += gems.computeInt32Size(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
      return Pogoprotos.Data.Player.PlayerCurrency.classBuilder() as! Pogoprotos.Data.Player.PlayerCurrency.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.PlayerCurrency.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerCurrency.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerCurrency.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
      return try Pogoprotos.Data.Player.PlayerCurrency.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.PlayerCurrency) throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
      return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasGems {
        jsonMap["gems"] = Int(gems)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerCurrency {
      return try Pogoprotos.Data.Player.PlayerCurrency.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.PlayerCurrency {
      return try Pogoprotos.Data.Player.PlayerCurrency.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasGems {
        output += "\(indent) gems: \(gems) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGems {
               hashCode = (hashCode &* 31) &+ gems.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.PlayerCurrency"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.PlayerCurrency"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.PlayerCurrency = Pogoprotos.Data.Player.PlayerCurrency()
      public func getMessage() -> Pogoprotos.Data.Player.PlayerCurrency {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasGems:Bool {
           get {
                return builderResult.hasGems
           }
      }
      public var gems:Int32 {
           get {
                return builderResult.gems
           }
           set (value) {
               builderResult.hasGems = true
               builderResult.gems = value
           }
      }
      @discardableResult
      public func setGems(_ value:Int32) -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        self.gems = value
        return self
      }
      @discardableResult
      public func clearGems() -> Pogoprotos.Data.Player.PlayerCurrency.Builder{
           builderResult.hasGems = false
           builderResult.gems = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        builderResult = Pogoprotos.Data.Player.PlayerCurrency()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        return try Pogoprotos.Data.Player.PlayerCurrency.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.PlayerCurrency {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.PlayerCurrency {
        let returnMe:Pogoprotos.Data.Player.PlayerCurrency = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.PlayerCurrency) throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        if other == Pogoprotos.Data.Player.PlayerCurrency() {
         return self
        }
        if other.hasGems {
             gems = other.gems
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            gems = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.PlayerCurrency.Builder()
        if let jsonValueGems = jsonMap["gems"] as? Int {
          resultDecodedBuilder.gems = Int32(jsonValueGems)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.PlayerCurrency.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.PlayerCurrency.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PlayerPublicProfile : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.PlayerPublicProfile, rhs: Pogoprotos.Data.Player.PlayerPublicProfile) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
      fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
      fieldCheck = fieldCheck && (lhs.hasAvatar == rhs.hasAvatar) && (!lhs.hasAvatar || lhs.avatar == rhs.avatar)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var name:String = ""
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var level:Int32 = Int32(0)
    public fileprivate(set) var hasLevel:Bool = false

    public fileprivate(set) var avatar:Pogoprotos.Data.Player.PlayerAvatar!
    public fileprivate(set) var hasAvatar:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasName {
        try codedOutputStream.writeString(fieldNumber: 1, value:name)
      }
      if hasLevel {
        try codedOutputStream.writeInt32(fieldNumber: 2, value:level)
      }
      if hasAvatar {
        try codedOutputStream.writeMessage(fieldNumber: 3, value:avatar)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(fieldNumber: 1)
      }
      if hasLevel {
        serialize_size += level.computeInt32Size(fieldNumber: 2)
      }
      if hasAvatar {
          if let varSizeavatar = avatar?.computeMessageSize(fieldNumber: 3) {
              serialize_size += varSizeavatar
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return Pogoprotos.Data.Player.PlayerPublicProfile.classBuilder() as! Pogoprotos.Data.Player.PlayerPublicProfile.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.PlayerPublicProfile.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerPublicProfile.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerPublicProfile.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.PlayerPublicProfile) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasName {
        jsonMap["name"] = name
      }
      if hasLevel {
        jsonMap["level"] = Int(level)
      }
      if hasAvatar {
        jsonMap["avatar"] = try avatar.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
      return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasLevel {
        output += "\(indent) level: \(level) \n"
      }
      if hasAvatar {
        output += "\(indent) avatar {\n"
        if let outDescAvatar = avatar {
          output += try outDescAvatar.getDescription(indent: "\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasLevel {
               hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasAvatar {
                if let hashValueavatar = avatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueavatar
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.PlayerPublicProfile"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.PlayerPublicProfile"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.PlayerPublicProfile = Pogoprotos.Data.Player.PlayerPublicProfile()
      public func getMessage() -> Pogoprotos.Data.Player.PlayerPublicProfile {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      @discardableResult
      public func setName(_ value:String) -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        self.name = value
        return self
      }
      @discardableResult
      public func clearName() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasLevel:Bool {
           get {
                return builderResult.hasLevel
           }
      }
      public var level:Int32 {
           get {
                return builderResult.level
           }
           set (value) {
               builderResult.hasLevel = true
               builderResult.level = value
           }
      }
      @discardableResult
      public func setLevel(_ value:Int32) -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        self.level = value
        return self
      }
      @discardableResult
      public func clearLevel() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder{
           builderResult.hasLevel = false
           builderResult.level = Int32(0)
           return self
      }
      public var hasAvatar:Bool {
           get {
               return builderResult.hasAvatar
           }
      }
      public var avatar:Pogoprotos.Data.Player.PlayerAvatar! {
           get {
               if avatarBuilder_ != nil {
                  builderResult.avatar = avatarBuilder_.getMessage()
               }
               return builderResult.avatar
           }
           set (value) {
               builderResult.hasAvatar = true
               builderResult.avatar = value
           }
      }
      fileprivate var avatarBuilder_:Pogoprotos.Data.Player.PlayerAvatar.Builder! {
           didSet {
              builderResult.hasAvatar = true
           }
      }
      public func getAvatarBuilder() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        if avatarBuilder_ == nil {
           avatarBuilder_ = Pogoprotos.Data.Player.PlayerAvatar.Builder()
           builderResult.avatar = avatarBuilder_.getMessage()
           if avatar != nil {
              try! avatarBuilder_.mergeFrom(other: avatar)
           }
        }
        return avatarBuilder_
      }
      @discardableResult
      public func setAvatar(_ value:Pogoprotos.Data.Player.PlayerAvatar!) -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        self.avatar = value
        return self
      }
      @discardableResult
      public func mergeAvatar(value:Pogoprotos.Data.Player.PlayerAvatar) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        if builderResult.hasAvatar {
          builderResult.avatar = try Pogoprotos.Data.Player.PlayerAvatar.builderWithPrototype(prototype:builderResult.avatar).mergeFrom(other: value).buildPartial()
        } else {
          builderResult.avatar = value
        }
        builderResult.hasAvatar = true
        return self
      }
      @discardableResult
      public func clearAvatar() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        avatarBuilder_ = nil
        builderResult.hasAvatar = false
        builderResult.avatar = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        builderResult = Pogoprotos.Data.Player.PlayerPublicProfile()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        return try Pogoprotos.Data.Player.PlayerPublicProfile.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.PlayerPublicProfile {
        let returnMe:Pogoprotos.Data.Player.PlayerPublicProfile = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.PlayerPublicProfile) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        if other == Pogoprotos.Data.Player.PlayerPublicProfile() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if other.hasLevel {
             level = other.level
        }
        if (other.hasAvatar) {
            try mergeAvatar(value: other.avatar)
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            name = try codedInputStream.readString()

          case 16:
            level = try codedInputStream.readInt32()

          case 26:
            let subBuilder:Pogoprotos.Data.Player.PlayerAvatar.Builder = Pogoprotos.Data.Player.PlayerAvatar.Builder()
            if hasAvatar {
              try subBuilder.mergeFrom(other: avatar)
            }
            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
            avatar = subBuilder.buildPartial()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.PlayerPublicProfile.Builder()
        if let jsonValueName = jsonMap["name"] as? String {
          resultDecodedBuilder.name = jsonValueName
        }
        if let jsonValueLevel = jsonMap["level"] as? Int {
          resultDecodedBuilder.level = Int32(jsonValueLevel)
        }
        if let jsonValueAvatar = jsonMap["avatar"] as? Dictionary<String,Any> {
          resultDecodedBuilder.avatar = try Pogoprotos.Data.Player.PlayerAvatar.Builder.decodeToBuilder(jsonMap:jsonValueAvatar).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.PlayerPublicProfile.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class PlayerStats : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Data.Player.PlayerStats, rhs: Pogoprotos.Data.Player.PlayerStats) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
      fieldCheck = fieldCheck && (lhs.hasExperience == rhs.hasExperience) && (!lhs.hasExperience || lhs.experience == rhs.experience)
      fieldCheck = fieldCheck && (lhs.hasPrevLevelXp == rhs.hasPrevLevelXp) && (!lhs.hasPrevLevelXp || lhs.prevLevelXp == rhs.prevLevelXp)
      fieldCheck = fieldCheck && (lhs.hasNextLevelXp == rhs.hasNextLevelXp) && (!lhs.hasNextLevelXp || lhs.nextLevelXp == rhs.nextLevelXp)
      fieldCheck = fieldCheck && (lhs.hasKmWalked == rhs.hasKmWalked) && (!lhs.hasKmWalked || lhs.kmWalked == rhs.kmWalked)
      fieldCheck = fieldCheck && (lhs.hasPokemonsEncountered == rhs.hasPokemonsEncountered) && (!lhs.hasPokemonsEncountered || lhs.pokemonsEncountered == rhs.pokemonsEncountered)
      fieldCheck = fieldCheck && (lhs.hasUniquePokedexEntries == rhs.hasUniquePokedexEntries) && (!lhs.hasUniquePokedexEntries || lhs.uniquePokedexEntries == rhs.uniquePokedexEntries)
      fieldCheck = fieldCheck && (lhs.hasPokemonsCaptured == rhs.hasPokemonsCaptured) && (!lhs.hasPokemonsCaptured || lhs.pokemonsCaptured == rhs.pokemonsCaptured)
      fieldCheck = fieldCheck && (lhs.hasEvolutions == rhs.hasEvolutions) && (!lhs.hasEvolutions || lhs.evolutions == rhs.evolutions)
      fieldCheck = fieldCheck && (lhs.hasPokeStopVisits == rhs.hasPokeStopVisits) && (!lhs.hasPokeStopVisits || lhs.pokeStopVisits == rhs.pokeStopVisits)
      fieldCheck = fieldCheck && (lhs.hasPokeballsThrown == rhs.hasPokeballsThrown) && (!lhs.hasPokeballsThrown || lhs.pokeballsThrown == rhs.pokeballsThrown)
      fieldCheck = fieldCheck && (lhs.hasEggsHatched == rhs.hasEggsHatched) && (!lhs.hasEggsHatched || lhs.eggsHatched == rhs.eggsHatched)
      fieldCheck = fieldCheck && (lhs.hasBigMagikarpCaught == rhs.hasBigMagikarpCaught) && (!lhs.hasBigMagikarpCaught || lhs.bigMagikarpCaught == rhs.bigMagikarpCaught)
      fieldCheck = fieldCheck && (lhs.hasBattleAttackWon == rhs.hasBattleAttackWon) && (!lhs.hasBattleAttackWon || lhs.battleAttackWon == rhs.battleAttackWon)
      fieldCheck = fieldCheck && (lhs.hasBattleAttackTotal == rhs.hasBattleAttackTotal) && (!lhs.hasBattleAttackTotal || lhs.battleAttackTotal == rhs.battleAttackTotal)
      fieldCheck = fieldCheck && (lhs.hasBattleDefendedWon == rhs.hasBattleDefendedWon) && (!lhs.hasBattleDefendedWon || lhs.battleDefendedWon == rhs.battleDefendedWon)
      fieldCheck = fieldCheck && (lhs.hasBattleTrainingWon == rhs.hasBattleTrainingWon) && (!lhs.hasBattleTrainingWon || lhs.battleTrainingWon == rhs.battleTrainingWon)
      fieldCheck = fieldCheck && (lhs.hasBattleTrainingTotal == rhs.hasBattleTrainingTotal) && (!lhs.hasBattleTrainingTotal || lhs.battleTrainingTotal == rhs.battleTrainingTotal)
      fieldCheck = fieldCheck && (lhs.hasPrestigeRaisedTotal == rhs.hasPrestigeRaisedTotal) && (!lhs.hasPrestigeRaisedTotal || lhs.prestigeRaisedTotal == rhs.prestigeRaisedTotal)
      fieldCheck = fieldCheck && (lhs.hasPrestigeDroppedTotal == rhs.hasPrestigeDroppedTotal) && (!lhs.hasPrestigeDroppedTotal || lhs.prestigeDroppedTotal == rhs.prestigeDroppedTotal)
      fieldCheck = fieldCheck && (lhs.hasPokemonDeployed == rhs.hasPokemonDeployed) && (!lhs.hasPokemonDeployed || lhs.pokemonDeployed == rhs.pokemonDeployed)
      fieldCheck = fieldCheck && (lhs.pokemonCaughtByType == rhs.pokemonCaughtByType)
      fieldCheck = fieldCheck && (lhs.hasSmallRattataCaught == rhs.hasSmallRattataCaught) && (!lhs.hasSmallRattataCaught || lhs.smallRattataCaught == rhs.smallRattataCaught)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var level:Int32 = Int32(0)
    public fileprivate(set) var hasLevel:Bool = false

    public fileprivate(set) var experience:Int64 = Int64(0)
    public fileprivate(set) var hasExperience:Bool = false

    public fileprivate(set) var prevLevelXp:Int64 = Int64(0)
    public fileprivate(set) var hasPrevLevelXp:Bool = false

    public fileprivate(set) var nextLevelXp:Int64 = Int64(0)
    public fileprivate(set) var hasNextLevelXp:Bool = false

    public fileprivate(set) var kmWalked:Float = Float(0)
    public fileprivate(set) var hasKmWalked:Bool = false

    public fileprivate(set) var pokemonsEncountered:Int32 = Int32(0)
    public fileprivate(set) var hasPokemonsEncountered:Bool = false

    public fileprivate(set) var uniquePokedexEntries:Int32 = Int32(0)
    public fileprivate(set) var hasUniquePokedexEntries:Bool = false

    public fileprivate(set) var pokemonsCaptured:Int32 = Int32(0)
    public fileprivate(set) var hasPokemonsCaptured:Bool = false

    public fileprivate(set) var evolutions:Int32 = Int32(0)
    public fileprivate(set) var hasEvolutions:Bool = false

    public fileprivate(set) var pokeStopVisits:Int32 = Int32(0)
    public fileprivate(set) var hasPokeStopVisits:Bool = false

    public fileprivate(set) var pokeballsThrown:Int32 = Int32(0)
    public fileprivate(set) var hasPokeballsThrown:Bool = false

    public fileprivate(set) var eggsHatched:Int32 = Int32(0)
    public fileprivate(set) var hasEggsHatched:Bool = false

    public fileprivate(set) var bigMagikarpCaught:Int32 = Int32(0)
    public fileprivate(set) var hasBigMagikarpCaught:Bool = false

    public fileprivate(set) var battleAttackWon:Int32 = Int32(0)
    public fileprivate(set) var hasBattleAttackWon:Bool = false

    public fileprivate(set) var battleAttackTotal:Int32 = Int32(0)
    public fileprivate(set) var hasBattleAttackTotal:Bool = false

    public fileprivate(set) var battleDefendedWon:Int32 = Int32(0)
    public fileprivate(set) var hasBattleDefendedWon:Bool = false

    public fileprivate(set) var battleTrainingWon:Int32 = Int32(0)
    public fileprivate(set) var hasBattleTrainingWon:Bool = false

    public fileprivate(set) var battleTrainingTotal:Int32 = Int32(0)
    public fileprivate(set) var hasBattleTrainingTotal:Bool = false

    public fileprivate(set) var prestigeRaisedTotal:Int32 = Int32(0)
    public fileprivate(set) var hasPrestigeRaisedTotal:Bool = false

    public fileprivate(set) var prestigeDroppedTotal:Int32 = Int32(0)
    public fileprivate(set) var hasPrestigeDroppedTotal:Bool = false

    public fileprivate(set) var pokemonDeployed:Int32 = Int32(0)
    public fileprivate(set) var hasPokemonDeployed:Bool = false

    public fileprivate(set) var pokemonCaughtByType:Array<Int32> = Array<Int32>()
    private var pokemonCaughtByTypeMemoizedSerializedSize:Int32 = -1
    public fileprivate(set) var smallRattataCaught:Int32 = Int32(0)
    public fileprivate(set) var hasSmallRattataCaught:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasLevel {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:level)
      }
      if hasExperience {
        try codedOutputStream.writeInt64(fieldNumber: 2, value:experience)
      }
      if hasPrevLevelXp {
        try codedOutputStream.writeInt64(fieldNumber: 3, value:prevLevelXp)
      }
      if hasNextLevelXp {
        try codedOutputStream.writeInt64(fieldNumber: 4, value:nextLevelXp)
      }
      if hasKmWalked {
        try codedOutputStream.writeFloat(fieldNumber: 5, value:kmWalked)
      }
      if hasPokemonsEncountered {
        try codedOutputStream.writeInt32(fieldNumber: 6, value:pokemonsEncountered)
      }
      if hasUniquePokedexEntries {
        try codedOutputStream.writeInt32(fieldNumber: 7, value:uniquePokedexEntries)
      }
      if hasPokemonsCaptured {
        try codedOutputStream.writeInt32(fieldNumber: 8, value:pokemonsCaptured)
      }
      if hasEvolutions {
        try codedOutputStream.writeInt32(fieldNumber: 9, value:evolutions)
      }
      if hasPokeStopVisits {
        try codedOutputStream.writeInt32(fieldNumber: 10, value:pokeStopVisits)
      }
      if hasPokeballsThrown {
        try codedOutputStream.writeInt32(fieldNumber: 11, value:pokeballsThrown)
      }
      if hasEggsHatched {
        try codedOutputStream.writeInt32(fieldNumber: 12, value:eggsHatched)
      }
      if hasBigMagikarpCaught {
        try codedOutputStream.writeInt32(fieldNumber: 13, value:bigMagikarpCaught)
      }
      if hasBattleAttackWon {
        try codedOutputStream.writeInt32(fieldNumber: 14, value:battleAttackWon)
      }
      if hasBattleAttackTotal {
        try codedOutputStream.writeInt32(fieldNumber: 15, value:battleAttackTotal)
      }
      if hasBattleDefendedWon {
        try codedOutputStream.writeInt32(fieldNumber: 16, value:battleDefendedWon)
      }
      if hasBattleTrainingWon {
        try codedOutputStream.writeInt32(fieldNumber: 17, value:battleTrainingWon)
      }
      if hasBattleTrainingTotal {
        try codedOutputStream.writeInt32(fieldNumber: 18, value:battleTrainingTotal)
      }
      if hasPrestigeRaisedTotal {
        try codedOutputStream.writeInt32(fieldNumber: 19, value:prestigeRaisedTotal)
      }
      if hasPrestigeDroppedTotal {
        try codedOutputStream.writeInt32(fieldNumber: 20, value:prestigeDroppedTotal)
      }
      if hasPokemonDeployed {
        try codedOutputStream.writeInt32(fieldNumber: 21, value:pokemonDeployed)
      }
      if !pokemonCaughtByType.isEmpty {
        try codedOutputStream.writeRawVarint32(value: 178)
        try codedOutputStream.writeRawVarint32(value: pokemonCaughtByTypeMemoizedSerializedSize)
        for oneValuepokemonCaughtByType in pokemonCaughtByType {
          try codedOutputStream.writeInt32NoTag(value: oneValuepokemonCaughtByType)
        }
      }
      if hasSmallRattataCaught {
        try codedOutputStream.writeInt32(fieldNumber: 23, value:smallRattataCaught)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasLevel {
        serialize_size += level.computeInt32Size(fieldNumber: 1)
      }
      if hasExperience {
        serialize_size += experience.computeInt64Size(fieldNumber: 2)
      }
      if hasPrevLevelXp {
        serialize_size += prevLevelXp.computeInt64Size(fieldNumber: 3)
      }
      if hasNextLevelXp {
        serialize_size += nextLevelXp.computeInt64Size(fieldNumber: 4)
      }
      if hasKmWalked {
        serialize_size += kmWalked.computeFloatSize(fieldNumber: 5)
      }
      if hasPokemonsEncountered {
        serialize_size += pokemonsEncountered.computeInt32Size(fieldNumber: 6)
      }
      if hasUniquePokedexEntries {
        serialize_size += uniquePokedexEntries.computeInt32Size(fieldNumber: 7)
      }
      if hasPokemonsCaptured {
        serialize_size += pokemonsCaptured.computeInt32Size(fieldNumber: 8)
      }
      if hasEvolutions {
        serialize_size += evolutions.computeInt32Size(fieldNumber: 9)
      }
      if hasPokeStopVisits {
        serialize_size += pokeStopVisits.computeInt32Size(fieldNumber: 10)
      }
      if hasPokeballsThrown {
        serialize_size += pokeballsThrown.computeInt32Size(fieldNumber: 11)
      }
      if hasEggsHatched {
        serialize_size += eggsHatched.computeInt32Size(fieldNumber: 12)
      }
      if hasBigMagikarpCaught {
        serialize_size += bigMagikarpCaught.computeInt32Size(fieldNumber: 13)
      }
      if hasBattleAttackWon {
        serialize_size += battleAttackWon.computeInt32Size(fieldNumber: 14)
      }
      if hasBattleAttackTotal {
        serialize_size += battleAttackTotal.computeInt32Size(fieldNumber: 15)
      }
      if hasBattleDefendedWon {
        serialize_size += battleDefendedWon.computeInt32Size(fieldNumber: 16)
      }
      if hasBattleTrainingWon {
        serialize_size += battleTrainingWon.computeInt32Size(fieldNumber: 17)
      }
      if hasBattleTrainingTotal {
        serialize_size += battleTrainingTotal.computeInt32Size(fieldNumber: 18)
      }
      if hasPrestigeRaisedTotal {
        serialize_size += prestigeRaisedTotal.computeInt32Size(fieldNumber: 19)
      }
      if hasPrestigeDroppedTotal {
        serialize_size += prestigeDroppedTotal.computeInt32Size(fieldNumber: 20)
      }
      if hasPokemonDeployed {
        serialize_size += pokemonDeployed.computeInt32Size(fieldNumber: 21)
      }
      var dataSizePokemonCaughtByType:Int32 = 0
      for oneValuepokemonCaughtByType in pokemonCaughtByType {
          dataSizePokemonCaughtByType += oneValuepokemonCaughtByType.computeInt32SizeNoTag()
      }
      serialize_size += dataSizePokemonCaughtByType
      if !pokemonCaughtByType.isEmpty {
        serialize_size += 2
        serialize_size += dataSizePokemonCaughtByType.computeInt32SizeNoTag()
      }
      pokemonCaughtByTypeMemoizedSerializedSize = dataSizePokemonCaughtByType
      if hasSmallRattataCaught {
        serialize_size += smallRattataCaught.computeInt32Size(fieldNumber: 23)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return Pogoprotos.Data.Player.PlayerStats.classBuilder() as! Pogoprotos.Data.Player.PlayerStats.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return classBuilder() as! Pogoprotos.Data.Player.PlayerStats.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerStats.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Data.Player.PlayerStats.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return try Pogoprotos.Data.Player.PlayerStats.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.Player.PlayerStats) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
      return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasLevel {
        jsonMap["level"] = Int(level)
      }
      if hasExperience {
        jsonMap["experience"] = "\(experience)"
      }
      if hasPrevLevelXp {
        jsonMap["prevLevelXp"] = "\(prevLevelXp)"
      }
      if hasNextLevelXp {
        jsonMap["nextLevelXp"] = "\(nextLevelXp)"
      }
      if hasKmWalked {
        jsonMap["kmWalked"] = Float(kmWalked)
      }
      if hasPokemonsEncountered {
        jsonMap["pokemonsEncountered"] = Int(pokemonsEncountered)
      }
      if hasUniquePokedexEntries {
        jsonMap["uniquePokedexEntries"] = Int(uniquePokedexEntries)
      }
      if hasPokemonsCaptured {
        jsonMap["pokemonsCaptured"] = Int(pokemonsCaptured)
      }
      if hasEvolutions {
        jsonMap["evolutions"] = Int(evolutions)
      }
      if hasPokeStopVisits {
        jsonMap["pokeStopVisits"] = Int(pokeStopVisits)
      }
      if hasPokeballsThrown {
        jsonMap["pokeballsThrown"] = Int(pokeballsThrown)
      }
      if hasEggsHatched {
        jsonMap["eggsHatched"] = Int(eggsHatched)
      }
      if hasBigMagikarpCaught {
        jsonMap["bigMagikarpCaught"] = Int(bigMagikarpCaught)
      }
      if hasBattleAttackWon {
        jsonMap["battleAttackWon"] = Int(battleAttackWon)
      }
      if hasBattleAttackTotal {
        jsonMap["battleAttackTotal"] = Int(battleAttackTotal)
      }
      if hasBattleDefendedWon {
        jsonMap["battleDefendedWon"] = Int(battleDefendedWon)
      }
      if hasBattleTrainingWon {
        jsonMap["battleTrainingWon"] = Int(battleTrainingWon)
      }
      if hasBattleTrainingTotal {
        jsonMap["battleTrainingTotal"] = Int(battleTrainingTotal)
      }
      if hasPrestigeRaisedTotal {
        jsonMap["prestigeRaisedTotal"] = Int(prestigeRaisedTotal)
      }
      if hasPrestigeDroppedTotal {
        jsonMap["prestigeDroppedTotal"] = Int(prestigeDroppedTotal)
      }
      if hasPokemonDeployed {
        jsonMap["pokemonDeployed"] = Int(pokemonDeployed)
      }
      if !pokemonCaughtByType.isEmpty {
        var jsonArrayPokemonCaughtByType:Array<Int> = []
          for oneValuePokemonCaughtByType in pokemonCaughtByType {
            jsonArrayPokemonCaughtByType.append(Int(oneValuePokemonCaughtByType))
          }
        jsonMap["pokemonCaughtByType"] = jsonArrayPokemonCaughtByType
      }
      if hasSmallRattataCaught {
        jsonMap["smallRattataCaught"] = Int(smallRattataCaught)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Data.Player.PlayerStats {
      return try Pogoprotos.Data.Player.PlayerStats.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasLevel {
        output += "\(indent) level: \(level) \n"
      }
      if hasExperience {
        output += "\(indent) experience: \(experience) \n"
      }
      if hasPrevLevelXp {
        output += "\(indent) prevLevelXp: \(prevLevelXp) \n"
      }
      if hasNextLevelXp {
        output += "\(indent) nextLevelXp: \(nextLevelXp) \n"
      }
      if hasKmWalked {
        output += "\(indent) kmWalked: \(kmWalked) \n"
      }
      if hasPokemonsEncountered {
        output += "\(indent) pokemonsEncountered: \(pokemonsEncountered) \n"
      }
      if hasUniquePokedexEntries {
        output += "\(indent) uniquePokedexEntries: \(uniquePokedexEntries) \n"
      }
      if hasPokemonsCaptured {
        output += "\(indent) pokemonsCaptured: \(pokemonsCaptured) \n"
      }
      if hasEvolutions {
        output += "\(indent) evolutions: \(evolutions) \n"
      }
      if hasPokeStopVisits {
        output += "\(indent) pokeStopVisits: \(pokeStopVisits) \n"
      }
      if hasPokeballsThrown {
        output += "\(indent) pokeballsThrown: \(pokeballsThrown) \n"
      }
      if hasEggsHatched {
        output += "\(indent) eggsHatched: \(eggsHatched) \n"
      }
      if hasBigMagikarpCaught {
        output += "\(indent) bigMagikarpCaught: \(bigMagikarpCaught) \n"
      }
      if hasBattleAttackWon {
        output += "\(indent) battleAttackWon: \(battleAttackWon) \n"
      }
      if hasBattleAttackTotal {
        output += "\(indent) battleAttackTotal: \(battleAttackTotal) \n"
      }
      if hasBattleDefendedWon {
        output += "\(indent) battleDefendedWon: \(battleDefendedWon) \n"
      }
      if hasBattleTrainingWon {
        output += "\(indent) battleTrainingWon: \(battleTrainingWon) \n"
      }
      if hasBattleTrainingTotal {
        output += "\(indent) battleTrainingTotal: \(battleTrainingTotal) \n"
      }
      if hasPrestigeRaisedTotal {
        output += "\(indent) prestigeRaisedTotal: \(prestigeRaisedTotal) \n"
      }
      if hasPrestigeDroppedTotal {
        output += "\(indent) prestigeDroppedTotal: \(prestigeDroppedTotal) \n"
      }
      if hasPokemonDeployed {
        output += "\(indent) pokemonDeployed: \(pokemonDeployed) \n"
      }
      var pokemonCaughtByTypeElementIndex:Int = 0
      for oneValuePokemonCaughtByType in pokemonCaughtByType  {
          output += "\(indent) pokemonCaughtByType[\(pokemonCaughtByTypeElementIndex)]: \(oneValuePokemonCaughtByType)\n"
          pokemonCaughtByTypeElementIndex += 1
      }
      if hasSmallRattataCaught {
        output += "\(indent) smallRattataCaught: \(smallRattataCaught) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasLevel {
               hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasExperience {
               hashCode = (hashCode &* 31) &+ experience.hashValue
            }
            if hasPrevLevelXp {
               hashCode = (hashCode &* 31) &+ prevLevelXp.hashValue
            }
            if hasNextLevelXp {
               hashCode = (hashCode &* 31) &+ nextLevelXp.hashValue
            }
            if hasKmWalked {
               hashCode = (hashCode &* 31) &+ kmWalked.hashValue
            }
            if hasPokemonsEncountered {
               hashCode = (hashCode &* 31) &+ pokemonsEncountered.hashValue
            }
            if hasUniquePokedexEntries {
               hashCode = (hashCode &* 31) &+ uniquePokedexEntries.hashValue
            }
            if hasPokemonsCaptured {
               hashCode = (hashCode &* 31) &+ pokemonsCaptured.hashValue
            }
            if hasEvolutions {
               hashCode = (hashCode &* 31) &+ evolutions.hashValue
            }
            if hasPokeStopVisits {
               hashCode = (hashCode &* 31) &+ pokeStopVisits.hashValue
            }
            if hasPokeballsThrown {
               hashCode = (hashCode &* 31) &+ pokeballsThrown.hashValue
            }
            if hasEggsHatched {
               hashCode = (hashCode &* 31) &+ eggsHatched.hashValue
            }
            if hasBigMagikarpCaught {
               hashCode = (hashCode &* 31) &+ bigMagikarpCaught.hashValue
            }
            if hasBattleAttackWon {
               hashCode = (hashCode &* 31) &+ battleAttackWon.hashValue
            }
            if hasBattleAttackTotal {
               hashCode = (hashCode &* 31) &+ battleAttackTotal.hashValue
            }
            if hasBattleDefendedWon {
               hashCode = (hashCode &* 31) &+ battleDefendedWon.hashValue
            }
            if hasBattleTrainingWon {
               hashCode = (hashCode &* 31) &+ battleTrainingWon.hashValue
            }
            if hasBattleTrainingTotal {
               hashCode = (hashCode &* 31) &+ battleTrainingTotal.hashValue
            }
            if hasPrestigeRaisedTotal {
               hashCode = (hashCode &* 31) &+ prestigeRaisedTotal.hashValue
            }
            if hasPrestigeDroppedTotal {
               hashCode = (hashCode &* 31) &+ prestigeDroppedTotal.hashValue
            }
            if hasPokemonDeployed {
               hashCode = (hashCode &* 31) &+ pokemonDeployed.hashValue
            }
            for oneValuePokemonCaughtByType in pokemonCaughtByType {
                hashCode = (hashCode &* 31) &+ oneValuePokemonCaughtByType.hashValue
            }
            if hasSmallRattataCaught {
               hashCode = (hashCode &* 31) &+ smallRattataCaught.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.Player.PlayerStats"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.Player.PlayerStats"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Data.Player.PlayerStats = Pogoprotos.Data.Player.PlayerStats()
      public func getMessage() -> Pogoprotos.Data.Player.PlayerStats {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasLevel:Bool {
           get {
                return builderResult.hasLevel
           }
      }
      public var level:Int32 {
           get {
                return builderResult.level
           }
           set (value) {
               builderResult.hasLevel = true
               builderResult.level = value
           }
      }
      @discardableResult
      public func setLevel(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.level = value
        return self
      }
      @discardableResult
      public func clearLevel() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasLevel = false
           builderResult.level = Int32(0)
           return self
      }
      public var hasExperience:Bool {
           get {
                return builderResult.hasExperience
           }
      }
      public var experience:Int64 {
           get {
                return builderResult.experience
           }
           set (value) {
               builderResult.hasExperience = true
               builderResult.experience = value
           }
      }
      @discardableResult
      public func setExperience(_ value:Int64) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.experience = value
        return self
      }
      @discardableResult
      public func clearExperience() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasExperience = false
           builderResult.experience = Int64(0)
           return self
      }
      public var hasPrevLevelXp:Bool {
           get {
                return builderResult.hasPrevLevelXp
           }
      }
      public var prevLevelXp:Int64 {
           get {
                return builderResult.prevLevelXp
           }
           set (value) {
               builderResult.hasPrevLevelXp = true
               builderResult.prevLevelXp = value
           }
      }
      @discardableResult
      public func setPrevLevelXp(_ value:Int64) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.prevLevelXp = value
        return self
      }
      @discardableResult
      public func clearPrevLevelXp() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPrevLevelXp = false
           builderResult.prevLevelXp = Int64(0)
           return self
      }
      public var hasNextLevelXp:Bool {
           get {
                return builderResult.hasNextLevelXp
           }
      }
      public var nextLevelXp:Int64 {
           get {
                return builderResult.nextLevelXp
           }
           set (value) {
               builderResult.hasNextLevelXp = true
               builderResult.nextLevelXp = value
           }
      }
      @discardableResult
      public func setNextLevelXp(_ value:Int64) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.nextLevelXp = value
        return self
      }
      @discardableResult
      public func clearNextLevelXp() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasNextLevelXp = false
           builderResult.nextLevelXp = Int64(0)
           return self
      }
      public var hasKmWalked:Bool {
           get {
                return builderResult.hasKmWalked
           }
      }
      public var kmWalked:Float {
           get {
                return builderResult.kmWalked
           }
           set (value) {
               builderResult.hasKmWalked = true
               builderResult.kmWalked = value
           }
      }
      @discardableResult
      public func setKmWalked(_ value:Float) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.kmWalked = value
        return self
      }
      @discardableResult
      public func clearKmWalked() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasKmWalked = false
           builderResult.kmWalked = Float(0)
           return self
      }
      public var hasPokemonsEncountered:Bool {
           get {
                return builderResult.hasPokemonsEncountered
           }
      }
      public var pokemonsEncountered:Int32 {
           get {
                return builderResult.pokemonsEncountered
           }
           set (value) {
               builderResult.hasPokemonsEncountered = true
               builderResult.pokemonsEncountered = value
           }
      }
      @discardableResult
      public func setPokemonsEncountered(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonsEncountered = value
        return self
      }
      @discardableResult
      public func clearPokemonsEncountered() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokemonsEncountered = false
           builderResult.pokemonsEncountered = Int32(0)
           return self
      }
      public var hasUniquePokedexEntries:Bool {
           get {
                return builderResult.hasUniquePokedexEntries
           }
      }
      public var uniquePokedexEntries:Int32 {
           get {
                return builderResult.uniquePokedexEntries
           }
           set (value) {
               builderResult.hasUniquePokedexEntries = true
               builderResult.uniquePokedexEntries = value
           }
      }
      @discardableResult
      public func setUniquePokedexEntries(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.uniquePokedexEntries = value
        return self
      }
      @discardableResult
      public func clearUniquePokedexEntries() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasUniquePokedexEntries = false
           builderResult.uniquePokedexEntries = Int32(0)
           return self
      }
      public var hasPokemonsCaptured:Bool {
           get {
                return builderResult.hasPokemonsCaptured
           }
      }
      public var pokemonsCaptured:Int32 {
           get {
                return builderResult.pokemonsCaptured
           }
           set (value) {
               builderResult.hasPokemonsCaptured = true
               builderResult.pokemonsCaptured = value
           }
      }
      @discardableResult
      public func setPokemonsCaptured(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonsCaptured = value
        return self
      }
      @discardableResult
      public func clearPokemonsCaptured() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokemonsCaptured = false
           builderResult.pokemonsCaptured = Int32(0)
           return self
      }
      public var hasEvolutions:Bool {
           get {
                return builderResult.hasEvolutions
           }
      }
      public var evolutions:Int32 {
           get {
                return builderResult.evolutions
           }
           set (value) {
               builderResult.hasEvolutions = true
               builderResult.evolutions = value
           }
      }
      @discardableResult
      public func setEvolutions(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.evolutions = value
        return self
      }
      @discardableResult
      public func clearEvolutions() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasEvolutions = false
           builderResult.evolutions = Int32(0)
           return self
      }
      public var hasPokeStopVisits:Bool {
           get {
                return builderResult.hasPokeStopVisits
           }
      }
      public var pokeStopVisits:Int32 {
           get {
                return builderResult.pokeStopVisits
           }
           set (value) {
               builderResult.hasPokeStopVisits = true
               builderResult.pokeStopVisits = value
           }
      }
      @discardableResult
      public func setPokeStopVisits(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokeStopVisits = value
        return self
      }
      @discardableResult
      public func clearPokeStopVisits() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokeStopVisits = false
           builderResult.pokeStopVisits = Int32(0)
           return self
      }
      public var hasPokeballsThrown:Bool {
           get {
                return builderResult.hasPokeballsThrown
           }
      }
      public var pokeballsThrown:Int32 {
           get {
                return builderResult.pokeballsThrown
           }
           set (value) {
               builderResult.hasPokeballsThrown = true
               builderResult.pokeballsThrown = value
           }
      }
      @discardableResult
      public func setPokeballsThrown(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokeballsThrown = value
        return self
      }
      @discardableResult
      public func clearPokeballsThrown() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokeballsThrown = false
           builderResult.pokeballsThrown = Int32(0)
           return self
      }
      public var hasEggsHatched:Bool {
           get {
                return builderResult.hasEggsHatched
           }
      }
      public var eggsHatched:Int32 {
           get {
                return builderResult.eggsHatched
           }
           set (value) {
               builderResult.hasEggsHatched = true
               builderResult.eggsHatched = value
           }
      }
      @discardableResult
      public func setEggsHatched(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.eggsHatched = value
        return self
      }
      @discardableResult
      public func clearEggsHatched() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasEggsHatched = false
           builderResult.eggsHatched = Int32(0)
           return self
      }
      public var hasBigMagikarpCaught:Bool {
           get {
                return builderResult.hasBigMagikarpCaught
           }
      }
      public var bigMagikarpCaught:Int32 {
           get {
                return builderResult.bigMagikarpCaught
           }
           set (value) {
               builderResult.hasBigMagikarpCaught = true
               builderResult.bigMagikarpCaught = value
           }
      }
      @discardableResult
      public func setBigMagikarpCaught(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.bigMagikarpCaught = value
        return self
      }
      @discardableResult
      public func clearBigMagikarpCaught() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBigMagikarpCaught = false
           builderResult.bigMagikarpCaught = Int32(0)
           return self
      }
      public var hasBattleAttackWon:Bool {
           get {
                return builderResult.hasBattleAttackWon
           }
      }
      public var battleAttackWon:Int32 {
           get {
                return builderResult.battleAttackWon
           }
           set (value) {
               builderResult.hasBattleAttackWon = true
               builderResult.battleAttackWon = value
           }
      }
      @discardableResult
      public func setBattleAttackWon(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleAttackWon = value
        return self
      }
      @discardableResult
      public func clearBattleAttackWon() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleAttackWon = false
           builderResult.battleAttackWon = Int32(0)
           return self
      }
      public var hasBattleAttackTotal:Bool {
           get {
                return builderResult.hasBattleAttackTotal
           }
      }
      public var battleAttackTotal:Int32 {
           get {
                return builderResult.battleAttackTotal
           }
           set (value) {
               builderResult.hasBattleAttackTotal = true
               builderResult.battleAttackTotal = value
           }
      }
      @discardableResult
      public func setBattleAttackTotal(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleAttackTotal = value
        return self
      }
      @discardableResult
      public func clearBattleAttackTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleAttackTotal = false
           builderResult.battleAttackTotal = Int32(0)
           return self
      }
      public var hasBattleDefendedWon:Bool {
           get {
                return builderResult.hasBattleDefendedWon
           }
      }
      public var battleDefendedWon:Int32 {
           get {
                return builderResult.battleDefendedWon
           }
           set (value) {
               builderResult.hasBattleDefendedWon = true
               builderResult.battleDefendedWon = value
           }
      }
      @discardableResult
      public func setBattleDefendedWon(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleDefendedWon = value
        return self
      }
      @discardableResult
      public func clearBattleDefendedWon() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleDefendedWon = false
           builderResult.battleDefendedWon = Int32(0)
           return self
      }
      public var hasBattleTrainingWon:Bool {
           get {
                return builderResult.hasBattleTrainingWon
           }
      }
      public var battleTrainingWon:Int32 {
           get {
                return builderResult.battleTrainingWon
           }
           set (value) {
               builderResult.hasBattleTrainingWon = true
               builderResult.battleTrainingWon = value
           }
      }
      @discardableResult
      public func setBattleTrainingWon(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleTrainingWon = value
        return self
      }
      @discardableResult
      public func clearBattleTrainingWon() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleTrainingWon = false
           builderResult.battleTrainingWon = Int32(0)
           return self
      }
      public var hasBattleTrainingTotal:Bool {
           get {
                return builderResult.hasBattleTrainingTotal
           }
      }
      public var battleTrainingTotal:Int32 {
           get {
                return builderResult.battleTrainingTotal
           }
           set (value) {
               builderResult.hasBattleTrainingTotal = true
               builderResult.battleTrainingTotal = value
           }
      }
      @discardableResult
      public func setBattleTrainingTotal(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.battleTrainingTotal = value
        return self
      }
      @discardableResult
      public func clearBattleTrainingTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasBattleTrainingTotal = false
           builderResult.battleTrainingTotal = Int32(0)
           return self
      }
      public var hasPrestigeRaisedTotal:Bool {
           get {
                return builderResult.hasPrestigeRaisedTotal
           }
      }
      public var prestigeRaisedTotal:Int32 {
           get {
                return builderResult.prestigeRaisedTotal
           }
           set (value) {
               builderResult.hasPrestigeRaisedTotal = true
               builderResult.prestigeRaisedTotal = value
           }
      }
      @discardableResult
      public func setPrestigeRaisedTotal(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.prestigeRaisedTotal = value
        return self
      }
      @discardableResult
      public func clearPrestigeRaisedTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPrestigeRaisedTotal = false
           builderResult.prestigeRaisedTotal = Int32(0)
           return self
      }
      public var hasPrestigeDroppedTotal:Bool {
           get {
                return builderResult.hasPrestigeDroppedTotal
           }
      }
      public var prestigeDroppedTotal:Int32 {
           get {
                return builderResult.prestigeDroppedTotal
           }
           set (value) {
               builderResult.hasPrestigeDroppedTotal = true
               builderResult.prestigeDroppedTotal = value
           }
      }
      @discardableResult
      public func setPrestigeDroppedTotal(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.prestigeDroppedTotal = value
        return self
      }
      @discardableResult
      public func clearPrestigeDroppedTotal() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPrestigeDroppedTotal = false
           builderResult.prestigeDroppedTotal = Int32(0)
           return self
      }
      public var hasPokemonDeployed:Bool {
           get {
                return builderResult.hasPokemonDeployed
           }
      }
      public var pokemonDeployed:Int32 {
           get {
                return builderResult.pokemonDeployed
           }
           set (value) {
               builderResult.hasPokemonDeployed = true
               builderResult.pokemonDeployed = value
           }
      }
      @discardableResult
      public func setPokemonDeployed(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonDeployed = value
        return self
      }
      @discardableResult
      public func clearPokemonDeployed() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasPokemonDeployed = false
           builderResult.pokemonDeployed = Int32(0)
           return self
      }
      public var pokemonCaughtByType:Array<Int32> {
           get {
               return builderResult.pokemonCaughtByType
           }
           set (array) {
               builderResult.pokemonCaughtByType = array
           }
      }
      @discardableResult
      public func setPokemonCaughtByType(_ value:Array<Int32>) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.pokemonCaughtByType = value
        return self
      }
      @discardableResult
      public func clearPokemonCaughtByType() -> Pogoprotos.Data.Player.PlayerStats.Builder {
         builderResult.pokemonCaughtByType.removeAll(keepingCapacity: false)
         return self
      }
      public var hasSmallRattataCaught:Bool {
           get {
                return builderResult.hasSmallRattataCaught
           }
      }
      public var smallRattataCaught:Int32 {
           get {
                return builderResult.smallRattataCaught
           }
           set (value) {
               builderResult.hasSmallRattataCaught = true
               builderResult.smallRattataCaught = value
           }
      }
      @discardableResult
      public func setSmallRattataCaught(_ value:Int32) -> Pogoprotos.Data.Player.PlayerStats.Builder {
        self.smallRattataCaught = value
        return self
      }
      @discardableResult
      public func clearSmallRattataCaught() -> Pogoprotos.Data.Player.PlayerStats.Builder{
           builderResult.hasSmallRattataCaught = false
           builderResult.smallRattataCaught = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Data.Player.PlayerStats.Builder {
        builderResult = Pogoprotos.Data.Player.PlayerStats()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        return try Pogoprotos.Data.Player.PlayerStats.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.Player.PlayerStats {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.Player.PlayerStats {
        let returnMe:Pogoprotos.Data.Player.PlayerStats = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Data.Player.PlayerStats) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        if other == Pogoprotos.Data.Player.PlayerStats() {
         return self
        }
        if other.hasLevel {
             level = other.level
        }
        if other.hasExperience {
             experience = other.experience
        }
        if other.hasPrevLevelXp {
             prevLevelXp = other.prevLevelXp
        }
        if other.hasNextLevelXp {
             nextLevelXp = other.nextLevelXp
        }
        if other.hasKmWalked {
             kmWalked = other.kmWalked
        }
        if other.hasPokemonsEncountered {
             pokemonsEncountered = other.pokemonsEncountered
        }
        if other.hasUniquePokedexEntries {
             uniquePokedexEntries = other.uniquePokedexEntries
        }
        if other.hasPokemonsCaptured {
             pokemonsCaptured = other.pokemonsCaptured
        }
        if other.hasEvolutions {
             evolutions = other.evolutions
        }
        if other.hasPokeStopVisits {
             pokeStopVisits = other.pokeStopVisits
        }
        if other.hasPokeballsThrown {
             pokeballsThrown = other.pokeballsThrown
        }
        if other.hasEggsHatched {
             eggsHatched = other.eggsHatched
        }
        if other.hasBigMagikarpCaught {
             bigMagikarpCaught = other.bigMagikarpCaught
        }
        if other.hasBattleAttackWon {
             battleAttackWon = other.battleAttackWon
        }
        if other.hasBattleAttackTotal {
             battleAttackTotal = other.battleAttackTotal
        }
        if other.hasBattleDefendedWon {
             battleDefendedWon = other.battleDefendedWon
        }
        if other.hasBattleTrainingWon {
             battleTrainingWon = other.battleTrainingWon
        }
        if other.hasBattleTrainingTotal {
             battleTrainingTotal = other.battleTrainingTotal
        }
        if other.hasPrestigeRaisedTotal {
             prestigeRaisedTotal = other.prestigeRaisedTotal
        }
        if other.hasPrestigeDroppedTotal {
             prestigeDroppedTotal = other.prestigeDroppedTotal
        }
        if other.hasPokemonDeployed {
             pokemonDeployed = other.pokemonDeployed
        }
        if !other.pokemonCaughtByType.isEmpty {
            builderResult.pokemonCaughtByType += other.pokemonCaughtByType
        }
        if other.hasSmallRattataCaught {
             smallRattataCaught = other.smallRattataCaught
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            level = try codedInputStream.readInt32()

          case 16:
            experience = try codedInputStream.readInt64()

          case 24:
            prevLevelXp = try codedInputStream.readInt64()

          case 32:
            nextLevelXp = try codedInputStream.readInt64()

          case 45:
            kmWalked = try codedInputStream.readFloat()

          case 48:
            pokemonsEncountered = try codedInputStream.readInt32()

          case 56:
            uniquePokedexEntries = try codedInputStream.readInt32()

          case 64:
            pokemonsCaptured = try codedInputStream.readInt32()

          case 72:
            evolutions = try codedInputStream.readInt32()

          case 80:
            pokeStopVisits = try codedInputStream.readInt32()

          case 88:
            pokeballsThrown = try codedInputStream.readInt32()

          case 96:
            eggsHatched = try codedInputStream.readInt32()

          case 104:
            bigMagikarpCaught = try codedInputStream.readInt32()

          case 112:
            battleAttackWon = try codedInputStream.readInt32()

          case 120:
            battleAttackTotal = try codedInputStream.readInt32()

          case 128:
            battleDefendedWon = try codedInputStream.readInt32()

          case 136:
            battleTrainingWon = try codedInputStream.readInt32()

          case 144:
            battleTrainingTotal = try codedInputStream.readInt32()

          case 152:
            prestigeRaisedTotal = try codedInputStream.readInt32()

          case 160:
            prestigeDroppedTotal = try codedInputStream.readInt32()

          case 168:
            pokemonDeployed = try codedInputStream.readInt32()

          case 178:
            let length = Int(try codedInputStream.readRawVarint32())
            let limit = try codedInputStream.pushLimit(byteLimit: length)
            while (codedInputStream.bytesUntilLimit() > 0) {
              builderResult.pokemonCaughtByType.append(try codedInputStream.readInt32())
            }
            codedInputStream.popLimit(oldLimit: limit)

          case 184:
            smallRattataCaught = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.Player.PlayerStats.Builder()
        if let jsonValueLevel = jsonMap["level"] as? Int {
          resultDecodedBuilder.level = Int32(jsonValueLevel)
        }
        if let jsonValueExperience = jsonMap["experience"] as? String {
          resultDecodedBuilder.experience = Int64(jsonValueExperience)!
        }
        if let jsonValuePrevLevelXp = jsonMap["prevLevelXp"] as? String {
          resultDecodedBuilder.prevLevelXp = Int64(jsonValuePrevLevelXp)!
        }
        if let jsonValueNextLevelXp = jsonMap["nextLevelXp"] as? String {
          resultDecodedBuilder.nextLevelXp = Int64(jsonValueNextLevelXp)!
        }
        if let jsonValueKmWalked = jsonMap["kmWalked"] as? Float {
          resultDecodedBuilder.kmWalked = Float(jsonValueKmWalked)
        }
        if let jsonValuePokemonsEncountered = jsonMap["pokemonsEncountered"] as? Int {
          resultDecodedBuilder.pokemonsEncountered = Int32(jsonValuePokemonsEncountered)
        }
        if let jsonValueUniquePokedexEntries = jsonMap["uniquePokedexEntries"] as? Int {
          resultDecodedBuilder.uniquePokedexEntries = Int32(jsonValueUniquePokedexEntries)
        }
        if let jsonValuePokemonsCaptured = jsonMap["pokemonsCaptured"] as? Int {
          resultDecodedBuilder.pokemonsCaptured = Int32(jsonValuePokemonsCaptured)
        }
        if let jsonValueEvolutions = jsonMap["evolutions"] as? Int {
          resultDecodedBuilder.evolutions = Int32(jsonValueEvolutions)
        }
        if let jsonValuePokeStopVisits = jsonMap["pokeStopVisits"] as? Int {
          resultDecodedBuilder.pokeStopVisits = Int32(jsonValuePokeStopVisits)
        }
        if let jsonValuePokeballsThrown = jsonMap["pokeballsThrown"] as? Int {
          resultDecodedBuilder.pokeballsThrown = Int32(jsonValuePokeballsThrown)
        }
        if let jsonValueEggsHatched = jsonMap["eggsHatched"] as? Int {
          resultDecodedBuilder.eggsHatched = Int32(jsonValueEggsHatched)
        }
        if let jsonValueBigMagikarpCaught = jsonMap["bigMagikarpCaught"] as? Int {
          resultDecodedBuilder.bigMagikarpCaught = Int32(jsonValueBigMagikarpCaught)
        }
        if let jsonValueBattleAttackWon = jsonMap["battleAttackWon"] as? Int {
          resultDecodedBuilder.battleAttackWon = Int32(jsonValueBattleAttackWon)
        }
        if let jsonValueBattleAttackTotal = jsonMap["battleAttackTotal"] as? Int {
          resultDecodedBuilder.battleAttackTotal = Int32(jsonValueBattleAttackTotal)
        }
        if let jsonValueBattleDefendedWon = jsonMap["battleDefendedWon"] as? Int {
          resultDecodedBuilder.battleDefendedWon = Int32(jsonValueBattleDefendedWon)
        }
        if let jsonValueBattleTrainingWon = jsonMap["battleTrainingWon"] as? Int {
          resultDecodedBuilder.battleTrainingWon = Int32(jsonValueBattleTrainingWon)
        }
        if let jsonValueBattleTrainingTotal = jsonMap["battleTrainingTotal"] as? Int {
          resultDecodedBuilder.battleTrainingTotal = Int32(jsonValueBattleTrainingTotal)
        }
        if let jsonValuePrestigeRaisedTotal = jsonMap["prestigeRaisedTotal"] as? Int {
          resultDecodedBuilder.prestigeRaisedTotal = Int32(jsonValuePrestigeRaisedTotal)
        }
        if let jsonValuePrestigeDroppedTotal = jsonMap["prestigeDroppedTotal"] as? Int {
          resultDecodedBuilder.prestigeDroppedTotal = Int32(jsonValuePrestigeDroppedTotal)
        }
        if let jsonValuePokemonDeployed = jsonMap["pokemonDeployed"] as? Int {
          resultDecodedBuilder.pokemonDeployed = Int32(jsonValuePokemonDeployed)
        }
        if let jsonValuePokemonCaughtByType = jsonMap["pokemonCaughtByType"] as? Array<Int> {
          var jsonArrayPokemonCaughtByType:Array<Int32> = []
          for oneValuePokemonCaughtByType in jsonValuePokemonCaughtByType {
            jsonArrayPokemonCaughtByType.append(Int32(oneValuePokemonCaughtByType))
          }
          resultDecodedBuilder.pokemonCaughtByType = jsonArrayPokemonCaughtByType
        }
        if let jsonValueSmallRattataCaught = jsonMap["smallRattataCaught"] as? Int {
          resultDecodedBuilder.smallRattataCaught = Int32(jsonValueSmallRattataCaught)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Data.Player.PlayerStats.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.Player.PlayerStats.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Data.Player.ContactSettings: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.ContactSettings> {
    var mergedArray = Array<Pogoprotos.Data.Player.ContactSettings>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.ContactSettings? {
    return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.ContactSettings {
    return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.ContactSettings {
    return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.ContactSettings {
    return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.ContactSettings {
    return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.ContactSettings {
    return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.ContactSettings {
    return try Pogoprotos.Data.Player.ContactSettings.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.Currency: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.Currency> {
    var mergedArray = Array<Pogoprotos.Data.Player.Currency>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.Currency? {
    return try Pogoprotos.Data.Player.Currency.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.Currency {
    return try Pogoprotos.Data.Player.Currency.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.Currency {
    return try Pogoprotos.Data.Player.Currency.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.Currency {
    return try Pogoprotos.Data.Player.Currency.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.Currency {
    return try Pogoprotos.Data.Player.Currency.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.Currency {
    return try Pogoprotos.Data.Player.Currency.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.Currency {
    return try Pogoprotos.Data.Player.Currency.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.DailyBonus: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.DailyBonus> {
    var mergedArray = Array<Pogoprotos.Data.Player.DailyBonus>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.DailyBonus? {
    return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.DailyBonus {
    return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.DailyBonus {
    return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.DailyBonus {
    return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.DailyBonus {
    return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.DailyBonus {
    return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.DailyBonus {
    return try Pogoprotos.Data.Player.DailyBonus.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.EquippedBadge: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.EquippedBadge> {
    var mergedArray = Array<Pogoprotos.Data.Player.EquippedBadge>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.EquippedBadge? {
    return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.EquippedBadge {
    return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge {
    return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.EquippedBadge {
    return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge {
    return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.EquippedBadge {
    return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.EquippedBadge {
    return try Pogoprotos.Data.Player.EquippedBadge.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.PlayerAvatar: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.PlayerAvatar> {
    var mergedArray = Array<Pogoprotos.Data.Player.PlayerAvatar>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerAvatar? {
    return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.PlayerAvatar {
    return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerAvatar {
    return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerAvatar {
    return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerAvatar {
    return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerAvatar {
    return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerAvatar {
    return try Pogoprotos.Data.Player.PlayerAvatar.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.PlayerCamera: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.PlayerCamera> {
    var mergedArray = Array<Pogoprotos.Data.Player.PlayerCamera>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerCamera? {
    return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.PlayerCamera {
    return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCamera {
    return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerCamera {
    return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCamera {
    return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerCamera {
    return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCamera {
    return try Pogoprotos.Data.Player.PlayerCamera.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.PlayerCurrency: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.PlayerCurrency> {
    var mergedArray = Array<Pogoprotos.Data.Player.PlayerCurrency>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerCurrency? {
    return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.PlayerCurrency {
    return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCurrency {
    return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerCurrency {
    return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCurrency {
    return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerCurrency {
    return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerCurrency {
    return try Pogoprotos.Data.Player.PlayerCurrency.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.PlayerPublicProfile: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.PlayerPublicProfile> {
    var mergedArray = Array<Pogoprotos.Data.Player.PlayerPublicProfile>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile? {
    return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
    return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
    return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
    return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
    return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
    return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerPublicProfile {
    return try Pogoprotos.Data.Player.PlayerPublicProfile.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Data.Player.PlayerStats: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Data.Player.PlayerStats> {
    var mergedArray = Array<Pogoprotos.Data.Player.PlayerStats>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerStats? {
    return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Data.Player.PlayerStats {
    return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats {
    return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Data.Player.PlayerStats {
    return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats {
    return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Data.Player.PlayerStats {
    return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.Player.PlayerStats {
    return try Pogoprotos.Data.Player.PlayerStats.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
