// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Data.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public func == (lhs: Pogoprotos.Data.AssetDigestEntry, rhs: Pogoprotos.Data.AssetDigestEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasAssetId == rhs.hasAssetId) && (!lhs.hasAssetId || lhs.assetId == rhs.assetId)
  fieldCheck = fieldCheck && (lhs.hasBundleName == rhs.hasBundleName) && (!lhs.hasBundleName || lhs.bundleName == rhs.bundleName)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasChecksum == rhs.hasChecksum) && (!lhs.hasChecksum || lhs.checksum == rhs.checksum)
  fieldCheck = fieldCheck && (lhs.hasSize == rhs.hasSize) && (!lhs.hasSize || lhs.size == rhs.size)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Data.DownloadUrlEntry, rhs: Pogoprotos.Data.DownloadUrlEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasAssetId == rhs.hasAssetId) && (!lhs.hasAssetId || lhs.assetId == rhs.assetId)
  fieldCheck = fieldCheck && (lhs.hasUrl == rhs.hasUrl) && (!lhs.hasUrl || lhs.url == rhs.url)
  fieldCheck = fieldCheck && (lhs.hasSize == rhs.hasSize) && (!lhs.hasSize || lhs.size == rhs.size)
  fieldCheck = fieldCheck && (lhs.hasChecksum == rhs.hasChecksum) && (!lhs.hasChecksum || lhs.checksum == rhs.checksum)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Data.PlayerBadge, rhs: Pogoprotos.Data.PlayerBadge) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBadgeType == rhs.hasBadgeType) && (!lhs.hasBadgeType || lhs.badgeType == rhs.badgeType)
  fieldCheck = fieldCheck && (lhs.hasRank == rhs.hasRank) && (!lhs.hasRank || lhs.rank == rhs.rank)
  fieldCheck = fieldCheck && (lhs.hasStartValue == rhs.hasStartValue) && (!lhs.hasStartValue || lhs.startValue == rhs.startValue)
  fieldCheck = fieldCheck && (lhs.hasEndValue == rhs.hasEndValue) && (!lhs.hasEndValue || lhs.endValue == rhs.endValue)
  fieldCheck = fieldCheck && (lhs.hasCurrentValue == rhs.hasCurrentValue) && (!lhs.hasCurrentValue || lhs.currentValue == rhs.currentValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Data.PlayerData, rhs: Pogoprotos.Data.PlayerData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCreationTimestampMs == rhs.hasCreationTimestampMs) && (!lhs.hasCreationTimestampMs || lhs.creationTimestampMs == rhs.creationTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasTeam == rhs.hasTeam) && (!lhs.hasTeam || lhs.team == rhs.team)
  fieldCheck = fieldCheck && (lhs.tutorialState == rhs.tutorialState)
  fieldCheck = fieldCheck && (lhs.hasAvatar == rhs.hasAvatar) && (!lhs.hasAvatar || lhs.avatar == rhs.avatar)
  fieldCheck = fieldCheck && (lhs.hasMaxPokemonStorage == rhs.hasMaxPokemonStorage) && (!lhs.hasMaxPokemonStorage || lhs.maxPokemonStorage == rhs.maxPokemonStorage)
  fieldCheck = fieldCheck && (lhs.hasMaxItemStorage == rhs.hasMaxItemStorage) && (!lhs.hasMaxItemStorage || lhs.maxItemStorage == rhs.maxItemStorage)
  fieldCheck = fieldCheck && (lhs.hasDailyBonus == rhs.hasDailyBonus) && (!lhs.hasDailyBonus || lhs.dailyBonus == rhs.dailyBonus)
  fieldCheck = fieldCheck && (lhs.hasEquippedBadge == rhs.hasEquippedBadge) && (!lhs.hasEquippedBadge || lhs.equippedBadge == rhs.equippedBadge)
  fieldCheck = fieldCheck && (lhs.hasContactSettings == rhs.hasContactSettings) && (!lhs.hasContactSettings || lhs.contactSettings == rhs.contactSettings)
  fieldCheck = fieldCheck && (lhs.currencies == rhs.currencies)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Data.PokedexEntry, rhs: Pogoprotos.Data.PokedexEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasTimesEncountered == rhs.hasTimesEncountered) && (!lhs.hasTimesEncountered || lhs.timesEncountered == rhs.timesEncountered)
  fieldCheck = fieldCheck && (lhs.hasTimesCaptured == rhs.hasTimesCaptured) && (!lhs.hasTimesCaptured || lhs.timesCaptured == rhs.timesCaptured)
  fieldCheck = fieldCheck && (lhs.hasEvolutionStonePieces == rhs.hasEvolutionStonePieces) && (!lhs.hasEvolutionStonePieces || lhs.evolutionStonePieces == rhs.evolutionStonePieces)
  fieldCheck = fieldCheck && (lhs.hasEvolutionStones == rhs.hasEvolutionStones) && (!lhs.hasEvolutionStones || lhs.evolutionStones == rhs.evolutionStones)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Data.PokemonData, rhs: Pogoprotos.Data.PokemonData) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasCp == rhs.hasCp) && (!lhs.hasCp || lhs.cp == rhs.cp)
  fieldCheck = fieldCheck && (lhs.hasStamina == rhs.hasStamina) && (!lhs.hasStamina || lhs.stamina == rhs.stamina)
  fieldCheck = fieldCheck && (lhs.hasStaminaMax == rhs.hasStaminaMax) && (!lhs.hasStaminaMax || lhs.staminaMax == rhs.staminaMax)
  fieldCheck = fieldCheck && (lhs.hasMove1 == rhs.hasMove1) && (!lhs.hasMove1 || lhs.move1 == rhs.move1)
  fieldCheck = fieldCheck && (lhs.hasMove2 == rhs.hasMove2) && (!lhs.hasMove2 || lhs.move2 == rhs.move2)
  fieldCheck = fieldCheck && (lhs.hasDeployedFortId == rhs.hasDeployedFortId) && (!lhs.hasDeployedFortId || lhs.deployedFortId == rhs.deployedFortId)
  fieldCheck = fieldCheck && (lhs.hasOwnerName == rhs.hasOwnerName) && (!lhs.hasOwnerName || lhs.ownerName == rhs.ownerName)
  fieldCheck = fieldCheck && (lhs.hasIsEgg == rhs.hasIsEgg) && (!lhs.hasIsEgg || lhs.isEgg == rhs.isEgg)
  fieldCheck = fieldCheck && (lhs.hasEggKmWalkedTarget == rhs.hasEggKmWalkedTarget) && (!lhs.hasEggKmWalkedTarget || lhs.eggKmWalkedTarget == rhs.eggKmWalkedTarget)
  fieldCheck = fieldCheck && (lhs.hasEggKmWalkedStart == rhs.hasEggKmWalkedStart) && (!lhs.hasEggKmWalkedStart || lhs.eggKmWalkedStart == rhs.eggKmWalkedStart)
  fieldCheck = fieldCheck && (lhs.hasOrigin == rhs.hasOrigin) && (!lhs.hasOrigin || lhs.origin == rhs.origin)
  fieldCheck = fieldCheck && (lhs.hasHeightM == rhs.hasHeightM) && (!lhs.hasHeightM || lhs.heightM == rhs.heightM)
  fieldCheck = fieldCheck && (lhs.hasWeightKg == rhs.hasWeightKg) && (!lhs.hasWeightKg || lhs.weightKg == rhs.weightKg)
  fieldCheck = fieldCheck && (lhs.hasIndividualAttack == rhs.hasIndividualAttack) && (!lhs.hasIndividualAttack || lhs.individualAttack == rhs.individualAttack)
  fieldCheck = fieldCheck && (lhs.hasIndividualDefense == rhs.hasIndividualDefense) && (!lhs.hasIndividualDefense || lhs.individualDefense == rhs.individualDefense)
  fieldCheck = fieldCheck && (lhs.hasIndividualStamina == rhs.hasIndividualStamina) && (!lhs.hasIndividualStamina || lhs.individualStamina == rhs.individualStamina)
  fieldCheck = fieldCheck && (lhs.hasCpMultiplier == rhs.hasCpMultiplier) && (!lhs.hasCpMultiplier || lhs.cpMultiplier == rhs.cpMultiplier)
  fieldCheck = fieldCheck && (lhs.hasPokeball == rhs.hasPokeball) && (!lhs.hasPokeball || lhs.pokeball == rhs.pokeball)
  fieldCheck = fieldCheck && (lhs.hasCapturedCellId == rhs.hasCapturedCellId) && (!lhs.hasCapturedCellId || lhs.capturedCellId == rhs.capturedCellId)
  fieldCheck = fieldCheck && (lhs.hasBattlesAttacked == rhs.hasBattlesAttacked) && (!lhs.hasBattlesAttacked || lhs.battlesAttacked == rhs.battlesAttacked)
  fieldCheck = fieldCheck && (lhs.hasBattlesDefended == rhs.hasBattlesDefended) && (!lhs.hasBattlesDefended || lhs.battlesDefended == rhs.battlesDefended)
  fieldCheck = fieldCheck && (lhs.hasEggIncubatorId == rhs.hasEggIncubatorId) && (!lhs.hasEggIncubatorId || lhs.eggIncubatorId == rhs.eggIncubatorId)
  fieldCheck = fieldCheck && (lhs.hasCreationTimeMs == rhs.hasCreationTimeMs) && (!lhs.hasCreationTimeMs || lhs.creationTimeMs == rhs.creationTimeMs)
  fieldCheck = fieldCheck && (lhs.hasNumUpgrades == rhs.hasNumUpgrades) && (!lhs.hasNumUpgrades || lhs.numUpgrades == rhs.numUpgrades)
  fieldCheck = fieldCheck && (lhs.hasAdditionalCpMultiplier == rhs.hasAdditionalCpMultiplier) && (!lhs.hasAdditionalCpMultiplier || lhs.additionalCpMultiplier == rhs.additionalCpMultiplier)
  fieldCheck = fieldCheck && (lhs.hasFavorite == rhs.hasFavorite) && (!lhs.hasFavorite || lhs.favorite == rhs.favorite)
  fieldCheck = fieldCheck && (lhs.hasNickname == rhs.hasNickname) && (!lhs.hasNickname || lhs.nickname == rhs.nickname)
  fieldCheck = fieldCheck && (lhs.hasFromFort == rhs.hasFromFort) && (!lhs.hasFromFort || lhs.fromFort == rhs.fromFort)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Data {
  public struct PogoprotosDataRoot {
    public static var sharedInstance : PogoprotosDataRoot {
     struct Static {
         static let instance : PogoprotosDataRoot = PogoprotosDataRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.PogoprotosInventoryItemRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AssetDigestEntry : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasAssetId:Bool = false
    public private(set) var assetId:String = ""

    public private(set) var hasBundleName:Bool = false
    public private(set) var bundleName:String = ""

    public private(set) var hasVersion:Bool = false
    public private(set) var version:Int64 = Int64(0)

    public private(set) var hasChecksum:Bool = false
    public private(set) var checksum:UInt32 = UInt32(0)

    public private(set) var hasSize:Bool = false
    public private(set) var size:Int32 = Int32(0)

    public private(set) var hasKey:Bool = false
    public private(set) var key:NSData = NSData()

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasAssetId {
        try output.writeString(1, value:assetId)
      }
      if hasBundleName {
        try output.writeString(2, value:bundleName)
      }
      if hasVersion {
        try output.writeInt64(3, value:version)
      }
      if hasChecksum {
        try output.writeFixed32(4, value:checksum)
      }
      if hasSize {
        try output.writeInt32(5, value:size)
      }
      if hasKey {
        try output.writeData(6, value:key)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAssetId {
        serialize_size += assetId.computeStringSize(1)
      }
      if hasBundleName {
        serialize_size += bundleName.computeStringSize(2)
      }
      if hasVersion {
        serialize_size += version.computeInt64Size(3)
      }
      if hasChecksum {
        serialize_size += checksum.computeFixed32Size(4)
      }
      if hasSize {
        serialize_size += size.computeInt32Size(5)
      }
      if hasKey {
        serialize_size += key.computeDataSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.AssetDigestEntry> {
      var mergedArray = Array<Pogoprotos.Data.AssetDigestEntry>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.AssetDigestEntry? {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.AssetDigestEntry.Builder {
      return Pogoprotos.Data.AssetDigestEntry.classBuilder() as! Pogoprotos.Data.AssetDigestEntry.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.AssetDigestEntry.Builder {
      return classBuilder() as! Pogoprotos.Data.AssetDigestEntry.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.AssetDigestEntry.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.AssetDigestEntry.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
      return try Pogoprotos.Data.AssetDigestEntry.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.AssetDigestEntry) throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
      return try Pogoprotos.Data.AssetDigestEntry.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasAssetId {
        jsonMap["assetId"] = assetId
      }
      if hasBundleName {
        jsonMap["bundleName"] = bundleName
      }
      if hasVersion {
        jsonMap["version"] = "\(version)"
      }
      if hasChecksum {
        jsonMap["checksum"] = NSNumber(unsignedInt:checksum)
      }
      if hasSize {
        jsonMap["size"] = NSNumber(int:size)
      }
      if hasKey {
        jsonMap["key"] = key.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.AssetDigestEntry {
      return try Pogoprotos.Data.AssetDigestEntry.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasAssetId {
        output += "\(indent) assetId: \(assetId) \n"
      }
      if hasBundleName {
        output += "\(indent) bundleName: \(bundleName) \n"
      }
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasChecksum {
        output += "\(indent) checksum: \(checksum) \n"
      }
      if hasSize {
        output += "\(indent) size: \(size) \n"
      }
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAssetId {
               hashCode = (hashCode &* 31) &+ assetId.hashValue
            }
            if hasBundleName {
               hashCode = (hashCode &* 31) &+ bundleName.hashValue
            }
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasChecksum {
               hashCode = (hashCode &* 31) &+ checksum.hashValue
            }
            if hasSize {
               hashCode = (hashCode &* 31) &+ size.hashValue
            }
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.AssetDigestEntry"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.AssetDigestEntry"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.AssetDigestEntry.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.AssetDigestEntry = Pogoprotos.Data.AssetDigestEntry()
      public func getMessage() -> Pogoprotos.Data.AssetDigestEntry {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasAssetId:Bool {
           get {
                return builderResult.hasAssetId
           }
      }
      public var assetId:String {
           get {
                return builderResult.assetId
           }
           set (value) {
               builderResult.hasAssetId = true
               builderResult.assetId = value
           }
      }
      public func setAssetId(value:String) -> Pogoprotos.Data.AssetDigestEntry.Builder {
        self.assetId = value
        return self
      }
      public func clearAssetId() -> Pogoprotos.Data.AssetDigestEntry.Builder{
           builderResult.hasAssetId = false
           builderResult.assetId = ""
           return self
      }
      public var hasBundleName:Bool {
           get {
                return builderResult.hasBundleName
           }
      }
      public var bundleName:String {
           get {
                return builderResult.bundleName
           }
           set (value) {
               builderResult.hasBundleName = true
               builderResult.bundleName = value
           }
      }
      public func setBundleName(value:String) -> Pogoprotos.Data.AssetDigestEntry.Builder {
        self.bundleName = value
        return self
      }
      public func clearBundleName() -> Pogoprotos.Data.AssetDigestEntry.Builder{
           builderResult.hasBundleName = false
           builderResult.bundleName = ""
           return self
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:Int64 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:Int64) -> Pogoprotos.Data.AssetDigestEntry.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Pogoprotos.Data.AssetDigestEntry.Builder{
           builderResult.hasVersion = false
           builderResult.version = Int64(0)
           return self
      }
      public var hasChecksum:Bool {
           get {
                return builderResult.hasChecksum
           }
      }
      public var checksum:UInt32 {
           get {
                return builderResult.checksum
           }
           set (value) {
               builderResult.hasChecksum = true
               builderResult.checksum = value
           }
      }
      public func setChecksum(value:UInt32) -> Pogoprotos.Data.AssetDigestEntry.Builder {
        self.checksum = value
        return self
      }
      public func clearChecksum() -> Pogoprotos.Data.AssetDigestEntry.Builder{
           builderResult.hasChecksum = false
           builderResult.checksum = UInt32(0)
           return self
      }
      public var hasSize:Bool {
           get {
                return builderResult.hasSize
           }
      }
      public var size:Int32 {
           get {
                return builderResult.size
           }
           set (value) {
               builderResult.hasSize = true
               builderResult.size = value
           }
      }
      public func setSize(value:Int32) -> Pogoprotos.Data.AssetDigestEntry.Builder {
        self.size = value
        return self
      }
      public func clearSize() -> Pogoprotos.Data.AssetDigestEntry.Builder{
           builderResult.hasSize = false
           builderResult.size = Int32(0)
           return self
      }
      public var hasKey:Bool {
           get {
                return builderResult.hasKey
           }
      }
      public var key:NSData {
           get {
                return builderResult.key
           }
           set (value) {
               builderResult.hasKey = true
               builderResult.key = value
           }
      }
      public func setKey(value:NSData) -> Pogoprotos.Data.AssetDigestEntry.Builder {
        self.key = value
        return self
      }
      public func clearKey() -> Pogoprotos.Data.AssetDigestEntry.Builder{
           builderResult.hasKey = false
           builderResult.key = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.AssetDigestEntry.Builder {
        builderResult = Pogoprotos.Data.AssetDigestEntry()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
        return try Pogoprotos.Data.AssetDigestEntry.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.AssetDigestEntry {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.AssetDigestEntry {
        let returnMe:Pogoprotos.Data.AssetDigestEntry = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.AssetDigestEntry) throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
        if other == Pogoprotos.Data.AssetDigestEntry() {
         return self
        }
        if other.hasAssetId {
             assetId = other.assetId
        }
        if other.hasBundleName {
             bundleName = other.bundleName
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasChecksum {
             checksum = other.checksum
        }
        if other.hasSize {
             size = other.size
        }
        if other.hasKey {
             key = other.key
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            assetId = try input.readString()

          case 18:
            bundleName = try input.readString()

          case 24:
            version = try input.readInt64()

          case 37:
            checksum = try input.readFixed32()

          case 40:
            size = try input.readInt32()

          case 50:
            key = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.AssetDigestEntry.Builder()
        if let jsonValueAssetId = jsonMap["assetId"] as? String {
          resultDecodedBuilder.assetId = jsonValueAssetId
        }
        if let jsonValueBundleName = jsonMap["bundleName"] as? String {
          resultDecodedBuilder.bundleName = jsonValueBundleName
        }
        if let jsonValueVersion = jsonMap["version"] as? String {
          resultDecodedBuilder.version = Int64(jsonValueVersion)!
        }
        if let jsonValueChecksum = jsonMap["checksum"] as? NSNumber {
          resultDecodedBuilder.checksum = jsonValueChecksum.unsignedIntValue
        }
        if let jsonValueSize = jsonMap["size"] as? NSNumber {
          resultDecodedBuilder.size = jsonValueSize.intValue
        }
        if let jsonValueKey = jsonMap["key"] as? String {
          resultDecodedBuilder.key = NSData(base64EncodedString:jsonValueKey, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.AssetDigestEntry.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.AssetDigestEntry.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class DownloadUrlEntry : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasAssetId:Bool = false
    public private(set) var assetId:String = ""

    public private(set) var hasUrl:Bool = false
    public private(set) var url:String = ""

    public private(set) var hasSize:Bool = false
    public private(set) var size:Int32 = Int32(0)

    public private(set) var hasChecksum:Bool = false
    public private(set) var checksum:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasAssetId {
        try output.writeString(1, value:assetId)
      }
      if hasUrl {
        try output.writeString(2, value:url)
      }
      if hasSize {
        try output.writeInt32(3, value:size)
      }
      if hasChecksum {
        try output.writeFixed32(4, value:checksum)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasAssetId {
        serialize_size += assetId.computeStringSize(1)
      }
      if hasUrl {
        serialize_size += url.computeStringSize(2)
      }
      if hasSize {
        serialize_size += size.computeInt32Size(3)
      }
      if hasChecksum {
        serialize_size += checksum.computeFixed32Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.DownloadUrlEntry> {
      var mergedArray = Array<Pogoprotos.Data.DownloadUrlEntry>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.DownloadUrlEntry? {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.DownloadUrlEntry.Builder {
      return Pogoprotos.Data.DownloadUrlEntry.classBuilder() as! Pogoprotos.Data.DownloadUrlEntry.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.DownloadUrlEntry.Builder {
      return classBuilder() as! Pogoprotos.Data.DownloadUrlEntry.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.DownloadUrlEntry.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.DownloadUrlEntry.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
      return try Pogoprotos.Data.DownloadUrlEntry.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.DownloadUrlEntry) throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasAssetId {
        jsonMap["assetId"] = assetId
      }
      if hasUrl {
        jsonMap["url"] = url
      }
      if hasSize {
        jsonMap["size"] = NSNumber(int:size)
      }
      if hasChecksum {
        jsonMap["checksum"] = NSNumber(unsignedInt:checksum)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.DownloadUrlEntry {
      return try Pogoprotos.Data.DownloadUrlEntry.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasAssetId {
        output += "\(indent) assetId: \(assetId) \n"
      }
      if hasUrl {
        output += "\(indent) url: \(url) \n"
      }
      if hasSize {
        output += "\(indent) size: \(size) \n"
      }
      if hasChecksum {
        output += "\(indent) checksum: \(checksum) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasAssetId {
               hashCode = (hashCode &* 31) &+ assetId.hashValue
            }
            if hasUrl {
               hashCode = (hashCode &* 31) &+ url.hashValue
            }
            if hasSize {
               hashCode = (hashCode &* 31) &+ size.hashValue
            }
            if hasChecksum {
               hashCode = (hashCode &* 31) &+ checksum.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.DownloadUrlEntry"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.DownloadUrlEntry"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.DownloadUrlEntry.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.DownloadUrlEntry = Pogoprotos.Data.DownloadUrlEntry()
      public func getMessage() -> Pogoprotos.Data.DownloadUrlEntry {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasAssetId:Bool {
           get {
                return builderResult.hasAssetId
           }
      }
      public var assetId:String {
           get {
                return builderResult.assetId
           }
           set (value) {
               builderResult.hasAssetId = true
               builderResult.assetId = value
           }
      }
      public func setAssetId(value:String) -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        self.assetId = value
        return self
      }
      public func clearAssetId() -> Pogoprotos.Data.DownloadUrlEntry.Builder{
           builderResult.hasAssetId = false
           builderResult.assetId = ""
           return self
      }
      public var hasUrl:Bool {
           get {
                return builderResult.hasUrl
           }
      }
      public var url:String {
           get {
                return builderResult.url
           }
           set (value) {
               builderResult.hasUrl = true
               builderResult.url = value
           }
      }
      public func setUrl(value:String) -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        self.url = value
        return self
      }
      public func clearUrl() -> Pogoprotos.Data.DownloadUrlEntry.Builder{
           builderResult.hasUrl = false
           builderResult.url = ""
           return self
      }
      public var hasSize:Bool {
           get {
                return builderResult.hasSize
           }
      }
      public var size:Int32 {
           get {
                return builderResult.size
           }
           set (value) {
               builderResult.hasSize = true
               builderResult.size = value
           }
      }
      public func setSize(value:Int32) -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        self.size = value
        return self
      }
      public func clearSize() -> Pogoprotos.Data.DownloadUrlEntry.Builder{
           builderResult.hasSize = false
           builderResult.size = Int32(0)
           return self
      }
      public var hasChecksum:Bool {
           get {
                return builderResult.hasChecksum
           }
      }
      public var checksum:UInt32 {
           get {
                return builderResult.checksum
           }
           set (value) {
               builderResult.hasChecksum = true
               builderResult.checksum = value
           }
      }
      public func setChecksum(value:UInt32) -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        self.checksum = value
        return self
      }
      public func clearChecksum() -> Pogoprotos.Data.DownloadUrlEntry.Builder{
           builderResult.hasChecksum = false
           builderResult.checksum = UInt32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        builderResult = Pogoprotos.Data.DownloadUrlEntry()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        return try Pogoprotos.Data.DownloadUrlEntry.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.DownloadUrlEntry {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.DownloadUrlEntry {
        let returnMe:Pogoprotos.Data.DownloadUrlEntry = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.DownloadUrlEntry) throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        if other == Pogoprotos.Data.DownloadUrlEntry() {
         return self
        }
        if other.hasAssetId {
             assetId = other.assetId
        }
        if other.hasUrl {
             url = other.url
        }
        if other.hasSize {
             size = other.size
        }
        if other.hasChecksum {
             checksum = other.checksum
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            assetId = try input.readString()

          case 18:
            url = try input.readString()

          case 24:
            size = try input.readInt32()

          case 37:
            checksum = try input.readFixed32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.DownloadUrlEntry.Builder()
        if let jsonValueAssetId = jsonMap["assetId"] as? String {
          resultDecodedBuilder.assetId = jsonValueAssetId
        }
        if let jsonValueUrl = jsonMap["url"] as? String {
          resultDecodedBuilder.url = jsonValueUrl
        }
        if let jsonValueSize = jsonMap["size"] as? NSNumber {
          resultDecodedBuilder.size = jsonValueSize.intValue
        }
        if let jsonValueChecksum = jsonMap["checksum"] as? NSNumber {
          resultDecodedBuilder.checksum = jsonValueChecksum.unsignedIntValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.DownloadUrlEntry.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.DownloadUrlEntry.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PlayerBadge : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var badgeType:Pogoprotos.Enums.BadgeType = Pogoprotos.Enums.BadgeType.BadgeUnset
    public private(set) var hasBadgeType:Bool = false
    public private(set) var hasRank:Bool = false
    public private(set) var rank:Int32 = Int32(0)

    public private(set) var hasStartValue:Bool = false
    public private(set) var startValue:Int32 = Int32(0)

    public private(set) var hasEndValue:Bool = false
    public private(set) var endValue:Int32 = Int32(0)

    public private(set) var hasCurrentValue:Bool = false
    public private(set) var currentValue:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasBadgeType {
        try output.writeEnum(1, value:badgeType.rawValue)
      }
      if hasRank {
        try output.writeInt32(2, value:rank)
      }
      if hasStartValue {
        try output.writeInt32(3, value:startValue)
      }
      if hasEndValue {
        try output.writeInt32(4, value:endValue)
      }
      if hasCurrentValue {
        try output.writeDouble(5, value:currentValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasBadgeType) {
        serialize_size += badgeType.rawValue.computeEnumSize(1)
      }
      if hasRank {
        serialize_size += rank.computeInt32Size(2)
      }
      if hasStartValue {
        serialize_size += startValue.computeInt32Size(3)
      }
      if hasEndValue {
        serialize_size += endValue.computeInt32Size(4)
      }
      if hasCurrentValue {
        serialize_size += currentValue.computeDoubleSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.PlayerBadge> {
      var mergedArray = Array<Pogoprotos.Data.PlayerBadge>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerBadge? {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.PlayerBadge.Builder {
      return Pogoprotos.Data.PlayerBadge.classBuilder() as! Pogoprotos.Data.PlayerBadge.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.PlayerBadge.Builder {
      return classBuilder() as! Pogoprotos.Data.PlayerBadge.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerBadge.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerBadge.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.PlayerBadge.Builder {
      return try Pogoprotos.Data.PlayerBadge.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.PlayerBadge) throws -> Pogoprotos.Data.PlayerBadge.Builder {
      return try Pogoprotos.Data.PlayerBadge.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasBadgeType {
        jsonMap["badgeType"] = badgeType.toString()
      }
      if hasRank {
        jsonMap["rank"] = NSNumber(int:rank)
      }
      if hasStartValue {
        jsonMap["startValue"] = NSNumber(int:startValue)
      }
      if hasEndValue {
        jsonMap["endValue"] = NSNumber(int:endValue)
      }
      if hasCurrentValue {
        jsonMap["currentValue"] = NSNumber(double:currentValue)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.PlayerBadge {
      return try Pogoprotos.Data.PlayerBadge.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasBadgeType) {
        output += "\(indent) badgeType: \(badgeType.description)\n"
      }
      if hasRank {
        output += "\(indent) rank: \(rank) \n"
      }
      if hasStartValue {
        output += "\(indent) startValue: \(startValue) \n"
      }
      if hasEndValue {
        output += "\(indent) endValue: \(endValue) \n"
      }
      if hasCurrentValue {
        output += "\(indent) currentValue: \(currentValue) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBadgeType {
               hashCode = (hashCode &* 31) &+ Int(badgeType.rawValue)
            }
            if hasRank {
               hashCode = (hashCode &* 31) &+ rank.hashValue
            }
            if hasStartValue {
               hashCode = (hashCode &* 31) &+ startValue.hashValue
            }
            if hasEndValue {
               hashCode = (hashCode &* 31) &+ endValue.hashValue
            }
            if hasCurrentValue {
               hashCode = (hashCode &* 31) &+ currentValue.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.PlayerBadge"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.PlayerBadge"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.PlayerBadge.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.PlayerBadge = Pogoprotos.Data.PlayerBadge()
      public func getMessage() -> Pogoprotos.Data.PlayerBadge {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasBadgeType:Bool{
            get {
                return builderResult.hasBadgeType
            }
        }
        public var badgeType:Pogoprotos.Enums.BadgeType {
            get {
                return builderResult.badgeType
            }
            set (value) {
                builderResult.hasBadgeType = true
                builderResult.badgeType = value
            }
        }
        public func setBadgeType(value:Pogoprotos.Enums.BadgeType) -> Pogoprotos.Data.PlayerBadge.Builder {
          self.badgeType = value
          return self
        }
        public func clearBadgeType() -> Pogoprotos.Data.PlayerBadge.Builder {
           builderResult.hasBadgeType = false
           builderResult.badgeType = .BadgeUnset
           return self
        }
      public var hasRank:Bool {
           get {
                return builderResult.hasRank
           }
      }
      public var rank:Int32 {
           get {
                return builderResult.rank
           }
           set (value) {
               builderResult.hasRank = true
               builderResult.rank = value
           }
      }
      public func setRank(value:Int32) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.rank = value
        return self
      }
      public func clearRank() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasRank = false
           builderResult.rank = Int32(0)
           return self
      }
      public var hasStartValue:Bool {
           get {
                return builderResult.hasStartValue
           }
      }
      public var startValue:Int32 {
           get {
                return builderResult.startValue
           }
           set (value) {
               builderResult.hasStartValue = true
               builderResult.startValue = value
           }
      }
      public func setStartValue(value:Int32) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.startValue = value
        return self
      }
      public func clearStartValue() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasStartValue = false
           builderResult.startValue = Int32(0)
           return self
      }
      public var hasEndValue:Bool {
           get {
                return builderResult.hasEndValue
           }
      }
      public var endValue:Int32 {
           get {
                return builderResult.endValue
           }
           set (value) {
               builderResult.hasEndValue = true
               builderResult.endValue = value
           }
      }
      public func setEndValue(value:Int32) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.endValue = value
        return self
      }
      public func clearEndValue() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasEndValue = false
           builderResult.endValue = Int32(0)
           return self
      }
      public var hasCurrentValue:Bool {
           get {
                return builderResult.hasCurrentValue
           }
      }
      public var currentValue:Double {
           get {
                return builderResult.currentValue
           }
           set (value) {
               builderResult.hasCurrentValue = true
               builderResult.currentValue = value
           }
      }
      public func setCurrentValue(value:Double) -> Pogoprotos.Data.PlayerBadge.Builder {
        self.currentValue = value
        return self
      }
      public func clearCurrentValue() -> Pogoprotos.Data.PlayerBadge.Builder{
           builderResult.hasCurrentValue = false
           builderResult.currentValue = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.PlayerBadge.Builder {
        builderResult = Pogoprotos.Data.PlayerBadge()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.PlayerBadge.Builder {
        return try Pogoprotos.Data.PlayerBadge.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.PlayerBadge {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.PlayerBadge {
        let returnMe:Pogoprotos.Data.PlayerBadge = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.PlayerBadge) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        if other == Pogoprotos.Data.PlayerBadge() {
         return self
        }
        if other.hasBadgeType {
             badgeType = other.badgeType
        }
        if other.hasRank {
             rank = other.rank
        }
        if other.hasStartValue {
             startValue = other.startValue
        }
        if other.hasEndValue {
             endValue = other.endValue
        }
        if other.hasCurrentValue {
             currentValue = other.currentValue
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerBadge.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntbadgeType = try input.readEnum()
            if let enumsbadgeType = Pogoprotos.Enums.BadgeType(rawValue:valueIntbadgeType){
                 badgeType = enumsbadgeType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbadgeType))
            }

          case 16:
            rank = try input.readInt32()

          case 24:
            startValue = try input.readInt32()

          case 32:
            endValue = try input.readInt32()

          case 41:
            currentValue = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.PlayerBadge.Builder()
        if let jsonValueBadgeType = jsonMap["badgeType"] as? String {
          resultDecodedBuilder.badgeType = try Pogoprotos.Enums.BadgeType.fromString(jsonValueBadgeType)
        }
        if let jsonValueRank = jsonMap["rank"] as? NSNumber {
          resultDecodedBuilder.rank = jsonValueRank.intValue
        }
        if let jsonValueStartValue = jsonMap["startValue"] as? NSNumber {
          resultDecodedBuilder.startValue = jsonValueStartValue.intValue
        }
        if let jsonValueEndValue = jsonMap["endValue"] as? NSNumber {
          resultDecodedBuilder.endValue = jsonValueEndValue.intValue
        }
        if let jsonValueCurrentValue = jsonMap["currentValue"] as? NSNumber {
          resultDecodedBuilder.currentValue = jsonValueCurrentValue.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.PlayerBadge.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.PlayerBadge.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PlayerData : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasCreationTimestampMs:Bool = false
    public private(set) var creationTimestampMs:Int64 = Int64(0)

    public private(set) var hasUsername:Bool = false
    public private(set) var username:String = ""

    public private(set) var team:Pogoprotos.Enums.TeamColor = Pogoprotos.Enums.TeamColor.Neutral
    public private(set) var hasTeam:Bool = false
    private var tutorialStateMemoizedSerializedSize:Int32 = 0
    public private(set) var tutorialState:Array<Pogoprotos.Enums.TutorialState> = Array<Pogoprotos.Enums.TutorialState>()
    public private(set) var hasAvatar:Bool = false
    public private(set) var avatar:Pogoprotos.Data.Player.PlayerAvatar!
    public private(set) var hasMaxPokemonStorage:Bool = false
    public private(set) var maxPokemonStorage:Int32 = Int32(0)

    public private(set) var hasMaxItemStorage:Bool = false
    public private(set) var maxItemStorage:Int32 = Int32(0)

    public private(set) var hasDailyBonus:Bool = false
    public private(set) var dailyBonus:Pogoprotos.Data.Player.DailyBonus!
    public private(set) var hasEquippedBadge:Bool = false
    public private(set) var equippedBadge:Pogoprotos.Data.Player.EquippedBadge!
    public private(set) var hasContactSettings:Bool = false
    public private(set) var contactSettings:Pogoprotos.Data.Player.ContactSettings!
    public private(set) var currencies:Array<Pogoprotos.Data.Player.Currency>  = Array<Pogoprotos.Data.Player.Currency>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCreationTimestampMs {
        try output.writeInt64(1, value:creationTimestampMs)
      }
      if hasUsername {
        try output.writeString(2, value:username)
      }
      if hasTeam {
        try output.writeEnum(5, value:team.rawValue)
      }
      if !tutorialState.isEmpty {
        try output.writeRawVarint32(58)
        try output.writeRawVarint32(tutorialStateMemoizedSerializedSize)
      }
      for oneValueOftutorialState in tutorialState {
          try output.writeEnumNoTag(oneValueOftutorialState.rawValue)
      }
      if hasAvatar {
        try output.writeMessage(8, value:avatar)
      }
      if hasMaxPokemonStorage {
        try output.writeInt32(9, value:maxPokemonStorage)
      }
      if hasMaxItemStorage {
        try output.writeInt32(10, value:maxItemStorage)
      }
      if hasDailyBonus {
        try output.writeMessage(11, value:dailyBonus)
      }
      if hasEquippedBadge {
        try output.writeMessage(12, value:equippedBadge)
      }
      if hasContactSettings {
        try output.writeMessage(13, value:contactSettings)
      }
      for oneElementCurrencies in currencies {
          try output.writeMessage(14, value:oneElementCurrencies)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCreationTimestampMs {
        serialize_size += creationTimestampMs.computeInt64Size(1)
      }
      if hasUsername {
        serialize_size += username.computeStringSize(2)
      }
      if (hasTeam) {
        serialize_size += team.rawValue.computeEnumSize(5)
      }
      var dataSizetutorialState:Int32 = 0
      for oneValueOftutorialState in tutorialState {
          dataSizetutorialState += oneValueOftutorialState.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizetutorialState
      if !tutorialState.isEmpty {
        serialize_size += 1
        serialize_size += dataSizetutorialState.computeRawVarint32Size()
      }
      tutorialStateMemoizedSerializedSize = dataSizetutorialState
      if hasAvatar {
          if let varSizeavatar = avatar?.computeMessageSize(8) {
              serialize_size += varSizeavatar
          }
      }
      if hasMaxPokemonStorage {
        serialize_size += maxPokemonStorage.computeInt32Size(9)
      }
      if hasMaxItemStorage {
        serialize_size += maxItemStorage.computeInt32Size(10)
      }
      if hasDailyBonus {
          if let varSizedailyBonus = dailyBonus?.computeMessageSize(11) {
              serialize_size += varSizedailyBonus
          }
      }
      if hasEquippedBadge {
          if let varSizeequippedBadge = equippedBadge?.computeMessageSize(12) {
              serialize_size += varSizeequippedBadge
          }
      }
      if hasContactSettings {
          if let varSizecontactSettings = contactSettings?.computeMessageSize(13) {
              serialize_size += varSizecontactSettings
          }
      }
      for oneElementCurrencies in currencies {
          serialize_size += oneElementCurrencies.computeMessageSize(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.PlayerData> {
      var mergedArray = Array<Pogoprotos.Data.PlayerData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerData? {
      return try Pogoprotos.Data.PlayerData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.PlayerData.Builder {
      return Pogoprotos.Data.PlayerData.classBuilder() as! Pogoprotos.Data.PlayerData.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.PlayerData.Builder {
      return classBuilder() as! Pogoprotos.Data.PlayerData.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerData.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PlayerData.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.PlayerData.Builder {
      return try Pogoprotos.Data.PlayerData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.PlayerData) throws -> Pogoprotos.Data.PlayerData.Builder {
      return try Pogoprotos.Data.PlayerData.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasCreationTimestampMs {
        jsonMap["creationTimestampMs"] = "\(creationTimestampMs)"
      }
      if hasUsername {
        jsonMap["username"] = username
      }
      if hasTeam {
        jsonMap["team"] = team.toString()
      }
      if !tutorialState.isEmpty {
        var jsonArrayTutorialState:Array<String> = []
          for oneValueTutorialState in tutorialState {
            jsonArrayTutorialState += [oneValueTutorialState.toString()]
          }
        jsonMap["tutorialState"] = jsonArrayTutorialState
      }
      if hasAvatar {
        jsonMap["avatar"] = try avatar.encode()
      }
      if hasMaxPokemonStorage {
        jsonMap["maxPokemonStorage"] = NSNumber(int:maxPokemonStorage)
      }
      if hasMaxItemStorage {
        jsonMap["maxItemStorage"] = NSNumber(int:maxItemStorage)
      }
      if hasDailyBonus {
        jsonMap["dailyBonus"] = try dailyBonus.encode()
      }
      if hasEquippedBadge {
        jsonMap["equippedBadge"] = try equippedBadge.encode()
      }
      if hasContactSettings {
        jsonMap["contactSettings"] = try contactSettings.encode()
      }
      if !currencies.isEmpty {
        var jsonArrayCurrencies:Array<Dictionary<String,AnyObject>> = []
          for oneValueCurrencies in currencies {
            let ecodedMessageCurrencies = try oneValueCurrencies.encode()
            jsonArrayCurrencies += [ecodedMessageCurrencies]
          }
        jsonMap["currencies"] = jsonArrayCurrencies
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.PlayerData {
      return try Pogoprotos.Data.PlayerData.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasCreationTimestampMs {
        output += "\(indent) creationTimestampMs: \(creationTimestampMs) \n"
      }
      if hasUsername {
        output += "\(indent) username: \(username) \n"
      }
      if (hasTeam) {
        output += "\(indent) team: \(team.description)\n"
      }
      var tutorialStateElementIndex:Int = 0
      for oneValueOftutorialState in tutorialState {
          output += "\(indent) tutorialState[\(tutorialStateElementIndex)]: \(oneValueOftutorialState.description)\n"
          tutorialStateElementIndex += 1
      }
      if hasAvatar {
        output += "\(indent) avatar {\n"
        if let outDescAvatar = avatar {
          output += try outDescAvatar.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMaxPokemonStorage {
        output += "\(indent) maxPokemonStorage: \(maxPokemonStorage) \n"
      }
      if hasMaxItemStorage {
        output += "\(indent) maxItemStorage: \(maxItemStorage) \n"
      }
      if hasDailyBonus {
        output += "\(indent) dailyBonus {\n"
        if let outDescDailyBonus = dailyBonus {
          output += try outDescDailyBonus.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEquippedBadge {
        output += "\(indent) equippedBadge {\n"
        if let outDescEquippedBadge = equippedBadge {
          output += try outDescEquippedBadge.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasContactSettings {
        output += "\(indent) contactSettings {\n"
        if let outDescContactSettings = contactSettings {
          output += try outDescContactSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var currenciesElementIndex:Int = 0
      for oneElementCurrencies in currencies {
          output += "\(indent) currencies[\(currenciesElementIndex)] {\n"
          output += try oneElementCurrencies.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          currenciesElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCreationTimestampMs {
               hashCode = (hashCode &* 31) &+ creationTimestampMs.hashValue
            }
            if hasUsername {
               hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasTeam {
               hashCode = (hashCode &* 31) &+ Int(team.rawValue)
            }
            for oneValueOftutorialState in tutorialState {
                hashCode = (hashCode &* 31) &+ Int(oneValueOftutorialState.rawValue)
            }
            if hasAvatar {
                if let hashValueavatar = avatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueavatar
                }
            }
            if hasMaxPokemonStorage {
               hashCode = (hashCode &* 31) &+ maxPokemonStorage.hashValue
            }
            if hasMaxItemStorage {
               hashCode = (hashCode &* 31) &+ maxItemStorage.hashValue
            }
            if hasDailyBonus {
                if let hashValuedailyBonus = dailyBonus?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedailyBonus
                }
            }
            if hasEquippedBadge {
                if let hashValueequippedBadge = equippedBadge?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueequippedBadge
                }
            }
            if hasContactSettings {
                if let hashValuecontactSettings = contactSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecontactSettings
                }
            }
            for oneElementCurrencies in currencies {
                hashCode = (hashCode &* 31) &+ oneElementCurrencies.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.PlayerData"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.PlayerData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.PlayerData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.PlayerData = Pogoprotos.Data.PlayerData()
      public func getMessage() -> Pogoprotos.Data.PlayerData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCreationTimestampMs:Bool {
           get {
                return builderResult.hasCreationTimestampMs
           }
      }
      public var creationTimestampMs:Int64 {
           get {
                return builderResult.creationTimestampMs
           }
           set (value) {
               builderResult.hasCreationTimestampMs = true
               builderResult.creationTimestampMs = value
           }
      }
      public func setCreationTimestampMs(value:Int64) -> Pogoprotos.Data.PlayerData.Builder {
        self.creationTimestampMs = value
        return self
      }
      public func clearCreationTimestampMs() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasCreationTimestampMs = false
           builderResult.creationTimestampMs = Int64(0)
           return self
      }
      public var hasUsername:Bool {
           get {
                return builderResult.hasUsername
           }
      }
      public var username:String {
           get {
                return builderResult.username
           }
           set (value) {
               builderResult.hasUsername = true
               builderResult.username = value
           }
      }
      public func setUsername(value:String) -> Pogoprotos.Data.PlayerData.Builder {
        self.username = value
        return self
      }
      public func clearUsername() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasUsername = false
           builderResult.username = ""
           return self
      }
        public var hasTeam:Bool{
            get {
                return builderResult.hasTeam
            }
        }
        public var team:Pogoprotos.Enums.TeamColor {
            get {
                return builderResult.team
            }
            set (value) {
                builderResult.hasTeam = true
                builderResult.team = value
            }
        }
        public func setTeam(value:Pogoprotos.Enums.TeamColor) -> Pogoprotos.Data.PlayerData.Builder {
          self.team = value
          return self
        }
        public func clearTeam() -> Pogoprotos.Data.PlayerData.Builder {
           builderResult.hasTeam = false
           builderResult.team = .Neutral
           return self
        }
      public var tutorialState:Array<Pogoprotos.Enums.TutorialState> {
          get {
              return builderResult.tutorialState
          }
          set (value) {
              builderResult.tutorialState = value
          }
      }
      public func setTutorialState(value:Array<Pogoprotos.Enums.TutorialState>) -> Pogoprotos.Data.PlayerData.Builder {
        self.tutorialState = value
        return self
      }
      public func clearTutorialState() -> Pogoprotos.Data.PlayerData.Builder {
        builderResult.tutorialState.removeAll(keepCapacity: false)
        return self
      }
      public var hasAvatar:Bool {
           get {
               return builderResult.hasAvatar
           }
      }
      public var avatar:Pogoprotos.Data.Player.PlayerAvatar! {
           get {
               if avatarBuilder_ != nil {
                  builderResult.avatar = avatarBuilder_.getMessage()
               }
               return builderResult.avatar
           }
           set (value) {
               builderResult.hasAvatar = true
               builderResult.avatar = value
           }
      }
      private var avatarBuilder_:Pogoprotos.Data.Player.PlayerAvatar.Builder! {
           didSet {
              builderResult.hasAvatar = true
           }
      }
      public func getAvatarBuilder() -> Pogoprotos.Data.Player.PlayerAvatar.Builder {
        if avatarBuilder_ == nil {
           avatarBuilder_ = Pogoprotos.Data.Player.PlayerAvatar.Builder()
           builderResult.avatar = avatarBuilder_.getMessage()
           if avatar != nil {
              try! avatarBuilder_.mergeFrom(avatar)
           }
        }
        return avatarBuilder_
      }
      public func setAvatar(value:Pogoprotos.Data.Player.PlayerAvatar!) -> Pogoprotos.Data.PlayerData.Builder {
        self.avatar = value
        return self
      }
      public func mergeAvatar(value:Pogoprotos.Data.Player.PlayerAvatar) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasAvatar {
          builderResult.avatar = try Pogoprotos.Data.Player.PlayerAvatar.builderWithPrototype(builderResult.avatar).mergeFrom(value).buildPartial()
        } else {
          builderResult.avatar = value
        }
        builderResult.hasAvatar = true
        return self
      }
      public func clearAvatar() -> Pogoprotos.Data.PlayerData.Builder {
        avatarBuilder_ = nil
        builderResult.hasAvatar = false
        builderResult.avatar = nil
        return self
      }
      public var hasMaxPokemonStorage:Bool {
           get {
                return builderResult.hasMaxPokemonStorage
           }
      }
      public var maxPokemonStorage:Int32 {
           get {
                return builderResult.maxPokemonStorage
           }
           set (value) {
               builderResult.hasMaxPokemonStorage = true
               builderResult.maxPokemonStorage = value
           }
      }
      public func setMaxPokemonStorage(value:Int32) -> Pogoprotos.Data.PlayerData.Builder {
        self.maxPokemonStorage = value
        return self
      }
      public func clearMaxPokemonStorage() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasMaxPokemonStorage = false
           builderResult.maxPokemonStorage = Int32(0)
           return self
      }
      public var hasMaxItemStorage:Bool {
           get {
                return builderResult.hasMaxItemStorage
           }
      }
      public var maxItemStorage:Int32 {
           get {
                return builderResult.maxItemStorage
           }
           set (value) {
               builderResult.hasMaxItemStorage = true
               builderResult.maxItemStorage = value
           }
      }
      public func setMaxItemStorage(value:Int32) -> Pogoprotos.Data.PlayerData.Builder {
        self.maxItemStorage = value
        return self
      }
      public func clearMaxItemStorage() -> Pogoprotos.Data.PlayerData.Builder{
           builderResult.hasMaxItemStorage = false
           builderResult.maxItemStorage = Int32(0)
           return self
      }
      public var hasDailyBonus:Bool {
           get {
               return builderResult.hasDailyBonus
           }
      }
      public var dailyBonus:Pogoprotos.Data.Player.DailyBonus! {
           get {
               if dailyBonusBuilder_ != nil {
                  builderResult.dailyBonus = dailyBonusBuilder_.getMessage()
               }
               return builderResult.dailyBonus
           }
           set (value) {
               builderResult.hasDailyBonus = true
               builderResult.dailyBonus = value
           }
      }
      private var dailyBonusBuilder_:Pogoprotos.Data.Player.DailyBonus.Builder! {
           didSet {
              builderResult.hasDailyBonus = true
           }
      }
      public func getDailyBonusBuilder() -> Pogoprotos.Data.Player.DailyBonus.Builder {
        if dailyBonusBuilder_ == nil {
           dailyBonusBuilder_ = Pogoprotos.Data.Player.DailyBonus.Builder()
           builderResult.dailyBonus = dailyBonusBuilder_.getMessage()
           if dailyBonus != nil {
              try! dailyBonusBuilder_.mergeFrom(dailyBonus)
           }
        }
        return dailyBonusBuilder_
      }
      public func setDailyBonus(value:Pogoprotos.Data.Player.DailyBonus!) -> Pogoprotos.Data.PlayerData.Builder {
        self.dailyBonus = value
        return self
      }
      public func mergeDailyBonus(value:Pogoprotos.Data.Player.DailyBonus) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasDailyBonus {
          builderResult.dailyBonus = try Pogoprotos.Data.Player.DailyBonus.builderWithPrototype(builderResult.dailyBonus).mergeFrom(value).buildPartial()
        } else {
          builderResult.dailyBonus = value
        }
        builderResult.hasDailyBonus = true
        return self
      }
      public func clearDailyBonus() -> Pogoprotos.Data.PlayerData.Builder {
        dailyBonusBuilder_ = nil
        builderResult.hasDailyBonus = false
        builderResult.dailyBonus = nil
        return self
      }
      public var hasEquippedBadge:Bool {
           get {
               return builderResult.hasEquippedBadge
           }
      }
      public var equippedBadge:Pogoprotos.Data.Player.EquippedBadge! {
           get {
               if equippedBadgeBuilder_ != nil {
                  builderResult.equippedBadge = equippedBadgeBuilder_.getMessage()
               }
               return builderResult.equippedBadge
           }
           set (value) {
               builderResult.hasEquippedBadge = true
               builderResult.equippedBadge = value
           }
      }
      private var equippedBadgeBuilder_:Pogoprotos.Data.Player.EquippedBadge.Builder! {
           didSet {
              builderResult.hasEquippedBadge = true
           }
      }
      public func getEquippedBadgeBuilder() -> Pogoprotos.Data.Player.EquippedBadge.Builder {
        if equippedBadgeBuilder_ == nil {
           equippedBadgeBuilder_ = Pogoprotos.Data.Player.EquippedBadge.Builder()
           builderResult.equippedBadge = equippedBadgeBuilder_.getMessage()
           if equippedBadge != nil {
              try! equippedBadgeBuilder_.mergeFrom(equippedBadge)
           }
        }
        return equippedBadgeBuilder_
      }
      public func setEquippedBadge(value:Pogoprotos.Data.Player.EquippedBadge!) -> Pogoprotos.Data.PlayerData.Builder {
        self.equippedBadge = value
        return self
      }
      public func mergeEquippedBadge(value:Pogoprotos.Data.Player.EquippedBadge) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasEquippedBadge {
          builderResult.equippedBadge = try Pogoprotos.Data.Player.EquippedBadge.builderWithPrototype(builderResult.equippedBadge).mergeFrom(value).buildPartial()
        } else {
          builderResult.equippedBadge = value
        }
        builderResult.hasEquippedBadge = true
        return self
      }
      public func clearEquippedBadge() -> Pogoprotos.Data.PlayerData.Builder {
        equippedBadgeBuilder_ = nil
        builderResult.hasEquippedBadge = false
        builderResult.equippedBadge = nil
        return self
      }
      public var hasContactSettings:Bool {
           get {
               return builderResult.hasContactSettings
           }
      }
      public var contactSettings:Pogoprotos.Data.Player.ContactSettings! {
           get {
               if contactSettingsBuilder_ != nil {
                  builderResult.contactSettings = contactSettingsBuilder_.getMessage()
               }
               return builderResult.contactSettings
           }
           set (value) {
               builderResult.hasContactSettings = true
               builderResult.contactSettings = value
           }
      }
      private var contactSettingsBuilder_:Pogoprotos.Data.Player.ContactSettings.Builder! {
           didSet {
              builderResult.hasContactSettings = true
           }
      }
      public func getContactSettingsBuilder() -> Pogoprotos.Data.Player.ContactSettings.Builder {
        if contactSettingsBuilder_ == nil {
           contactSettingsBuilder_ = Pogoprotos.Data.Player.ContactSettings.Builder()
           builderResult.contactSettings = contactSettingsBuilder_.getMessage()
           if contactSettings != nil {
              try! contactSettingsBuilder_.mergeFrom(contactSettings)
           }
        }
        return contactSettingsBuilder_
      }
      public func setContactSettings(value:Pogoprotos.Data.Player.ContactSettings!) -> Pogoprotos.Data.PlayerData.Builder {
        self.contactSettings = value
        return self
      }
      public func mergeContactSettings(value:Pogoprotos.Data.Player.ContactSettings) throws -> Pogoprotos.Data.PlayerData.Builder {
        if builderResult.hasContactSettings {
          builderResult.contactSettings = try Pogoprotos.Data.Player.ContactSettings.builderWithPrototype(builderResult.contactSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.contactSettings = value
        }
        builderResult.hasContactSettings = true
        return self
      }
      public func clearContactSettings() -> Pogoprotos.Data.PlayerData.Builder {
        contactSettingsBuilder_ = nil
        builderResult.hasContactSettings = false
        builderResult.contactSettings = nil
        return self
      }
      public var currencies:Array<Pogoprotos.Data.Player.Currency> {
           get {
               return builderResult.currencies
           }
           set (value) {
               builderResult.currencies = value
           }
      }
      public func setCurrencies(value:Array<Pogoprotos.Data.Player.Currency>) -> Pogoprotos.Data.PlayerData.Builder {
        self.currencies = value
        return self
      }
      public func clearCurrencies() -> Pogoprotos.Data.PlayerData.Builder {
        builderResult.currencies.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.PlayerData.Builder {
        builderResult = Pogoprotos.Data.PlayerData()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.PlayerData.Builder {
        return try Pogoprotos.Data.PlayerData.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.PlayerData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.PlayerData {
        let returnMe:Pogoprotos.Data.PlayerData = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.PlayerData) throws -> Pogoprotos.Data.PlayerData.Builder {
        if other == Pogoprotos.Data.PlayerData() {
         return self
        }
        if other.hasCreationTimestampMs {
             creationTimestampMs = other.creationTimestampMs
        }
        if other.hasUsername {
             username = other.username
        }
        if other.hasTeam {
             team = other.team
        }
        if !other.tutorialState.isEmpty {
           builderResult.tutorialState += other.tutorialState
        }
        if (other.hasAvatar) {
            try mergeAvatar(other.avatar)
        }
        if other.hasMaxPokemonStorage {
             maxPokemonStorage = other.maxPokemonStorage
        }
        if other.hasMaxItemStorage {
             maxItemStorage = other.maxItemStorage
        }
        if (other.hasDailyBonus) {
            try mergeDailyBonus(other.dailyBonus)
        }
        if (other.hasEquippedBadge) {
            try mergeEquippedBadge(other.equippedBadge)
        }
        if (other.hasContactSettings) {
            try mergeContactSettings(other.contactSettings)
        }
        if !other.currencies.isEmpty  {
           builderResult.currencies += other.currencies
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PlayerData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PlayerData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            creationTimestampMs = try input.readInt64()

          case 18:
            username = try input.readString()

          case 40:
            let valueIntteam = try input.readEnum()
            if let enumsteam = Pogoprotos.Enums.TeamColor(rawValue:valueIntteam){
                 team = enumsteam
            } else {
                 try unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntteam))
            }

          case 58:
            let length:Int32 = try input.readRawVarint32()
            let oldLimit:Int32 = try input.pushLimit(length)
            while input.bytesUntilLimit() > 0 {
            let valueInttutorialState = try input.readEnum()
            if let enumstutorialState = Pogoprotos.Enums.TutorialState(rawValue:valueInttutorialState) {
                 builderResult.tutorialState += [enumstutorialState]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueInttutorialState))
            }
            }
            input.popLimit(oldLimit)

          case 66:
            let subBuilder:Pogoprotos.Data.Player.PlayerAvatar.Builder = Pogoprotos.Data.Player.PlayerAvatar.Builder()
            if hasAvatar {
              try subBuilder.mergeFrom(avatar)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            avatar = subBuilder.buildPartial()

          case 72:
            maxPokemonStorage = try input.readInt32()

          case 80:
            maxItemStorage = try input.readInt32()

          case 90:
            let subBuilder:Pogoprotos.Data.Player.DailyBonus.Builder = Pogoprotos.Data.Player.DailyBonus.Builder()
            if hasDailyBonus {
              try subBuilder.mergeFrom(dailyBonus)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            dailyBonus = subBuilder.buildPartial()

          case 98:
            let subBuilder:Pogoprotos.Data.Player.EquippedBadge.Builder = Pogoprotos.Data.Player.EquippedBadge.Builder()
            if hasEquippedBadge {
              try subBuilder.mergeFrom(equippedBadge)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            equippedBadge = subBuilder.buildPartial()

          case 106:
            let subBuilder:Pogoprotos.Data.Player.ContactSettings.Builder = Pogoprotos.Data.Player.ContactSettings.Builder()
            if hasContactSettings {
              try subBuilder.mergeFrom(contactSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            contactSettings = subBuilder.buildPartial()

          case 114:
            let subBuilder = Pogoprotos.Data.Player.Currency.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            currencies += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PlayerData.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.PlayerData.Builder()
        if let jsonValueCreationTimestampMs = jsonMap["creationTimestampMs"] as? String {
          resultDecodedBuilder.creationTimestampMs = Int64(jsonValueCreationTimestampMs)!
        }
        if let jsonValueUsername = jsonMap["username"] as? String {
          resultDecodedBuilder.username = jsonValueUsername
        }
        if let jsonValueTeam = jsonMap["team"] as? String {
          resultDecodedBuilder.team = try Pogoprotos.Enums.TeamColor.fromString(jsonValueTeam)
        }
        if let jsonValueTutorialState = jsonMap["tutorialState"] as? Array<String> {
          var jsonArrayTutorialState:Array<Pogoprotos.Enums.TutorialState> = []
          for oneValueTutorialState in jsonValueTutorialState {
            let enumFromStringTutorialState = try Pogoprotos.Enums.TutorialState.fromString(oneValueTutorialState)
            jsonArrayTutorialState += [enumFromStringTutorialState]
          }
          resultDecodedBuilder.tutorialState = jsonArrayTutorialState
        }
        if let jsonValueAvatar = jsonMap["avatar"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.avatar = try Pogoprotos.Data.Player.PlayerAvatar.Builder.decodeToBuilder(jsonValueAvatar).build()

        }
        if let jsonValueMaxPokemonStorage = jsonMap["maxPokemonStorage"] as? NSNumber {
          resultDecodedBuilder.maxPokemonStorage = jsonValueMaxPokemonStorage.intValue
        }
        if let jsonValueMaxItemStorage = jsonMap["maxItemStorage"] as? NSNumber {
          resultDecodedBuilder.maxItemStorage = jsonValueMaxItemStorage.intValue
        }
        if let jsonValueDailyBonus = jsonMap["dailyBonus"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.dailyBonus = try Pogoprotos.Data.Player.DailyBonus.Builder.decodeToBuilder(jsonValueDailyBonus).build()

        }
        if let jsonValueEquippedBadge = jsonMap["equippedBadge"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.equippedBadge = try Pogoprotos.Data.Player.EquippedBadge.Builder.decodeToBuilder(jsonValueEquippedBadge).build()

        }
        if let jsonValueContactSettings = jsonMap["contactSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.contactSettings = try Pogoprotos.Data.Player.ContactSettings.Builder.decodeToBuilder(jsonValueContactSettings).build()

        }
        if let jsonValueCurrencies = jsonMap["currencies"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayCurrencies:Array<Pogoprotos.Data.Player.Currency> = []
          for oneValueCurrencies in jsonValueCurrencies {
            let messageFromStringCurrencies = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(oneValueCurrencies).build()

            jsonArrayCurrencies += [messageFromStringCurrencies]
          }
          resultDecodedBuilder.currencies = jsonArrayCurrencies
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.PlayerData.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.PlayerData.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PokedexEntry : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasPokemonId:Bool = false
    public private(set) var hasTimesEncountered:Bool = false
    public private(set) var timesEncountered:Int32 = Int32(0)

    public private(set) var hasTimesCaptured:Bool = false
    public private(set) var timesCaptured:Int32 = Int32(0)

    public private(set) var hasEvolutionStonePieces:Bool = false
    public private(set) var evolutionStonePieces:Int32 = Int32(0)

    public private(set) var hasEvolutionStones:Bool = false
    public private(set) var evolutionStones:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonId {
        try output.writeEnum(1, value:pokemonId.rawValue)
      }
      if hasTimesEncountered {
        try output.writeInt32(2, value:timesEncountered)
      }
      if hasTimesCaptured {
        try output.writeInt32(3, value:timesCaptured)
      }
      if hasEvolutionStonePieces {
        try output.writeInt32(4, value:evolutionStonePieces)
      }
      if hasEvolutionStones {
        try output.writeInt32(5, value:evolutionStones)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(1)
      }
      if hasTimesEncountered {
        serialize_size += timesEncountered.computeInt32Size(2)
      }
      if hasTimesCaptured {
        serialize_size += timesCaptured.computeInt32Size(3)
      }
      if hasEvolutionStonePieces {
        serialize_size += evolutionStonePieces.computeInt32Size(4)
      }
      if hasEvolutionStones {
        serialize_size += evolutionStones.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.PokedexEntry> {
      var mergedArray = Array<Pogoprotos.Data.PokedexEntry>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PokedexEntry? {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.PokedexEntry.Builder {
      return Pogoprotos.Data.PokedexEntry.classBuilder() as! Pogoprotos.Data.PokedexEntry.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.PokedexEntry.Builder {
      return classBuilder() as! Pogoprotos.Data.PokedexEntry.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PokedexEntry.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PokedexEntry.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.PokedexEntry.Builder {
      return try Pogoprotos.Data.PokedexEntry.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.PokedexEntry) throws -> Pogoprotos.Data.PokedexEntry.Builder {
      return try Pogoprotos.Data.PokedexEntry.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasTimesEncountered {
        jsonMap["timesEncountered"] = NSNumber(int:timesEncountered)
      }
      if hasTimesCaptured {
        jsonMap["timesCaptured"] = NSNumber(int:timesCaptured)
      }
      if hasEvolutionStonePieces {
        jsonMap["evolutionStonePieces"] = NSNumber(int:evolutionStonePieces)
      }
      if hasEvolutionStones {
        jsonMap["evolutionStones"] = NSNumber(int:evolutionStones)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.PokedexEntry {
      return try Pogoprotos.Data.PokedexEntry.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasTimesEncountered {
        output += "\(indent) timesEncountered: \(timesEncountered) \n"
      }
      if hasTimesCaptured {
        output += "\(indent) timesCaptured: \(timesCaptured) \n"
      }
      if hasEvolutionStonePieces {
        output += "\(indent) evolutionStonePieces: \(evolutionStonePieces) \n"
      }
      if hasEvolutionStones {
        output += "\(indent) evolutionStones: \(evolutionStones) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasTimesEncountered {
               hashCode = (hashCode &* 31) &+ timesEncountered.hashValue
            }
            if hasTimesCaptured {
               hashCode = (hashCode &* 31) &+ timesCaptured.hashValue
            }
            if hasEvolutionStonePieces {
               hashCode = (hashCode &* 31) &+ evolutionStonePieces.hashValue
            }
            if hasEvolutionStones {
               hashCode = (hashCode &* 31) &+ evolutionStones.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.PokedexEntry"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.PokedexEntry"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.PokedexEntry.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.PokedexEntry = Pogoprotos.Data.PokedexEntry()
      public func getMessage() -> Pogoprotos.Data.PokedexEntry {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
        public func setPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Data.PokedexEntry.Builder {
          self.pokemonId = value
          return self
        }
        public func clearPokemonId() -> Pogoprotos.Data.PokedexEntry.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .Missingno
           return self
        }
      public var hasTimesEncountered:Bool {
           get {
                return builderResult.hasTimesEncountered
           }
      }
      public var timesEncountered:Int32 {
           get {
                return builderResult.timesEncountered
           }
           set (value) {
               builderResult.hasTimesEncountered = true
               builderResult.timesEncountered = value
           }
      }
      public func setTimesEncountered(value:Int32) -> Pogoprotos.Data.PokedexEntry.Builder {
        self.timesEncountered = value
        return self
      }
      public func clearTimesEncountered() -> Pogoprotos.Data.PokedexEntry.Builder{
           builderResult.hasTimesEncountered = false
           builderResult.timesEncountered = Int32(0)
           return self
      }
      public var hasTimesCaptured:Bool {
           get {
                return builderResult.hasTimesCaptured
           }
      }
      public var timesCaptured:Int32 {
           get {
                return builderResult.timesCaptured
           }
           set (value) {
               builderResult.hasTimesCaptured = true
               builderResult.timesCaptured = value
           }
      }
      public func setTimesCaptured(value:Int32) -> Pogoprotos.Data.PokedexEntry.Builder {
        self.timesCaptured = value
        return self
      }
      public func clearTimesCaptured() -> Pogoprotos.Data.PokedexEntry.Builder{
           builderResult.hasTimesCaptured = false
           builderResult.timesCaptured = Int32(0)
           return self
      }
      public var hasEvolutionStonePieces:Bool {
           get {
                return builderResult.hasEvolutionStonePieces
           }
      }
      public var evolutionStonePieces:Int32 {
           get {
                return builderResult.evolutionStonePieces
           }
           set (value) {
               builderResult.hasEvolutionStonePieces = true
               builderResult.evolutionStonePieces = value
           }
      }
      public func setEvolutionStonePieces(value:Int32) -> Pogoprotos.Data.PokedexEntry.Builder {
        self.evolutionStonePieces = value
        return self
      }
      public func clearEvolutionStonePieces() -> Pogoprotos.Data.PokedexEntry.Builder{
           builderResult.hasEvolutionStonePieces = false
           builderResult.evolutionStonePieces = Int32(0)
           return self
      }
      public var hasEvolutionStones:Bool {
           get {
                return builderResult.hasEvolutionStones
           }
      }
      public var evolutionStones:Int32 {
           get {
                return builderResult.evolutionStones
           }
           set (value) {
               builderResult.hasEvolutionStones = true
               builderResult.evolutionStones = value
           }
      }
      public func setEvolutionStones(value:Int32) -> Pogoprotos.Data.PokedexEntry.Builder {
        self.evolutionStones = value
        return self
      }
      public func clearEvolutionStones() -> Pogoprotos.Data.PokedexEntry.Builder{
           builderResult.hasEvolutionStones = false
           builderResult.evolutionStones = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.PokedexEntry.Builder {
        builderResult = Pogoprotos.Data.PokedexEntry()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.PokedexEntry.Builder {
        return try Pogoprotos.Data.PokedexEntry.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.PokedexEntry {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.PokedexEntry {
        let returnMe:Pogoprotos.Data.PokedexEntry = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.PokedexEntry) throws -> Pogoprotos.Data.PokedexEntry.Builder {
        if other == Pogoprotos.Data.PokedexEntry() {
         return self
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasTimesEncountered {
             timesEncountered = other.timesEncountered
        }
        if other.hasTimesCaptured {
             timesCaptured = other.timesCaptured
        }
        if other.hasEvolutionStonePieces {
             evolutionStonePieces = other.evolutionStonePieces
        }
        if other.hasEvolutionStones {
             evolutionStones = other.evolutionStones
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PokedexEntry.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokedexEntry.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntpokemonId = try input.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntpokemonId))
            }

          case 16:
            timesEncountered = try input.readInt32()

          case 24:
            timesCaptured = try input.readInt32()

          case 32:
            evolutionStonePieces = try input.readInt32()

          case 40:
            evolutionStones = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PokedexEntry.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.PokedexEntry.Builder()
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValuePokemonId)
        }
        if let jsonValueTimesEncountered = jsonMap["timesEncountered"] as? NSNumber {
          resultDecodedBuilder.timesEncountered = jsonValueTimesEncountered.intValue
        }
        if let jsonValueTimesCaptured = jsonMap["timesCaptured"] as? NSNumber {
          resultDecodedBuilder.timesCaptured = jsonValueTimesCaptured.intValue
        }
        if let jsonValueEvolutionStonePieces = jsonMap["evolutionStonePieces"] as? NSNumber {
          resultDecodedBuilder.evolutionStonePieces = jsonValueEvolutionStonePieces.intValue
        }
        if let jsonValueEvolutionStones = jsonMap["evolutionStones"] as? NSNumber {
          resultDecodedBuilder.evolutionStones = jsonValueEvolutionStones.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.PokedexEntry.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.PokedexEntry.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PokemonData : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasId:Bool = false
    public private(set) var id:UInt64 = UInt64(0)

    public private(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasPokemonId:Bool = false
    public private(set) var hasCp:Bool = false
    public private(set) var cp:Int32 = Int32(0)

    public private(set) var hasStamina:Bool = false
    public private(set) var stamina:Int32 = Int32(0)

    public private(set) var hasStaminaMax:Bool = false
    public private(set) var staminaMax:Int32 = Int32(0)

    public private(set) var move1:Pogoprotos.Enums.PokemonMove = Pogoprotos.Enums.PokemonMove.MoveUnset
    public private(set) var hasMove1:Bool = false
    public private(set) var move2:Pogoprotos.Enums.PokemonMove = Pogoprotos.Enums.PokemonMove.MoveUnset
    public private(set) var hasMove2:Bool = false
    public private(set) var hasDeployedFortId:Bool = false
    public private(set) var deployedFortId:String = ""

    public private(set) var hasOwnerName:Bool = false
    public private(set) var ownerName:String = ""

    public private(set) var hasIsEgg:Bool = false
    public private(set) var isEgg:Bool = false

    public private(set) var hasEggKmWalkedTarget:Bool = false
    public private(set) var eggKmWalkedTarget:Double = Double(0)

    public private(set) var hasEggKmWalkedStart:Bool = false
    public private(set) var eggKmWalkedStart:Double = Double(0)

    public private(set) var hasOrigin:Bool = false
    public private(set) var origin:Int32 = Int32(0)

    public private(set) var hasHeightM:Bool = false
    public private(set) var heightM:Float = Float(0)

    public private(set) var hasWeightKg:Bool = false
    public private(set) var weightKg:Float = Float(0)

    public private(set) var hasIndividualAttack:Bool = false
    public private(set) var individualAttack:Int32 = Int32(0)

    public private(set) var hasIndividualDefense:Bool = false
    public private(set) var individualDefense:Int32 = Int32(0)

    public private(set) var hasIndividualStamina:Bool = false
    public private(set) var individualStamina:Int32 = Int32(0)

    public private(set) var hasCpMultiplier:Bool = false
    public private(set) var cpMultiplier:Float = Float(0)

    public private(set) var pokeball:Pogoprotos.Inventory.Item.ItemId = Pogoprotos.Inventory.Item.ItemId.ItemUnknown
    public private(set) var hasPokeball:Bool = false
    public private(set) var hasCapturedCellId:Bool = false
    public private(set) var capturedCellId:UInt64 = UInt64(0)

    public private(set) var hasBattlesAttacked:Bool = false
    public private(set) var battlesAttacked:Int32 = Int32(0)

    public private(set) var hasBattlesDefended:Bool = false
    public private(set) var battlesDefended:Int32 = Int32(0)

    public private(set) var hasEggIncubatorId:Bool = false
    public private(set) var eggIncubatorId:String = ""

    public private(set) var hasCreationTimeMs:Bool = false
    public private(set) var creationTimeMs:UInt64 = UInt64(0)

    public private(set) var hasNumUpgrades:Bool = false
    public private(set) var numUpgrades:Int32 = Int32(0)

    public private(set) var hasAdditionalCpMultiplier:Bool = false
    public private(set) var additionalCpMultiplier:Float = Float(0)

    public private(set) var hasFavorite:Bool = false
    public private(set) var favorite:Int32 = Int32(0)

    public private(set) var hasNickname:Bool = false
    public private(set) var nickname:String = ""

    public private(set) var hasFromFort:Bool = false
    public private(set) var fromFort:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeFixed64(1, value:id)
      }
      if hasPokemonId {
        try output.writeEnum(2, value:pokemonId.rawValue)
      }
      if hasCp {
        try output.writeInt32(3, value:cp)
      }
      if hasStamina {
        try output.writeInt32(4, value:stamina)
      }
      if hasStaminaMax {
        try output.writeInt32(5, value:staminaMax)
      }
      if hasMove1 {
        try output.writeEnum(6, value:move1.rawValue)
      }
      if hasMove2 {
        try output.writeEnum(7, value:move2.rawValue)
      }
      if hasDeployedFortId {
        try output.writeString(8, value:deployedFortId)
      }
      if hasOwnerName {
        try output.writeString(9, value:ownerName)
      }
      if hasIsEgg {
        try output.writeBool(10, value:isEgg)
      }
      if hasEggKmWalkedTarget {
        try output.writeDouble(11, value:eggKmWalkedTarget)
      }
      if hasEggKmWalkedStart {
        try output.writeDouble(12, value:eggKmWalkedStart)
      }
      if hasOrigin {
        try output.writeInt32(14, value:origin)
      }
      if hasHeightM {
        try output.writeFloat(15, value:heightM)
      }
      if hasWeightKg {
        try output.writeFloat(16, value:weightKg)
      }
      if hasIndividualAttack {
        try output.writeInt32(17, value:individualAttack)
      }
      if hasIndividualDefense {
        try output.writeInt32(18, value:individualDefense)
      }
      if hasIndividualStamina {
        try output.writeInt32(19, value:individualStamina)
      }
      if hasCpMultiplier {
        try output.writeFloat(20, value:cpMultiplier)
      }
      if hasPokeball {
        try output.writeEnum(21, value:pokeball.rawValue)
      }
      if hasCapturedCellId {
        try output.writeUInt64(22, value:capturedCellId)
      }
      if hasBattlesAttacked {
        try output.writeInt32(23, value:battlesAttacked)
      }
      if hasBattlesDefended {
        try output.writeInt32(24, value:battlesDefended)
      }
      if hasEggIncubatorId {
        try output.writeString(25, value:eggIncubatorId)
      }
      if hasCreationTimeMs {
        try output.writeUInt64(26, value:creationTimeMs)
      }
      if hasNumUpgrades {
        try output.writeInt32(27, value:numUpgrades)
      }
      if hasAdditionalCpMultiplier {
        try output.writeFloat(28, value:additionalCpMultiplier)
      }
      if hasFavorite {
        try output.writeInt32(29, value:favorite)
      }
      if hasNickname {
        try output.writeString(30, value:nickname)
      }
      if hasFromFort {
        try output.writeInt32(31, value:fromFort)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeFixed64Size(1)
      }
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(2)
      }
      if hasCp {
        serialize_size += cp.computeInt32Size(3)
      }
      if hasStamina {
        serialize_size += stamina.computeInt32Size(4)
      }
      if hasStaminaMax {
        serialize_size += staminaMax.computeInt32Size(5)
      }
      if (hasMove1) {
        serialize_size += move1.rawValue.computeEnumSize(6)
      }
      if (hasMove2) {
        serialize_size += move2.rawValue.computeEnumSize(7)
      }
      if hasDeployedFortId {
        serialize_size += deployedFortId.computeStringSize(8)
      }
      if hasOwnerName {
        serialize_size += ownerName.computeStringSize(9)
      }
      if hasIsEgg {
        serialize_size += isEgg.computeBoolSize(10)
      }
      if hasEggKmWalkedTarget {
        serialize_size += eggKmWalkedTarget.computeDoubleSize(11)
      }
      if hasEggKmWalkedStart {
        serialize_size += eggKmWalkedStart.computeDoubleSize(12)
      }
      if hasOrigin {
        serialize_size += origin.computeInt32Size(14)
      }
      if hasHeightM {
        serialize_size += heightM.computeFloatSize(15)
      }
      if hasWeightKg {
        serialize_size += weightKg.computeFloatSize(16)
      }
      if hasIndividualAttack {
        serialize_size += individualAttack.computeInt32Size(17)
      }
      if hasIndividualDefense {
        serialize_size += individualDefense.computeInt32Size(18)
      }
      if hasIndividualStamina {
        serialize_size += individualStamina.computeInt32Size(19)
      }
      if hasCpMultiplier {
        serialize_size += cpMultiplier.computeFloatSize(20)
      }
      if (hasPokeball) {
        serialize_size += pokeball.rawValue.computeEnumSize(21)
      }
      if hasCapturedCellId {
        serialize_size += capturedCellId.computeUInt64Size(22)
      }
      if hasBattlesAttacked {
        serialize_size += battlesAttacked.computeInt32Size(23)
      }
      if hasBattlesDefended {
        serialize_size += battlesDefended.computeInt32Size(24)
      }
      if hasEggIncubatorId {
        serialize_size += eggIncubatorId.computeStringSize(25)
      }
      if hasCreationTimeMs {
        serialize_size += creationTimeMs.computeUInt64Size(26)
      }
      if hasNumUpgrades {
        serialize_size += numUpgrades.computeInt32Size(27)
      }
      if hasAdditionalCpMultiplier {
        serialize_size += additionalCpMultiplier.computeFloatSize(28)
      }
      if hasFavorite {
        serialize_size += favorite.computeInt32Size(29)
      }
      if hasNickname {
        serialize_size += nickname.computeStringSize(30)
      }
      if hasFromFort {
        serialize_size += fromFort.computeInt32Size(31)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Data.PokemonData> {
      var mergedArray = Array<Pogoprotos.Data.PokemonData>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PokemonData? {
      return try Pogoprotos.Data.PokemonData.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Data.PokemonData.Builder {
      return Pogoprotos.Data.PokemonData.classBuilder() as! Pogoprotos.Data.PokemonData.Builder
    }
    public func getBuilder() -> Pogoprotos.Data.PokemonData.Builder {
      return classBuilder() as! Pogoprotos.Data.PokemonData.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PokemonData.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Data.PokemonData.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Data.PokemonData.Builder {
      return try Pogoprotos.Data.PokemonData.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Data.PokemonData.Builder {
      return try Pogoprotos.Data.PokemonData.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasId {
        jsonMap["id"] = "\(id)"
      }
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasCp {
        jsonMap["cp"] = NSNumber(int:cp)
      }
      if hasStamina {
        jsonMap["stamina"] = NSNumber(int:stamina)
      }
      if hasStaminaMax {
        jsonMap["staminaMax"] = NSNumber(int:staminaMax)
      }
      if hasMove1 {
        jsonMap["move1"] = move1.toString()
      }
      if hasMove2 {
        jsonMap["move2"] = move2.toString()
      }
      if hasDeployedFortId {
        jsonMap["deployedFortId"] = deployedFortId
      }
      if hasOwnerName {
        jsonMap["ownerName"] = ownerName
      }
      if hasIsEgg {
        jsonMap["isEgg"] = isEgg
      }
      if hasEggKmWalkedTarget {
        jsonMap["eggKmWalkedTarget"] = NSNumber(double:eggKmWalkedTarget)
      }
      if hasEggKmWalkedStart {
        jsonMap["eggKmWalkedStart"] = NSNumber(double:eggKmWalkedStart)
      }
      if hasOrigin {
        jsonMap["origin"] = NSNumber(int:origin)
      }
      if hasHeightM {
        jsonMap["heightM"] = NSNumber(float:heightM)
      }
      if hasWeightKg {
        jsonMap["weightKg"] = NSNumber(float:weightKg)
      }
      if hasIndividualAttack {
        jsonMap["individualAttack"] = NSNumber(int:individualAttack)
      }
      if hasIndividualDefense {
        jsonMap["individualDefense"] = NSNumber(int:individualDefense)
      }
      if hasIndividualStamina {
        jsonMap["individualStamina"] = NSNumber(int:individualStamina)
      }
      if hasCpMultiplier {
        jsonMap["cpMultiplier"] = NSNumber(float:cpMultiplier)
      }
      if hasPokeball {
        jsonMap["pokeball"] = pokeball.toString()
      }
      if hasCapturedCellId {
        jsonMap["capturedCellId"] = "\(capturedCellId)"
      }
      if hasBattlesAttacked {
        jsonMap["battlesAttacked"] = NSNumber(int:battlesAttacked)
      }
      if hasBattlesDefended {
        jsonMap["battlesDefended"] = NSNumber(int:battlesDefended)
      }
      if hasEggIncubatorId {
        jsonMap["eggIncubatorId"] = eggIncubatorId
      }
      if hasCreationTimeMs {
        jsonMap["creationTimeMs"] = "\(creationTimeMs)"
      }
      if hasNumUpgrades {
        jsonMap["numUpgrades"] = NSNumber(int:numUpgrades)
      }
      if hasAdditionalCpMultiplier {
        jsonMap["additionalCpMultiplier"] = NSNumber(float:additionalCpMultiplier)
      }
      if hasFavorite {
        jsonMap["favorite"] = NSNumber(int:favorite)
      }
      if hasNickname {
        jsonMap["nickname"] = nickname
      }
      if hasFromFort {
        jsonMap["fromFort"] = NSNumber(int:fromFort)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Data.PokemonData {
      return try Pogoprotos.Data.PokemonData.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasCp {
        output += "\(indent) cp: \(cp) \n"
      }
      if hasStamina {
        output += "\(indent) stamina: \(stamina) \n"
      }
      if hasStaminaMax {
        output += "\(indent) staminaMax: \(staminaMax) \n"
      }
      if (hasMove1) {
        output += "\(indent) move1: \(move1.description)\n"
      }
      if (hasMove2) {
        output += "\(indent) move2: \(move2.description)\n"
      }
      if hasDeployedFortId {
        output += "\(indent) deployedFortId: \(deployedFortId) \n"
      }
      if hasOwnerName {
        output += "\(indent) ownerName: \(ownerName) \n"
      }
      if hasIsEgg {
        output += "\(indent) isEgg: \(isEgg) \n"
      }
      if hasEggKmWalkedTarget {
        output += "\(indent) eggKmWalkedTarget: \(eggKmWalkedTarget) \n"
      }
      if hasEggKmWalkedStart {
        output += "\(indent) eggKmWalkedStart: \(eggKmWalkedStart) \n"
      }
      if hasOrigin {
        output += "\(indent) origin: \(origin) \n"
      }
      if hasHeightM {
        output += "\(indent) heightM: \(heightM) \n"
      }
      if hasWeightKg {
        output += "\(indent) weightKg: \(weightKg) \n"
      }
      if hasIndividualAttack {
        output += "\(indent) individualAttack: \(individualAttack) \n"
      }
      if hasIndividualDefense {
        output += "\(indent) individualDefense: \(individualDefense) \n"
      }
      if hasIndividualStamina {
        output += "\(indent) individualStamina: \(individualStamina) \n"
      }
      if hasCpMultiplier {
        output += "\(indent) cpMultiplier: \(cpMultiplier) \n"
      }
      if (hasPokeball) {
        output += "\(indent) pokeball: \(pokeball.description)\n"
      }
      if hasCapturedCellId {
        output += "\(indent) capturedCellId: \(capturedCellId) \n"
      }
      if hasBattlesAttacked {
        output += "\(indent) battlesAttacked: \(battlesAttacked) \n"
      }
      if hasBattlesDefended {
        output += "\(indent) battlesDefended: \(battlesDefended) \n"
      }
      if hasEggIncubatorId {
        output += "\(indent) eggIncubatorId: \(eggIncubatorId) \n"
      }
      if hasCreationTimeMs {
        output += "\(indent) creationTimeMs: \(creationTimeMs) \n"
      }
      if hasNumUpgrades {
        output += "\(indent) numUpgrades: \(numUpgrades) \n"
      }
      if hasAdditionalCpMultiplier {
        output += "\(indent) additionalCpMultiplier: \(additionalCpMultiplier) \n"
      }
      if hasFavorite {
        output += "\(indent) favorite: \(favorite) \n"
      }
      if hasNickname {
        output += "\(indent) nickname: \(nickname) \n"
      }
      if hasFromFort {
        output += "\(indent) fromFort: \(fromFort) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasCp {
               hashCode = (hashCode &* 31) &+ cp.hashValue
            }
            if hasStamina {
               hashCode = (hashCode &* 31) &+ stamina.hashValue
            }
            if hasStaminaMax {
               hashCode = (hashCode &* 31) &+ staminaMax.hashValue
            }
            if hasMove1 {
               hashCode = (hashCode &* 31) &+ Int(move1.rawValue)
            }
            if hasMove2 {
               hashCode = (hashCode &* 31) &+ Int(move2.rawValue)
            }
            if hasDeployedFortId {
               hashCode = (hashCode &* 31) &+ deployedFortId.hashValue
            }
            if hasOwnerName {
               hashCode = (hashCode &* 31) &+ ownerName.hashValue
            }
            if hasIsEgg {
               hashCode = (hashCode &* 31) &+ isEgg.hashValue
            }
            if hasEggKmWalkedTarget {
               hashCode = (hashCode &* 31) &+ eggKmWalkedTarget.hashValue
            }
            if hasEggKmWalkedStart {
               hashCode = (hashCode &* 31) &+ eggKmWalkedStart.hashValue
            }
            if hasOrigin {
               hashCode = (hashCode &* 31) &+ origin.hashValue
            }
            if hasHeightM {
               hashCode = (hashCode &* 31) &+ heightM.hashValue
            }
            if hasWeightKg {
               hashCode = (hashCode &* 31) &+ weightKg.hashValue
            }
            if hasIndividualAttack {
               hashCode = (hashCode &* 31) &+ individualAttack.hashValue
            }
            if hasIndividualDefense {
               hashCode = (hashCode &* 31) &+ individualDefense.hashValue
            }
            if hasIndividualStamina {
               hashCode = (hashCode &* 31) &+ individualStamina.hashValue
            }
            if hasCpMultiplier {
               hashCode = (hashCode &* 31) &+ cpMultiplier.hashValue
            }
            if hasPokeball {
               hashCode = (hashCode &* 31) &+ Int(pokeball.rawValue)
            }
            if hasCapturedCellId {
               hashCode = (hashCode &* 31) &+ capturedCellId.hashValue
            }
            if hasBattlesAttacked {
               hashCode = (hashCode &* 31) &+ battlesAttacked.hashValue
            }
            if hasBattlesDefended {
               hashCode = (hashCode &* 31) &+ battlesDefended.hashValue
            }
            if hasEggIncubatorId {
               hashCode = (hashCode &* 31) &+ eggIncubatorId.hashValue
            }
            if hasCreationTimeMs {
               hashCode = (hashCode &* 31) &+ creationTimeMs.hashValue
            }
            if hasNumUpgrades {
               hashCode = (hashCode &* 31) &+ numUpgrades.hashValue
            }
            if hasAdditionalCpMultiplier {
               hashCode = (hashCode &* 31) &+ additionalCpMultiplier.hashValue
            }
            if hasFavorite {
               hashCode = (hashCode &* 31) &+ favorite.hashValue
            }
            if hasNickname {
               hashCode = (hashCode &* 31) &+ nickname.hashValue
            }
            if hasFromFort {
               hashCode = (hashCode &* 31) &+ fromFort.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Data.PokemonData"
    }
    override public func className() -> String {
        return "Pogoprotos.Data.PokemonData"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Data.PokemonData.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Data.PokemonData = Pogoprotos.Data.PokemonData()
      public func getMessage() -> Pogoprotos.Data.PokemonData {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:UInt64 {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:UInt64) -> Pogoprotos.Data.PokemonData.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasId = false
           builderResult.id = UInt64(0)
           return self
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
        public func setPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Data.PokemonData.Builder {
          self.pokemonId = value
          return self
        }
        public func clearPokemonId() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .Missingno
           return self
        }
      public var hasCp:Bool {
           get {
                return builderResult.hasCp
           }
      }
      public var cp:Int32 {
           get {
                return builderResult.cp
           }
           set (value) {
               builderResult.hasCp = true
               builderResult.cp = value
           }
      }
      public func setCp(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.cp = value
        return self
      }
      public func clearCp() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCp = false
           builderResult.cp = Int32(0)
           return self
      }
      public var hasStamina:Bool {
           get {
                return builderResult.hasStamina
           }
      }
      public var stamina:Int32 {
           get {
                return builderResult.stamina
           }
           set (value) {
               builderResult.hasStamina = true
               builderResult.stamina = value
           }
      }
      public func setStamina(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.stamina = value
        return self
      }
      public func clearStamina() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasStamina = false
           builderResult.stamina = Int32(0)
           return self
      }
      public var hasStaminaMax:Bool {
           get {
                return builderResult.hasStaminaMax
           }
      }
      public var staminaMax:Int32 {
           get {
                return builderResult.staminaMax
           }
           set (value) {
               builderResult.hasStaminaMax = true
               builderResult.staminaMax = value
           }
      }
      public func setStaminaMax(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.staminaMax = value
        return self
      }
      public func clearStaminaMax() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasStaminaMax = false
           builderResult.staminaMax = Int32(0)
           return self
      }
        public var hasMove1:Bool{
            get {
                return builderResult.hasMove1
            }
        }
        public var move1:Pogoprotos.Enums.PokemonMove {
            get {
                return builderResult.move1
            }
            set (value) {
                builderResult.hasMove1 = true
                builderResult.move1 = value
            }
        }
        public func setMove1(value:Pogoprotos.Enums.PokemonMove) -> Pogoprotos.Data.PokemonData.Builder {
          self.move1 = value
          return self
        }
        public func clearMove1() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasMove1 = false
           builderResult.move1 = .MoveUnset
           return self
        }
        public var hasMove2:Bool{
            get {
                return builderResult.hasMove2
            }
        }
        public var move2:Pogoprotos.Enums.PokemonMove {
            get {
                return builderResult.move2
            }
            set (value) {
                builderResult.hasMove2 = true
                builderResult.move2 = value
            }
        }
        public func setMove2(value:Pogoprotos.Enums.PokemonMove) -> Pogoprotos.Data.PokemonData.Builder {
          self.move2 = value
          return self
        }
        public func clearMove2() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasMove2 = false
           builderResult.move2 = .MoveUnset
           return self
        }
      public var hasDeployedFortId:Bool {
           get {
                return builderResult.hasDeployedFortId
           }
      }
      public var deployedFortId:String {
           get {
                return builderResult.deployedFortId
           }
           set (value) {
               builderResult.hasDeployedFortId = true
               builderResult.deployedFortId = value
           }
      }
      public func setDeployedFortId(value:String) -> Pogoprotos.Data.PokemonData.Builder {
        self.deployedFortId = value
        return self
      }
      public func clearDeployedFortId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasDeployedFortId = false
           builderResult.deployedFortId = ""
           return self
      }
      public var hasOwnerName:Bool {
           get {
                return builderResult.hasOwnerName
           }
      }
      public var ownerName:String {
           get {
                return builderResult.ownerName
           }
           set (value) {
               builderResult.hasOwnerName = true
               builderResult.ownerName = value
           }
      }
      public func setOwnerName(value:String) -> Pogoprotos.Data.PokemonData.Builder {
        self.ownerName = value
        return self
      }
      public func clearOwnerName() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasOwnerName = false
           builderResult.ownerName = ""
           return self
      }
      public var hasIsEgg:Bool {
           get {
                return builderResult.hasIsEgg
           }
      }
      public var isEgg:Bool {
           get {
                return builderResult.isEgg
           }
           set (value) {
               builderResult.hasIsEgg = true
               builderResult.isEgg = value
           }
      }
      public func setIsEgg(value:Bool) -> Pogoprotos.Data.PokemonData.Builder {
        self.isEgg = value
        return self
      }
      public func clearIsEgg() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIsEgg = false
           builderResult.isEgg = false
           return self
      }
      public var hasEggKmWalkedTarget:Bool {
           get {
                return builderResult.hasEggKmWalkedTarget
           }
      }
      public var eggKmWalkedTarget:Double {
           get {
                return builderResult.eggKmWalkedTarget
           }
           set (value) {
               builderResult.hasEggKmWalkedTarget = true
               builderResult.eggKmWalkedTarget = value
           }
      }
      public func setEggKmWalkedTarget(value:Double) -> Pogoprotos.Data.PokemonData.Builder {
        self.eggKmWalkedTarget = value
        return self
      }
      public func clearEggKmWalkedTarget() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasEggKmWalkedTarget = false
           builderResult.eggKmWalkedTarget = Double(0)
           return self
      }
      public var hasEggKmWalkedStart:Bool {
           get {
                return builderResult.hasEggKmWalkedStart
           }
      }
      public var eggKmWalkedStart:Double {
           get {
                return builderResult.eggKmWalkedStart
           }
           set (value) {
               builderResult.hasEggKmWalkedStart = true
               builderResult.eggKmWalkedStart = value
           }
      }
      public func setEggKmWalkedStart(value:Double) -> Pogoprotos.Data.PokemonData.Builder {
        self.eggKmWalkedStart = value
        return self
      }
      public func clearEggKmWalkedStart() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasEggKmWalkedStart = false
           builderResult.eggKmWalkedStart = Double(0)
           return self
      }
      public var hasOrigin:Bool {
           get {
                return builderResult.hasOrigin
           }
      }
      public var origin:Int32 {
           get {
                return builderResult.origin
           }
           set (value) {
               builderResult.hasOrigin = true
               builderResult.origin = value
           }
      }
      public func setOrigin(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.origin = value
        return self
      }
      public func clearOrigin() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasOrigin = false
           builderResult.origin = Int32(0)
           return self
      }
      public var hasHeightM:Bool {
           get {
                return builderResult.hasHeightM
           }
      }
      public var heightM:Float {
           get {
                return builderResult.heightM
           }
           set (value) {
               builderResult.hasHeightM = true
               builderResult.heightM = value
           }
      }
      public func setHeightM(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.heightM = value
        return self
      }
      public func clearHeightM() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasHeightM = false
           builderResult.heightM = Float(0)
           return self
      }
      public var hasWeightKg:Bool {
           get {
                return builderResult.hasWeightKg
           }
      }
      public var weightKg:Float {
           get {
                return builderResult.weightKg
           }
           set (value) {
               builderResult.hasWeightKg = true
               builderResult.weightKg = value
           }
      }
      public func setWeightKg(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.weightKg = value
        return self
      }
      public func clearWeightKg() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasWeightKg = false
           builderResult.weightKg = Float(0)
           return self
      }
      public var hasIndividualAttack:Bool {
           get {
                return builderResult.hasIndividualAttack
           }
      }
      public var individualAttack:Int32 {
           get {
                return builderResult.individualAttack
           }
           set (value) {
               builderResult.hasIndividualAttack = true
               builderResult.individualAttack = value
           }
      }
      public func setIndividualAttack(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.individualAttack = value
        return self
      }
      public func clearIndividualAttack() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIndividualAttack = false
           builderResult.individualAttack = Int32(0)
           return self
      }
      public var hasIndividualDefense:Bool {
           get {
                return builderResult.hasIndividualDefense
           }
      }
      public var individualDefense:Int32 {
           get {
                return builderResult.individualDefense
           }
           set (value) {
               builderResult.hasIndividualDefense = true
               builderResult.individualDefense = value
           }
      }
      public func setIndividualDefense(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.individualDefense = value
        return self
      }
      public func clearIndividualDefense() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIndividualDefense = false
           builderResult.individualDefense = Int32(0)
           return self
      }
      public var hasIndividualStamina:Bool {
           get {
                return builderResult.hasIndividualStamina
           }
      }
      public var individualStamina:Int32 {
           get {
                return builderResult.individualStamina
           }
           set (value) {
               builderResult.hasIndividualStamina = true
               builderResult.individualStamina = value
           }
      }
      public func setIndividualStamina(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.individualStamina = value
        return self
      }
      public func clearIndividualStamina() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasIndividualStamina = false
           builderResult.individualStamina = Int32(0)
           return self
      }
      public var hasCpMultiplier:Bool {
           get {
                return builderResult.hasCpMultiplier
           }
      }
      public var cpMultiplier:Float {
           get {
                return builderResult.cpMultiplier
           }
           set (value) {
               builderResult.hasCpMultiplier = true
               builderResult.cpMultiplier = value
           }
      }
      public func setCpMultiplier(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.cpMultiplier = value
        return self
      }
      public func clearCpMultiplier() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCpMultiplier = false
           builderResult.cpMultiplier = Float(0)
           return self
      }
        public var hasPokeball:Bool{
            get {
                return builderResult.hasPokeball
            }
        }
        public var pokeball:Pogoprotos.Inventory.Item.ItemId {
            get {
                return builderResult.pokeball
            }
            set (value) {
                builderResult.hasPokeball = true
                builderResult.pokeball = value
            }
        }
        public func setPokeball(value:Pogoprotos.Inventory.Item.ItemId) -> Pogoprotos.Data.PokemonData.Builder {
          self.pokeball = value
          return self
        }
        public func clearPokeball() -> Pogoprotos.Data.PokemonData.Builder {
           builderResult.hasPokeball = false
           builderResult.pokeball = .ItemUnknown
           return self
        }
      public var hasCapturedCellId:Bool {
           get {
                return builderResult.hasCapturedCellId
           }
      }
      public var capturedCellId:UInt64 {
           get {
                return builderResult.capturedCellId
           }
           set (value) {
               builderResult.hasCapturedCellId = true
               builderResult.capturedCellId = value
           }
      }
      public func setCapturedCellId(value:UInt64) -> Pogoprotos.Data.PokemonData.Builder {
        self.capturedCellId = value
        return self
      }
      public func clearCapturedCellId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCapturedCellId = false
           builderResult.capturedCellId = UInt64(0)
           return self
      }
      public var hasBattlesAttacked:Bool {
           get {
                return builderResult.hasBattlesAttacked
           }
      }
      public var battlesAttacked:Int32 {
           get {
                return builderResult.battlesAttacked
           }
           set (value) {
               builderResult.hasBattlesAttacked = true
               builderResult.battlesAttacked = value
           }
      }
      public func setBattlesAttacked(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.battlesAttacked = value
        return self
      }
      public func clearBattlesAttacked() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasBattlesAttacked = false
           builderResult.battlesAttacked = Int32(0)
           return self
      }
      public var hasBattlesDefended:Bool {
           get {
                return builderResult.hasBattlesDefended
           }
      }
      public var battlesDefended:Int32 {
           get {
                return builderResult.battlesDefended
           }
           set (value) {
               builderResult.hasBattlesDefended = true
               builderResult.battlesDefended = value
           }
      }
      public func setBattlesDefended(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.battlesDefended = value
        return self
      }
      public func clearBattlesDefended() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasBattlesDefended = false
           builderResult.battlesDefended = Int32(0)
           return self
      }
      public var hasEggIncubatorId:Bool {
           get {
                return builderResult.hasEggIncubatorId
           }
      }
      public var eggIncubatorId:String {
           get {
                return builderResult.eggIncubatorId
           }
           set (value) {
               builderResult.hasEggIncubatorId = true
               builderResult.eggIncubatorId = value
           }
      }
      public func setEggIncubatorId(value:String) -> Pogoprotos.Data.PokemonData.Builder {
        self.eggIncubatorId = value
        return self
      }
      public func clearEggIncubatorId() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasEggIncubatorId = false
           builderResult.eggIncubatorId = ""
           return self
      }
      public var hasCreationTimeMs:Bool {
           get {
                return builderResult.hasCreationTimeMs
           }
      }
      public var creationTimeMs:UInt64 {
           get {
                return builderResult.creationTimeMs
           }
           set (value) {
               builderResult.hasCreationTimeMs = true
               builderResult.creationTimeMs = value
           }
      }
      public func setCreationTimeMs(value:UInt64) -> Pogoprotos.Data.PokemonData.Builder {
        self.creationTimeMs = value
        return self
      }
      public func clearCreationTimeMs() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasCreationTimeMs = false
           builderResult.creationTimeMs = UInt64(0)
           return self
      }
      public var hasNumUpgrades:Bool {
           get {
                return builderResult.hasNumUpgrades
           }
      }
      public var numUpgrades:Int32 {
           get {
                return builderResult.numUpgrades
           }
           set (value) {
               builderResult.hasNumUpgrades = true
               builderResult.numUpgrades = value
           }
      }
      public func setNumUpgrades(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.numUpgrades = value
        return self
      }
      public func clearNumUpgrades() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasNumUpgrades = false
           builderResult.numUpgrades = Int32(0)
           return self
      }
      public var hasAdditionalCpMultiplier:Bool {
           get {
                return builderResult.hasAdditionalCpMultiplier
           }
      }
      public var additionalCpMultiplier:Float {
           get {
                return builderResult.additionalCpMultiplier
           }
           set (value) {
               builderResult.hasAdditionalCpMultiplier = true
               builderResult.additionalCpMultiplier = value
           }
      }
      public func setAdditionalCpMultiplier(value:Float) -> Pogoprotos.Data.PokemonData.Builder {
        self.additionalCpMultiplier = value
        return self
      }
      public func clearAdditionalCpMultiplier() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasAdditionalCpMultiplier = false
           builderResult.additionalCpMultiplier = Float(0)
           return self
      }
      public var hasFavorite:Bool {
           get {
                return builderResult.hasFavorite
           }
      }
      public var favorite:Int32 {
           get {
                return builderResult.favorite
           }
           set (value) {
               builderResult.hasFavorite = true
               builderResult.favorite = value
           }
      }
      public func setFavorite(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.favorite = value
        return self
      }
      public func clearFavorite() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasFavorite = false
           builderResult.favorite = Int32(0)
           return self
      }
      public var hasNickname:Bool {
           get {
                return builderResult.hasNickname
           }
      }
      public var nickname:String {
           get {
                return builderResult.nickname
           }
           set (value) {
               builderResult.hasNickname = true
               builderResult.nickname = value
           }
      }
      public func setNickname(value:String) -> Pogoprotos.Data.PokemonData.Builder {
        self.nickname = value
        return self
      }
      public func clearNickname() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasNickname = false
           builderResult.nickname = ""
           return self
      }
      public var hasFromFort:Bool {
           get {
                return builderResult.hasFromFort
           }
      }
      public var fromFort:Int32 {
           get {
                return builderResult.fromFort
           }
           set (value) {
               builderResult.hasFromFort = true
               builderResult.fromFort = value
           }
      }
      public func setFromFort(value:Int32) -> Pogoprotos.Data.PokemonData.Builder {
        self.fromFort = value
        return self
      }
      public func clearFromFort() -> Pogoprotos.Data.PokemonData.Builder{
           builderResult.hasFromFort = false
           builderResult.fromFort = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Data.PokemonData.Builder {
        builderResult = Pogoprotos.Data.PokemonData()
        return self
      }
      override public func clone() throws -> Pogoprotos.Data.PokemonData.Builder {
        return try Pogoprotos.Data.PokemonData.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Data.PokemonData {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Data.PokemonData {
        let returnMe:Pogoprotos.Data.PokemonData = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Data.PokemonData.Builder {
        if other == Pogoprotos.Data.PokemonData() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasCp {
             cp = other.cp
        }
        if other.hasStamina {
             stamina = other.stamina
        }
        if other.hasStaminaMax {
             staminaMax = other.staminaMax
        }
        if other.hasMove1 {
             move1 = other.move1
        }
        if other.hasMove2 {
             move2 = other.move2
        }
        if other.hasDeployedFortId {
             deployedFortId = other.deployedFortId
        }
        if other.hasOwnerName {
             ownerName = other.ownerName
        }
        if other.hasIsEgg {
             isEgg = other.isEgg
        }
        if other.hasEggKmWalkedTarget {
             eggKmWalkedTarget = other.eggKmWalkedTarget
        }
        if other.hasEggKmWalkedStart {
             eggKmWalkedStart = other.eggKmWalkedStart
        }
        if other.hasOrigin {
             origin = other.origin
        }
        if other.hasHeightM {
             heightM = other.heightM
        }
        if other.hasWeightKg {
             weightKg = other.weightKg
        }
        if other.hasIndividualAttack {
             individualAttack = other.individualAttack
        }
        if other.hasIndividualDefense {
             individualDefense = other.individualDefense
        }
        if other.hasIndividualStamina {
             individualStamina = other.individualStamina
        }
        if other.hasCpMultiplier {
             cpMultiplier = other.cpMultiplier
        }
        if other.hasPokeball {
             pokeball = other.pokeball
        }
        if other.hasCapturedCellId {
             capturedCellId = other.capturedCellId
        }
        if other.hasBattlesAttacked {
             battlesAttacked = other.battlesAttacked
        }
        if other.hasBattlesDefended {
             battlesDefended = other.battlesDefended
        }
        if other.hasEggIncubatorId {
             eggIncubatorId = other.eggIncubatorId
        }
        if other.hasCreationTimeMs {
             creationTimeMs = other.creationTimeMs
        }
        if other.hasNumUpgrades {
             numUpgrades = other.numUpgrades
        }
        if other.hasAdditionalCpMultiplier {
             additionalCpMultiplier = other.additionalCpMultiplier
        }
        if other.hasFavorite {
             favorite = other.favorite
        }
        if other.hasNickname {
             nickname = other.nickname
        }
        if other.hasFromFort {
             fromFort = other.fromFort
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Data.PokemonData.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Data.PokemonData.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            id = try input.readFixed64()

          case 16:
            let valueIntpokemonId = try input.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntpokemonId))
            }

          case 24:
            cp = try input.readInt32()

          case 32:
            stamina = try input.readInt32()

          case 40:
            staminaMax = try input.readInt32()

          case 48:
            let valueIntmove1 = try input.readEnum()
            if let enumsmove1 = Pogoprotos.Enums.PokemonMove(rawValue:valueIntmove1){
                 move1 = enumsmove1
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntmove1))
            }

          case 56:
            let valueIntmove2 = try input.readEnum()
            if let enumsmove2 = Pogoprotos.Enums.PokemonMove(rawValue:valueIntmove2){
                 move2 = enumsmove2
            } else {
                 try unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueIntmove2))
            }

          case 66:
            deployedFortId = try input.readString()

          case 74:
            ownerName = try input.readString()

          case 80:
            isEgg = try input.readBool()

          case 89:
            eggKmWalkedTarget = try input.readDouble()

          case 97:
            eggKmWalkedStart = try input.readDouble()

          case 112:
            origin = try input.readInt32()

          case 125:
            heightM = try input.readFloat()

          case 133:
            weightKg = try input.readFloat()

          case 136:
            individualAttack = try input.readInt32()

          case 144:
            individualDefense = try input.readInt32()

          case 152:
            individualStamina = try input.readInt32()

          case 165:
            cpMultiplier = try input.readFloat()

          case 168:
            let valueIntpokeball = try input.readEnum()
            if let enumspokeball = Pogoprotos.Inventory.Item.ItemId(rawValue:valueIntpokeball){
                 pokeball = enumspokeball
            } else {
                 try unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntpokeball))
            }

          case 176:
            capturedCellId = try input.readUInt64()

          case 184:
            battlesAttacked = try input.readInt32()

          case 192:
            battlesDefended = try input.readInt32()

          case 202:
            eggIncubatorId = try input.readString()

          case 208:
            creationTimeMs = try input.readUInt64()

          case 216:
            numUpgrades = try input.readInt32()

          case 229:
            additionalCpMultiplier = try input.readFloat()

          case 232:
            favorite = try input.readInt32()

          case 242:
            nickname = try input.readString()

          case 248:
            fromFort = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Data.PokemonData.Builder {
        let resultDecodedBuilder = Pogoprotos.Data.PokemonData.Builder()
        if let jsonValueId = jsonMap["id"] as? String {
          resultDecodedBuilder.id = UInt64(jsonValueId)!
        }
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValuePokemonId)
        }
        if let jsonValueCp = jsonMap["cp"] as? NSNumber {
          resultDecodedBuilder.cp = jsonValueCp.intValue
        }
        if let jsonValueStamina = jsonMap["stamina"] as? NSNumber {
          resultDecodedBuilder.stamina = jsonValueStamina.intValue
        }
        if let jsonValueStaminaMax = jsonMap["staminaMax"] as? NSNumber {
          resultDecodedBuilder.staminaMax = jsonValueStaminaMax.intValue
        }
        if let jsonValueMove1 = jsonMap["move1"] as? String {
          resultDecodedBuilder.move1 = try Pogoprotos.Enums.PokemonMove.fromString(jsonValueMove1)
        }
        if let jsonValueMove2 = jsonMap["move2"] as? String {
          resultDecodedBuilder.move2 = try Pogoprotos.Enums.PokemonMove.fromString(jsonValueMove2)
        }
        if let jsonValueDeployedFortId = jsonMap["deployedFortId"] as? String {
          resultDecodedBuilder.deployedFortId = jsonValueDeployedFortId
        }
        if let jsonValueOwnerName = jsonMap["ownerName"] as? String {
          resultDecodedBuilder.ownerName = jsonValueOwnerName
        }
        if let jsonValueIsEgg = jsonMap["isEgg"] as? Bool {
          resultDecodedBuilder.isEgg = jsonValueIsEgg
        }
        if let jsonValueEggKmWalkedTarget = jsonMap["eggKmWalkedTarget"] as? NSNumber {
          resultDecodedBuilder.eggKmWalkedTarget = jsonValueEggKmWalkedTarget.doubleValue
        }
        if let jsonValueEggKmWalkedStart = jsonMap["eggKmWalkedStart"] as? NSNumber {
          resultDecodedBuilder.eggKmWalkedStart = jsonValueEggKmWalkedStart.doubleValue
        }
        if let jsonValueOrigin = jsonMap["origin"] as? NSNumber {
          resultDecodedBuilder.origin = jsonValueOrigin.intValue
        }
        if let jsonValueHeightM = jsonMap["heightM"] as? NSNumber {
          resultDecodedBuilder.heightM = jsonValueHeightM.floatValue
        }
        if let jsonValueWeightKg = jsonMap["weightKg"] as? NSNumber {
          resultDecodedBuilder.weightKg = jsonValueWeightKg.floatValue
        }
        if let jsonValueIndividualAttack = jsonMap["individualAttack"] as? NSNumber {
          resultDecodedBuilder.individualAttack = jsonValueIndividualAttack.intValue
        }
        if let jsonValueIndividualDefense = jsonMap["individualDefense"] as? NSNumber {
          resultDecodedBuilder.individualDefense = jsonValueIndividualDefense.intValue
        }
        if let jsonValueIndividualStamina = jsonMap["individualStamina"] as? NSNumber {
          resultDecodedBuilder.individualStamina = jsonValueIndividualStamina.intValue
        }
        if let jsonValueCpMultiplier = jsonMap["cpMultiplier"] as? NSNumber {
          resultDecodedBuilder.cpMultiplier = jsonValueCpMultiplier.floatValue
        }
        if let jsonValuePokeball = jsonMap["pokeball"] as? String {
          resultDecodedBuilder.pokeball = try Pogoprotos.Inventory.Item.ItemId.fromString(jsonValuePokeball)
        }
        if let jsonValueCapturedCellId = jsonMap["capturedCellId"] as? String {
          resultDecodedBuilder.capturedCellId = UInt64(jsonValueCapturedCellId)!
        }
        if let jsonValueBattlesAttacked = jsonMap["battlesAttacked"] as? NSNumber {
          resultDecodedBuilder.battlesAttacked = jsonValueBattlesAttacked.intValue
        }
        if let jsonValueBattlesDefended = jsonMap["battlesDefended"] as? NSNumber {
          resultDecodedBuilder.battlesDefended = jsonValueBattlesDefended.intValue
        }
        if let jsonValueEggIncubatorId = jsonMap["eggIncubatorId"] as? String {
          resultDecodedBuilder.eggIncubatorId = jsonValueEggIncubatorId
        }
        if let jsonValueCreationTimeMs = jsonMap["creationTimeMs"] as? String {
          resultDecodedBuilder.creationTimeMs = UInt64(jsonValueCreationTimeMs)!
        }
        if let jsonValueNumUpgrades = jsonMap["numUpgrades"] as? NSNumber {
          resultDecodedBuilder.numUpgrades = jsonValueNumUpgrades.intValue
        }
        if let jsonValueAdditionalCpMultiplier = jsonMap["additionalCpMultiplier"] as? NSNumber {
          resultDecodedBuilder.additionalCpMultiplier = jsonValueAdditionalCpMultiplier.floatValue
        }
        if let jsonValueFavorite = jsonMap["favorite"] as? NSNumber {
          resultDecodedBuilder.favorite = jsonValueFavorite.intValue
        }
        if let jsonValueNickname = jsonMap["nickname"] as? String {
          resultDecodedBuilder.nickname = jsonValueNickname
        }
        if let jsonValueFromFort = jsonMap["fromFort"] as? NSNumber {
          resultDecodedBuilder.fromFort = jsonValueFromFort.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Data.PokemonData.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
