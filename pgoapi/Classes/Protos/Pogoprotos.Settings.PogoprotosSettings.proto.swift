// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Settings.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public func == (lhs: Pogoprotos.Settings.DownloadSettingsAction, rhs: Pogoprotos.Settings.DownloadSettingsAction) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasHash == rhs.hasHash) && (!lhs.hasHash || lhs.hash == rhs.hash)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.FortSettings, rhs: Pogoprotos.Settings.FortSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInteractionRangeMeters == rhs.hasInteractionRangeMeters) && (!lhs.hasInteractionRangeMeters || lhs.interactionRangeMeters == rhs.interactionRangeMeters)
  fieldCheck = fieldCheck && (lhs.hasMaxTotalDeployedPokemon == rhs.hasMaxTotalDeployedPokemon) && (!lhs.hasMaxTotalDeployedPokemon || lhs.maxTotalDeployedPokemon == rhs.maxTotalDeployedPokemon)
  fieldCheck = fieldCheck && (lhs.hasMaxPlayerDeployedPokemon == rhs.hasMaxPlayerDeployedPokemon) && (!lhs.hasMaxPlayerDeployedPokemon || lhs.maxPlayerDeployedPokemon == rhs.maxPlayerDeployedPokemon)
  fieldCheck = fieldCheck && (lhs.hasDeployStaminaMultiplier == rhs.hasDeployStaminaMultiplier) && (!lhs.hasDeployStaminaMultiplier || lhs.deployStaminaMultiplier == rhs.deployStaminaMultiplier)
  fieldCheck = fieldCheck && (lhs.hasDeployAttackMultiplier == rhs.hasDeployAttackMultiplier) && (!lhs.hasDeployAttackMultiplier || lhs.deployAttackMultiplier == rhs.deployAttackMultiplier)
  fieldCheck = fieldCheck && (lhs.hasFarInteractionRangeMeters == rhs.hasFarInteractionRangeMeters) && (!lhs.hasFarInteractionRangeMeters || lhs.farInteractionRangeMeters == rhs.farInteractionRangeMeters)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.GlobalSettings, rhs: Pogoprotos.Settings.GlobalSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFortSettings == rhs.hasFortSettings) && (!lhs.hasFortSettings || lhs.fortSettings == rhs.fortSettings)
  fieldCheck = fieldCheck && (lhs.hasMapSettings == rhs.hasMapSettings) && (!lhs.hasMapSettings || lhs.mapSettings == rhs.mapSettings)
  fieldCheck = fieldCheck && (lhs.hasLevelSettings == rhs.hasLevelSettings) && (!lhs.hasLevelSettings || lhs.levelSettings == rhs.levelSettings)
  fieldCheck = fieldCheck && (lhs.hasInventorySettings == rhs.hasInventorySettings) && (!lhs.hasInventorySettings || lhs.inventorySettings == rhs.inventorySettings)
  fieldCheck = fieldCheck && (lhs.hasMinimumClientVersion == rhs.hasMinimumClientVersion) && (!lhs.hasMinimumClientVersion || lhs.minimumClientVersion == rhs.minimumClientVersion)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.InventorySettings, rhs: Pogoprotos.Settings.InventorySettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMaxPokemon == rhs.hasMaxPokemon) && (!lhs.hasMaxPokemon || lhs.maxPokemon == rhs.maxPokemon)
  fieldCheck = fieldCheck && (lhs.hasMaxBagItems == rhs.hasMaxBagItems) && (!lhs.hasMaxBagItems || lhs.maxBagItems == rhs.maxBagItems)
  fieldCheck = fieldCheck && (lhs.hasBasePokemon == rhs.hasBasePokemon) && (!lhs.hasBasePokemon || lhs.basePokemon == rhs.basePokemon)
  fieldCheck = fieldCheck && (lhs.hasBaseBagItems == rhs.hasBaseBagItems) && (!lhs.hasBaseBagItems || lhs.baseBagItems == rhs.baseBagItems)
  fieldCheck = fieldCheck && (lhs.hasBaseEggs == rhs.hasBaseEggs) && (!lhs.hasBaseEggs || lhs.baseEggs == rhs.baseEggs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.LevelSettings, rhs: Pogoprotos.Settings.LevelSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTrainerCpModifier == rhs.hasTrainerCpModifier) && (!lhs.hasTrainerCpModifier || lhs.trainerCpModifier == rhs.trainerCpModifier)
  fieldCheck = fieldCheck && (lhs.hasTrainerDifficultyModifier == rhs.hasTrainerDifficultyModifier) && (!lhs.hasTrainerDifficultyModifier || lhs.trainerDifficultyModifier == rhs.trainerDifficultyModifier)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.MapSettings, rhs: Pogoprotos.Settings.MapSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonVisibleRange == rhs.hasPokemonVisibleRange) && (!lhs.hasPokemonVisibleRange || lhs.pokemonVisibleRange == rhs.pokemonVisibleRange)
  fieldCheck = fieldCheck && (lhs.hasPokeNavRangeMeters == rhs.hasPokeNavRangeMeters) && (!lhs.hasPokeNavRangeMeters || lhs.pokeNavRangeMeters == rhs.pokeNavRangeMeters)
  fieldCheck = fieldCheck && (lhs.hasEncounterRangeMeters == rhs.hasEncounterRangeMeters) && (!lhs.hasEncounterRangeMeters || lhs.encounterRangeMeters == rhs.encounterRangeMeters)
  fieldCheck = fieldCheck && (lhs.hasGetMapObjectsMinRefreshSeconds == rhs.hasGetMapObjectsMinRefreshSeconds) && (!lhs.hasGetMapObjectsMinRefreshSeconds || lhs.getMapObjectsMinRefreshSeconds == rhs.getMapObjectsMinRefreshSeconds)
  fieldCheck = fieldCheck && (lhs.hasGetMapObjectsMaxRefreshSeconds == rhs.hasGetMapObjectsMaxRefreshSeconds) && (!lhs.hasGetMapObjectsMaxRefreshSeconds || lhs.getMapObjectsMaxRefreshSeconds == rhs.getMapObjectsMaxRefreshSeconds)
  fieldCheck = fieldCheck && (lhs.hasGetMapObjectsMinDistanceMeters == rhs.hasGetMapObjectsMinDistanceMeters) && (!lhs.hasGetMapObjectsMinDistanceMeters || lhs.getMapObjectsMinDistanceMeters == rhs.getMapObjectsMinDistanceMeters)
  fieldCheck = fieldCheck && (lhs.hasGoogleMapsApiKey == rhs.hasGoogleMapsApiKey) && (!lhs.hasGoogleMapsApiKey || lhs.googleMapsApiKey == rhs.googleMapsApiKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings {
  public struct PogoprotosSettingsRoot {
    public static var sharedInstance : PogoprotosSettingsRoot {
     struct Static {
         static let instance : PogoprotosSettingsRoot = PogoprotosSettingsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class DownloadSettingsAction : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasHash:Bool = false
    public private(set) var hash:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasHash {
        try output.writeString(1, value:hash)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasHash {
        serialize_size += hash.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.DownloadSettingsAction> {
      var mergedArray = Array<Pogoprotos.Settings.DownloadSettingsAction>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.DownloadSettingsAction? {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.PogoprotosSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
      return Pogoprotos.Settings.DownloadSettingsAction.classBuilder() as! Pogoprotos.Settings.DownloadSettingsAction.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
      return classBuilder() as! Pogoprotos.Settings.DownloadSettingsAction.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.DownloadSettingsAction.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.DownloadSettingsAction.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
      return try Pogoprotos.Settings.DownloadSettingsAction.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.DownloadSettingsAction) throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasHash {
        jsonMap["hash"] = hash
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.DownloadSettingsAction {
      return try Pogoprotos.Settings.DownloadSettingsAction.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasHash {
        output += "\(indent) hash: \(hash) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasHash {
               hashCode = (hashCode &* 31) &+ hash.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.DownloadSettingsAction"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.DownloadSettingsAction"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.DownloadSettingsAction.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.DownloadSettingsAction = Pogoprotos.Settings.DownloadSettingsAction()
      public func getMessage() -> Pogoprotos.Settings.DownloadSettingsAction {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasHash:Bool {
           get {
                return builderResult.hasHash
           }
      }
      public var hash:String {
           get {
                return builderResult.hash
           }
           set (value) {
               builderResult.hasHash = true
               builderResult.hash = value
           }
      }
      public func setHash(value:String) -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
        self.hash = value
        return self
      }
      public func clearHash() -> Pogoprotos.Settings.DownloadSettingsAction.Builder{
           builderResult.hasHash = false
           builderResult.hash = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
        builderResult = Pogoprotos.Settings.DownloadSettingsAction()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
        return try Pogoprotos.Settings.DownloadSettingsAction.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.DownloadSettingsAction {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.DownloadSettingsAction {
        let returnMe:Pogoprotos.Settings.DownloadSettingsAction = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.DownloadSettingsAction) throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
        if other == Pogoprotos.Settings.DownloadSettingsAction() {
         return self
        }
        if other.hasHash {
             hash = other.hash
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            hash = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.DownloadSettingsAction.Builder()
        if let jsonValueHash = jsonMap["hash"] as? String {
          resultDecodedBuilder.hash = jsonValueHash
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.DownloadSettingsAction.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.DownloadSettingsAction.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class FortSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasInteractionRangeMeters:Bool = false
    public private(set) var interactionRangeMeters:Double = Double(0)

    public private(set) var hasMaxTotalDeployedPokemon:Bool = false
    public private(set) var maxTotalDeployedPokemon:Int32 = Int32(0)

    public private(set) var hasMaxPlayerDeployedPokemon:Bool = false
    public private(set) var maxPlayerDeployedPokemon:Int32 = Int32(0)

    public private(set) var hasDeployStaminaMultiplier:Bool = false
    public private(set) var deployStaminaMultiplier:Double = Double(0)

    public private(set) var hasDeployAttackMultiplier:Bool = false
    public private(set) var deployAttackMultiplier:Double = Double(0)

    public private(set) var hasFarInteractionRangeMeters:Bool = false
    public private(set) var farInteractionRangeMeters:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasInteractionRangeMeters {
        try output.writeDouble(1, value:interactionRangeMeters)
      }
      if hasMaxTotalDeployedPokemon {
        try output.writeInt32(2, value:maxTotalDeployedPokemon)
      }
      if hasMaxPlayerDeployedPokemon {
        try output.writeInt32(3, value:maxPlayerDeployedPokemon)
      }
      if hasDeployStaminaMultiplier {
        try output.writeDouble(4, value:deployStaminaMultiplier)
      }
      if hasDeployAttackMultiplier {
        try output.writeDouble(5, value:deployAttackMultiplier)
      }
      if hasFarInteractionRangeMeters {
        try output.writeDouble(6, value:farInteractionRangeMeters)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasInteractionRangeMeters {
        serialize_size += interactionRangeMeters.computeDoubleSize(1)
      }
      if hasMaxTotalDeployedPokemon {
        serialize_size += maxTotalDeployedPokemon.computeInt32Size(2)
      }
      if hasMaxPlayerDeployedPokemon {
        serialize_size += maxPlayerDeployedPokemon.computeInt32Size(3)
      }
      if hasDeployStaminaMultiplier {
        serialize_size += deployStaminaMultiplier.computeDoubleSize(4)
      }
      if hasDeployAttackMultiplier {
        serialize_size += deployAttackMultiplier.computeDoubleSize(5)
      }
      if hasFarInteractionRangeMeters {
        serialize_size += farInteractionRangeMeters.computeDoubleSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.FortSettings> {
      var mergedArray = Array<Pogoprotos.Settings.FortSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.FortSettings? {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.PogoprotosSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.FortSettings.Builder {
      return Pogoprotos.Settings.FortSettings.classBuilder() as! Pogoprotos.Settings.FortSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.FortSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.FortSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.FortSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.FortSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.FortSettings.Builder {
      return try Pogoprotos.Settings.FortSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.FortSettings) throws -> Pogoprotos.Settings.FortSettings.Builder {
      return try Pogoprotos.Settings.FortSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasInteractionRangeMeters {
        jsonMap["interactionRangeMeters"] = NSNumber(double:interactionRangeMeters)
      }
      if hasMaxTotalDeployedPokemon {
        jsonMap["maxTotalDeployedPokemon"] = NSNumber(int:maxTotalDeployedPokemon)
      }
      if hasMaxPlayerDeployedPokemon {
        jsonMap["maxPlayerDeployedPokemon"] = NSNumber(int:maxPlayerDeployedPokemon)
      }
      if hasDeployStaminaMultiplier {
        jsonMap["deployStaminaMultiplier"] = NSNumber(double:deployStaminaMultiplier)
      }
      if hasDeployAttackMultiplier {
        jsonMap["deployAttackMultiplier"] = NSNumber(double:deployAttackMultiplier)
      }
      if hasFarInteractionRangeMeters {
        jsonMap["farInteractionRangeMeters"] = NSNumber(double:farInteractionRangeMeters)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.FortSettings {
      return try Pogoprotos.Settings.FortSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasInteractionRangeMeters {
        output += "\(indent) interactionRangeMeters: \(interactionRangeMeters) \n"
      }
      if hasMaxTotalDeployedPokemon {
        output += "\(indent) maxTotalDeployedPokemon: \(maxTotalDeployedPokemon) \n"
      }
      if hasMaxPlayerDeployedPokemon {
        output += "\(indent) maxPlayerDeployedPokemon: \(maxPlayerDeployedPokemon) \n"
      }
      if hasDeployStaminaMultiplier {
        output += "\(indent) deployStaminaMultiplier: \(deployStaminaMultiplier) \n"
      }
      if hasDeployAttackMultiplier {
        output += "\(indent) deployAttackMultiplier: \(deployAttackMultiplier) \n"
      }
      if hasFarInteractionRangeMeters {
        output += "\(indent) farInteractionRangeMeters: \(farInteractionRangeMeters) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasInteractionRangeMeters {
               hashCode = (hashCode &* 31) &+ interactionRangeMeters.hashValue
            }
            if hasMaxTotalDeployedPokemon {
               hashCode = (hashCode &* 31) &+ maxTotalDeployedPokemon.hashValue
            }
            if hasMaxPlayerDeployedPokemon {
               hashCode = (hashCode &* 31) &+ maxPlayerDeployedPokemon.hashValue
            }
            if hasDeployStaminaMultiplier {
               hashCode = (hashCode &* 31) &+ deployStaminaMultiplier.hashValue
            }
            if hasDeployAttackMultiplier {
               hashCode = (hashCode &* 31) &+ deployAttackMultiplier.hashValue
            }
            if hasFarInteractionRangeMeters {
               hashCode = (hashCode &* 31) &+ farInteractionRangeMeters.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.FortSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.FortSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.FortSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.FortSettings = Pogoprotos.Settings.FortSettings()
      public func getMessage() -> Pogoprotos.Settings.FortSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasInteractionRangeMeters:Bool {
           get {
                return builderResult.hasInteractionRangeMeters
           }
      }
      public var interactionRangeMeters:Double {
           get {
                return builderResult.interactionRangeMeters
           }
           set (value) {
               builderResult.hasInteractionRangeMeters = true
               builderResult.interactionRangeMeters = value
           }
      }
      public func setInteractionRangeMeters(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.interactionRangeMeters = value
        return self
      }
      public func clearInteractionRangeMeters() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasInteractionRangeMeters = false
           builderResult.interactionRangeMeters = Double(0)
           return self
      }
      public var hasMaxTotalDeployedPokemon:Bool {
           get {
                return builderResult.hasMaxTotalDeployedPokemon
           }
      }
      public var maxTotalDeployedPokemon:Int32 {
           get {
                return builderResult.maxTotalDeployedPokemon
           }
           set (value) {
               builderResult.hasMaxTotalDeployedPokemon = true
               builderResult.maxTotalDeployedPokemon = value
           }
      }
      public func setMaxTotalDeployedPokemon(value:Int32) -> Pogoprotos.Settings.FortSettings.Builder {
        self.maxTotalDeployedPokemon = value
        return self
      }
      public func clearMaxTotalDeployedPokemon() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasMaxTotalDeployedPokemon = false
           builderResult.maxTotalDeployedPokemon = Int32(0)
           return self
      }
      public var hasMaxPlayerDeployedPokemon:Bool {
           get {
                return builderResult.hasMaxPlayerDeployedPokemon
           }
      }
      public var maxPlayerDeployedPokemon:Int32 {
           get {
                return builderResult.maxPlayerDeployedPokemon
           }
           set (value) {
               builderResult.hasMaxPlayerDeployedPokemon = true
               builderResult.maxPlayerDeployedPokemon = value
           }
      }
      public func setMaxPlayerDeployedPokemon(value:Int32) -> Pogoprotos.Settings.FortSettings.Builder {
        self.maxPlayerDeployedPokemon = value
        return self
      }
      public func clearMaxPlayerDeployedPokemon() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasMaxPlayerDeployedPokemon = false
           builderResult.maxPlayerDeployedPokemon = Int32(0)
           return self
      }
      public var hasDeployStaminaMultiplier:Bool {
           get {
                return builderResult.hasDeployStaminaMultiplier
           }
      }
      public var deployStaminaMultiplier:Double {
           get {
                return builderResult.deployStaminaMultiplier
           }
           set (value) {
               builderResult.hasDeployStaminaMultiplier = true
               builderResult.deployStaminaMultiplier = value
           }
      }
      public func setDeployStaminaMultiplier(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.deployStaminaMultiplier = value
        return self
      }
      public func clearDeployStaminaMultiplier() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasDeployStaminaMultiplier = false
           builderResult.deployStaminaMultiplier = Double(0)
           return self
      }
      public var hasDeployAttackMultiplier:Bool {
           get {
                return builderResult.hasDeployAttackMultiplier
           }
      }
      public var deployAttackMultiplier:Double {
           get {
                return builderResult.deployAttackMultiplier
           }
           set (value) {
               builderResult.hasDeployAttackMultiplier = true
               builderResult.deployAttackMultiplier = value
           }
      }
      public func setDeployAttackMultiplier(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.deployAttackMultiplier = value
        return self
      }
      public func clearDeployAttackMultiplier() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasDeployAttackMultiplier = false
           builderResult.deployAttackMultiplier = Double(0)
           return self
      }
      public var hasFarInteractionRangeMeters:Bool {
           get {
                return builderResult.hasFarInteractionRangeMeters
           }
      }
      public var farInteractionRangeMeters:Double {
           get {
                return builderResult.farInteractionRangeMeters
           }
           set (value) {
               builderResult.hasFarInteractionRangeMeters = true
               builderResult.farInteractionRangeMeters = value
           }
      }
      public func setFarInteractionRangeMeters(value:Double) -> Pogoprotos.Settings.FortSettings.Builder {
        self.farInteractionRangeMeters = value
        return self
      }
      public func clearFarInteractionRangeMeters() -> Pogoprotos.Settings.FortSettings.Builder{
           builderResult.hasFarInteractionRangeMeters = false
           builderResult.farInteractionRangeMeters = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.FortSettings.Builder {
        builderResult = Pogoprotos.Settings.FortSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.FortSettings.Builder {
        return try Pogoprotos.Settings.FortSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.FortSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.FortSettings {
        let returnMe:Pogoprotos.Settings.FortSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.FortSettings) throws -> Pogoprotos.Settings.FortSettings.Builder {
        if other == Pogoprotos.Settings.FortSettings() {
         return self
        }
        if other.hasInteractionRangeMeters {
             interactionRangeMeters = other.interactionRangeMeters
        }
        if other.hasMaxTotalDeployedPokemon {
             maxTotalDeployedPokemon = other.maxTotalDeployedPokemon
        }
        if other.hasMaxPlayerDeployedPokemon {
             maxPlayerDeployedPokemon = other.maxPlayerDeployedPokemon
        }
        if other.hasDeployStaminaMultiplier {
             deployStaminaMultiplier = other.deployStaminaMultiplier
        }
        if other.hasDeployAttackMultiplier {
             deployAttackMultiplier = other.deployAttackMultiplier
        }
        if other.hasFarInteractionRangeMeters {
             farInteractionRangeMeters = other.farInteractionRangeMeters
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.FortSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.FortSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            interactionRangeMeters = try input.readDouble()

          case 16:
            maxTotalDeployedPokemon = try input.readInt32()

          case 24:
            maxPlayerDeployedPokemon = try input.readInt32()

          case 33:
            deployStaminaMultiplier = try input.readDouble()

          case 41:
            deployAttackMultiplier = try input.readDouble()

          case 49:
            farInteractionRangeMeters = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.FortSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.FortSettings.Builder()
        if let jsonValueInteractionRangeMeters = jsonMap["interactionRangeMeters"] as? NSNumber {
          resultDecodedBuilder.interactionRangeMeters = jsonValueInteractionRangeMeters.doubleValue
        }
        if let jsonValueMaxTotalDeployedPokemon = jsonMap["maxTotalDeployedPokemon"] as? NSNumber {
          resultDecodedBuilder.maxTotalDeployedPokemon = jsonValueMaxTotalDeployedPokemon.intValue
        }
        if let jsonValueMaxPlayerDeployedPokemon = jsonMap["maxPlayerDeployedPokemon"] as? NSNumber {
          resultDecodedBuilder.maxPlayerDeployedPokemon = jsonValueMaxPlayerDeployedPokemon.intValue
        }
        if let jsonValueDeployStaminaMultiplier = jsonMap["deployStaminaMultiplier"] as? NSNumber {
          resultDecodedBuilder.deployStaminaMultiplier = jsonValueDeployStaminaMultiplier.doubleValue
        }
        if let jsonValueDeployAttackMultiplier = jsonMap["deployAttackMultiplier"] as? NSNumber {
          resultDecodedBuilder.deployAttackMultiplier = jsonValueDeployAttackMultiplier.doubleValue
        }
        if let jsonValueFarInteractionRangeMeters = jsonMap["farInteractionRangeMeters"] as? NSNumber {
          resultDecodedBuilder.farInteractionRangeMeters = jsonValueFarInteractionRangeMeters.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.FortSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.FortSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class GlobalSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasFortSettings:Bool = false
    public private(set) var fortSettings:Pogoprotos.Settings.FortSettings!
    public private(set) var hasMapSettings:Bool = false
    public private(set) var mapSettings:Pogoprotos.Settings.MapSettings!
    public private(set) var hasLevelSettings:Bool = false
    public private(set) var levelSettings:Pogoprotos.Settings.LevelSettings!
    public private(set) var hasInventorySettings:Bool = false
    public private(set) var inventorySettings:Pogoprotos.Settings.InventorySettings!
    public private(set) var hasMinimumClientVersion:Bool = false
    public private(set) var minimumClientVersion:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasFortSettings {
        try output.writeMessage(2, value:fortSettings)
      }
      if hasMapSettings {
        try output.writeMessage(3, value:mapSettings)
      }
      if hasLevelSettings {
        try output.writeMessage(4, value:levelSettings)
      }
      if hasInventorySettings {
        try output.writeMessage(5, value:inventorySettings)
      }
      if hasMinimumClientVersion {
        try output.writeString(6, value:minimumClientVersion)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasFortSettings {
          if let varSizefortSettings = fortSettings?.computeMessageSize(2) {
              serialize_size += varSizefortSettings
          }
      }
      if hasMapSettings {
          if let varSizemapSettings = mapSettings?.computeMessageSize(3) {
              serialize_size += varSizemapSettings
          }
      }
      if hasLevelSettings {
          if let varSizelevelSettings = levelSettings?.computeMessageSize(4) {
              serialize_size += varSizelevelSettings
          }
      }
      if hasInventorySettings {
          if let varSizeinventorySettings = inventorySettings?.computeMessageSize(5) {
              serialize_size += varSizeinventorySettings
          }
      }
      if hasMinimumClientVersion {
        serialize_size += minimumClientVersion.computeStringSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.GlobalSettings> {
      var mergedArray = Array<Pogoprotos.Settings.GlobalSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.GlobalSettings? {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.PogoprotosSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.GlobalSettings.Builder {
      return Pogoprotos.Settings.GlobalSettings.classBuilder() as! Pogoprotos.Settings.GlobalSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.GlobalSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.GlobalSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.GlobalSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.GlobalSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.GlobalSettings.Builder {
      return try Pogoprotos.Settings.GlobalSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.GlobalSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
      return try Pogoprotos.Settings.GlobalSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasFortSettings {
        jsonMap["fortSettings"] = try fortSettings.encode()
      }
      if hasMapSettings {
        jsonMap["mapSettings"] = try mapSettings.encode()
      }
      if hasLevelSettings {
        jsonMap["levelSettings"] = try levelSettings.encode()
      }
      if hasInventorySettings {
        jsonMap["inventorySettings"] = try inventorySettings.encode()
      }
      if hasMinimumClientVersion {
        jsonMap["minimumClientVersion"] = minimumClientVersion
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.GlobalSettings {
      return try Pogoprotos.Settings.GlobalSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasFortSettings {
        output += "\(indent) fortSettings {\n"
        if let outDescFortSettings = fortSettings {
          output += try outDescFortSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMapSettings {
        output += "\(indent) mapSettings {\n"
        if let outDescMapSettings = mapSettings {
          output += try outDescMapSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLevelSettings {
        output += "\(indent) levelSettings {\n"
        if let outDescLevelSettings = levelSettings {
          output += try outDescLevelSettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasInventorySettings {
        output += "\(indent) inventorySettings {\n"
        if let outDescInventorySettings = inventorySettings {
          output += try outDescInventorySettings.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMinimumClientVersion {
        output += "\(indent) minimumClientVersion: \(minimumClientVersion) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasFortSettings {
                if let hashValuefortSettings = fortSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefortSettings
                }
            }
            if hasMapSettings {
                if let hashValuemapSettings = mapSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemapSettings
                }
            }
            if hasLevelSettings {
                if let hashValuelevelSettings = levelSettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelevelSettings
                }
            }
            if hasInventorySettings {
                if let hashValueinventorySettings = inventorySettings?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventorySettings
                }
            }
            if hasMinimumClientVersion {
               hashCode = (hashCode &* 31) &+ minimumClientVersion.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.GlobalSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.GlobalSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.GlobalSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.GlobalSettings = Pogoprotos.Settings.GlobalSettings()
      public func getMessage() -> Pogoprotos.Settings.GlobalSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasFortSettings:Bool {
           get {
               return builderResult.hasFortSettings
           }
      }
      public var fortSettings:Pogoprotos.Settings.FortSettings! {
           get {
               if fortSettingsBuilder_ != nil {
                  builderResult.fortSettings = fortSettingsBuilder_.getMessage()
               }
               return builderResult.fortSettings
           }
           set (value) {
               builderResult.hasFortSettings = true
               builderResult.fortSettings = value
           }
      }
      private var fortSettingsBuilder_:Pogoprotos.Settings.FortSettings.Builder! {
           didSet {
              builderResult.hasFortSettings = true
           }
      }
      public func getFortSettingsBuilder() -> Pogoprotos.Settings.FortSettings.Builder {
        if fortSettingsBuilder_ == nil {
           fortSettingsBuilder_ = Pogoprotos.Settings.FortSettings.Builder()
           builderResult.fortSettings = fortSettingsBuilder_.getMessage()
           if fortSettings != nil {
              try! fortSettingsBuilder_.mergeFrom(fortSettings)
           }
        }
        return fortSettingsBuilder_
      }
      public func setFortSettings(value:Pogoprotos.Settings.FortSettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.fortSettings = value
        return self
      }
      public func mergeFortSettings(value:Pogoprotos.Settings.FortSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasFortSettings {
          builderResult.fortSettings = try Pogoprotos.Settings.FortSettings.builderWithPrototype(builderResult.fortSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.fortSettings = value
        }
        builderResult.hasFortSettings = true
        return self
      }
      public func clearFortSettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        fortSettingsBuilder_ = nil
        builderResult.hasFortSettings = false
        builderResult.fortSettings = nil
        return self
      }
      public var hasMapSettings:Bool {
           get {
               return builderResult.hasMapSettings
           }
      }
      public var mapSettings:Pogoprotos.Settings.MapSettings! {
           get {
               if mapSettingsBuilder_ != nil {
                  builderResult.mapSettings = mapSettingsBuilder_.getMessage()
               }
               return builderResult.mapSettings
           }
           set (value) {
               builderResult.hasMapSettings = true
               builderResult.mapSettings = value
           }
      }
      private var mapSettingsBuilder_:Pogoprotos.Settings.MapSettings.Builder! {
           didSet {
              builderResult.hasMapSettings = true
           }
      }
      public func getMapSettingsBuilder() -> Pogoprotos.Settings.MapSettings.Builder {
        if mapSettingsBuilder_ == nil {
           mapSettingsBuilder_ = Pogoprotos.Settings.MapSettings.Builder()
           builderResult.mapSettings = mapSettingsBuilder_.getMessage()
           if mapSettings != nil {
              try! mapSettingsBuilder_.mergeFrom(mapSettings)
           }
        }
        return mapSettingsBuilder_
      }
      public func setMapSettings(value:Pogoprotos.Settings.MapSettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.mapSettings = value
        return self
      }
      public func mergeMapSettings(value:Pogoprotos.Settings.MapSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasMapSettings {
          builderResult.mapSettings = try Pogoprotos.Settings.MapSettings.builderWithPrototype(builderResult.mapSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.mapSettings = value
        }
        builderResult.hasMapSettings = true
        return self
      }
      public func clearMapSettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        mapSettingsBuilder_ = nil
        builderResult.hasMapSettings = false
        builderResult.mapSettings = nil
        return self
      }
      public var hasLevelSettings:Bool {
           get {
               return builderResult.hasLevelSettings
           }
      }
      public var levelSettings:Pogoprotos.Settings.LevelSettings! {
           get {
               if levelSettingsBuilder_ != nil {
                  builderResult.levelSettings = levelSettingsBuilder_.getMessage()
               }
               return builderResult.levelSettings
           }
           set (value) {
               builderResult.hasLevelSettings = true
               builderResult.levelSettings = value
           }
      }
      private var levelSettingsBuilder_:Pogoprotos.Settings.LevelSettings.Builder! {
           didSet {
              builderResult.hasLevelSettings = true
           }
      }
      public func getLevelSettingsBuilder() -> Pogoprotos.Settings.LevelSettings.Builder {
        if levelSettingsBuilder_ == nil {
           levelSettingsBuilder_ = Pogoprotos.Settings.LevelSettings.Builder()
           builderResult.levelSettings = levelSettingsBuilder_.getMessage()
           if levelSettings != nil {
              try! levelSettingsBuilder_.mergeFrom(levelSettings)
           }
        }
        return levelSettingsBuilder_
      }
      public func setLevelSettings(value:Pogoprotos.Settings.LevelSettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.levelSettings = value
        return self
      }
      public func mergeLevelSettings(value:Pogoprotos.Settings.LevelSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasLevelSettings {
          builderResult.levelSettings = try Pogoprotos.Settings.LevelSettings.builderWithPrototype(builderResult.levelSettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.levelSettings = value
        }
        builderResult.hasLevelSettings = true
        return self
      }
      public func clearLevelSettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        levelSettingsBuilder_ = nil
        builderResult.hasLevelSettings = false
        builderResult.levelSettings = nil
        return self
      }
      public var hasInventorySettings:Bool {
           get {
               return builderResult.hasInventorySettings
           }
      }
      public var inventorySettings:Pogoprotos.Settings.InventorySettings! {
           get {
               if inventorySettingsBuilder_ != nil {
                  builderResult.inventorySettings = inventorySettingsBuilder_.getMessage()
               }
               return builderResult.inventorySettings
           }
           set (value) {
               builderResult.hasInventorySettings = true
               builderResult.inventorySettings = value
           }
      }
      private var inventorySettingsBuilder_:Pogoprotos.Settings.InventorySettings.Builder! {
           didSet {
              builderResult.hasInventorySettings = true
           }
      }
      public func getInventorySettingsBuilder() -> Pogoprotos.Settings.InventorySettings.Builder {
        if inventorySettingsBuilder_ == nil {
           inventorySettingsBuilder_ = Pogoprotos.Settings.InventorySettings.Builder()
           builderResult.inventorySettings = inventorySettingsBuilder_.getMessage()
           if inventorySettings != nil {
              try! inventorySettingsBuilder_.mergeFrom(inventorySettings)
           }
        }
        return inventorySettingsBuilder_
      }
      public func setInventorySettings(value:Pogoprotos.Settings.InventorySettings!) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.inventorySettings = value
        return self
      }
      public func mergeInventorySettings(value:Pogoprotos.Settings.InventorySettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if builderResult.hasInventorySettings {
          builderResult.inventorySettings = try Pogoprotos.Settings.InventorySettings.builderWithPrototype(builderResult.inventorySettings).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventorySettings = value
        }
        builderResult.hasInventorySettings = true
        return self
      }
      public func clearInventorySettings() -> Pogoprotos.Settings.GlobalSettings.Builder {
        inventorySettingsBuilder_ = nil
        builderResult.hasInventorySettings = false
        builderResult.inventorySettings = nil
        return self
      }
      public var hasMinimumClientVersion:Bool {
           get {
                return builderResult.hasMinimumClientVersion
           }
      }
      public var minimumClientVersion:String {
           get {
                return builderResult.minimumClientVersion
           }
           set (value) {
               builderResult.hasMinimumClientVersion = true
               builderResult.minimumClientVersion = value
           }
      }
      public func setMinimumClientVersion(value:String) -> Pogoprotos.Settings.GlobalSettings.Builder {
        self.minimumClientVersion = value
        return self
      }
      public func clearMinimumClientVersion() -> Pogoprotos.Settings.GlobalSettings.Builder{
           builderResult.hasMinimumClientVersion = false
           builderResult.minimumClientVersion = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.GlobalSettings.Builder {
        builderResult = Pogoprotos.Settings.GlobalSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        return try Pogoprotos.Settings.GlobalSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.GlobalSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.GlobalSettings {
        let returnMe:Pogoprotos.Settings.GlobalSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.GlobalSettings) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        if other == Pogoprotos.Settings.GlobalSettings() {
         return self
        }
        if (other.hasFortSettings) {
            try mergeFortSettings(other.fortSettings)
        }
        if (other.hasMapSettings) {
            try mergeMapSettings(other.mapSettings)
        }
        if (other.hasLevelSettings) {
            try mergeLevelSettings(other.levelSettings)
        }
        if (other.hasInventorySettings) {
            try mergeInventorySettings(other.inventorySettings)
        }
        if other.hasMinimumClientVersion {
             minimumClientVersion = other.minimumClientVersion
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 18:
            let subBuilder:Pogoprotos.Settings.FortSettings.Builder = Pogoprotos.Settings.FortSettings.Builder()
            if hasFortSettings {
              try subBuilder.mergeFrom(fortSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fortSettings = subBuilder.buildPartial()

          case 26:
            let subBuilder:Pogoprotos.Settings.MapSettings.Builder = Pogoprotos.Settings.MapSettings.Builder()
            if hasMapSettings {
              try subBuilder.mergeFrom(mapSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            mapSettings = subBuilder.buildPartial()

          case 34:
            let subBuilder:Pogoprotos.Settings.LevelSettings.Builder = Pogoprotos.Settings.LevelSettings.Builder()
            if hasLevelSettings {
              try subBuilder.mergeFrom(levelSettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            levelSettings = subBuilder.buildPartial()

          case 42:
            let subBuilder:Pogoprotos.Settings.InventorySettings.Builder = Pogoprotos.Settings.InventorySettings.Builder()
            if hasInventorySettings {
              try subBuilder.mergeFrom(inventorySettings)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventorySettings = subBuilder.buildPartial()

          case 50:
            minimumClientVersion = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.GlobalSettings.Builder()
        if let jsonValueFortSettings = jsonMap["fortSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.fortSettings = try Pogoprotos.Settings.FortSettings.Builder.decodeToBuilder(jsonValueFortSettings).build()

        }
        if let jsonValueMapSettings = jsonMap["mapSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.mapSettings = try Pogoprotos.Settings.MapSettings.Builder.decodeToBuilder(jsonValueMapSettings).build()

        }
        if let jsonValueLevelSettings = jsonMap["levelSettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.levelSettings = try Pogoprotos.Settings.LevelSettings.Builder.decodeToBuilder(jsonValueLevelSettings).build()

        }
        if let jsonValueInventorySettings = jsonMap["inventorySettings"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventorySettings = try Pogoprotos.Settings.InventorySettings.Builder.decodeToBuilder(jsonValueInventorySettings).build()

        }
        if let jsonValueMinimumClientVersion = jsonMap["minimumClientVersion"] as? String {
          resultDecodedBuilder.minimumClientVersion = jsonValueMinimumClientVersion
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.GlobalSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.GlobalSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class InventorySettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasMaxPokemon:Bool = false
    public private(set) var maxPokemon:Int32 = Int32(0)

    public private(set) var hasMaxBagItems:Bool = false
    public private(set) var maxBagItems:Int32 = Int32(0)

    public private(set) var hasBasePokemon:Bool = false
    public private(set) var basePokemon:Int32 = Int32(0)

    public private(set) var hasBaseBagItems:Bool = false
    public private(set) var baseBagItems:Int32 = Int32(0)

    public private(set) var hasBaseEggs:Bool = false
    public private(set) var baseEggs:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMaxPokemon {
        try output.writeInt32(1, value:maxPokemon)
      }
      if hasMaxBagItems {
        try output.writeInt32(2, value:maxBagItems)
      }
      if hasBasePokemon {
        try output.writeInt32(3, value:basePokemon)
      }
      if hasBaseBagItems {
        try output.writeInt32(4, value:baseBagItems)
      }
      if hasBaseEggs {
        try output.writeInt32(5, value:baseEggs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMaxPokemon {
        serialize_size += maxPokemon.computeInt32Size(1)
      }
      if hasMaxBagItems {
        serialize_size += maxBagItems.computeInt32Size(2)
      }
      if hasBasePokemon {
        serialize_size += basePokemon.computeInt32Size(3)
      }
      if hasBaseBagItems {
        serialize_size += baseBagItems.computeInt32Size(4)
      }
      if hasBaseEggs {
        serialize_size += baseEggs.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.InventorySettings> {
      var mergedArray = Array<Pogoprotos.Settings.InventorySettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.InventorySettings? {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.PogoprotosSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.InventorySettings.Builder {
      return Pogoprotos.Settings.InventorySettings.classBuilder() as! Pogoprotos.Settings.InventorySettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.InventorySettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.InventorySettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.InventorySettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.InventorySettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.InventorySettings.Builder {
      return try Pogoprotos.Settings.InventorySettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.InventorySettings) throws -> Pogoprotos.Settings.InventorySettings.Builder {
      return try Pogoprotos.Settings.InventorySettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasMaxPokemon {
        jsonMap["maxPokemon"] = NSNumber(int:maxPokemon)
      }
      if hasMaxBagItems {
        jsonMap["maxBagItems"] = NSNumber(int:maxBagItems)
      }
      if hasBasePokemon {
        jsonMap["basePokemon"] = NSNumber(int:basePokemon)
      }
      if hasBaseBagItems {
        jsonMap["baseBagItems"] = NSNumber(int:baseBagItems)
      }
      if hasBaseEggs {
        jsonMap["baseEggs"] = NSNumber(int:baseEggs)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.InventorySettings {
      return try Pogoprotos.Settings.InventorySettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasMaxPokemon {
        output += "\(indent) maxPokemon: \(maxPokemon) \n"
      }
      if hasMaxBagItems {
        output += "\(indent) maxBagItems: \(maxBagItems) \n"
      }
      if hasBasePokemon {
        output += "\(indent) basePokemon: \(basePokemon) \n"
      }
      if hasBaseBagItems {
        output += "\(indent) baseBagItems: \(baseBagItems) \n"
      }
      if hasBaseEggs {
        output += "\(indent) baseEggs: \(baseEggs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMaxPokemon {
               hashCode = (hashCode &* 31) &+ maxPokemon.hashValue
            }
            if hasMaxBagItems {
               hashCode = (hashCode &* 31) &+ maxBagItems.hashValue
            }
            if hasBasePokemon {
               hashCode = (hashCode &* 31) &+ basePokemon.hashValue
            }
            if hasBaseBagItems {
               hashCode = (hashCode &* 31) &+ baseBagItems.hashValue
            }
            if hasBaseEggs {
               hashCode = (hashCode &* 31) &+ baseEggs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.InventorySettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.InventorySettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.InventorySettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.InventorySettings = Pogoprotos.Settings.InventorySettings()
      public func getMessage() -> Pogoprotos.Settings.InventorySettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMaxPokemon:Bool {
           get {
                return builderResult.hasMaxPokemon
           }
      }
      public var maxPokemon:Int32 {
           get {
                return builderResult.maxPokemon
           }
           set (value) {
               builderResult.hasMaxPokemon = true
               builderResult.maxPokemon = value
           }
      }
      public func setMaxPokemon(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.maxPokemon = value
        return self
      }
      public func clearMaxPokemon() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasMaxPokemon = false
           builderResult.maxPokemon = Int32(0)
           return self
      }
      public var hasMaxBagItems:Bool {
           get {
                return builderResult.hasMaxBagItems
           }
      }
      public var maxBagItems:Int32 {
           get {
                return builderResult.maxBagItems
           }
           set (value) {
               builderResult.hasMaxBagItems = true
               builderResult.maxBagItems = value
           }
      }
      public func setMaxBagItems(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.maxBagItems = value
        return self
      }
      public func clearMaxBagItems() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasMaxBagItems = false
           builderResult.maxBagItems = Int32(0)
           return self
      }
      public var hasBasePokemon:Bool {
           get {
                return builderResult.hasBasePokemon
           }
      }
      public var basePokemon:Int32 {
           get {
                return builderResult.basePokemon
           }
           set (value) {
               builderResult.hasBasePokemon = true
               builderResult.basePokemon = value
           }
      }
      public func setBasePokemon(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.basePokemon = value
        return self
      }
      public func clearBasePokemon() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasBasePokemon = false
           builderResult.basePokemon = Int32(0)
           return self
      }
      public var hasBaseBagItems:Bool {
           get {
                return builderResult.hasBaseBagItems
           }
      }
      public var baseBagItems:Int32 {
           get {
                return builderResult.baseBagItems
           }
           set (value) {
               builderResult.hasBaseBagItems = true
               builderResult.baseBagItems = value
           }
      }
      public func setBaseBagItems(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.baseBagItems = value
        return self
      }
      public func clearBaseBagItems() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasBaseBagItems = false
           builderResult.baseBagItems = Int32(0)
           return self
      }
      public var hasBaseEggs:Bool {
           get {
                return builderResult.hasBaseEggs
           }
      }
      public var baseEggs:Int32 {
           get {
                return builderResult.baseEggs
           }
           set (value) {
               builderResult.hasBaseEggs = true
               builderResult.baseEggs = value
           }
      }
      public func setBaseEggs(value:Int32) -> Pogoprotos.Settings.InventorySettings.Builder {
        self.baseEggs = value
        return self
      }
      public func clearBaseEggs() -> Pogoprotos.Settings.InventorySettings.Builder{
           builderResult.hasBaseEggs = false
           builderResult.baseEggs = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.InventorySettings.Builder {
        builderResult = Pogoprotos.Settings.InventorySettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.InventorySettings.Builder {
        return try Pogoprotos.Settings.InventorySettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.InventorySettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.InventorySettings {
        let returnMe:Pogoprotos.Settings.InventorySettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.InventorySettings) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        if other == Pogoprotos.Settings.InventorySettings() {
         return self
        }
        if other.hasMaxPokemon {
             maxPokemon = other.maxPokemon
        }
        if other.hasMaxBagItems {
             maxBagItems = other.maxBagItems
        }
        if other.hasBasePokemon {
             basePokemon = other.basePokemon
        }
        if other.hasBaseBagItems {
             baseBagItems = other.baseBagItems
        }
        if other.hasBaseEggs {
             baseEggs = other.baseEggs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.InventorySettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            maxPokemon = try input.readInt32()

          case 16:
            maxBagItems = try input.readInt32()

          case 24:
            basePokemon = try input.readInt32()

          case 32:
            baseBagItems = try input.readInt32()

          case 40:
            baseEggs = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.InventorySettings.Builder()
        if let jsonValueMaxPokemon = jsonMap["maxPokemon"] as? NSNumber {
          resultDecodedBuilder.maxPokemon = jsonValueMaxPokemon.intValue
        }
        if let jsonValueMaxBagItems = jsonMap["maxBagItems"] as? NSNumber {
          resultDecodedBuilder.maxBagItems = jsonValueMaxBagItems.intValue
        }
        if let jsonValueBasePokemon = jsonMap["basePokemon"] as? NSNumber {
          resultDecodedBuilder.basePokemon = jsonValueBasePokemon.intValue
        }
        if let jsonValueBaseBagItems = jsonMap["baseBagItems"] as? NSNumber {
          resultDecodedBuilder.baseBagItems = jsonValueBaseBagItems.intValue
        }
        if let jsonValueBaseEggs = jsonMap["baseEggs"] as? NSNumber {
          resultDecodedBuilder.baseEggs = jsonValueBaseEggs.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.InventorySettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.InventorySettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class LevelSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasTrainerCpModifier:Bool = false
    public private(set) var trainerCpModifier:Double = Double(0)

    public private(set) var hasTrainerDifficultyModifier:Bool = false
    public private(set) var trainerDifficultyModifier:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTrainerCpModifier {
        try output.writeDouble(2, value:trainerCpModifier)
      }
      if hasTrainerDifficultyModifier {
        try output.writeDouble(3, value:trainerDifficultyModifier)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTrainerCpModifier {
        serialize_size += trainerCpModifier.computeDoubleSize(2)
      }
      if hasTrainerDifficultyModifier {
        serialize_size += trainerDifficultyModifier.computeDoubleSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.LevelSettings> {
      var mergedArray = Array<Pogoprotos.Settings.LevelSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.LevelSettings? {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.PogoprotosSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.LevelSettings.Builder {
      return Pogoprotos.Settings.LevelSettings.classBuilder() as! Pogoprotos.Settings.LevelSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.LevelSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.LevelSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.LevelSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.LevelSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.LevelSettings.Builder {
      return try Pogoprotos.Settings.LevelSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.LevelSettings) throws -> Pogoprotos.Settings.LevelSettings.Builder {
      return try Pogoprotos.Settings.LevelSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasTrainerCpModifier {
        jsonMap["trainerCpModifier"] = NSNumber(double:trainerCpModifier)
      }
      if hasTrainerDifficultyModifier {
        jsonMap["trainerDifficultyModifier"] = NSNumber(double:trainerDifficultyModifier)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.LevelSettings {
      return try Pogoprotos.Settings.LevelSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasTrainerCpModifier {
        output += "\(indent) trainerCpModifier: \(trainerCpModifier) \n"
      }
      if hasTrainerDifficultyModifier {
        output += "\(indent) trainerDifficultyModifier: \(trainerDifficultyModifier) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTrainerCpModifier {
               hashCode = (hashCode &* 31) &+ trainerCpModifier.hashValue
            }
            if hasTrainerDifficultyModifier {
               hashCode = (hashCode &* 31) &+ trainerDifficultyModifier.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.LevelSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.LevelSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.LevelSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.LevelSettings = Pogoprotos.Settings.LevelSettings()
      public func getMessage() -> Pogoprotos.Settings.LevelSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTrainerCpModifier:Bool {
           get {
                return builderResult.hasTrainerCpModifier
           }
      }
      public var trainerCpModifier:Double {
           get {
                return builderResult.trainerCpModifier
           }
           set (value) {
               builderResult.hasTrainerCpModifier = true
               builderResult.trainerCpModifier = value
           }
      }
      public func setTrainerCpModifier(value:Double) -> Pogoprotos.Settings.LevelSettings.Builder {
        self.trainerCpModifier = value
        return self
      }
      public func clearTrainerCpModifier() -> Pogoprotos.Settings.LevelSettings.Builder{
           builderResult.hasTrainerCpModifier = false
           builderResult.trainerCpModifier = Double(0)
           return self
      }
      public var hasTrainerDifficultyModifier:Bool {
           get {
                return builderResult.hasTrainerDifficultyModifier
           }
      }
      public var trainerDifficultyModifier:Double {
           get {
                return builderResult.trainerDifficultyModifier
           }
           set (value) {
               builderResult.hasTrainerDifficultyModifier = true
               builderResult.trainerDifficultyModifier = value
           }
      }
      public func setTrainerDifficultyModifier(value:Double) -> Pogoprotos.Settings.LevelSettings.Builder {
        self.trainerDifficultyModifier = value
        return self
      }
      public func clearTrainerDifficultyModifier() -> Pogoprotos.Settings.LevelSettings.Builder{
           builderResult.hasTrainerDifficultyModifier = false
           builderResult.trainerDifficultyModifier = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.LevelSettings.Builder {
        builderResult = Pogoprotos.Settings.LevelSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.LevelSettings.Builder {
        return try Pogoprotos.Settings.LevelSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.LevelSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.LevelSettings {
        let returnMe:Pogoprotos.Settings.LevelSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.LevelSettings) throws -> Pogoprotos.Settings.LevelSettings.Builder {
        if other == Pogoprotos.Settings.LevelSettings() {
         return self
        }
        if other.hasTrainerCpModifier {
             trainerCpModifier = other.trainerCpModifier
        }
        if other.hasTrainerDifficultyModifier {
             trainerDifficultyModifier = other.trainerDifficultyModifier
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.LevelSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.LevelSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 17:
            trainerCpModifier = try input.readDouble()

          case 25:
            trainerDifficultyModifier = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.LevelSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.LevelSettings.Builder()
        if let jsonValueTrainerCpModifier = jsonMap["trainerCpModifier"] as? NSNumber {
          resultDecodedBuilder.trainerCpModifier = jsonValueTrainerCpModifier.doubleValue
        }
        if let jsonValueTrainerDifficultyModifier = jsonMap["trainerDifficultyModifier"] as? NSNumber {
          resultDecodedBuilder.trainerDifficultyModifier = jsonValueTrainerDifficultyModifier.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.LevelSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.LevelSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class MapSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasPokemonVisibleRange:Bool = false
    public private(set) var pokemonVisibleRange:Double = Double(0)

    public private(set) var hasPokeNavRangeMeters:Bool = false
    public private(set) var pokeNavRangeMeters:Double = Double(0)

    public private(set) var hasEncounterRangeMeters:Bool = false
    public private(set) var encounterRangeMeters:Double = Double(0)

    public private(set) var hasGetMapObjectsMinRefreshSeconds:Bool = false
    public private(set) var getMapObjectsMinRefreshSeconds:Float = Float(0)

    public private(set) var hasGetMapObjectsMaxRefreshSeconds:Bool = false
    public private(set) var getMapObjectsMaxRefreshSeconds:Float = Float(0)

    public private(set) var hasGetMapObjectsMinDistanceMeters:Bool = false
    public private(set) var getMapObjectsMinDistanceMeters:Float = Float(0)

    public private(set) var hasGoogleMapsApiKey:Bool = false
    public private(set) var googleMapsApiKey:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonVisibleRange {
        try output.writeDouble(1, value:pokemonVisibleRange)
      }
      if hasPokeNavRangeMeters {
        try output.writeDouble(2, value:pokeNavRangeMeters)
      }
      if hasEncounterRangeMeters {
        try output.writeDouble(3, value:encounterRangeMeters)
      }
      if hasGetMapObjectsMinRefreshSeconds {
        try output.writeFloat(4, value:getMapObjectsMinRefreshSeconds)
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        try output.writeFloat(5, value:getMapObjectsMaxRefreshSeconds)
      }
      if hasGetMapObjectsMinDistanceMeters {
        try output.writeFloat(6, value:getMapObjectsMinDistanceMeters)
      }
      if hasGoogleMapsApiKey {
        try output.writeString(7, value:googleMapsApiKey)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPokemonVisibleRange {
        serialize_size += pokemonVisibleRange.computeDoubleSize(1)
      }
      if hasPokeNavRangeMeters {
        serialize_size += pokeNavRangeMeters.computeDoubleSize(2)
      }
      if hasEncounterRangeMeters {
        serialize_size += encounterRangeMeters.computeDoubleSize(3)
      }
      if hasGetMapObjectsMinRefreshSeconds {
        serialize_size += getMapObjectsMinRefreshSeconds.computeFloatSize(4)
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        serialize_size += getMapObjectsMaxRefreshSeconds.computeFloatSize(5)
      }
      if hasGetMapObjectsMinDistanceMeters {
        serialize_size += getMapObjectsMinDistanceMeters.computeFloatSize(6)
      }
      if hasGoogleMapsApiKey {
        serialize_size += googleMapsApiKey.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.MapSettings> {
      var mergedArray = Array<Pogoprotos.Settings.MapSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.MapSettings? {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.PogoprotosSettingsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.MapSettings.Builder {
      return Pogoprotos.Settings.MapSettings.classBuilder() as! Pogoprotos.Settings.MapSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.MapSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.MapSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.MapSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.MapSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.MapSettings.Builder {
      return try Pogoprotos.Settings.MapSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.MapSettings) throws -> Pogoprotos.Settings.MapSettings.Builder {
      return try Pogoprotos.Settings.MapSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonVisibleRange {
        jsonMap["pokemonVisibleRange"] = NSNumber(double:pokemonVisibleRange)
      }
      if hasPokeNavRangeMeters {
        jsonMap["pokeNavRangeMeters"] = NSNumber(double:pokeNavRangeMeters)
      }
      if hasEncounterRangeMeters {
        jsonMap["encounterRangeMeters"] = NSNumber(double:encounterRangeMeters)
      }
      if hasGetMapObjectsMinRefreshSeconds {
        jsonMap["getMapObjectsMinRefreshSeconds"] = NSNumber(float:getMapObjectsMinRefreshSeconds)
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        jsonMap["getMapObjectsMaxRefreshSeconds"] = NSNumber(float:getMapObjectsMaxRefreshSeconds)
      }
      if hasGetMapObjectsMinDistanceMeters {
        jsonMap["getMapObjectsMinDistanceMeters"] = NSNumber(float:getMapObjectsMinDistanceMeters)
      }
      if hasGoogleMapsApiKey {
        jsonMap["googleMapsApiKey"] = googleMapsApiKey
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.MapSettings {
      return try Pogoprotos.Settings.MapSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasPokemonVisibleRange {
        output += "\(indent) pokemonVisibleRange: \(pokemonVisibleRange) \n"
      }
      if hasPokeNavRangeMeters {
        output += "\(indent) pokeNavRangeMeters: \(pokeNavRangeMeters) \n"
      }
      if hasEncounterRangeMeters {
        output += "\(indent) encounterRangeMeters: \(encounterRangeMeters) \n"
      }
      if hasGetMapObjectsMinRefreshSeconds {
        output += "\(indent) getMapObjectsMinRefreshSeconds: \(getMapObjectsMinRefreshSeconds) \n"
      }
      if hasGetMapObjectsMaxRefreshSeconds {
        output += "\(indent) getMapObjectsMaxRefreshSeconds: \(getMapObjectsMaxRefreshSeconds) \n"
      }
      if hasGetMapObjectsMinDistanceMeters {
        output += "\(indent) getMapObjectsMinDistanceMeters: \(getMapObjectsMinDistanceMeters) \n"
      }
      if hasGoogleMapsApiKey {
        output += "\(indent) googleMapsApiKey: \(googleMapsApiKey) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonVisibleRange {
               hashCode = (hashCode &* 31) &+ pokemonVisibleRange.hashValue
            }
            if hasPokeNavRangeMeters {
               hashCode = (hashCode &* 31) &+ pokeNavRangeMeters.hashValue
            }
            if hasEncounterRangeMeters {
               hashCode = (hashCode &* 31) &+ encounterRangeMeters.hashValue
            }
            if hasGetMapObjectsMinRefreshSeconds {
               hashCode = (hashCode &* 31) &+ getMapObjectsMinRefreshSeconds.hashValue
            }
            if hasGetMapObjectsMaxRefreshSeconds {
               hashCode = (hashCode &* 31) &+ getMapObjectsMaxRefreshSeconds.hashValue
            }
            if hasGetMapObjectsMinDistanceMeters {
               hashCode = (hashCode &* 31) &+ getMapObjectsMinDistanceMeters.hashValue
            }
            if hasGoogleMapsApiKey {
               hashCode = (hashCode &* 31) &+ googleMapsApiKey.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.MapSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.MapSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.MapSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.MapSettings = Pogoprotos.Settings.MapSettings()
      public func getMessage() -> Pogoprotos.Settings.MapSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasPokemonVisibleRange:Bool {
           get {
                return builderResult.hasPokemonVisibleRange
           }
      }
      public var pokemonVisibleRange:Double {
           get {
                return builderResult.pokemonVisibleRange
           }
           set (value) {
               builderResult.hasPokemonVisibleRange = true
               builderResult.pokemonVisibleRange = value
           }
      }
      public func setPokemonVisibleRange(value:Double) -> Pogoprotos.Settings.MapSettings.Builder {
        self.pokemonVisibleRange = value
        return self
      }
      public func clearPokemonVisibleRange() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasPokemonVisibleRange = false
           builderResult.pokemonVisibleRange = Double(0)
           return self
      }
      public var hasPokeNavRangeMeters:Bool {
           get {
                return builderResult.hasPokeNavRangeMeters
           }
      }
      public var pokeNavRangeMeters:Double {
           get {
                return builderResult.pokeNavRangeMeters
           }
           set (value) {
               builderResult.hasPokeNavRangeMeters = true
               builderResult.pokeNavRangeMeters = value
           }
      }
      public func setPokeNavRangeMeters(value:Double) -> Pogoprotos.Settings.MapSettings.Builder {
        self.pokeNavRangeMeters = value
        return self
      }
      public func clearPokeNavRangeMeters() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasPokeNavRangeMeters = false
           builderResult.pokeNavRangeMeters = Double(0)
           return self
      }
      public var hasEncounterRangeMeters:Bool {
           get {
                return builderResult.hasEncounterRangeMeters
           }
      }
      public var encounterRangeMeters:Double {
           get {
                return builderResult.encounterRangeMeters
           }
           set (value) {
               builderResult.hasEncounterRangeMeters = true
               builderResult.encounterRangeMeters = value
           }
      }
      public func setEncounterRangeMeters(value:Double) -> Pogoprotos.Settings.MapSettings.Builder {
        self.encounterRangeMeters = value
        return self
      }
      public func clearEncounterRangeMeters() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasEncounterRangeMeters = false
           builderResult.encounterRangeMeters = Double(0)
           return self
      }
      public var hasGetMapObjectsMinRefreshSeconds:Bool {
           get {
                return builderResult.hasGetMapObjectsMinRefreshSeconds
           }
      }
      public var getMapObjectsMinRefreshSeconds:Float {
           get {
                return builderResult.getMapObjectsMinRefreshSeconds
           }
           set (value) {
               builderResult.hasGetMapObjectsMinRefreshSeconds = true
               builderResult.getMapObjectsMinRefreshSeconds = value
           }
      }
      public func setGetMapObjectsMinRefreshSeconds(value:Float) -> Pogoprotos.Settings.MapSettings.Builder {
        self.getMapObjectsMinRefreshSeconds = value
        return self
      }
      public func clearGetMapObjectsMinRefreshSeconds() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGetMapObjectsMinRefreshSeconds = false
           builderResult.getMapObjectsMinRefreshSeconds = Float(0)
           return self
      }
      public var hasGetMapObjectsMaxRefreshSeconds:Bool {
           get {
                return builderResult.hasGetMapObjectsMaxRefreshSeconds
           }
      }
      public var getMapObjectsMaxRefreshSeconds:Float {
           get {
                return builderResult.getMapObjectsMaxRefreshSeconds
           }
           set (value) {
               builderResult.hasGetMapObjectsMaxRefreshSeconds = true
               builderResult.getMapObjectsMaxRefreshSeconds = value
           }
      }
      public func setGetMapObjectsMaxRefreshSeconds(value:Float) -> Pogoprotos.Settings.MapSettings.Builder {
        self.getMapObjectsMaxRefreshSeconds = value
        return self
      }
      public func clearGetMapObjectsMaxRefreshSeconds() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGetMapObjectsMaxRefreshSeconds = false
           builderResult.getMapObjectsMaxRefreshSeconds = Float(0)
           return self
      }
      public var hasGetMapObjectsMinDistanceMeters:Bool {
           get {
                return builderResult.hasGetMapObjectsMinDistanceMeters
           }
      }
      public var getMapObjectsMinDistanceMeters:Float {
           get {
                return builderResult.getMapObjectsMinDistanceMeters
           }
           set (value) {
               builderResult.hasGetMapObjectsMinDistanceMeters = true
               builderResult.getMapObjectsMinDistanceMeters = value
           }
      }
      public func setGetMapObjectsMinDistanceMeters(value:Float) -> Pogoprotos.Settings.MapSettings.Builder {
        self.getMapObjectsMinDistanceMeters = value
        return self
      }
      public func clearGetMapObjectsMinDistanceMeters() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGetMapObjectsMinDistanceMeters = false
           builderResult.getMapObjectsMinDistanceMeters = Float(0)
           return self
      }
      public var hasGoogleMapsApiKey:Bool {
           get {
                return builderResult.hasGoogleMapsApiKey
           }
      }
      public var googleMapsApiKey:String {
           get {
                return builderResult.googleMapsApiKey
           }
           set (value) {
               builderResult.hasGoogleMapsApiKey = true
               builderResult.googleMapsApiKey = value
           }
      }
      public func setGoogleMapsApiKey(value:String) -> Pogoprotos.Settings.MapSettings.Builder {
        self.googleMapsApiKey = value
        return self
      }
      public func clearGoogleMapsApiKey() -> Pogoprotos.Settings.MapSettings.Builder{
           builderResult.hasGoogleMapsApiKey = false
           builderResult.googleMapsApiKey = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.MapSettings.Builder {
        builderResult = Pogoprotos.Settings.MapSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.MapSettings.Builder {
        return try Pogoprotos.Settings.MapSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.MapSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.MapSettings {
        let returnMe:Pogoprotos.Settings.MapSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.MapSettings) throws -> Pogoprotos.Settings.MapSettings.Builder {
        if other == Pogoprotos.Settings.MapSettings() {
         return self
        }
        if other.hasPokemonVisibleRange {
             pokemonVisibleRange = other.pokemonVisibleRange
        }
        if other.hasPokeNavRangeMeters {
             pokeNavRangeMeters = other.pokeNavRangeMeters
        }
        if other.hasEncounterRangeMeters {
             encounterRangeMeters = other.encounterRangeMeters
        }
        if other.hasGetMapObjectsMinRefreshSeconds {
             getMapObjectsMinRefreshSeconds = other.getMapObjectsMinRefreshSeconds
        }
        if other.hasGetMapObjectsMaxRefreshSeconds {
             getMapObjectsMaxRefreshSeconds = other.getMapObjectsMaxRefreshSeconds
        }
        if other.hasGetMapObjectsMinDistanceMeters {
             getMapObjectsMinDistanceMeters = other.getMapObjectsMinDistanceMeters
        }
        if other.hasGoogleMapsApiKey {
             googleMapsApiKey = other.googleMapsApiKey
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.MapSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.MapSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            pokemonVisibleRange = try input.readDouble()

          case 17:
            pokeNavRangeMeters = try input.readDouble()

          case 25:
            encounterRangeMeters = try input.readDouble()

          case 37:
            getMapObjectsMinRefreshSeconds = try input.readFloat()

          case 45:
            getMapObjectsMaxRefreshSeconds = try input.readFloat()

          case 53:
            getMapObjectsMinDistanceMeters = try input.readFloat()

          case 58:
            googleMapsApiKey = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.MapSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.MapSettings.Builder()
        if let jsonValuePokemonVisibleRange = jsonMap["pokemonVisibleRange"] as? NSNumber {
          resultDecodedBuilder.pokemonVisibleRange = jsonValuePokemonVisibleRange.doubleValue
        }
        if let jsonValuePokeNavRangeMeters = jsonMap["pokeNavRangeMeters"] as? NSNumber {
          resultDecodedBuilder.pokeNavRangeMeters = jsonValuePokeNavRangeMeters.doubleValue
        }
        if let jsonValueEncounterRangeMeters = jsonMap["encounterRangeMeters"] as? NSNumber {
          resultDecodedBuilder.encounterRangeMeters = jsonValueEncounterRangeMeters.doubleValue
        }
        if let jsonValueGetMapObjectsMinRefreshSeconds = jsonMap["getMapObjectsMinRefreshSeconds"] as? NSNumber {
          resultDecodedBuilder.getMapObjectsMinRefreshSeconds = jsonValueGetMapObjectsMinRefreshSeconds.floatValue
        }
        if let jsonValueGetMapObjectsMaxRefreshSeconds = jsonMap["getMapObjectsMaxRefreshSeconds"] as? NSNumber {
          resultDecodedBuilder.getMapObjectsMaxRefreshSeconds = jsonValueGetMapObjectsMaxRefreshSeconds.floatValue
        }
        if let jsonValueGetMapObjectsMinDistanceMeters = jsonMap["getMapObjectsMinDistanceMeters"] as? NSNumber {
          resultDecodedBuilder.getMapObjectsMinDistanceMeters = jsonValueGetMapObjectsMinDistanceMeters.floatValue
        }
        if let jsonValueGoogleMapsApiKey = jsonMap["googleMapsApiKey"] as? String {
          resultDecodedBuilder.googleMapsApiKey = jsonValueGoogleMapsApiKey
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.MapSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.MapSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
