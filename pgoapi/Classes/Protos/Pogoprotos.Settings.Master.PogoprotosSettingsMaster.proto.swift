// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Settings.Master.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public func == (lhs: Pogoprotos.Settings.Master.BadgeSettings, rhs: Pogoprotos.Settings.Master.BadgeSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBadgeType == rhs.hasBadgeType) && (!lhs.hasBadgeType || lhs.badgeType == rhs.badgeType)
  fieldCheck = fieldCheck && (lhs.hasBadgeRank == rhs.hasBadgeRank) && (!lhs.hasBadgeRank || lhs.badgeRank == rhs.badgeRank)
  fieldCheck = fieldCheck && (lhs.targets == rhs.targets)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.CameraSettings, rhs: Pogoprotos.Settings.Master.CameraSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasNextCamera == rhs.hasNextCamera) && (!lhs.hasNextCamera || lhs.nextCamera == rhs.nextCamera)
  fieldCheck = fieldCheck && (lhs.interpolation == rhs.interpolation)
  fieldCheck = fieldCheck && (lhs.targetType == rhs.targetType)
  fieldCheck = fieldCheck && (lhs.easeInSpeed == rhs.easeInSpeed)
  fieldCheck = fieldCheck && (lhs.eastOutSpeed == rhs.eastOutSpeed)
  fieldCheck = fieldCheck && (lhs.durationSeconds == rhs.durationSeconds)
  fieldCheck = fieldCheck && (lhs.waitSeconds == rhs.waitSeconds)
  fieldCheck = fieldCheck && (lhs.transitionSeconds == rhs.transitionSeconds)
  fieldCheck = fieldCheck && (lhs.angleDegree == rhs.angleDegree)
  fieldCheck = fieldCheck && (lhs.angleOffsetDegree == rhs.angleOffsetDegree)
  fieldCheck = fieldCheck && (lhs.pitchDegree == rhs.pitchDegree)
  fieldCheck = fieldCheck && (lhs.pitchOffsetDegree == rhs.pitchOffsetDegree)
  fieldCheck = fieldCheck && (lhs.rollDegree == rhs.rollDegree)
  fieldCheck = fieldCheck && (lhs.distanceMeters == rhs.distanceMeters)
  fieldCheck = fieldCheck && (lhs.heightPercent == rhs.heightPercent)
  fieldCheck = fieldCheck && (lhs.vertCtrRatio == rhs.vertCtrRatio)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.EncounterSettings, rhs: Pogoprotos.Settings.Master.EncounterSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSpinBonusThreshold == rhs.hasSpinBonusThreshold) && (!lhs.hasSpinBonusThreshold || lhs.spinBonusThreshold == rhs.spinBonusThreshold)
  fieldCheck = fieldCheck && (lhs.hasExcellentThrowThreshold == rhs.hasExcellentThrowThreshold) && (!lhs.hasExcellentThrowThreshold || lhs.excellentThrowThreshold == rhs.excellentThrowThreshold)
  fieldCheck = fieldCheck && (lhs.hasGreatThrowThreshold == rhs.hasGreatThrowThreshold) && (!lhs.hasGreatThrowThreshold || lhs.greatThrowThreshold == rhs.greatThrowThreshold)
  fieldCheck = fieldCheck && (lhs.hasNiceThrowThreshold == rhs.hasNiceThrowThreshold) && (!lhs.hasNiceThrowThreshold || lhs.niceThrowThreshold == rhs.niceThrowThreshold)
  fieldCheck = fieldCheck && (lhs.hasMilestoneThreshold == rhs.hasMilestoneThreshold) && (!lhs.hasMilestoneThreshold || lhs.milestoneThreshold == rhs.milestoneThreshold)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.EquippedBadgeSettings, rhs: Pogoprotos.Settings.Master.EquippedBadgeSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEquipBadgeCooldownMs == rhs.hasEquipBadgeCooldownMs) && (!lhs.hasEquipBadgeCooldownMs || lhs.equipBadgeCooldownMs == rhs.equipBadgeCooldownMs)
  fieldCheck = fieldCheck && (lhs.catchProbabilityBonus == rhs.catchProbabilityBonus)
  fieldCheck = fieldCheck && (lhs.fleeProbabilityBonus == rhs.fleeProbabilityBonus)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.GymBattleSettings, rhs: Pogoprotos.Settings.Master.GymBattleSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEnergyPerSec == rhs.hasEnergyPerSec) && (!lhs.hasEnergyPerSec || lhs.energyPerSec == rhs.energyPerSec)
  fieldCheck = fieldCheck && (lhs.hasDodgeEnergyCost == rhs.hasDodgeEnergyCost) && (!lhs.hasDodgeEnergyCost || lhs.dodgeEnergyCost == rhs.dodgeEnergyCost)
  fieldCheck = fieldCheck && (lhs.hasRetargetSeconds == rhs.hasRetargetSeconds) && (!lhs.hasRetargetSeconds || lhs.retargetSeconds == rhs.retargetSeconds)
  fieldCheck = fieldCheck && (lhs.hasEnemyAttackInterval == rhs.hasEnemyAttackInterval) && (!lhs.hasEnemyAttackInterval || lhs.enemyAttackInterval == rhs.enemyAttackInterval)
  fieldCheck = fieldCheck && (lhs.hasAttackServerInterval == rhs.hasAttackServerInterval) && (!lhs.hasAttackServerInterval || lhs.attackServerInterval == rhs.attackServerInterval)
  fieldCheck = fieldCheck && (lhs.hasRoundDurationSeconds == rhs.hasRoundDurationSeconds) && (!lhs.hasRoundDurationSeconds || lhs.roundDurationSeconds == rhs.roundDurationSeconds)
  fieldCheck = fieldCheck && (lhs.hasBonusTimePerAllySeconds == rhs.hasBonusTimePerAllySeconds) && (!lhs.hasBonusTimePerAllySeconds || lhs.bonusTimePerAllySeconds == rhs.bonusTimePerAllySeconds)
  fieldCheck = fieldCheck && (lhs.hasMaximumAttackersPerBattle == rhs.hasMaximumAttackersPerBattle) && (!lhs.hasMaximumAttackersPerBattle || lhs.maximumAttackersPerBattle == rhs.maximumAttackersPerBattle)
  fieldCheck = fieldCheck && (lhs.hasSameTypeAttackBonusMultiplier == rhs.hasSameTypeAttackBonusMultiplier) && (!lhs.hasSameTypeAttackBonusMultiplier || lhs.sameTypeAttackBonusMultiplier == rhs.sameTypeAttackBonusMultiplier)
  fieldCheck = fieldCheck && (lhs.hasMaximumEnergy == rhs.hasMaximumEnergy) && (!lhs.hasMaximumEnergy || lhs.maximumEnergy == rhs.maximumEnergy)
  fieldCheck = fieldCheck && (lhs.hasEnergyDeltaPerHealthLost == rhs.hasEnergyDeltaPerHealthLost) && (!lhs.hasEnergyDeltaPerHealthLost || lhs.energyDeltaPerHealthLost == rhs.energyDeltaPerHealthLost)
  fieldCheck = fieldCheck && (lhs.hasDodgeDurationMs == rhs.hasDodgeDurationMs) && (!lhs.hasDodgeDurationMs || lhs.dodgeDurationMs == rhs.dodgeDurationMs)
  fieldCheck = fieldCheck && (lhs.hasMinimumPlayerLevel == rhs.hasMinimumPlayerLevel) && (!lhs.hasMinimumPlayerLevel || lhs.minimumPlayerLevel == rhs.minimumPlayerLevel)
  fieldCheck = fieldCheck && (lhs.hasSwapDurationMs == rhs.hasSwapDurationMs) && (!lhs.hasSwapDurationMs || lhs.swapDurationMs == rhs.swapDurationMs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.GymLevelSettings, rhs: Pogoprotos.Settings.Master.GymLevelSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.requiredExperience == rhs.requiredExperience)
  fieldCheck = fieldCheck && (lhs.leaderSlots == rhs.leaderSlots)
  fieldCheck = fieldCheck && (lhs.trainerSlots == rhs.trainerSlots)
  fieldCheck = fieldCheck && (lhs.searchRollBonus == rhs.searchRollBonus)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.IapItemDisplay, rhs: Pogoprotos.Settings.Master.IapItemDisplay) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSku == rhs.hasSku) && (!lhs.hasSku || lhs.sku == rhs.sku)
  fieldCheck = fieldCheck && (lhs.hasCategory == rhs.hasCategory) && (!lhs.hasCategory || lhs.category == rhs.category)
  fieldCheck = fieldCheck && (lhs.hasSortOrder == rhs.hasSortOrder) && (!lhs.hasSortOrder || lhs.sortOrder == rhs.sortOrder)
  fieldCheck = fieldCheck && (lhs.itemIds == rhs.itemIds)
  fieldCheck = fieldCheck && (lhs.counts == rhs.counts)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.IapSettings, rhs: Pogoprotos.Settings.Master.IapSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDailyBonusCoins == rhs.hasDailyBonusCoins) && (!lhs.hasDailyBonusCoins || lhs.dailyBonusCoins == rhs.dailyBonusCoins)
  fieldCheck = fieldCheck && (lhs.dailyDefenderBonusPerPokemon == rhs.dailyDefenderBonusPerPokemon)
  fieldCheck = fieldCheck && (lhs.hasDailyDefenderBonusMaxDefenders == rhs.hasDailyDefenderBonusMaxDefenders) && (!lhs.hasDailyDefenderBonusMaxDefenders || lhs.dailyDefenderBonusMaxDefenders == rhs.dailyDefenderBonusMaxDefenders)
  fieldCheck = fieldCheck && (lhs.dailyDefenderBonusCurrency == rhs.dailyDefenderBonusCurrency)
  fieldCheck = fieldCheck && (lhs.hasMinTimeBetweenClaimsMs == rhs.hasMinTimeBetweenClaimsMs) && (!lhs.hasMinTimeBetweenClaimsMs || lhs.minTimeBetweenClaimsMs == rhs.minTimeBetweenClaimsMs)
  fieldCheck = fieldCheck && (lhs.hasDailyBonusEnabled == rhs.hasDailyBonusEnabled) && (!lhs.hasDailyBonusEnabled || lhs.dailyBonusEnabled == rhs.dailyBonusEnabled)
  fieldCheck = fieldCheck && (lhs.hasDailyDefenderBonusEnabled == rhs.hasDailyDefenderBonusEnabled) && (!lhs.hasDailyDefenderBonusEnabled || lhs.dailyDefenderBonusEnabled == rhs.dailyDefenderBonusEnabled)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.ItemSettings, rhs: Pogoprotos.Settings.Master.ItemSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasItemType == rhs.hasItemType) && (!lhs.hasItemType || lhs.itemType == rhs.itemType)
  fieldCheck = fieldCheck && (lhs.hasCategory == rhs.hasCategory) && (!lhs.hasCategory || lhs.category == rhs.category)
  fieldCheck = fieldCheck && (lhs.hasDropFreq == rhs.hasDropFreq) && (!lhs.hasDropFreq || lhs.dropFreq == rhs.dropFreq)
  fieldCheck = fieldCheck && (lhs.hasDropTrainerLevel == rhs.hasDropTrainerLevel) && (!lhs.hasDropTrainerLevel || lhs.dropTrainerLevel == rhs.dropTrainerLevel)
  fieldCheck = fieldCheck && (lhs.hasPokeball == rhs.hasPokeball) && (!lhs.hasPokeball || lhs.pokeball == rhs.pokeball)
  fieldCheck = fieldCheck && (lhs.hasPotion == rhs.hasPotion) && (!lhs.hasPotion || lhs.potion == rhs.potion)
  fieldCheck = fieldCheck && (lhs.hasRevive == rhs.hasRevive) && (!lhs.hasRevive || lhs.revive == rhs.revive)
  fieldCheck = fieldCheck && (lhs.hasBattle == rhs.hasBattle) && (!lhs.hasBattle || lhs.battle == rhs.battle)
  fieldCheck = fieldCheck && (lhs.hasFood == rhs.hasFood) && (!lhs.hasFood || lhs.food == rhs.food)
  fieldCheck = fieldCheck && (lhs.hasInventoryUpgrade == rhs.hasInventoryUpgrade) && (!lhs.hasInventoryUpgrade || lhs.inventoryUpgrade == rhs.inventoryUpgrade)
  fieldCheck = fieldCheck && (lhs.hasXpBoost == rhs.hasXpBoost) && (!lhs.hasXpBoost || lhs.xpBoost == rhs.xpBoost)
  fieldCheck = fieldCheck && (lhs.hasIncense == rhs.hasIncense) && (!lhs.hasIncense || lhs.incense == rhs.incense)
  fieldCheck = fieldCheck && (lhs.hasEggIncubator == rhs.hasEggIncubator) && (!lhs.hasEggIncubator || lhs.eggIncubator == rhs.eggIncubator)
  fieldCheck = fieldCheck && (lhs.hasFortModifier == rhs.hasFortModifier) && (!lhs.hasFortModifier || lhs.fortModifier == rhs.fortModifier)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.MoveSequenceSettings, rhs: Pogoprotos.Settings.Master.MoveSequenceSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.sequence == rhs.sequence)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.MoveSettings, rhs: Pogoprotos.Settings.Master.MoveSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMovementId == rhs.hasMovementId) && (!lhs.hasMovementId || lhs.movementId == rhs.movementId)
  fieldCheck = fieldCheck && (lhs.hasAnimationId == rhs.hasAnimationId) && (!lhs.hasAnimationId || lhs.animationId == rhs.animationId)
  fieldCheck = fieldCheck && (lhs.hasPokemonType == rhs.hasPokemonType) && (!lhs.hasPokemonType || lhs.pokemonType == rhs.pokemonType)
  fieldCheck = fieldCheck && (lhs.hasPower == rhs.hasPower) && (!lhs.hasPower || lhs.power == rhs.power)
  fieldCheck = fieldCheck && (lhs.hasAccuracyChance == rhs.hasAccuracyChance) && (!lhs.hasAccuracyChance || lhs.accuracyChance == rhs.accuracyChance)
  fieldCheck = fieldCheck && (lhs.hasCriticalChance == rhs.hasCriticalChance) && (!lhs.hasCriticalChance || lhs.criticalChance == rhs.criticalChance)
  fieldCheck = fieldCheck && (lhs.hasHealScalar == rhs.hasHealScalar) && (!lhs.hasHealScalar || lhs.healScalar == rhs.healScalar)
  fieldCheck = fieldCheck && (lhs.hasStaminaLossScalar == rhs.hasStaminaLossScalar) && (!lhs.hasStaminaLossScalar || lhs.staminaLossScalar == rhs.staminaLossScalar)
  fieldCheck = fieldCheck && (lhs.hasTrainerLevelMin == rhs.hasTrainerLevelMin) && (!lhs.hasTrainerLevelMin || lhs.trainerLevelMin == rhs.trainerLevelMin)
  fieldCheck = fieldCheck && (lhs.hasTrainerLevelMax == rhs.hasTrainerLevelMax) && (!lhs.hasTrainerLevelMax || lhs.trainerLevelMax == rhs.trainerLevelMax)
  fieldCheck = fieldCheck && (lhs.hasVfxName == rhs.hasVfxName) && (!lhs.hasVfxName || lhs.vfxName == rhs.vfxName)
  fieldCheck = fieldCheck && (lhs.hasDurationMs == rhs.hasDurationMs) && (!lhs.hasDurationMs || lhs.durationMs == rhs.durationMs)
  fieldCheck = fieldCheck && (lhs.hasDamageWindowStartMs == rhs.hasDamageWindowStartMs) && (!lhs.hasDamageWindowStartMs || lhs.damageWindowStartMs == rhs.damageWindowStartMs)
  fieldCheck = fieldCheck && (lhs.hasDamageWindowEndMs == rhs.hasDamageWindowEndMs) && (!lhs.hasDamageWindowEndMs || lhs.damageWindowEndMs == rhs.damageWindowEndMs)
  fieldCheck = fieldCheck && (lhs.hasEnergyDelta == rhs.hasEnergyDelta) && (!lhs.hasEnergyDelta || lhs.energyDelta == rhs.energyDelta)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.PlayerLevelSettings, rhs: Pogoprotos.Settings.Master.PlayerLevelSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.rankNum == rhs.rankNum)
  fieldCheck = fieldCheck && (lhs.requiredExperience == rhs.requiredExperience)
  fieldCheck = fieldCheck && (lhs.cpMultiplier == rhs.cpMultiplier)
  fieldCheck = fieldCheck && (lhs.hasMaxEggPlayerLevel == rhs.hasMaxEggPlayerLevel) && (!lhs.hasMaxEggPlayerLevel || lhs.maxEggPlayerLevel == rhs.maxEggPlayerLevel)
  fieldCheck = fieldCheck && (lhs.hasMaxEncounterPlayerLevel == rhs.hasMaxEncounterPlayerLevel) && (!lhs.hasMaxEncounterPlayerLevel || lhs.maxEncounterPlayerLevel == rhs.maxEncounterPlayerLevel)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.PokemonSettings, rhs: Pogoprotos.Settings.Master.PokemonSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasModelScale == rhs.hasModelScale) && (!lhs.hasModelScale || lhs.modelScale == rhs.modelScale)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasType2 == rhs.hasType2) && (!lhs.hasType2 || lhs.type2 == rhs.type2)
  fieldCheck = fieldCheck && (lhs.hasCamera == rhs.hasCamera) && (!lhs.hasCamera || lhs.camera == rhs.camera)
  fieldCheck = fieldCheck && (lhs.hasEncounter == rhs.hasEncounter) && (!lhs.hasEncounter || lhs.encounter == rhs.encounter)
  fieldCheck = fieldCheck && (lhs.hasStats == rhs.hasStats) && (!lhs.hasStats || lhs.stats == rhs.stats)
  fieldCheck = fieldCheck && (lhs.quickMoves == rhs.quickMoves)
  fieldCheck = fieldCheck && (lhs.cinematicMoves == rhs.cinematicMoves)
  fieldCheck = fieldCheck && (lhs.animationTime == rhs.animationTime)
  fieldCheck = fieldCheck && (lhs.evolutionIds == rhs.evolutionIds)
  fieldCheck = fieldCheck && (lhs.hasEvolutionPips == rhs.hasEvolutionPips) && (!lhs.hasEvolutionPips || lhs.evolutionPips == rhs.evolutionPips)
  fieldCheck = fieldCheck && (lhs.hasRarity == rhs.hasRarity) && (!lhs.hasRarity || lhs.rarity == rhs.rarity)
  fieldCheck = fieldCheck && (lhs.hasPokedexHeightM == rhs.hasPokedexHeightM) && (!lhs.hasPokedexHeightM || lhs.pokedexHeightM == rhs.pokedexHeightM)
  fieldCheck = fieldCheck && (lhs.hasPokedexWeightKg == rhs.hasPokedexWeightKg) && (!lhs.hasPokedexWeightKg || lhs.pokedexWeightKg == rhs.pokedexWeightKg)
  fieldCheck = fieldCheck && (lhs.hasParentPokemonId == rhs.hasParentPokemonId) && (!lhs.hasParentPokemonId || lhs.parentPokemonId == rhs.parentPokemonId)
  fieldCheck = fieldCheck && (lhs.hasHeightStdDev == rhs.hasHeightStdDev) && (!lhs.hasHeightStdDev || lhs.heightStdDev == rhs.heightStdDev)
  fieldCheck = fieldCheck && (lhs.hasWeightStdDev == rhs.hasWeightStdDev) && (!lhs.hasWeightStdDev || lhs.weightStdDev == rhs.weightStdDev)
  fieldCheck = fieldCheck && (lhs.hasKmDistanceToHatch == rhs.hasKmDistanceToHatch) && (!lhs.hasKmDistanceToHatch || lhs.kmDistanceToHatch == rhs.kmDistanceToHatch)
  fieldCheck = fieldCheck && (lhs.hasFamilyId == rhs.hasFamilyId) && (!lhs.hasFamilyId || lhs.familyId == rhs.familyId)
  fieldCheck = fieldCheck && (lhs.hasCandyToEvolve == rhs.hasCandyToEvolve) && (!lhs.hasCandyToEvolve || lhs.candyToEvolve == rhs.candyToEvolve)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.PokemonUpgradeSettings, rhs: Pogoprotos.Settings.Master.PokemonUpgradeSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUpgradesPerLevel == rhs.hasUpgradesPerLevel) && (!lhs.hasUpgradesPerLevel || lhs.upgradesPerLevel == rhs.upgradesPerLevel)
  fieldCheck = fieldCheck && (lhs.hasAllowedLevelsAbovePlayer == rhs.hasAllowedLevelsAbovePlayer) && (!lhs.hasAllowedLevelsAbovePlayer || lhs.allowedLevelsAbovePlayer == rhs.allowedLevelsAbovePlayer)
  fieldCheck = fieldCheck && (lhs.candyCost == rhs.candyCost)
  fieldCheck = fieldCheck && (lhs.stardustCost == rhs.stardustCost)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Settings.Master.TypeEffectiveSettings, rhs: Pogoprotos.Settings.Master.TypeEffectiveSettings) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.attackScalar == rhs.attackScalar)
  fieldCheck = fieldCheck && (lhs.hasAttackType == rhs.hasAttackType) && (!lhs.hasAttackType || lhs.attackType == rhs.attackType)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Settings.Master {
  public struct PogoprotosSettingsMasterRoot {
    public static var sharedInstance : PogoprotosSettingsMasterRoot {
     struct Static {
         static let instance : PogoprotosSettingsMasterRoot = PogoprotosSettingsMasterRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.PogoprotosInventoryItemRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Item.PogoprotosSettingsMasterItemRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Settings.Master.Pokemon.PogoprotosSettingsMasterPokemonRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class BadgeSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var badgeType:Pogoprotos.Enums.BadgeType = Pogoprotos.Enums.BadgeType.BadgeUnset
    public private(set) var hasBadgeType:Bool = false
    public private(set) var hasBadgeRank:Bool = false
    public private(set) var badgeRank:Int32 = Int32(0)

    public private(set) var targets:Array<Int32> = Array<Int32>()
    private var targetsMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasBadgeType {
        try output.writeEnum(1, value:badgeType.rawValue)
      }
      if hasBadgeRank {
        try output.writeInt32(2, value:badgeRank)
      }
      if !targets.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(targetsMemoizedSerializedSize)
        for oneValuetargets in targets {
          try output.writeInt32NoTag(oneValuetargets)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasBadgeType) {
        serialize_size += badgeType.rawValue.computeEnumSize(1)
      }
      if hasBadgeRank {
        serialize_size += badgeRank.computeInt32Size(2)
      }
      var dataSizeTargets:Int32 = 0
      for oneValuetargets in targets {
          dataSizeTargets += oneValuetargets.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeTargets
      if !targets.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeTargets.computeInt32SizeNoTag()
      }
      targetsMemoizedSerializedSize = dataSizeTargets
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.BadgeSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.BadgeSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings? {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return Pogoprotos.Settings.Master.BadgeSettings.classBuilder() as! Pogoprotos.Settings.Master.BadgeSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.BadgeSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.BadgeSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.BadgeSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return try Pogoprotos.Settings.Master.BadgeSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.BadgeSettings) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasBadgeType {
        jsonMap["badgeType"] = badgeType.toString()
      }
      if hasBadgeRank {
        jsonMap["badgeRank"] = NSNumber(int:badgeRank)
      }
      if !targets.isEmpty {
        var jsonArrayTargets:Array<NSNumber> = []
          for oneValueTargets in targets {
            jsonArrayTargets += [NSNumber(int:oneValueTargets)]
          }
        jsonMap["targets"] = jsonArrayTargets
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.BadgeSettings {
      return try Pogoprotos.Settings.Master.BadgeSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasBadgeType) {
        output += "\(indent) badgeType: \(badgeType.description)\n"
      }
      if hasBadgeRank {
        output += "\(indent) badgeRank: \(badgeRank) \n"
      }
      var targetsElementIndex:Int = 0
      for oneValueTargets in targets  {
          output += "\(indent) targets[\(targetsElementIndex)]: \(oneValueTargets)\n"
          targetsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBadgeType {
               hashCode = (hashCode &* 31) &+ Int(badgeType.rawValue)
            }
            if hasBadgeRank {
               hashCode = (hashCode &* 31) &+ badgeRank.hashValue
            }
            for oneValueTargets in targets {
                hashCode = (hashCode &* 31) &+ oneValueTargets.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.BadgeSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.BadgeSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.BadgeSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.BadgeSettings = Pogoprotos.Settings.Master.BadgeSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.BadgeSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasBadgeType:Bool{
            get {
                return builderResult.hasBadgeType
            }
        }
        public var badgeType:Pogoprotos.Enums.BadgeType {
            get {
                return builderResult.badgeType
            }
            set (value) {
                builderResult.hasBadgeType = true
                builderResult.badgeType = value
            }
        }
        public func setBadgeType(value:Pogoprotos.Enums.BadgeType) -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
          self.badgeType = value
          return self
        }
        public func clearBadgeType() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
           builderResult.hasBadgeType = false
           builderResult.badgeType = .BadgeUnset
           return self
        }
      public var hasBadgeRank:Bool {
           get {
                return builderResult.hasBadgeRank
           }
      }
      public var badgeRank:Int32 {
           get {
                return builderResult.badgeRank
           }
           set (value) {
               builderResult.hasBadgeRank = true
               builderResult.badgeRank = value
           }
      }
      public func setBadgeRank(value:Int32) -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        self.badgeRank = value
        return self
      }
      public func clearBadgeRank() -> Pogoprotos.Settings.Master.BadgeSettings.Builder{
           builderResult.hasBadgeRank = false
           builderResult.badgeRank = Int32(0)
           return self
      }
      public var targets:Array<Int32> {
           get {
               return builderResult.targets
           }
           set (array) {
               builderResult.targets = array
           }
      }
      public func setTargets(value:Array<Int32>) -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        self.targets = value
        return self
      }
      public func clearTargets() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
         builderResult.targets.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.BadgeSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        return try Pogoprotos.Settings.Master.BadgeSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.BadgeSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.BadgeSettings {
        let returnMe:Pogoprotos.Settings.Master.BadgeSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.BadgeSettings) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        if other == Pogoprotos.Settings.Master.BadgeSettings() {
         return self
        }
        if other.hasBadgeType {
             badgeType = other.badgeType
        }
        if other.hasBadgeRank {
             badgeRank = other.badgeRank
        }
        if !other.targets.isEmpty {
            builderResult.targets += other.targets
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntbadgeType = try input.readEnum()
            if let enumsbadgeType = Pogoprotos.Enums.BadgeType(rawValue:valueIntbadgeType){
                 badgeType = enumsbadgeType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbadgeType))
            }

          case 16:
            badgeRank = try input.readInt32()

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.targets += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.BadgeSettings.Builder()
        if let jsonValueBadgeType = jsonMap["badgeType"] as? String {
          resultDecodedBuilder.badgeType = try Pogoprotos.Enums.BadgeType.fromString(jsonValueBadgeType)
        }
        if let jsonValueBadgeRank = jsonMap["badgeRank"] as? NSNumber {
          resultDecodedBuilder.badgeRank = jsonValueBadgeRank.intValue
        }
        if let jsonValueTargets = jsonMap["targets"] as? Array<NSNumber> {
          var jsonArrayTargets:Array<Int32> = []
          for oneValueTargets in jsonValueTargets {
            jsonArrayTargets += [oneValueTargets.intValue]
          }
          resultDecodedBuilder.targets = jsonArrayTargets
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.BadgeSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.BadgeSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class CameraSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasNextCamera:Bool = false
    public private(set) var nextCamera:String = ""

    private var interpolationMemoizedSerializedSize:Int32 = 0
    public private(set) var interpolation:Array<Pogoprotos.Enums.CameraInterpolation> = Array<Pogoprotos.Enums.CameraInterpolation>()
    private var targetTypeMemoizedSerializedSize:Int32 = 0
    public private(set) var targetType:Array<Pogoprotos.Enums.CameraTarget> = Array<Pogoprotos.Enums.CameraTarget>()
    public private(set) var easeInSpeed:Array<Float> = Array<Float>()
    private var easeInSpeedMemoizedSerializedSize:Int32 = -1
    public private(set) var eastOutSpeed:Array<Float> = Array<Float>()
    private var eastOutSpeedMemoizedSerializedSize:Int32 = -1
    public private(set) var durationSeconds:Array<Float> = Array<Float>()
    private var durationSecondsMemoizedSerializedSize:Int32 = -1
    public private(set) var waitSeconds:Array<Float> = Array<Float>()
    private var waitSecondsMemoizedSerializedSize:Int32 = -1
    public private(set) var transitionSeconds:Array<Float> = Array<Float>()
    private var transitionSecondsMemoizedSerializedSize:Int32 = -1
    public private(set) var angleDegree:Array<Float> = Array<Float>()
    private var angleDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var angleOffsetDegree:Array<Float> = Array<Float>()
    private var angleOffsetDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var pitchDegree:Array<Float> = Array<Float>()
    private var pitchDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var pitchOffsetDegree:Array<Float> = Array<Float>()
    private var pitchOffsetDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var rollDegree:Array<Float> = Array<Float>()
    private var rollDegreeMemoizedSerializedSize:Int32 = -1
    public private(set) var distanceMeters:Array<Float> = Array<Float>()
    private var distanceMetersMemoizedSerializedSize:Int32 = -1
    public private(set) var heightPercent:Array<Float> = Array<Float>()
    private var heightPercentMemoizedSerializedSize:Int32 = -1
    public private(set) var vertCtrRatio:Array<Float> = Array<Float>()
    private var vertCtrRatioMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasNextCamera {
        try output.writeString(1, value:nextCamera)
      }
      for oneValueOfinterpolation in interpolation {
          try output.writeEnum(2, value:oneValueOfinterpolation.rawValue)
      }
      for oneValueOftargetType in targetType {
          try output.writeEnum(3, value:oneValueOftargetType.rawValue)
      }
      if !easeInSpeed.isEmpty {
        try output.writeRawVarint32(34)
        try output.writeRawVarint32(easeInSpeedMemoizedSerializedSize)
        for oneValueeaseInSpeed in easeInSpeed {
          try output.writeFloatNoTag(oneValueeaseInSpeed)
        }
      }
      if !eastOutSpeed.isEmpty {
        try output.writeRawVarint32(42)
        try output.writeRawVarint32(eastOutSpeedMemoizedSerializedSize)
        for oneValueeastOutSpeed in eastOutSpeed {
          try output.writeFloatNoTag(oneValueeastOutSpeed)
        }
      }
      if !durationSeconds.isEmpty {
        try output.writeRawVarint32(50)
        try output.writeRawVarint32(durationSecondsMemoizedSerializedSize)
        for oneValuedurationSeconds in durationSeconds {
          try output.writeFloatNoTag(oneValuedurationSeconds)
        }
      }
      if !waitSeconds.isEmpty {
        try output.writeRawVarint32(58)
        try output.writeRawVarint32(waitSecondsMemoizedSerializedSize)
        for oneValuewaitSeconds in waitSeconds {
          try output.writeFloatNoTag(oneValuewaitSeconds)
        }
      }
      if !transitionSeconds.isEmpty {
        try output.writeRawVarint32(66)
        try output.writeRawVarint32(transitionSecondsMemoizedSerializedSize)
        for oneValuetransitionSeconds in transitionSeconds {
          try output.writeFloatNoTag(oneValuetransitionSeconds)
        }
      }
      if !angleDegree.isEmpty {
        try output.writeRawVarint32(74)
        try output.writeRawVarint32(angleDegreeMemoizedSerializedSize)
        for oneValueangleDegree in angleDegree {
          try output.writeFloatNoTag(oneValueangleDegree)
        }
      }
      if !angleOffsetDegree.isEmpty {
        try output.writeRawVarint32(82)
        try output.writeRawVarint32(angleOffsetDegreeMemoizedSerializedSize)
        for oneValueangleOffsetDegree in angleOffsetDegree {
          try output.writeFloatNoTag(oneValueangleOffsetDegree)
        }
      }
      if !pitchDegree.isEmpty {
        try output.writeRawVarint32(90)
        try output.writeRawVarint32(pitchDegreeMemoizedSerializedSize)
        for oneValuepitchDegree in pitchDegree {
          try output.writeFloatNoTag(oneValuepitchDegree)
        }
      }
      if !pitchOffsetDegree.isEmpty {
        try output.writeRawVarint32(98)
        try output.writeRawVarint32(pitchOffsetDegreeMemoizedSerializedSize)
        for oneValuepitchOffsetDegree in pitchOffsetDegree {
          try output.writeFloatNoTag(oneValuepitchOffsetDegree)
        }
      }
      if !rollDegree.isEmpty {
        try output.writeRawVarint32(106)
        try output.writeRawVarint32(rollDegreeMemoizedSerializedSize)
        for oneValuerollDegree in rollDegree {
          try output.writeFloatNoTag(oneValuerollDegree)
        }
      }
      if !distanceMeters.isEmpty {
        try output.writeRawVarint32(114)
        try output.writeRawVarint32(distanceMetersMemoizedSerializedSize)
        for oneValuedistanceMeters in distanceMeters {
          try output.writeFloatNoTag(oneValuedistanceMeters)
        }
      }
      if !heightPercent.isEmpty {
        try output.writeRawVarint32(122)
        try output.writeRawVarint32(heightPercentMemoizedSerializedSize)
        for oneValueheightPercent in heightPercent {
          try output.writeFloatNoTag(oneValueheightPercent)
        }
      }
      if !vertCtrRatio.isEmpty {
        try output.writeRawVarint32(130)
        try output.writeRawVarint32(vertCtrRatioMemoizedSerializedSize)
        for oneValuevertCtrRatio in vertCtrRatio {
          try output.writeFloatNoTag(oneValuevertCtrRatio)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasNextCamera {
        serialize_size += nextCamera.computeStringSize(1)
      }
      var dataSizeinterpolation:Int32 = 0
      for oneValueOfinterpolation in interpolation {
          dataSizeinterpolation += oneValueOfinterpolation.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeinterpolation
      serialize_size += (1 * Int32(interpolation.count))
      var dataSizetargetType:Int32 = 0
      for oneValueOftargetType in targetType {
          dataSizetargetType += oneValueOftargetType.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizetargetType
      serialize_size += (1 * Int32(targetType.count))
      var dataSizeEaseInSpeed:Int32 = 0
      dataSizeEaseInSpeed = 4 * Int32(easeInSpeed.count)
      serialize_size += dataSizeEaseInSpeed
      if !easeInSpeed.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeEaseInSpeed.computeInt32SizeNoTag()
      }
      easeInSpeedMemoizedSerializedSize = dataSizeEaseInSpeed
      var dataSizeEastOutSpeed:Int32 = 0
      dataSizeEastOutSpeed = 4 * Int32(eastOutSpeed.count)
      serialize_size += dataSizeEastOutSpeed
      if !eastOutSpeed.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeEastOutSpeed.computeInt32SizeNoTag()
      }
      eastOutSpeedMemoizedSerializedSize = dataSizeEastOutSpeed
      var dataSizeDurationSeconds:Int32 = 0
      dataSizeDurationSeconds = 4 * Int32(durationSeconds.count)
      serialize_size += dataSizeDurationSeconds
      if !durationSeconds.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeDurationSeconds.computeInt32SizeNoTag()
      }
      durationSecondsMemoizedSerializedSize = dataSizeDurationSeconds
      var dataSizeWaitSeconds:Int32 = 0
      dataSizeWaitSeconds = 4 * Int32(waitSeconds.count)
      serialize_size += dataSizeWaitSeconds
      if !waitSeconds.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeWaitSeconds.computeInt32SizeNoTag()
      }
      waitSecondsMemoizedSerializedSize = dataSizeWaitSeconds
      var dataSizeTransitionSeconds:Int32 = 0
      dataSizeTransitionSeconds = 4 * Int32(transitionSeconds.count)
      serialize_size += dataSizeTransitionSeconds
      if !transitionSeconds.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeTransitionSeconds.computeInt32SizeNoTag()
      }
      transitionSecondsMemoizedSerializedSize = dataSizeTransitionSeconds
      var dataSizeAngleDegree:Int32 = 0
      dataSizeAngleDegree = 4 * Int32(angleDegree.count)
      serialize_size += dataSizeAngleDegree
      if !angleDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAngleDegree.computeInt32SizeNoTag()
      }
      angleDegreeMemoizedSerializedSize = dataSizeAngleDegree
      var dataSizeAngleOffsetDegree:Int32 = 0
      dataSizeAngleOffsetDegree = 4 * Int32(angleOffsetDegree.count)
      serialize_size += dataSizeAngleOffsetDegree
      if !angleOffsetDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAngleOffsetDegree.computeInt32SizeNoTag()
      }
      angleOffsetDegreeMemoizedSerializedSize = dataSizeAngleOffsetDegree
      var dataSizePitchDegree:Int32 = 0
      dataSizePitchDegree = 4 * Int32(pitchDegree.count)
      serialize_size += dataSizePitchDegree
      if !pitchDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizePitchDegree.computeInt32SizeNoTag()
      }
      pitchDegreeMemoizedSerializedSize = dataSizePitchDegree
      var dataSizePitchOffsetDegree:Int32 = 0
      dataSizePitchOffsetDegree = 4 * Int32(pitchOffsetDegree.count)
      serialize_size += dataSizePitchOffsetDegree
      if !pitchOffsetDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizePitchOffsetDegree.computeInt32SizeNoTag()
      }
      pitchOffsetDegreeMemoizedSerializedSize = dataSizePitchOffsetDegree
      var dataSizeRollDegree:Int32 = 0
      dataSizeRollDegree = 4 * Int32(rollDegree.count)
      serialize_size += dataSizeRollDegree
      if !rollDegree.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRollDegree.computeInt32SizeNoTag()
      }
      rollDegreeMemoizedSerializedSize = dataSizeRollDegree
      var dataSizeDistanceMeters:Int32 = 0
      dataSizeDistanceMeters = 4 * Int32(distanceMeters.count)
      serialize_size += dataSizeDistanceMeters
      if !distanceMeters.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeDistanceMeters.computeInt32SizeNoTag()
      }
      distanceMetersMemoizedSerializedSize = dataSizeDistanceMeters
      var dataSizeHeightPercent:Int32 = 0
      dataSizeHeightPercent = 4 * Int32(heightPercent.count)
      serialize_size += dataSizeHeightPercent
      if !heightPercent.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeHeightPercent.computeInt32SizeNoTag()
      }
      heightPercentMemoizedSerializedSize = dataSizeHeightPercent
      var dataSizeVertCtrRatio:Int32 = 0
      dataSizeVertCtrRatio = 4 * Int32(vertCtrRatio.count)
      serialize_size += dataSizeVertCtrRatio
      if !vertCtrRatio.isEmpty {
        serialize_size += 2
        serialize_size += dataSizeVertCtrRatio.computeInt32SizeNoTag()
      }
      vertCtrRatioMemoizedSerializedSize = dataSizeVertCtrRatio
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.CameraSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.CameraSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings? {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return Pogoprotos.Settings.Master.CameraSettings.classBuilder() as! Pogoprotos.Settings.Master.CameraSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.CameraSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.CameraSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.CameraSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return try Pogoprotos.Settings.Master.CameraSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.CameraSettings) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasNextCamera {
        jsonMap["nextCamera"] = nextCamera
      }
      if !interpolation.isEmpty {
        var jsonArrayInterpolation:Array<String> = []
          for oneValueInterpolation in interpolation {
            jsonArrayInterpolation += [oneValueInterpolation.toString()]
          }
        jsonMap["interpolation"] = jsonArrayInterpolation
      }
      if !targetType.isEmpty {
        var jsonArrayTargetType:Array<String> = []
          for oneValueTargetType in targetType {
            jsonArrayTargetType += [oneValueTargetType.toString()]
          }
        jsonMap["targetType"] = jsonArrayTargetType
      }
      if !easeInSpeed.isEmpty {
        var jsonArrayEaseInSpeed:Array<NSNumber> = []
          for oneValueEaseInSpeed in easeInSpeed {
            jsonArrayEaseInSpeed += [NSNumber(float:oneValueEaseInSpeed)]
          }
        jsonMap["easeInSpeed"] = jsonArrayEaseInSpeed
      }
      if !eastOutSpeed.isEmpty {
        var jsonArrayEastOutSpeed:Array<NSNumber> = []
          for oneValueEastOutSpeed in eastOutSpeed {
            jsonArrayEastOutSpeed += [NSNumber(float:oneValueEastOutSpeed)]
          }
        jsonMap["eastOutSpeed"] = jsonArrayEastOutSpeed
      }
      if !durationSeconds.isEmpty {
        var jsonArrayDurationSeconds:Array<NSNumber> = []
          for oneValueDurationSeconds in durationSeconds {
            jsonArrayDurationSeconds += [NSNumber(float:oneValueDurationSeconds)]
          }
        jsonMap["durationSeconds"] = jsonArrayDurationSeconds
      }
      if !waitSeconds.isEmpty {
        var jsonArrayWaitSeconds:Array<NSNumber> = []
          for oneValueWaitSeconds in waitSeconds {
            jsonArrayWaitSeconds += [NSNumber(float:oneValueWaitSeconds)]
          }
        jsonMap["waitSeconds"] = jsonArrayWaitSeconds
      }
      if !transitionSeconds.isEmpty {
        var jsonArrayTransitionSeconds:Array<NSNumber> = []
          for oneValueTransitionSeconds in transitionSeconds {
            jsonArrayTransitionSeconds += [NSNumber(float:oneValueTransitionSeconds)]
          }
        jsonMap["transitionSeconds"] = jsonArrayTransitionSeconds
      }
      if !angleDegree.isEmpty {
        var jsonArrayAngleDegree:Array<NSNumber> = []
          for oneValueAngleDegree in angleDegree {
            jsonArrayAngleDegree += [NSNumber(float:oneValueAngleDegree)]
          }
        jsonMap["angleDegree"] = jsonArrayAngleDegree
      }
      if !angleOffsetDegree.isEmpty {
        var jsonArrayAngleOffsetDegree:Array<NSNumber> = []
          for oneValueAngleOffsetDegree in angleOffsetDegree {
            jsonArrayAngleOffsetDegree += [NSNumber(float:oneValueAngleOffsetDegree)]
          }
        jsonMap["angleOffsetDegree"] = jsonArrayAngleOffsetDegree
      }
      if !pitchDegree.isEmpty {
        var jsonArrayPitchDegree:Array<NSNumber> = []
          for oneValuePitchDegree in pitchDegree {
            jsonArrayPitchDegree += [NSNumber(float:oneValuePitchDegree)]
          }
        jsonMap["pitchDegree"] = jsonArrayPitchDegree
      }
      if !pitchOffsetDegree.isEmpty {
        var jsonArrayPitchOffsetDegree:Array<NSNumber> = []
          for oneValuePitchOffsetDegree in pitchOffsetDegree {
            jsonArrayPitchOffsetDegree += [NSNumber(float:oneValuePitchOffsetDegree)]
          }
        jsonMap["pitchOffsetDegree"] = jsonArrayPitchOffsetDegree
      }
      if !rollDegree.isEmpty {
        var jsonArrayRollDegree:Array<NSNumber> = []
          for oneValueRollDegree in rollDegree {
            jsonArrayRollDegree += [NSNumber(float:oneValueRollDegree)]
          }
        jsonMap["rollDegree"] = jsonArrayRollDegree
      }
      if !distanceMeters.isEmpty {
        var jsonArrayDistanceMeters:Array<NSNumber> = []
          for oneValueDistanceMeters in distanceMeters {
            jsonArrayDistanceMeters += [NSNumber(float:oneValueDistanceMeters)]
          }
        jsonMap["distanceMeters"] = jsonArrayDistanceMeters
      }
      if !heightPercent.isEmpty {
        var jsonArrayHeightPercent:Array<NSNumber> = []
          for oneValueHeightPercent in heightPercent {
            jsonArrayHeightPercent += [NSNumber(float:oneValueHeightPercent)]
          }
        jsonMap["heightPercent"] = jsonArrayHeightPercent
      }
      if !vertCtrRatio.isEmpty {
        var jsonArrayVertCtrRatio:Array<NSNumber> = []
          for oneValueVertCtrRatio in vertCtrRatio {
            jsonArrayVertCtrRatio += [NSNumber(float:oneValueVertCtrRatio)]
          }
        jsonMap["vertCtrRatio"] = jsonArrayVertCtrRatio
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.CameraSettings {
      return try Pogoprotos.Settings.Master.CameraSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasNextCamera {
        output += "\(indent) nextCamera: \(nextCamera) \n"
      }
      var interpolationElementIndex:Int = 0
      for oneValueOfinterpolation in interpolation {
          output += "\(indent) interpolation[\(interpolationElementIndex)]: \(oneValueOfinterpolation.description)\n"
          interpolationElementIndex += 1
      }
      var targetTypeElementIndex:Int = 0
      for oneValueOftargetType in targetType {
          output += "\(indent) targetType[\(targetTypeElementIndex)]: \(oneValueOftargetType.description)\n"
          targetTypeElementIndex += 1
      }
      var easeInSpeedElementIndex:Int = 0
      for oneValueEaseInSpeed in easeInSpeed  {
          output += "\(indent) easeInSpeed[\(easeInSpeedElementIndex)]: \(oneValueEaseInSpeed)\n"
          easeInSpeedElementIndex += 1
      }
      var eastOutSpeedElementIndex:Int = 0
      for oneValueEastOutSpeed in eastOutSpeed  {
          output += "\(indent) eastOutSpeed[\(eastOutSpeedElementIndex)]: \(oneValueEastOutSpeed)\n"
          eastOutSpeedElementIndex += 1
      }
      var durationSecondsElementIndex:Int = 0
      for oneValueDurationSeconds in durationSeconds  {
          output += "\(indent) durationSeconds[\(durationSecondsElementIndex)]: \(oneValueDurationSeconds)\n"
          durationSecondsElementIndex += 1
      }
      var waitSecondsElementIndex:Int = 0
      for oneValueWaitSeconds in waitSeconds  {
          output += "\(indent) waitSeconds[\(waitSecondsElementIndex)]: \(oneValueWaitSeconds)\n"
          waitSecondsElementIndex += 1
      }
      var transitionSecondsElementIndex:Int = 0
      for oneValueTransitionSeconds in transitionSeconds  {
          output += "\(indent) transitionSeconds[\(transitionSecondsElementIndex)]: \(oneValueTransitionSeconds)\n"
          transitionSecondsElementIndex += 1
      }
      var angleDegreeElementIndex:Int = 0
      for oneValueAngleDegree in angleDegree  {
          output += "\(indent) angleDegree[\(angleDegreeElementIndex)]: \(oneValueAngleDegree)\n"
          angleDegreeElementIndex += 1
      }
      var angleOffsetDegreeElementIndex:Int = 0
      for oneValueAngleOffsetDegree in angleOffsetDegree  {
          output += "\(indent) angleOffsetDegree[\(angleOffsetDegreeElementIndex)]: \(oneValueAngleOffsetDegree)\n"
          angleOffsetDegreeElementIndex += 1
      }
      var pitchDegreeElementIndex:Int = 0
      for oneValuePitchDegree in pitchDegree  {
          output += "\(indent) pitchDegree[\(pitchDegreeElementIndex)]: \(oneValuePitchDegree)\n"
          pitchDegreeElementIndex += 1
      }
      var pitchOffsetDegreeElementIndex:Int = 0
      for oneValuePitchOffsetDegree in pitchOffsetDegree  {
          output += "\(indent) pitchOffsetDegree[\(pitchOffsetDegreeElementIndex)]: \(oneValuePitchOffsetDegree)\n"
          pitchOffsetDegreeElementIndex += 1
      }
      var rollDegreeElementIndex:Int = 0
      for oneValueRollDegree in rollDegree  {
          output += "\(indent) rollDegree[\(rollDegreeElementIndex)]: \(oneValueRollDegree)\n"
          rollDegreeElementIndex += 1
      }
      var distanceMetersElementIndex:Int = 0
      for oneValueDistanceMeters in distanceMeters  {
          output += "\(indent) distanceMeters[\(distanceMetersElementIndex)]: \(oneValueDistanceMeters)\n"
          distanceMetersElementIndex += 1
      }
      var heightPercentElementIndex:Int = 0
      for oneValueHeightPercent in heightPercent  {
          output += "\(indent) heightPercent[\(heightPercentElementIndex)]: \(oneValueHeightPercent)\n"
          heightPercentElementIndex += 1
      }
      var vertCtrRatioElementIndex:Int = 0
      for oneValueVertCtrRatio in vertCtrRatio  {
          output += "\(indent) vertCtrRatio[\(vertCtrRatioElementIndex)]: \(oneValueVertCtrRatio)\n"
          vertCtrRatioElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasNextCamera {
               hashCode = (hashCode &* 31) &+ nextCamera.hashValue
            }
            for oneValueOfinterpolation in interpolation {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfinterpolation.rawValue)
            }
            for oneValueOftargetType in targetType {
                hashCode = (hashCode &* 31) &+ Int(oneValueOftargetType.rawValue)
            }
            for oneValueEaseInSpeed in easeInSpeed {
                hashCode = (hashCode &* 31) &+ oneValueEaseInSpeed.hashValue
            }
            for oneValueEastOutSpeed in eastOutSpeed {
                hashCode = (hashCode &* 31) &+ oneValueEastOutSpeed.hashValue
            }
            for oneValueDurationSeconds in durationSeconds {
                hashCode = (hashCode &* 31) &+ oneValueDurationSeconds.hashValue
            }
            for oneValueWaitSeconds in waitSeconds {
                hashCode = (hashCode &* 31) &+ oneValueWaitSeconds.hashValue
            }
            for oneValueTransitionSeconds in transitionSeconds {
                hashCode = (hashCode &* 31) &+ oneValueTransitionSeconds.hashValue
            }
            for oneValueAngleDegree in angleDegree {
                hashCode = (hashCode &* 31) &+ oneValueAngleDegree.hashValue
            }
            for oneValueAngleOffsetDegree in angleOffsetDegree {
                hashCode = (hashCode &* 31) &+ oneValueAngleOffsetDegree.hashValue
            }
            for oneValuePitchDegree in pitchDegree {
                hashCode = (hashCode &* 31) &+ oneValuePitchDegree.hashValue
            }
            for oneValuePitchOffsetDegree in pitchOffsetDegree {
                hashCode = (hashCode &* 31) &+ oneValuePitchOffsetDegree.hashValue
            }
            for oneValueRollDegree in rollDegree {
                hashCode = (hashCode &* 31) &+ oneValueRollDegree.hashValue
            }
            for oneValueDistanceMeters in distanceMeters {
                hashCode = (hashCode &* 31) &+ oneValueDistanceMeters.hashValue
            }
            for oneValueHeightPercent in heightPercent {
                hashCode = (hashCode &* 31) &+ oneValueHeightPercent.hashValue
            }
            for oneValueVertCtrRatio in vertCtrRatio {
                hashCode = (hashCode &* 31) &+ oneValueVertCtrRatio.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.CameraSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.CameraSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.CameraSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.CameraSettings = Pogoprotos.Settings.Master.CameraSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.CameraSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasNextCamera:Bool {
           get {
                return builderResult.hasNextCamera
           }
      }
      public var nextCamera:String {
           get {
                return builderResult.nextCamera
           }
           set (value) {
               builderResult.hasNextCamera = true
               builderResult.nextCamera = value
           }
      }
      public func setNextCamera(value:String) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.nextCamera = value
        return self
      }
      public func clearNextCamera() -> Pogoprotos.Settings.Master.CameraSettings.Builder{
           builderResult.hasNextCamera = false
           builderResult.nextCamera = ""
           return self
      }
      public var interpolation:Array<Pogoprotos.Enums.CameraInterpolation> {
          get {
              return builderResult.interpolation
          }
          set (value) {
              builderResult.interpolation = value
          }
      }
      public func setInterpolation(value:Array<Pogoprotos.Enums.CameraInterpolation>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.interpolation = value
        return self
      }
      public func clearInterpolation() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        builderResult.interpolation.removeAll(keepCapacity: false)
        return self
      }
      public var targetType:Array<Pogoprotos.Enums.CameraTarget> {
          get {
              return builderResult.targetType
          }
          set (value) {
              builderResult.targetType = value
          }
      }
      public func setTargetType(value:Array<Pogoprotos.Enums.CameraTarget>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.targetType = value
        return self
      }
      public func clearTargetType() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        builderResult.targetType.removeAll(keepCapacity: false)
        return self
      }
      public var easeInSpeed:Array<Float> {
           get {
               return builderResult.easeInSpeed
           }
           set (array) {
               builderResult.easeInSpeed = array
           }
      }
      public func setEaseInSpeed(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.easeInSpeed = value
        return self
      }
      public func clearEaseInSpeed() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.easeInSpeed.removeAll(keepCapacity: false)
         return self
      }
      public var eastOutSpeed:Array<Float> {
           get {
               return builderResult.eastOutSpeed
           }
           set (array) {
               builderResult.eastOutSpeed = array
           }
      }
      public func setEastOutSpeed(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.eastOutSpeed = value
        return self
      }
      public func clearEastOutSpeed() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.eastOutSpeed.removeAll(keepCapacity: false)
         return self
      }
      public var durationSeconds:Array<Float> {
           get {
               return builderResult.durationSeconds
           }
           set (array) {
               builderResult.durationSeconds = array
           }
      }
      public func setDurationSeconds(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.durationSeconds = value
        return self
      }
      public func clearDurationSeconds() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.durationSeconds.removeAll(keepCapacity: false)
         return self
      }
      public var waitSeconds:Array<Float> {
           get {
               return builderResult.waitSeconds
           }
           set (array) {
               builderResult.waitSeconds = array
           }
      }
      public func setWaitSeconds(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.waitSeconds = value
        return self
      }
      public func clearWaitSeconds() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.waitSeconds.removeAll(keepCapacity: false)
         return self
      }
      public var transitionSeconds:Array<Float> {
           get {
               return builderResult.transitionSeconds
           }
           set (array) {
               builderResult.transitionSeconds = array
           }
      }
      public func setTransitionSeconds(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.transitionSeconds = value
        return self
      }
      public func clearTransitionSeconds() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.transitionSeconds.removeAll(keepCapacity: false)
         return self
      }
      public var angleDegree:Array<Float> {
           get {
               return builderResult.angleDegree
           }
           set (array) {
               builderResult.angleDegree = array
           }
      }
      public func setAngleDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.angleDegree = value
        return self
      }
      public func clearAngleDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.angleDegree.removeAll(keepCapacity: false)
         return self
      }
      public var angleOffsetDegree:Array<Float> {
           get {
               return builderResult.angleOffsetDegree
           }
           set (array) {
               builderResult.angleOffsetDegree = array
           }
      }
      public func setAngleOffsetDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.angleOffsetDegree = value
        return self
      }
      public func clearAngleOffsetDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.angleOffsetDegree.removeAll(keepCapacity: false)
         return self
      }
      public var pitchDegree:Array<Float> {
           get {
               return builderResult.pitchDegree
           }
           set (array) {
               builderResult.pitchDegree = array
           }
      }
      public func setPitchDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.pitchDegree = value
        return self
      }
      public func clearPitchDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.pitchDegree.removeAll(keepCapacity: false)
         return self
      }
      public var pitchOffsetDegree:Array<Float> {
           get {
               return builderResult.pitchOffsetDegree
           }
           set (array) {
               builderResult.pitchOffsetDegree = array
           }
      }
      public func setPitchOffsetDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.pitchOffsetDegree = value
        return self
      }
      public func clearPitchOffsetDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.pitchOffsetDegree.removeAll(keepCapacity: false)
         return self
      }
      public var rollDegree:Array<Float> {
           get {
               return builderResult.rollDegree
           }
           set (array) {
               builderResult.rollDegree = array
           }
      }
      public func setRollDegree(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.rollDegree = value
        return self
      }
      public func clearRollDegree() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.rollDegree.removeAll(keepCapacity: false)
         return self
      }
      public var distanceMeters:Array<Float> {
           get {
               return builderResult.distanceMeters
           }
           set (array) {
               builderResult.distanceMeters = array
           }
      }
      public func setDistanceMeters(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.distanceMeters = value
        return self
      }
      public func clearDistanceMeters() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.distanceMeters.removeAll(keepCapacity: false)
         return self
      }
      public var heightPercent:Array<Float> {
           get {
               return builderResult.heightPercent
           }
           set (array) {
               builderResult.heightPercent = array
           }
      }
      public func setHeightPercent(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.heightPercent = value
        return self
      }
      public func clearHeightPercent() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.heightPercent.removeAll(keepCapacity: false)
         return self
      }
      public var vertCtrRatio:Array<Float> {
           get {
               return builderResult.vertCtrRatio
           }
           set (array) {
               builderResult.vertCtrRatio = array
           }
      }
      public func setVertCtrRatio(value:Array<Float>) -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        self.vertCtrRatio = value
        return self
      }
      public func clearVertCtrRatio() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
         builderResult.vertCtrRatio.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.CameraSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        return try Pogoprotos.Settings.Master.CameraSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.CameraSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.CameraSettings {
        let returnMe:Pogoprotos.Settings.Master.CameraSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.CameraSettings) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        if other == Pogoprotos.Settings.Master.CameraSettings() {
         return self
        }
        if other.hasNextCamera {
             nextCamera = other.nextCamera
        }
        if !other.interpolation.isEmpty {
           builderResult.interpolation += other.interpolation
        }
        if !other.targetType.isEmpty {
           builderResult.targetType += other.targetType
        }
        if !other.easeInSpeed.isEmpty {
            builderResult.easeInSpeed += other.easeInSpeed
        }
        if !other.eastOutSpeed.isEmpty {
            builderResult.eastOutSpeed += other.eastOutSpeed
        }
        if !other.durationSeconds.isEmpty {
            builderResult.durationSeconds += other.durationSeconds
        }
        if !other.waitSeconds.isEmpty {
            builderResult.waitSeconds += other.waitSeconds
        }
        if !other.transitionSeconds.isEmpty {
            builderResult.transitionSeconds += other.transitionSeconds
        }
        if !other.angleDegree.isEmpty {
            builderResult.angleDegree += other.angleDegree
        }
        if !other.angleOffsetDegree.isEmpty {
            builderResult.angleOffsetDegree += other.angleOffsetDegree
        }
        if !other.pitchDegree.isEmpty {
            builderResult.pitchDegree += other.pitchDegree
        }
        if !other.pitchOffsetDegree.isEmpty {
            builderResult.pitchOffsetDegree += other.pitchOffsetDegree
        }
        if !other.rollDegree.isEmpty {
            builderResult.rollDegree += other.rollDegree
        }
        if !other.distanceMeters.isEmpty {
            builderResult.distanceMeters += other.distanceMeters
        }
        if !other.heightPercent.isEmpty {
            builderResult.heightPercent += other.heightPercent
        }
        if !other.vertCtrRatio.isEmpty {
            builderResult.vertCtrRatio += other.vertCtrRatio
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            nextCamera = try input.readString()

          case 16:
            let valueIntinterpolation = try input.readEnum()
            if let enumsinterpolation = Pogoprotos.Enums.CameraInterpolation(rawValue:valueIntinterpolation) {
                 builderResult.interpolation += [enumsinterpolation]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntinterpolation))
            }

          case 24:
            let valueInttargetType = try input.readEnum()
            if let enumstargetType = Pogoprotos.Enums.CameraTarget(rawValue:valueInttargetType) {
                 builderResult.targetType += [enumstargetType]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueInttargetType))
            }

          case 34:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.easeInSpeed += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 42:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.eastOutSpeed += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 50:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.durationSeconds += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 58:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.waitSeconds += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 66:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.transitionSeconds += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 74:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.angleDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 82:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.angleOffsetDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 90:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.pitchDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 98:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.pitchOffsetDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 106:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.rollDegree += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 114:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.distanceMeters += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 122:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.heightPercent += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 130:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.vertCtrRatio += [try input.readFloat()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.CameraSettings.Builder()
        if let jsonValueNextCamera = jsonMap["nextCamera"] as? String {
          resultDecodedBuilder.nextCamera = jsonValueNextCamera
        }
        if let jsonValueInterpolation = jsonMap["interpolation"] as? Array<String> {
          var jsonArrayInterpolation:Array<Pogoprotos.Enums.CameraInterpolation> = []
          for oneValueInterpolation in jsonValueInterpolation {
            let enumFromStringInterpolation = try Pogoprotos.Enums.CameraInterpolation.fromString(oneValueInterpolation)
            jsonArrayInterpolation += [enumFromStringInterpolation]
          }
          resultDecodedBuilder.interpolation = jsonArrayInterpolation
        }
        if let jsonValueTargetType = jsonMap["targetType"] as? Array<String> {
          var jsonArrayTargetType:Array<Pogoprotos.Enums.CameraTarget> = []
          for oneValueTargetType in jsonValueTargetType {
            let enumFromStringTargetType = try Pogoprotos.Enums.CameraTarget.fromString(oneValueTargetType)
            jsonArrayTargetType += [enumFromStringTargetType]
          }
          resultDecodedBuilder.targetType = jsonArrayTargetType
        }
        if let jsonValueEaseInSpeed = jsonMap["easeInSpeed"] as? Array<NSNumber> {
          var jsonArrayEaseInSpeed:Array<Float> = []
          for oneValueEaseInSpeed in jsonValueEaseInSpeed {
            jsonArrayEaseInSpeed += [oneValueEaseInSpeed.floatValue]
          }
          resultDecodedBuilder.easeInSpeed = jsonArrayEaseInSpeed
        }
        if let jsonValueEastOutSpeed = jsonMap["eastOutSpeed"] as? Array<NSNumber> {
          var jsonArrayEastOutSpeed:Array<Float> = []
          for oneValueEastOutSpeed in jsonValueEastOutSpeed {
            jsonArrayEastOutSpeed += [oneValueEastOutSpeed.floatValue]
          }
          resultDecodedBuilder.eastOutSpeed = jsonArrayEastOutSpeed
        }
        if let jsonValueDurationSeconds = jsonMap["durationSeconds"] as? Array<NSNumber> {
          var jsonArrayDurationSeconds:Array<Float> = []
          for oneValueDurationSeconds in jsonValueDurationSeconds {
            jsonArrayDurationSeconds += [oneValueDurationSeconds.floatValue]
          }
          resultDecodedBuilder.durationSeconds = jsonArrayDurationSeconds
        }
        if let jsonValueWaitSeconds = jsonMap["waitSeconds"] as? Array<NSNumber> {
          var jsonArrayWaitSeconds:Array<Float> = []
          for oneValueWaitSeconds in jsonValueWaitSeconds {
            jsonArrayWaitSeconds += [oneValueWaitSeconds.floatValue]
          }
          resultDecodedBuilder.waitSeconds = jsonArrayWaitSeconds
        }
        if let jsonValueTransitionSeconds = jsonMap["transitionSeconds"] as? Array<NSNumber> {
          var jsonArrayTransitionSeconds:Array<Float> = []
          for oneValueTransitionSeconds in jsonValueTransitionSeconds {
            jsonArrayTransitionSeconds += [oneValueTransitionSeconds.floatValue]
          }
          resultDecodedBuilder.transitionSeconds = jsonArrayTransitionSeconds
        }
        if let jsonValueAngleDegree = jsonMap["angleDegree"] as? Array<NSNumber> {
          var jsonArrayAngleDegree:Array<Float> = []
          for oneValueAngleDegree in jsonValueAngleDegree {
            jsonArrayAngleDegree += [oneValueAngleDegree.floatValue]
          }
          resultDecodedBuilder.angleDegree = jsonArrayAngleDegree
        }
        if let jsonValueAngleOffsetDegree = jsonMap["angleOffsetDegree"] as? Array<NSNumber> {
          var jsonArrayAngleOffsetDegree:Array<Float> = []
          for oneValueAngleOffsetDegree in jsonValueAngleOffsetDegree {
            jsonArrayAngleOffsetDegree += [oneValueAngleOffsetDegree.floatValue]
          }
          resultDecodedBuilder.angleOffsetDegree = jsonArrayAngleOffsetDegree
        }
        if let jsonValuePitchDegree = jsonMap["pitchDegree"] as? Array<NSNumber> {
          var jsonArrayPitchDegree:Array<Float> = []
          for oneValuePitchDegree in jsonValuePitchDegree {
            jsonArrayPitchDegree += [oneValuePitchDegree.floatValue]
          }
          resultDecodedBuilder.pitchDegree = jsonArrayPitchDegree
        }
        if let jsonValuePitchOffsetDegree = jsonMap["pitchOffsetDegree"] as? Array<NSNumber> {
          var jsonArrayPitchOffsetDegree:Array<Float> = []
          for oneValuePitchOffsetDegree in jsonValuePitchOffsetDegree {
            jsonArrayPitchOffsetDegree += [oneValuePitchOffsetDegree.floatValue]
          }
          resultDecodedBuilder.pitchOffsetDegree = jsonArrayPitchOffsetDegree
        }
        if let jsonValueRollDegree = jsonMap["rollDegree"] as? Array<NSNumber> {
          var jsonArrayRollDegree:Array<Float> = []
          for oneValueRollDegree in jsonValueRollDegree {
            jsonArrayRollDegree += [oneValueRollDegree.floatValue]
          }
          resultDecodedBuilder.rollDegree = jsonArrayRollDegree
        }
        if let jsonValueDistanceMeters = jsonMap["distanceMeters"] as? Array<NSNumber> {
          var jsonArrayDistanceMeters:Array<Float> = []
          for oneValueDistanceMeters in jsonValueDistanceMeters {
            jsonArrayDistanceMeters += [oneValueDistanceMeters.floatValue]
          }
          resultDecodedBuilder.distanceMeters = jsonArrayDistanceMeters
        }
        if let jsonValueHeightPercent = jsonMap["heightPercent"] as? Array<NSNumber> {
          var jsonArrayHeightPercent:Array<Float> = []
          for oneValueHeightPercent in jsonValueHeightPercent {
            jsonArrayHeightPercent += [oneValueHeightPercent.floatValue]
          }
          resultDecodedBuilder.heightPercent = jsonArrayHeightPercent
        }
        if let jsonValueVertCtrRatio = jsonMap["vertCtrRatio"] as? Array<NSNumber> {
          var jsonArrayVertCtrRatio:Array<Float> = []
          for oneValueVertCtrRatio in jsonValueVertCtrRatio {
            jsonArrayVertCtrRatio += [oneValueVertCtrRatio.floatValue]
          }
          resultDecodedBuilder.vertCtrRatio = jsonArrayVertCtrRatio
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.CameraSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.CameraSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class EncounterSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasSpinBonusThreshold:Bool = false
    public private(set) var spinBonusThreshold:Float = Float(0)

    public private(set) var hasExcellentThrowThreshold:Bool = false
    public private(set) var excellentThrowThreshold:Float = Float(0)

    public private(set) var hasGreatThrowThreshold:Bool = false
    public private(set) var greatThrowThreshold:Float = Float(0)

    public private(set) var hasNiceThrowThreshold:Bool = false
    public private(set) var niceThrowThreshold:Float = Float(0)

    public private(set) var hasMilestoneThreshold:Bool = false
    public private(set) var milestoneThreshold:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSpinBonusThreshold {
        try output.writeFloat(1, value:spinBonusThreshold)
      }
      if hasExcellentThrowThreshold {
        try output.writeFloat(2, value:excellentThrowThreshold)
      }
      if hasGreatThrowThreshold {
        try output.writeFloat(3, value:greatThrowThreshold)
      }
      if hasNiceThrowThreshold {
        try output.writeFloat(4, value:niceThrowThreshold)
      }
      if hasMilestoneThreshold {
        try output.writeInt32(5, value:milestoneThreshold)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSpinBonusThreshold {
        serialize_size += spinBonusThreshold.computeFloatSize(1)
      }
      if hasExcellentThrowThreshold {
        serialize_size += excellentThrowThreshold.computeFloatSize(2)
      }
      if hasGreatThrowThreshold {
        serialize_size += greatThrowThreshold.computeFloatSize(3)
      }
      if hasNiceThrowThreshold {
        serialize_size += niceThrowThreshold.computeFloatSize(4)
      }
      if hasMilestoneThreshold {
        serialize_size += milestoneThreshold.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.EncounterSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.EncounterSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings? {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return Pogoprotos.Settings.Master.EncounterSettings.classBuilder() as! Pogoprotos.Settings.Master.EncounterSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.EncounterSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.EncounterSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.EncounterSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return try Pogoprotos.Settings.Master.EncounterSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.EncounterSettings) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSpinBonusThreshold {
        jsonMap["spinBonusThreshold"] = NSNumber(float:spinBonusThreshold)
      }
      if hasExcellentThrowThreshold {
        jsonMap["excellentThrowThreshold"] = NSNumber(float:excellentThrowThreshold)
      }
      if hasGreatThrowThreshold {
        jsonMap["greatThrowThreshold"] = NSNumber(float:greatThrowThreshold)
      }
      if hasNiceThrowThreshold {
        jsonMap["niceThrowThreshold"] = NSNumber(float:niceThrowThreshold)
      }
      if hasMilestoneThreshold {
        jsonMap["milestoneThreshold"] = NSNumber(int:milestoneThreshold)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.EncounterSettings {
      return try Pogoprotos.Settings.Master.EncounterSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSpinBonusThreshold {
        output += "\(indent) spinBonusThreshold: \(spinBonusThreshold) \n"
      }
      if hasExcellentThrowThreshold {
        output += "\(indent) excellentThrowThreshold: \(excellentThrowThreshold) \n"
      }
      if hasGreatThrowThreshold {
        output += "\(indent) greatThrowThreshold: \(greatThrowThreshold) \n"
      }
      if hasNiceThrowThreshold {
        output += "\(indent) niceThrowThreshold: \(niceThrowThreshold) \n"
      }
      if hasMilestoneThreshold {
        output += "\(indent) milestoneThreshold: \(milestoneThreshold) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSpinBonusThreshold {
               hashCode = (hashCode &* 31) &+ spinBonusThreshold.hashValue
            }
            if hasExcellentThrowThreshold {
               hashCode = (hashCode &* 31) &+ excellentThrowThreshold.hashValue
            }
            if hasGreatThrowThreshold {
               hashCode = (hashCode &* 31) &+ greatThrowThreshold.hashValue
            }
            if hasNiceThrowThreshold {
               hashCode = (hashCode &* 31) &+ niceThrowThreshold.hashValue
            }
            if hasMilestoneThreshold {
               hashCode = (hashCode &* 31) &+ milestoneThreshold.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.EncounterSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.EncounterSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.EncounterSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.EncounterSettings = Pogoprotos.Settings.Master.EncounterSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.EncounterSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSpinBonusThreshold:Bool {
           get {
                return builderResult.hasSpinBonusThreshold
           }
      }
      public var spinBonusThreshold:Float {
           get {
                return builderResult.spinBonusThreshold
           }
           set (value) {
               builderResult.hasSpinBonusThreshold = true
               builderResult.spinBonusThreshold = value
           }
      }
      public func setSpinBonusThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.spinBonusThreshold = value
        return self
      }
      public func clearSpinBonusThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasSpinBonusThreshold = false
           builderResult.spinBonusThreshold = Float(0)
           return self
      }
      public var hasExcellentThrowThreshold:Bool {
           get {
                return builderResult.hasExcellentThrowThreshold
           }
      }
      public var excellentThrowThreshold:Float {
           get {
                return builderResult.excellentThrowThreshold
           }
           set (value) {
               builderResult.hasExcellentThrowThreshold = true
               builderResult.excellentThrowThreshold = value
           }
      }
      public func setExcellentThrowThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.excellentThrowThreshold = value
        return self
      }
      public func clearExcellentThrowThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasExcellentThrowThreshold = false
           builderResult.excellentThrowThreshold = Float(0)
           return self
      }
      public var hasGreatThrowThreshold:Bool {
           get {
                return builderResult.hasGreatThrowThreshold
           }
      }
      public var greatThrowThreshold:Float {
           get {
                return builderResult.greatThrowThreshold
           }
           set (value) {
               builderResult.hasGreatThrowThreshold = true
               builderResult.greatThrowThreshold = value
           }
      }
      public func setGreatThrowThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.greatThrowThreshold = value
        return self
      }
      public func clearGreatThrowThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasGreatThrowThreshold = false
           builderResult.greatThrowThreshold = Float(0)
           return self
      }
      public var hasNiceThrowThreshold:Bool {
           get {
                return builderResult.hasNiceThrowThreshold
           }
      }
      public var niceThrowThreshold:Float {
           get {
                return builderResult.niceThrowThreshold
           }
           set (value) {
               builderResult.hasNiceThrowThreshold = true
               builderResult.niceThrowThreshold = value
           }
      }
      public func setNiceThrowThreshold(value:Float) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.niceThrowThreshold = value
        return self
      }
      public func clearNiceThrowThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasNiceThrowThreshold = false
           builderResult.niceThrowThreshold = Float(0)
           return self
      }
      public var hasMilestoneThreshold:Bool {
           get {
                return builderResult.hasMilestoneThreshold
           }
      }
      public var milestoneThreshold:Int32 {
           get {
                return builderResult.milestoneThreshold
           }
           set (value) {
               builderResult.hasMilestoneThreshold = true
               builderResult.milestoneThreshold = value
           }
      }
      public func setMilestoneThreshold(value:Int32) -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        self.milestoneThreshold = value
        return self
      }
      public func clearMilestoneThreshold() -> Pogoprotos.Settings.Master.EncounterSettings.Builder{
           builderResult.hasMilestoneThreshold = false
           builderResult.milestoneThreshold = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.EncounterSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        return try Pogoprotos.Settings.Master.EncounterSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.EncounterSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.EncounterSettings {
        let returnMe:Pogoprotos.Settings.Master.EncounterSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.EncounterSettings) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        if other == Pogoprotos.Settings.Master.EncounterSettings() {
         return self
        }
        if other.hasSpinBonusThreshold {
             spinBonusThreshold = other.spinBonusThreshold
        }
        if other.hasExcellentThrowThreshold {
             excellentThrowThreshold = other.excellentThrowThreshold
        }
        if other.hasGreatThrowThreshold {
             greatThrowThreshold = other.greatThrowThreshold
        }
        if other.hasNiceThrowThreshold {
             niceThrowThreshold = other.niceThrowThreshold
        }
        if other.hasMilestoneThreshold {
             milestoneThreshold = other.milestoneThreshold
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            spinBonusThreshold = try input.readFloat()

          case 21:
            excellentThrowThreshold = try input.readFloat()

          case 29:
            greatThrowThreshold = try input.readFloat()

          case 37:
            niceThrowThreshold = try input.readFloat()

          case 40:
            milestoneThreshold = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.EncounterSettings.Builder()
        if let jsonValueSpinBonusThreshold = jsonMap["spinBonusThreshold"] as? NSNumber {
          resultDecodedBuilder.spinBonusThreshold = jsonValueSpinBonusThreshold.floatValue
        }
        if let jsonValueExcellentThrowThreshold = jsonMap["excellentThrowThreshold"] as? NSNumber {
          resultDecodedBuilder.excellentThrowThreshold = jsonValueExcellentThrowThreshold.floatValue
        }
        if let jsonValueGreatThrowThreshold = jsonMap["greatThrowThreshold"] as? NSNumber {
          resultDecodedBuilder.greatThrowThreshold = jsonValueGreatThrowThreshold.floatValue
        }
        if let jsonValueNiceThrowThreshold = jsonMap["niceThrowThreshold"] as? NSNumber {
          resultDecodedBuilder.niceThrowThreshold = jsonValueNiceThrowThreshold.floatValue
        }
        if let jsonValueMilestoneThreshold = jsonMap["milestoneThreshold"] as? NSNumber {
          resultDecodedBuilder.milestoneThreshold = jsonValueMilestoneThreshold.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.EncounterSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.EncounterSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class EquippedBadgeSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasEquipBadgeCooldownMs:Bool = false
    public private(set) var equipBadgeCooldownMs:Int64 = Int64(0)

    public private(set) var catchProbabilityBonus:Array<Float> = Array<Float>()
    private var catchProbabilityBonusMemoizedSerializedSize:Int32 = -1
    public private(set) var fleeProbabilityBonus:Array<Float> = Array<Float>()
    private var fleeProbabilityBonusMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasEquipBadgeCooldownMs {
        try output.writeInt64(1, value:equipBadgeCooldownMs)
      }
      if !catchProbabilityBonus.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(catchProbabilityBonusMemoizedSerializedSize)
        for oneValuecatchProbabilityBonus in catchProbabilityBonus {
          try output.writeFloatNoTag(oneValuecatchProbabilityBonus)
        }
      }
      if !fleeProbabilityBonus.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(fleeProbabilityBonusMemoizedSerializedSize)
        for oneValuefleeProbabilityBonus in fleeProbabilityBonus {
          try output.writeFloatNoTag(oneValuefleeProbabilityBonus)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEquipBadgeCooldownMs {
        serialize_size += equipBadgeCooldownMs.computeInt64Size(1)
      }
      var dataSizeCatchProbabilityBonus:Int32 = 0
      dataSizeCatchProbabilityBonus = 4 * Int32(catchProbabilityBonus.count)
      serialize_size += dataSizeCatchProbabilityBonus
      if !catchProbabilityBonus.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeCatchProbabilityBonus.computeInt32SizeNoTag()
      }
      catchProbabilityBonusMemoizedSerializedSize = dataSizeCatchProbabilityBonus
      var dataSizeFleeProbabilityBonus:Int32 = 0
      dataSizeFleeProbabilityBonus = 4 * Int32(fleeProbabilityBonus.count)
      serialize_size += dataSizeFleeProbabilityBonus
      if !fleeProbabilityBonus.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeFleeProbabilityBonus.computeInt32SizeNoTag()
      }
      fleeProbabilityBonusMemoizedSerializedSize = dataSizeFleeProbabilityBonus
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.EquippedBadgeSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.EquippedBadgeSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings? {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
      return Pogoprotos.Settings.Master.EquippedBadgeSettings.classBuilder() as! Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.EquippedBadgeSettings) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasEquipBadgeCooldownMs {
        jsonMap["equipBadgeCooldownMs"] = "\(equipBadgeCooldownMs)"
      }
      if !catchProbabilityBonus.isEmpty {
        var jsonArrayCatchProbabilityBonus:Array<NSNumber> = []
          for oneValueCatchProbabilityBonus in catchProbabilityBonus {
            jsonArrayCatchProbabilityBonus += [NSNumber(float:oneValueCatchProbabilityBonus)]
          }
        jsonMap["catchProbabilityBonus"] = jsonArrayCatchProbabilityBonus
      }
      if !fleeProbabilityBonus.isEmpty {
        var jsonArrayFleeProbabilityBonus:Array<NSNumber> = []
          for oneValueFleeProbabilityBonus in fleeProbabilityBonus {
            jsonArrayFleeProbabilityBonus += [NSNumber(float:oneValueFleeProbabilityBonus)]
          }
        jsonMap["fleeProbabilityBonus"] = jsonArrayFleeProbabilityBonus
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
      return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEquipBadgeCooldownMs {
        output += "\(indent) equipBadgeCooldownMs: \(equipBadgeCooldownMs) \n"
      }
      var catchProbabilityBonusElementIndex:Int = 0
      for oneValueCatchProbabilityBonus in catchProbabilityBonus  {
          output += "\(indent) catchProbabilityBonus[\(catchProbabilityBonusElementIndex)]: \(oneValueCatchProbabilityBonus)\n"
          catchProbabilityBonusElementIndex += 1
      }
      var fleeProbabilityBonusElementIndex:Int = 0
      for oneValueFleeProbabilityBonus in fleeProbabilityBonus  {
          output += "\(indent) fleeProbabilityBonus[\(fleeProbabilityBonusElementIndex)]: \(oneValueFleeProbabilityBonus)\n"
          fleeProbabilityBonusElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEquipBadgeCooldownMs {
               hashCode = (hashCode &* 31) &+ equipBadgeCooldownMs.hashValue
            }
            for oneValueCatchProbabilityBonus in catchProbabilityBonus {
                hashCode = (hashCode &* 31) &+ oneValueCatchProbabilityBonus.hashValue
            }
            for oneValueFleeProbabilityBonus in fleeProbabilityBonus {
                hashCode = (hashCode &* 31) &+ oneValueFleeProbabilityBonus.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.EquippedBadgeSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.EquippedBadgeSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.EquippedBadgeSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.EquippedBadgeSettings = Pogoprotos.Settings.Master.EquippedBadgeSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEquipBadgeCooldownMs:Bool {
           get {
                return builderResult.hasEquipBadgeCooldownMs
           }
      }
      public var equipBadgeCooldownMs:Int64 {
           get {
                return builderResult.equipBadgeCooldownMs
           }
           set (value) {
               builderResult.hasEquipBadgeCooldownMs = true
               builderResult.equipBadgeCooldownMs = value
           }
      }
      public func setEquipBadgeCooldownMs(value:Int64) -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        self.equipBadgeCooldownMs = value
        return self
      }
      public func clearEquipBadgeCooldownMs() -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder{
           builderResult.hasEquipBadgeCooldownMs = false
           builderResult.equipBadgeCooldownMs = Int64(0)
           return self
      }
      public var catchProbabilityBonus:Array<Float> {
           get {
               return builderResult.catchProbabilityBonus
           }
           set (array) {
               builderResult.catchProbabilityBonus = array
           }
      }
      public func setCatchProbabilityBonus(value:Array<Float>) -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        self.catchProbabilityBonus = value
        return self
      }
      public func clearCatchProbabilityBonus() -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
         builderResult.catchProbabilityBonus.removeAll(keepCapacity: false)
         return self
      }
      public var fleeProbabilityBonus:Array<Float> {
           get {
               return builderResult.fleeProbabilityBonus
           }
           set (array) {
               builderResult.fleeProbabilityBonus = array
           }
      }
      public func setFleeProbabilityBonus(value:Array<Float>) -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        self.fleeProbabilityBonus = value
        return self
      }
      public func clearFleeProbabilityBonus() -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
         builderResult.fleeProbabilityBonus.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.EquippedBadgeSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        return try Pogoprotos.Settings.Master.EquippedBadgeSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.EquippedBadgeSettings {
        let returnMe:Pogoprotos.Settings.Master.EquippedBadgeSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.EquippedBadgeSettings) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        if other == Pogoprotos.Settings.Master.EquippedBadgeSettings() {
         return self
        }
        if other.hasEquipBadgeCooldownMs {
             equipBadgeCooldownMs = other.equipBadgeCooldownMs
        }
        if !other.catchProbabilityBonus.isEmpty {
            builderResult.catchProbabilityBonus += other.catchProbabilityBonus
        }
        if !other.fleeProbabilityBonus.isEmpty {
            builderResult.fleeProbabilityBonus += other.fleeProbabilityBonus
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            equipBadgeCooldownMs = try input.readInt64()

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.catchProbabilityBonus += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.fleeProbabilityBonus += [try input.readFloat()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder()
        if let jsonValueEquipBadgeCooldownMs = jsonMap["equipBadgeCooldownMs"] as? String {
          resultDecodedBuilder.equipBadgeCooldownMs = Int64(jsonValueEquipBadgeCooldownMs)!
        }
        if let jsonValueCatchProbabilityBonus = jsonMap["catchProbabilityBonus"] as? Array<NSNumber> {
          var jsonArrayCatchProbabilityBonus:Array<Float> = []
          for oneValueCatchProbabilityBonus in jsonValueCatchProbabilityBonus {
            jsonArrayCatchProbabilityBonus += [oneValueCatchProbabilityBonus.floatValue]
          }
          resultDecodedBuilder.catchProbabilityBonus = jsonArrayCatchProbabilityBonus
        }
        if let jsonValueFleeProbabilityBonus = jsonMap["fleeProbabilityBonus"] as? Array<NSNumber> {
          var jsonArrayFleeProbabilityBonus:Array<Float> = []
          for oneValueFleeProbabilityBonus in jsonValueFleeProbabilityBonus {
            jsonArrayFleeProbabilityBonus += [oneValueFleeProbabilityBonus.floatValue]
          }
          resultDecodedBuilder.fleeProbabilityBonus = jsonArrayFleeProbabilityBonus
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.EquippedBadgeSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class GymBattleSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasEnergyPerSec:Bool = false
    public private(set) var energyPerSec:Float = Float(0)

    public private(set) var hasDodgeEnergyCost:Bool = false
    public private(set) var dodgeEnergyCost:Float = Float(0)

    public private(set) var hasRetargetSeconds:Bool = false
    public private(set) var retargetSeconds:Float = Float(0)

    public private(set) var hasEnemyAttackInterval:Bool = false
    public private(set) var enemyAttackInterval:Float = Float(0)

    public private(set) var hasAttackServerInterval:Bool = false
    public private(set) var attackServerInterval:Float = Float(0)

    public private(set) var hasRoundDurationSeconds:Bool = false
    public private(set) var roundDurationSeconds:Float = Float(0)

    public private(set) var hasBonusTimePerAllySeconds:Bool = false
    public private(set) var bonusTimePerAllySeconds:Float = Float(0)

    public private(set) var hasMaximumAttackersPerBattle:Bool = false
    public private(set) var maximumAttackersPerBattle:Int32 = Int32(0)

    public private(set) var hasSameTypeAttackBonusMultiplier:Bool = false
    public private(set) var sameTypeAttackBonusMultiplier:Float = Float(0)

    public private(set) var hasMaximumEnergy:Bool = false
    public private(set) var maximumEnergy:Int32 = Int32(0)

    public private(set) var hasEnergyDeltaPerHealthLost:Bool = false
    public private(set) var energyDeltaPerHealthLost:Float = Float(0)

    public private(set) var hasDodgeDurationMs:Bool = false
    public private(set) var dodgeDurationMs:Int32 = Int32(0)

    public private(set) var hasMinimumPlayerLevel:Bool = false
    public private(set) var minimumPlayerLevel:Int32 = Int32(0)

    public private(set) var hasSwapDurationMs:Bool = false
    public private(set) var swapDurationMs:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasEnergyPerSec {
        try output.writeFloat(1, value:energyPerSec)
      }
      if hasDodgeEnergyCost {
        try output.writeFloat(2, value:dodgeEnergyCost)
      }
      if hasRetargetSeconds {
        try output.writeFloat(3, value:retargetSeconds)
      }
      if hasEnemyAttackInterval {
        try output.writeFloat(4, value:enemyAttackInterval)
      }
      if hasAttackServerInterval {
        try output.writeFloat(5, value:attackServerInterval)
      }
      if hasRoundDurationSeconds {
        try output.writeFloat(6, value:roundDurationSeconds)
      }
      if hasBonusTimePerAllySeconds {
        try output.writeFloat(7, value:bonusTimePerAllySeconds)
      }
      if hasMaximumAttackersPerBattle {
        try output.writeInt32(8, value:maximumAttackersPerBattle)
      }
      if hasSameTypeAttackBonusMultiplier {
        try output.writeFloat(9, value:sameTypeAttackBonusMultiplier)
      }
      if hasMaximumEnergy {
        try output.writeInt32(10, value:maximumEnergy)
      }
      if hasEnergyDeltaPerHealthLost {
        try output.writeFloat(11, value:energyDeltaPerHealthLost)
      }
      if hasDodgeDurationMs {
        try output.writeInt32(12, value:dodgeDurationMs)
      }
      if hasMinimumPlayerLevel {
        try output.writeInt32(13, value:minimumPlayerLevel)
      }
      if hasSwapDurationMs {
        try output.writeInt32(14, value:swapDurationMs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEnergyPerSec {
        serialize_size += energyPerSec.computeFloatSize(1)
      }
      if hasDodgeEnergyCost {
        serialize_size += dodgeEnergyCost.computeFloatSize(2)
      }
      if hasRetargetSeconds {
        serialize_size += retargetSeconds.computeFloatSize(3)
      }
      if hasEnemyAttackInterval {
        serialize_size += enemyAttackInterval.computeFloatSize(4)
      }
      if hasAttackServerInterval {
        serialize_size += attackServerInterval.computeFloatSize(5)
      }
      if hasRoundDurationSeconds {
        serialize_size += roundDurationSeconds.computeFloatSize(6)
      }
      if hasBonusTimePerAllySeconds {
        serialize_size += bonusTimePerAllySeconds.computeFloatSize(7)
      }
      if hasMaximumAttackersPerBattle {
        serialize_size += maximumAttackersPerBattle.computeInt32Size(8)
      }
      if hasSameTypeAttackBonusMultiplier {
        serialize_size += sameTypeAttackBonusMultiplier.computeFloatSize(9)
      }
      if hasMaximumEnergy {
        serialize_size += maximumEnergy.computeInt32Size(10)
      }
      if hasEnergyDeltaPerHealthLost {
        serialize_size += energyDeltaPerHealthLost.computeFloatSize(11)
      }
      if hasDodgeDurationMs {
        serialize_size += dodgeDurationMs.computeInt32Size(12)
      }
      if hasMinimumPlayerLevel {
        serialize_size += minimumPlayerLevel.computeInt32Size(13)
      }
      if hasSwapDurationMs {
        serialize_size += swapDurationMs.computeInt32Size(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.GymBattleSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.GymBattleSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings? {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return Pogoprotos.Settings.Master.GymBattleSettings.classBuilder() as! Pogoprotos.Settings.Master.GymBattleSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.GymBattleSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymBattleSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymBattleSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return try Pogoprotos.Settings.Master.GymBattleSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.GymBattleSettings) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasEnergyPerSec {
        jsonMap["energyPerSec"] = NSNumber(float:energyPerSec)
      }
      if hasDodgeEnergyCost {
        jsonMap["dodgeEnergyCost"] = NSNumber(float:dodgeEnergyCost)
      }
      if hasRetargetSeconds {
        jsonMap["retargetSeconds"] = NSNumber(float:retargetSeconds)
      }
      if hasEnemyAttackInterval {
        jsonMap["enemyAttackInterval"] = NSNumber(float:enemyAttackInterval)
      }
      if hasAttackServerInterval {
        jsonMap["attackServerInterval"] = NSNumber(float:attackServerInterval)
      }
      if hasRoundDurationSeconds {
        jsonMap["roundDurationSeconds"] = NSNumber(float:roundDurationSeconds)
      }
      if hasBonusTimePerAllySeconds {
        jsonMap["bonusTimePerAllySeconds"] = NSNumber(float:bonusTimePerAllySeconds)
      }
      if hasMaximumAttackersPerBattle {
        jsonMap["maximumAttackersPerBattle"] = NSNumber(int:maximumAttackersPerBattle)
      }
      if hasSameTypeAttackBonusMultiplier {
        jsonMap["sameTypeAttackBonusMultiplier"] = NSNumber(float:sameTypeAttackBonusMultiplier)
      }
      if hasMaximumEnergy {
        jsonMap["maximumEnergy"] = NSNumber(int:maximumEnergy)
      }
      if hasEnergyDeltaPerHealthLost {
        jsonMap["energyDeltaPerHealthLost"] = NSNumber(float:energyDeltaPerHealthLost)
      }
      if hasDodgeDurationMs {
        jsonMap["dodgeDurationMs"] = NSNumber(int:dodgeDurationMs)
      }
      if hasMinimumPlayerLevel {
        jsonMap["minimumPlayerLevel"] = NSNumber(int:minimumPlayerLevel)
      }
      if hasSwapDurationMs {
        jsonMap["swapDurationMs"] = NSNumber(int:swapDurationMs)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.GymBattleSettings {
      return try Pogoprotos.Settings.Master.GymBattleSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEnergyPerSec {
        output += "\(indent) energyPerSec: \(energyPerSec) \n"
      }
      if hasDodgeEnergyCost {
        output += "\(indent) dodgeEnergyCost: \(dodgeEnergyCost) \n"
      }
      if hasRetargetSeconds {
        output += "\(indent) retargetSeconds: \(retargetSeconds) \n"
      }
      if hasEnemyAttackInterval {
        output += "\(indent) enemyAttackInterval: \(enemyAttackInterval) \n"
      }
      if hasAttackServerInterval {
        output += "\(indent) attackServerInterval: \(attackServerInterval) \n"
      }
      if hasRoundDurationSeconds {
        output += "\(indent) roundDurationSeconds: \(roundDurationSeconds) \n"
      }
      if hasBonusTimePerAllySeconds {
        output += "\(indent) bonusTimePerAllySeconds: \(bonusTimePerAllySeconds) \n"
      }
      if hasMaximumAttackersPerBattle {
        output += "\(indent) maximumAttackersPerBattle: \(maximumAttackersPerBattle) \n"
      }
      if hasSameTypeAttackBonusMultiplier {
        output += "\(indent) sameTypeAttackBonusMultiplier: \(sameTypeAttackBonusMultiplier) \n"
      }
      if hasMaximumEnergy {
        output += "\(indent) maximumEnergy: \(maximumEnergy) \n"
      }
      if hasEnergyDeltaPerHealthLost {
        output += "\(indent) energyDeltaPerHealthLost: \(energyDeltaPerHealthLost) \n"
      }
      if hasDodgeDurationMs {
        output += "\(indent) dodgeDurationMs: \(dodgeDurationMs) \n"
      }
      if hasMinimumPlayerLevel {
        output += "\(indent) minimumPlayerLevel: \(minimumPlayerLevel) \n"
      }
      if hasSwapDurationMs {
        output += "\(indent) swapDurationMs: \(swapDurationMs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEnergyPerSec {
               hashCode = (hashCode &* 31) &+ energyPerSec.hashValue
            }
            if hasDodgeEnergyCost {
               hashCode = (hashCode &* 31) &+ dodgeEnergyCost.hashValue
            }
            if hasRetargetSeconds {
               hashCode = (hashCode &* 31) &+ retargetSeconds.hashValue
            }
            if hasEnemyAttackInterval {
               hashCode = (hashCode &* 31) &+ enemyAttackInterval.hashValue
            }
            if hasAttackServerInterval {
               hashCode = (hashCode &* 31) &+ attackServerInterval.hashValue
            }
            if hasRoundDurationSeconds {
               hashCode = (hashCode &* 31) &+ roundDurationSeconds.hashValue
            }
            if hasBonusTimePerAllySeconds {
               hashCode = (hashCode &* 31) &+ bonusTimePerAllySeconds.hashValue
            }
            if hasMaximumAttackersPerBattle {
               hashCode = (hashCode &* 31) &+ maximumAttackersPerBattle.hashValue
            }
            if hasSameTypeAttackBonusMultiplier {
               hashCode = (hashCode &* 31) &+ sameTypeAttackBonusMultiplier.hashValue
            }
            if hasMaximumEnergy {
               hashCode = (hashCode &* 31) &+ maximumEnergy.hashValue
            }
            if hasEnergyDeltaPerHealthLost {
               hashCode = (hashCode &* 31) &+ energyDeltaPerHealthLost.hashValue
            }
            if hasDodgeDurationMs {
               hashCode = (hashCode &* 31) &+ dodgeDurationMs.hashValue
            }
            if hasMinimumPlayerLevel {
               hashCode = (hashCode &* 31) &+ minimumPlayerLevel.hashValue
            }
            if hasSwapDurationMs {
               hashCode = (hashCode &* 31) &+ swapDurationMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.GymBattleSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.GymBattleSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.GymBattleSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.GymBattleSettings = Pogoprotos.Settings.Master.GymBattleSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.GymBattleSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEnergyPerSec:Bool {
           get {
                return builderResult.hasEnergyPerSec
           }
      }
      public var energyPerSec:Float {
           get {
                return builderResult.energyPerSec
           }
           set (value) {
               builderResult.hasEnergyPerSec = true
               builderResult.energyPerSec = value
           }
      }
      public func setEnergyPerSec(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.energyPerSec = value
        return self
      }
      public func clearEnergyPerSec() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasEnergyPerSec = false
           builderResult.energyPerSec = Float(0)
           return self
      }
      public var hasDodgeEnergyCost:Bool {
           get {
                return builderResult.hasDodgeEnergyCost
           }
      }
      public var dodgeEnergyCost:Float {
           get {
                return builderResult.dodgeEnergyCost
           }
           set (value) {
               builderResult.hasDodgeEnergyCost = true
               builderResult.dodgeEnergyCost = value
           }
      }
      public func setDodgeEnergyCost(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.dodgeEnergyCost = value
        return self
      }
      public func clearDodgeEnergyCost() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasDodgeEnergyCost = false
           builderResult.dodgeEnergyCost = Float(0)
           return self
      }
      public var hasRetargetSeconds:Bool {
           get {
                return builderResult.hasRetargetSeconds
           }
      }
      public var retargetSeconds:Float {
           get {
                return builderResult.retargetSeconds
           }
           set (value) {
               builderResult.hasRetargetSeconds = true
               builderResult.retargetSeconds = value
           }
      }
      public func setRetargetSeconds(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.retargetSeconds = value
        return self
      }
      public func clearRetargetSeconds() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasRetargetSeconds = false
           builderResult.retargetSeconds = Float(0)
           return self
      }
      public var hasEnemyAttackInterval:Bool {
           get {
                return builderResult.hasEnemyAttackInterval
           }
      }
      public var enemyAttackInterval:Float {
           get {
                return builderResult.enemyAttackInterval
           }
           set (value) {
               builderResult.hasEnemyAttackInterval = true
               builderResult.enemyAttackInterval = value
           }
      }
      public func setEnemyAttackInterval(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.enemyAttackInterval = value
        return self
      }
      public func clearEnemyAttackInterval() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasEnemyAttackInterval = false
           builderResult.enemyAttackInterval = Float(0)
           return self
      }
      public var hasAttackServerInterval:Bool {
           get {
                return builderResult.hasAttackServerInterval
           }
      }
      public var attackServerInterval:Float {
           get {
                return builderResult.attackServerInterval
           }
           set (value) {
               builderResult.hasAttackServerInterval = true
               builderResult.attackServerInterval = value
           }
      }
      public func setAttackServerInterval(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.attackServerInterval = value
        return self
      }
      public func clearAttackServerInterval() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasAttackServerInterval = false
           builderResult.attackServerInterval = Float(0)
           return self
      }
      public var hasRoundDurationSeconds:Bool {
           get {
                return builderResult.hasRoundDurationSeconds
           }
      }
      public var roundDurationSeconds:Float {
           get {
                return builderResult.roundDurationSeconds
           }
           set (value) {
               builderResult.hasRoundDurationSeconds = true
               builderResult.roundDurationSeconds = value
           }
      }
      public func setRoundDurationSeconds(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.roundDurationSeconds = value
        return self
      }
      public func clearRoundDurationSeconds() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasRoundDurationSeconds = false
           builderResult.roundDurationSeconds = Float(0)
           return self
      }
      public var hasBonusTimePerAllySeconds:Bool {
           get {
                return builderResult.hasBonusTimePerAllySeconds
           }
      }
      public var bonusTimePerAllySeconds:Float {
           get {
                return builderResult.bonusTimePerAllySeconds
           }
           set (value) {
               builderResult.hasBonusTimePerAllySeconds = true
               builderResult.bonusTimePerAllySeconds = value
           }
      }
      public func setBonusTimePerAllySeconds(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.bonusTimePerAllySeconds = value
        return self
      }
      public func clearBonusTimePerAllySeconds() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasBonusTimePerAllySeconds = false
           builderResult.bonusTimePerAllySeconds = Float(0)
           return self
      }
      public var hasMaximumAttackersPerBattle:Bool {
           get {
                return builderResult.hasMaximumAttackersPerBattle
           }
      }
      public var maximumAttackersPerBattle:Int32 {
           get {
                return builderResult.maximumAttackersPerBattle
           }
           set (value) {
               builderResult.hasMaximumAttackersPerBattle = true
               builderResult.maximumAttackersPerBattle = value
           }
      }
      public func setMaximumAttackersPerBattle(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.maximumAttackersPerBattle = value
        return self
      }
      public func clearMaximumAttackersPerBattle() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasMaximumAttackersPerBattle = false
           builderResult.maximumAttackersPerBattle = Int32(0)
           return self
      }
      public var hasSameTypeAttackBonusMultiplier:Bool {
           get {
                return builderResult.hasSameTypeAttackBonusMultiplier
           }
      }
      public var sameTypeAttackBonusMultiplier:Float {
           get {
                return builderResult.sameTypeAttackBonusMultiplier
           }
           set (value) {
               builderResult.hasSameTypeAttackBonusMultiplier = true
               builderResult.sameTypeAttackBonusMultiplier = value
           }
      }
      public func setSameTypeAttackBonusMultiplier(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.sameTypeAttackBonusMultiplier = value
        return self
      }
      public func clearSameTypeAttackBonusMultiplier() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasSameTypeAttackBonusMultiplier = false
           builderResult.sameTypeAttackBonusMultiplier = Float(0)
           return self
      }
      public var hasMaximumEnergy:Bool {
           get {
                return builderResult.hasMaximumEnergy
           }
      }
      public var maximumEnergy:Int32 {
           get {
                return builderResult.maximumEnergy
           }
           set (value) {
               builderResult.hasMaximumEnergy = true
               builderResult.maximumEnergy = value
           }
      }
      public func setMaximumEnergy(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.maximumEnergy = value
        return self
      }
      public func clearMaximumEnergy() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasMaximumEnergy = false
           builderResult.maximumEnergy = Int32(0)
           return self
      }
      public var hasEnergyDeltaPerHealthLost:Bool {
           get {
                return builderResult.hasEnergyDeltaPerHealthLost
           }
      }
      public var energyDeltaPerHealthLost:Float {
           get {
                return builderResult.energyDeltaPerHealthLost
           }
           set (value) {
               builderResult.hasEnergyDeltaPerHealthLost = true
               builderResult.energyDeltaPerHealthLost = value
           }
      }
      public func setEnergyDeltaPerHealthLost(value:Float) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.energyDeltaPerHealthLost = value
        return self
      }
      public func clearEnergyDeltaPerHealthLost() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasEnergyDeltaPerHealthLost = false
           builderResult.energyDeltaPerHealthLost = Float(0)
           return self
      }
      public var hasDodgeDurationMs:Bool {
           get {
                return builderResult.hasDodgeDurationMs
           }
      }
      public var dodgeDurationMs:Int32 {
           get {
                return builderResult.dodgeDurationMs
           }
           set (value) {
               builderResult.hasDodgeDurationMs = true
               builderResult.dodgeDurationMs = value
           }
      }
      public func setDodgeDurationMs(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.dodgeDurationMs = value
        return self
      }
      public func clearDodgeDurationMs() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasDodgeDurationMs = false
           builderResult.dodgeDurationMs = Int32(0)
           return self
      }
      public var hasMinimumPlayerLevel:Bool {
           get {
                return builderResult.hasMinimumPlayerLevel
           }
      }
      public var minimumPlayerLevel:Int32 {
           get {
                return builderResult.minimumPlayerLevel
           }
           set (value) {
               builderResult.hasMinimumPlayerLevel = true
               builderResult.minimumPlayerLevel = value
           }
      }
      public func setMinimumPlayerLevel(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.minimumPlayerLevel = value
        return self
      }
      public func clearMinimumPlayerLevel() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasMinimumPlayerLevel = false
           builderResult.minimumPlayerLevel = Int32(0)
           return self
      }
      public var hasSwapDurationMs:Bool {
           get {
                return builderResult.hasSwapDurationMs
           }
      }
      public var swapDurationMs:Int32 {
           get {
                return builderResult.swapDurationMs
           }
           set (value) {
               builderResult.hasSwapDurationMs = true
               builderResult.swapDurationMs = value
           }
      }
      public func setSwapDurationMs(value:Int32) -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        self.swapDurationMs = value
        return self
      }
      public func clearSwapDurationMs() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder{
           builderResult.hasSwapDurationMs = false
           builderResult.swapDurationMs = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.GymBattleSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        return try Pogoprotos.Settings.Master.GymBattleSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.GymBattleSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.GymBattleSettings {
        let returnMe:Pogoprotos.Settings.Master.GymBattleSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.GymBattleSettings) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        if other == Pogoprotos.Settings.Master.GymBattleSettings() {
         return self
        }
        if other.hasEnergyPerSec {
             energyPerSec = other.energyPerSec
        }
        if other.hasDodgeEnergyCost {
             dodgeEnergyCost = other.dodgeEnergyCost
        }
        if other.hasRetargetSeconds {
             retargetSeconds = other.retargetSeconds
        }
        if other.hasEnemyAttackInterval {
             enemyAttackInterval = other.enemyAttackInterval
        }
        if other.hasAttackServerInterval {
             attackServerInterval = other.attackServerInterval
        }
        if other.hasRoundDurationSeconds {
             roundDurationSeconds = other.roundDurationSeconds
        }
        if other.hasBonusTimePerAllySeconds {
             bonusTimePerAllySeconds = other.bonusTimePerAllySeconds
        }
        if other.hasMaximumAttackersPerBattle {
             maximumAttackersPerBattle = other.maximumAttackersPerBattle
        }
        if other.hasSameTypeAttackBonusMultiplier {
             sameTypeAttackBonusMultiplier = other.sameTypeAttackBonusMultiplier
        }
        if other.hasMaximumEnergy {
             maximumEnergy = other.maximumEnergy
        }
        if other.hasEnergyDeltaPerHealthLost {
             energyDeltaPerHealthLost = other.energyDeltaPerHealthLost
        }
        if other.hasDodgeDurationMs {
             dodgeDurationMs = other.dodgeDurationMs
        }
        if other.hasMinimumPlayerLevel {
             minimumPlayerLevel = other.minimumPlayerLevel
        }
        if other.hasSwapDurationMs {
             swapDurationMs = other.swapDurationMs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 13:
            energyPerSec = try input.readFloat()

          case 21:
            dodgeEnergyCost = try input.readFloat()

          case 29:
            retargetSeconds = try input.readFloat()

          case 37:
            enemyAttackInterval = try input.readFloat()

          case 45:
            attackServerInterval = try input.readFloat()

          case 53:
            roundDurationSeconds = try input.readFloat()

          case 61:
            bonusTimePerAllySeconds = try input.readFloat()

          case 64:
            maximumAttackersPerBattle = try input.readInt32()

          case 77:
            sameTypeAttackBonusMultiplier = try input.readFloat()

          case 80:
            maximumEnergy = try input.readInt32()

          case 93:
            energyDeltaPerHealthLost = try input.readFloat()

          case 96:
            dodgeDurationMs = try input.readInt32()

          case 104:
            minimumPlayerLevel = try input.readInt32()

          case 112:
            swapDurationMs = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.GymBattleSettings.Builder()
        if let jsonValueEnergyPerSec = jsonMap["energyPerSec"] as? NSNumber {
          resultDecodedBuilder.energyPerSec = jsonValueEnergyPerSec.floatValue
        }
        if let jsonValueDodgeEnergyCost = jsonMap["dodgeEnergyCost"] as? NSNumber {
          resultDecodedBuilder.dodgeEnergyCost = jsonValueDodgeEnergyCost.floatValue
        }
        if let jsonValueRetargetSeconds = jsonMap["retargetSeconds"] as? NSNumber {
          resultDecodedBuilder.retargetSeconds = jsonValueRetargetSeconds.floatValue
        }
        if let jsonValueEnemyAttackInterval = jsonMap["enemyAttackInterval"] as? NSNumber {
          resultDecodedBuilder.enemyAttackInterval = jsonValueEnemyAttackInterval.floatValue
        }
        if let jsonValueAttackServerInterval = jsonMap["attackServerInterval"] as? NSNumber {
          resultDecodedBuilder.attackServerInterval = jsonValueAttackServerInterval.floatValue
        }
        if let jsonValueRoundDurationSeconds = jsonMap["roundDurationSeconds"] as? NSNumber {
          resultDecodedBuilder.roundDurationSeconds = jsonValueRoundDurationSeconds.floatValue
        }
        if let jsonValueBonusTimePerAllySeconds = jsonMap["bonusTimePerAllySeconds"] as? NSNumber {
          resultDecodedBuilder.bonusTimePerAllySeconds = jsonValueBonusTimePerAllySeconds.floatValue
        }
        if let jsonValueMaximumAttackersPerBattle = jsonMap["maximumAttackersPerBattle"] as? NSNumber {
          resultDecodedBuilder.maximumAttackersPerBattle = jsonValueMaximumAttackersPerBattle.intValue
        }
        if let jsonValueSameTypeAttackBonusMultiplier = jsonMap["sameTypeAttackBonusMultiplier"] as? NSNumber {
          resultDecodedBuilder.sameTypeAttackBonusMultiplier = jsonValueSameTypeAttackBonusMultiplier.floatValue
        }
        if let jsonValueMaximumEnergy = jsonMap["maximumEnergy"] as? NSNumber {
          resultDecodedBuilder.maximumEnergy = jsonValueMaximumEnergy.intValue
        }
        if let jsonValueEnergyDeltaPerHealthLost = jsonMap["energyDeltaPerHealthLost"] as? NSNumber {
          resultDecodedBuilder.energyDeltaPerHealthLost = jsonValueEnergyDeltaPerHealthLost.floatValue
        }
        if let jsonValueDodgeDurationMs = jsonMap["dodgeDurationMs"] as? NSNumber {
          resultDecodedBuilder.dodgeDurationMs = jsonValueDodgeDurationMs.intValue
        }
        if let jsonValueMinimumPlayerLevel = jsonMap["minimumPlayerLevel"] as? NSNumber {
          resultDecodedBuilder.minimumPlayerLevel = jsonValueMinimumPlayerLevel.intValue
        }
        if let jsonValueSwapDurationMs = jsonMap["swapDurationMs"] as? NSNumber {
          resultDecodedBuilder.swapDurationMs = jsonValueSwapDurationMs.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.GymBattleSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.GymBattleSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class GymLevelSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var requiredExperience:Array<Int32> = Array<Int32>()
    private var requiredExperienceMemoizedSerializedSize:Int32 = -1
    public private(set) var leaderSlots:Array<Int32> = Array<Int32>()
    private var leaderSlotsMemoizedSerializedSize:Int32 = -1
    public private(set) var trainerSlots:Array<Int32> = Array<Int32>()
    private var trainerSlotsMemoizedSerializedSize:Int32 = -1
    public private(set) var searchRollBonus:Array<Int32> = Array<Int32>()
    private var searchRollBonusMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !requiredExperience.isEmpty {
        try output.writeRawVarint32(10)
        try output.writeRawVarint32(requiredExperienceMemoizedSerializedSize)
        for oneValuerequiredExperience in requiredExperience {
          try output.writeInt32NoTag(oneValuerequiredExperience)
        }
      }
      if !leaderSlots.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(leaderSlotsMemoizedSerializedSize)
        for oneValueleaderSlots in leaderSlots {
          try output.writeInt32NoTag(oneValueleaderSlots)
        }
      }
      if !trainerSlots.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(trainerSlotsMemoizedSerializedSize)
        for oneValuetrainerSlots in trainerSlots {
          try output.writeInt32NoTag(oneValuetrainerSlots)
        }
      }
      if !searchRollBonus.isEmpty {
        try output.writeRawVarint32(34)
        try output.writeRawVarint32(searchRollBonusMemoizedSerializedSize)
        for oneValuesearchRollBonus in searchRollBonus {
          try output.writeInt32NoTag(oneValuesearchRollBonus)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeRequiredExperience:Int32 = 0
      for oneValuerequiredExperience in requiredExperience {
          dataSizeRequiredExperience += oneValuerequiredExperience.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRequiredExperience
      if !requiredExperience.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRequiredExperience.computeInt32SizeNoTag()
      }
      requiredExperienceMemoizedSerializedSize = dataSizeRequiredExperience
      var dataSizeLeaderSlots:Int32 = 0
      for oneValueleaderSlots in leaderSlots {
          dataSizeLeaderSlots += oneValueleaderSlots.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeLeaderSlots
      if !leaderSlots.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeLeaderSlots.computeInt32SizeNoTag()
      }
      leaderSlotsMemoizedSerializedSize = dataSizeLeaderSlots
      var dataSizeTrainerSlots:Int32 = 0
      for oneValuetrainerSlots in trainerSlots {
          dataSizeTrainerSlots += oneValuetrainerSlots.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeTrainerSlots
      if !trainerSlots.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeTrainerSlots.computeInt32SizeNoTag()
      }
      trainerSlotsMemoizedSerializedSize = dataSizeTrainerSlots
      var dataSizeSearchRollBonus:Int32 = 0
      for oneValuesearchRollBonus in searchRollBonus {
          dataSizeSearchRollBonus += oneValuesearchRollBonus.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeSearchRollBonus
      if !searchRollBonus.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeSearchRollBonus.computeInt32SizeNoTag()
      }
      searchRollBonusMemoizedSerializedSize = dataSizeSearchRollBonus
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.GymLevelSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.GymLevelSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings? {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return Pogoprotos.Settings.Master.GymLevelSettings.classBuilder() as! Pogoprotos.Settings.Master.GymLevelSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.GymLevelSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymLevelSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.GymLevelSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.GymLevelSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.GymLevelSettings) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !requiredExperience.isEmpty {
        var jsonArrayRequiredExperience:Array<NSNumber> = []
          for oneValueRequiredExperience in requiredExperience {
            jsonArrayRequiredExperience += [NSNumber(int:oneValueRequiredExperience)]
          }
        jsonMap["requiredExperience"] = jsonArrayRequiredExperience
      }
      if !leaderSlots.isEmpty {
        var jsonArrayLeaderSlots:Array<NSNumber> = []
          for oneValueLeaderSlots in leaderSlots {
            jsonArrayLeaderSlots += [NSNumber(int:oneValueLeaderSlots)]
          }
        jsonMap["leaderSlots"] = jsonArrayLeaderSlots
      }
      if !trainerSlots.isEmpty {
        var jsonArrayTrainerSlots:Array<NSNumber> = []
          for oneValueTrainerSlots in trainerSlots {
            jsonArrayTrainerSlots += [NSNumber(int:oneValueTrainerSlots)]
          }
        jsonMap["trainerSlots"] = jsonArrayTrainerSlots
      }
      if !searchRollBonus.isEmpty {
        var jsonArraySearchRollBonus:Array<NSNumber> = []
          for oneValueSearchRollBonus in searchRollBonus {
            jsonArraySearchRollBonus += [NSNumber(int:oneValueSearchRollBonus)]
          }
        jsonMap["searchRollBonus"] = jsonArraySearchRollBonus
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.GymLevelSettings {
      return try Pogoprotos.Settings.Master.GymLevelSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var requiredExperienceElementIndex:Int = 0
      for oneValueRequiredExperience in requiredExperience  {
          output += "\(indent) requiredExperience[\(requiredExperienceElementIndex)]: \(oneValueRequiredExperience)\n"
          requiredExperienceElementIndex += 1
      }
      var leaderSlotsElementIndex:Int = 0
      for oneValueLeaderSlots in leaderSlots  {
          output += "\(indent) leaderSlots[\(leaderSlotsElementIndex)]: \(oneValueLeaderSlots)\n"
          leaderSlotsElementIndex += 1
      }
      var trainerSlotsElementIndex:Int = 0
      for oneValueTrainerSlots in trainerSlots  {
          output += "\(indent) trainerSlots[\(trainerSlotsElementIndex)]: \(oneValueTrainerSlots)\n"
          trainerSlotsElementIndex += 1
      }
      var searchRollBonusElementIndex:Int = 0
      for oneValueSearchRollBonus in searchRollBonus  {
          output += "\(indent) searchRollBonus[\(searchRollBonusElementIndex)]: \(oneValueSearchRollBonus)\n"
          searchRollBonusElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueRequiredExperience in requiredExperience {
                hashCode = (hashCode &* 31) &+ oneValueRequiredExperience.hashValue
            }
            for oneValueLeaderSlots in leaderSlots {
                hashCode = (hashCode &* 31) &+ oneValueLeaderSlots.hashValue
            }
            for oneValueTrainerSlots in trainerSlots {
                hashCode = (hashCode &* 31) &+ oneValueTrainerSlots.hashValue
            }
            for oneValueSearchRollBonus in searchRollBonus {
                hashCode = (hashCode &* 31) &+ oneValueSearchRollBonus.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.GymLevelSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.GymLevelSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.GymLevelSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.GymLevelSettings = Pogoprotos.Settings.Master.GymLevelSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.GymLevelSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var requiredExperience:Array<Int32> {
           get {
               return builderResult.requiredExperience
           }
           set (array) {
               builderResult.requiredExperience = array
           }
      }
      public func setRequiredExperience(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.requiredExperience = value
        return self
      }
      public func clearRequiredExperience() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.requiredExperience.removeAll(keepCapacity: false)
         return self
      }
      public var leaderSlots:Array<Int32> {
           get {
               return builderResult.leaderSlots
           }
           set (array) {
               builderResult.leaderSlots = array
           }
      }
      public func setLeaderSlots(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.leaderSlots = value
        return self
      }
      public func clearLeaderSlots() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.leaderSlots.removeAll(keepCapacity: false)
         return self
      }
      public var trainerSlots:Array<Int32> {
           get {
               return builderResult.trainerSlots
           }
           set (array) {
               builderResult.trainerSlots = array
           }
      }
      public func setTrainerSlots(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.trainerSlots = value
        return self
      }
      public func clearTrainerSlots() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.trainerSlots.removeAll(keepCapacity: false)
         return self
      }
      public var searchRollBonus:Array<Int32> {
           get {
               return builderResult.searchRollBonus
           }
           set (array) {
               builderResult.searchRollBonus = array
           }
      }
      public func setSearchRollBonus(value:Array<Int32>) -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        self.searchRollBonus = value
        return self
      }
      public func clearSearchRollBonus() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
         builderResult.searchRollBonus.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.GymLevelSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        return try Pogoprotos.Settings.Master.GymLevelSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.GymLevelSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.GymLevelSettings {
        let returnMe:Pogoprotos.Settings.Master.GymLevelSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.GymLevelSettings) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        if other == Pogoprotos.Settings.Master.GymLevelSettings() {
         return self
        }
        if !other.requiredExperience.isEmpty {
            builderResult.requiredExperience += other.requiredExperience
        }
        if !other.leaderSlots.isEmpty {
            builderResult.leaderSlots += other.leaderSlots
        }
        if !other.trainerSlots.isEmpty {
            builderResult.trainerSlots += other.trainerSlots
        }
        if !other.searchRollBonus.isEmpty {
            builderResult.searchRollBonus += other.searchRollBonus
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.requiredExperience += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.leaderSlots += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.trainerSlots += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 34:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.searchRollBonus += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.GymLevelSettings.Builder()
        if let jsonValueRequiredExperience = jsonMap["requiredExperience"] as? Array<NSNumber> {
          var jsonArrayRequiredExperience:Array<Int32> = []
          for oneValueRequiredExperience in jsonValueRequiredExperience {
            jsonArrayRequiredExperience += [oneValueRequiredExperience.intValue]
          }
          resultDecodedBuilder.requiredExperience = jsonArrayRequiredExperience
        }
        if let jsonValueLeaderSlots = jsonMap["leaderSlots"] as? Array<NSNumber> {
          var jsonArrayLeaderSlots:Array<Int32> = []
          for oneValueLeaderSlots in jsonValueLeaderSlots {
            jsonArrayLeaderSlots += [oneValueLeaderSlots.intValue]
          }
          resultDecodedBuilder.leaderSlots = jsonArrayLeaderSlots
        }
        if let jsonValueTrainerSlots = jsonMap["trainerSlots"] as? Array<NSNumber> {
          var jsonArrayTrainerSlots:Array<Int32> = []
          for oneValueTrainerSlots in jsonValueTrainerSlots {
            jsonArrayTrainerSlots += [oneValueTrainerSlots.intValue]
          }
          resultDecodedBuilder.trainerSlots = jsonArrayTrainerSlots
        }
        if let jsonValueSearchRollBonus = jsonMap["searchRollBonus"] as? Array<NSNumber> {
          var jsonArraySearchRollBonus:Array<Int32> = []
          for oneValueSearchRollBonus in jsonValueSearchRollBonus {
            jsonArraySearchRollBonus += [oneValueSearchRollBonus.intValue]
          }
          resultDecodedBuilder.searchRollBonus = jsonArraySearchRollBonus
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.GymLevelSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.GymLevelSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class IapItemDisplay : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasSku:Bool = false
    public private(set) var sku:String = ""

    public private(set) var category:Pogoprotos.Enums.HoloIapItemCategory = Pogoprotos.Enums.HoloIapItemCategory.IapCategoryNone
    public private(set) var hasCategory:Bool = false
    public private(set) var hasSortOrder:Bool = false
    public private(set) var sortOrder:Int32 = Int32(0)

    private var itemIdsMemoizedSerializedSize:Int32 = 0
    public private(set) var itemIds:Array<Pogoprotos.Inventory.Item.ItemId> = Array<Pogoprotos.Inventory.Item.ItemId>()
    public private(set) var counts:Array<Int32> = Array<Int32>()
    private var countsMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSku {
        try output.writeString(1, value:sku)
      }
      if hasCategory {
        try output.writeEnum(2, value:category.rawValue)
      }
      if hasSortOrder {
        try output.writeInt32(3, value:sortOrder)
      }
      for oneValueOfitemIds in itemIds {
          try output.writeEnum(4, value:oneValueOfitemIds.rawValue)
      }
      if !counts.isEmpty {
        try output.writeRawVarint32(42)
        try output.writeRawVarint32(countsMemoizedSerializedSize)
        for oneValuecounts in counts {
          try output.writeInt32NoTag(oneValuecounts)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSku {
        serialize_size += sku.computeStringSize(1)
      }
      if (hasCategory) {
        serialize_size += category.rawValue.computeEnumSize(2)
      }
      if hasSortOrder {
        serialize_size += sortOrder.computeInt32Size(3)
      }
      var dataSizeitemIds:Int32 = 0
      for oneValueOfitemIds in itemIds {
          dataSizeitemIds += oneValueOfitemIds.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeitemIds
      serialize_size += (1 * Int32(itemIds.count))
      var dataSizeCounts:Int32 = 0
      for oneValuecounts in counts {
          dataSizeCounts += oneValuecounts.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeCounts
      if !counts.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeCounts.computeInt32SizeNoTag()
      }
      countsMemoizedSerializedSize = dataSizeCounts
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.IapItemDisplay> {
      var mergedArray = Array<Pogoprotos.Settings.Master.IapItemDisplay>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay? {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return Pogoprotos.Settings.Master.IapItemDisplay.classBuilder() as! Pogoprotos.Settings.Master.IapItemDisplay.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.IapItemDisplay.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.IapItemDisplay.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.IapItemDisplay.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return try Pogoprotos.Settings.Master.IapItemDisplay.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.IapItemDisplay) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSku {
        jsonMap["sku"] = sku
      }
      if hasCategory {
        jsonMap["category"] = category.toString()
      }
      if hasSortOrder {
        jsonMap["sortOrder"] = NSNumber(int:sortOrder)
      }
      if !itemIds.isEmpty {
        var jsonArrayItemIds:Array<String> = []
          for oneValueItemIds in itemIds {
            jsonArrayItemIds += [oneValueItemIds.toString()]
          }
        jsonMap["itemIds"] = jsonArrayItemIds
      }
      if !counts.isEmpty {
        var jsonArrayCounts:Array<NSNumber> = []
          for oneValueCounts in counts {
            jsonArrayCounts += [NSNumber(int:oneValueCounts)]
          }
        jsonMap["counts"] = jsonArrayCounts
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.IapItemDisplay {
      return try Pogoprotos.Settings.Master.IapItemDisplay.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSku {
        output += "\(indent) sku: \(sku) \n"
      }
      if (hasCategory) {
        output += "\(indent) category: \(category.description)\n"
      }
      if hasSortOrder {
        output += "\(indent) sortOrder: \(sortOrder) \n"
      }
      var itemIdsElementIndex:Int = 0
      for oneValueOfitemIds in itemIds {
          output += "\(indent) itemIds[\(itemIdsElementIndex)]: \(oneValueOfitemIds.description)\n"
          itemIdsElementIndex += 1
      }
      var countsElementIndex:Int = 0
      for oneValueCounts in counts  {
          output += "\(indent) counts[\(countsElementIndex)]: \(oneValueCounts)\n"
          countsElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSku {
               hashCode = (hashCode &* 31) &+ sku.hashValue
            }
            if hasCategory {
               hashCode = (hashCode &* 31) &+ Int(category.rawValue)
            }
            if hasSortOrder {
               hashCode = (hashCode &* 31) &+ sortOrder.hashValue
            }
            for oneValueOfitemIds in itemIds {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfitemIds.rawValue)
            }
            for oneValueCounts in counts {
                hashCode = (hashCode &* 31) &+ oneValueCounts.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.IapItemDisplay"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.IapItemDisplay"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.IapItemDisplay.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.IapItemDisplay = Pogoprotos.Settings.Master.IapItemDisplay()
      public func getMessage() -> Pogoprotos.Settings.Master.IapItemDisplay {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSku:Bool {
           get {
                return builderResult.hasSku
           }
      }
      public var sku:String {
           get {
                return builderResult.sku
           }
           set (value) {
               builderResult.hasSku = true
               builderResult.sku = value
           }
      }
      public func setSku(value:String) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.sku = value
        return self
      }
      public func clearSku() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder{
           builderResult.hasSku = false
           builderResult.sku = ""
           return self
      }
        public var hasCategory:Bool{
            get {
                return builderResult.hasCategory
            }
        }
        public var category:Pogoprotos.Enums.HoloIapItemCategory {
            get {
                return builderResult.category
            }
            set (value) {
                builderResult.hasCategory = true
                builderResult.category = value
            }
        }
        public func setCategory(value:Pogoprotos.Enums.HoloIapItemCategory) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
          self.category = value
          return self
        }
        public func clearCategory() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
           builderResult.hasCategory = false
           builderResult.category = .IapCategoryNone
           return self
        }
      public var hasSortOrder:Bool {
           get {
                return builderResult.hasSortOrder
           }
      }
      public var sortOrder:Int32 {
           get {
                return builderResult.sortOrder
           }
           set (value) {
               builderResult.hasSortOrder = true
               builderResult.sortOrder = value
           }
      }
      public func setSortOrder(value:Int32) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.sortOrder = value
        return self
      }
      public func clearSortOrder() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder{
           builderResult.hasSortOrder = false
           builderResult.sortOrder = Int32(0)
           return self
      }
      public var itemIds:Array<Pogoprotos.Inventory.Item.ItemId> {
          get {
              return builderResult.itemIds
          }
          set (value) {
              builderResult.itemIds = value
          }
      }
      public func setItemIds(value:Array<Pogoprotos.Inventory.Item.ItemId>) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.itemIds = value
        return self
      }
      public func clearItemIds() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        builderResult.itemIds.removeAll(keepCapacity: false)
        return self
      }
      public var counts:Array<Int32> {
           get {
               return builderResult.counts
           }
           set (array) {
               builderResult.counts = array
           }
      }
      public func setCounts(value:Array<Int32>) -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        self.counts = value
        return self
      }
      public func clearCounts() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
         builderResult.counts.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        builderResult = Pogoprotos.Settings.Master.IapItemDisplay()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        return try Pogoprotos.Settings.Master.IapItemDisplay.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.IapItemDisplay {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.IapItemDisplay {
        let returnMe:Pogoprotos.Settings.Master.IapItemDisplay = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.IapItemDisplay) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        if other == Pogoprotos.Settings.Master.IapItemDisplay() {
         return self
        }
        if other.hasSku {
             sku = other.sku
        }
        if other.hasCategory {
             category = other.category
        }
        if other.hasSortOrder {
             sortOrder = other.sortOrder
        }
        if !other.itemIds.isEmpty {
           builderResult.itemIds += other.itemIds
        }
        if !other.counts.isEmpty {
            builderResult.counts += other.counts
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            sku = try input.readString()

          case 16:
            let valueIntcategory = try input.readEnum()
            if let enumscategory = Pogoprotos.Enums.HoloIapItemCategory(rawValue:valueIntcategory){
                 category = enumscategory
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntcategory))
            }

          case 24:
            sortOrder = try input.readInt32()

          case 32:
            let valueIntitemIds = try input.readEnum()
            if let enumsitemIds = Pogoprotos.Inventory.Item.ItemId(rawValue:valueIntitemIds) {
                 builderResult.itemIds += [enumsitemIds]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntitemIds))
            }

          case 42:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.counts += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.IapItemDisplay.Builder()
        if let jsonValueSku = jsonMap["sku"] as? String {
          resultDecodedBuilder.sku = jsonValueSku
        }
        if let jsonValueCategory = jsonMap["category"] as? String {
          resultDecodedBuilder.category = try Pogoprotos.Enums.HoloIapItemCategory.fromString(jsonValueCategory)
        }
        if let jsonValueSortOrder = jsonMap["sortOrder"] as? NSNumber {
          resultDecodedBuilder.sortOrder = jsonValueSortOrder.intValue
        }
        if let jsonValueItemIds = jsonMap["itemIds"] as? Array<String> {
          var jsonArrayItemIds:Array<Pogoprotos.Inventory.Item.ItemId> = []
          for oneValueItemIds in jsonValueItemIds {
            let enumFromStringItemIds = try Pogoprotos.Inventory.Item.ItemId.fromString(oneValueItemIds)
            jsonArrayItemIds += [enumFromStringItemIds]
          }
          resultDecodedBuilder.itemIds = jsonArrayItemIds
        }
        if let jsonValueCounts = jsonMap["counts"] as? Array<NSNumber> {
          var jsonArrayCounts:Array<Int32> = []
          for oneValueCounts in jsonValueCounts {
            jsonArrayCounts += [oneValueCounts.intValue]
          }
          resultDecodedBuilder.counts = jsonArrayCounts
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.IapItemDisplay.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.IapItemDisplay.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class IapSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasDailyBonusCoins:Bool = false
    public private(set) var dailyBonusCoins:Int32 = Int32(0)

    public private(set) var dailyDefenderBonusPerPokemon:Array<Int32> = Array<Int32>()
    private var dailyDefenderBonusPerPokemonMemoizedSerializedSize:Int32 = -1
    public private(set) var hasDailyDefenderBonusMaxDefenders:Bool = false
    public private(set) var dailyDefenderBonusMaxDefenders:Int32 = Int32(0)

    public private(set) var dailyDefenderBonusCurrency:Array<String> = Array<String>()
    public private(set) var hasMinTimeBetweenClaimsMs:Bool = false
    public private(set) var minTimeBetweenClaimsMs:Int64 = Int64(0)

    public private(set) var hasDailyBonusEnabled:Bool = false
    public private(set) var dailyBonusEnabled:Bool = false

    public private(set) var hasDailyDefenderBonusEnabled:Bool = false
    public private(set) var dailyDefenderBonusEnabled:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasDailyBonusCoins {
        try output.writeInt32(1, value:dailyBonusCoins)
      }
      if !dailyDefenderBonusPerPokemon.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(dailyDefenderBonusPerPokemonMemoizedSerializedSize)
        for oneValuedailyDefenderBonusPerPokemon in dailyDefenderBonusPerPokemon {
          try output.writeInt32NoTag(oneValuedailyDefenderBonusPerPokemon)
        }
      }
      if hasDailyDefenderBonusMaxDefenders {
        try output.writeInt32(3, value:dailyDefenderBonusMaxDefenders)
      }
      if !dailyDefenderBonusCurrency.isEmpty {
        for oneValuedailyDefenderBonusCurrency in dailyDefenderBonusCurrency {
          try output.writeString(4, value:oneValuedailyDefenderBonusCurrency)
        }
      }
      if hasMinTimeBetweenClaimsMs {
        try output.writeInt64(5, value:minTimeBetweenClaimsMs)
      }
      if hasDailyBonusEnabled {
        try output.writeBool(6, value:dailyBonusEnabled)
      }
      if hasDailyDefenderBonusEnabled {
        try output.writeBool(7, value:dailyDefenderBonusEnabled)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasDailyBonusCoins {
        serialize_size += dailyBonusCoins.computeInt32Size(1)
      }
      var dataSizeDailyDefenderBonusPerPokemon:Int32 = 0
      for oneValuedailyDefenderBonusPerPokemon in dailyDefenderBonusPerPokemon {
          dataSizeDailyDefenderBonusPerPokemon += oneValuedailyDefenderBonusPerPokemon.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeDailyDefenderBonusPerPokemon
      if !dailyDefenderBonusPerPokemon.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeDailyDefenderBonusPerPokemon.computeInt32SizeNoTag()
      }
      dailyDefenderBonusPerPokemonMemoizedSerializedSize = dataSizeDailyDefenderBonusPerPokemon
      if hasDailyDefenderBonusMaxDefenders {
        serialize_size += dailyDefenderBonusMaxDefenders.computeInt32Size(3)
      }
      var dataSizeDailyDefenderBonusCurrency:Int32 = 0
      for oneValuedailyDefenderBonusCurrency in dailyDefenderBonusCurrency {
          dataSizeDailyDefenderBonusCurrency += oneValuedailyDefenderBonusCurrency.computeStringSizeNoTag()
      }
      serialize_size += dataSizeDailyDefenderBonusCurrency
      serialize_size += 1 * Int32(dailyDefenderBonusCurrency.count)
      if hasMinTimeBetweenClaimsMs {
        serialize_size += minTimeBetweenClaimsMs.computeInt64Size(5)
      }
      if hasDailyBonusEnabled {
        serialize_size += dailyBonusEnabled.computeBoolSize(6)
      }
      if hasDailyDefenderBonusEnabled {
        serialize_size += dailyDefenderBonusEnabled.computeBoolSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.IapSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.IapSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.IapSettings? {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.IapSettings.Builder {
      return Pogoprotos.Settings.Master.IapSettings.classBuilder() as! Pogoprotos.Settings.Master.IapSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.IapSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.IapSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.IapSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.IapSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
      return try Pogoprotos.Settings.Master.IapSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.IapSettings) throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
      return try Pogoprotos.Settings.Master.IapSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasDailyBonusCoins {
        jsonMap["dailyBonusCoins"] = NSNumber(int:dailyBonusCoins)
      }
      if !dailyDefenderBonusPerPokemon.isEmpty {
        var jsonArrayDailyDefenderBonusPerPokemon:Array<NSNumber> = []
          for oneValueDailyDefenderBonusPerPokemon in dailyDefenderBonusPerPokemon {
            jsonArrayDailyDefenderBonusPerPokemon += [NSNumber(int:oneValueDailyDefenderBonusPerPokemon)]
          }
        jsonMap["dailyDefenderBonusPerPokemon"] = jsonArrayDailyDefenderBonusPerPokemon
      }
      if hasDailyDefenderBonusMaxDefenders {
        jsonMap["dailyDefenderBonusMaxDefenders"] = NSNumber(int:dailyDefenderBonusMaxDefenders)
      }
      if !dailyDefenderBonusCurrency.isEmpty {
        jsonMap["dailyDefenderBonusCurrency"] = dailyDefenderBonusCurrency
      }
      if hasMinTimeBetweenClaimsMs {
        jsonMap["minTimeBetweenClaimsMs"] = "\(minTimeBetweenClaimsMs)"
      }
      if hasDailyBonusEnabled {
        jsonMap["dailyBonusEnabled"] = dailyBonusEnabled
      }
      if hasDailyDefenderBonusEnabled {
        jsonMap["dailyDefenderBonusEnabled"] = dailyDefenderBonusEnabled
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.IapSettings {
      return try Pogoprotos.Settings.Master.IapSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasDailyBonusCoins {
        output += "\(indent) dailyBonusCoins: \(dailyBonusCoins) \n"
      }
      var dailyDefenderBonusPerPokemonElementIndex:Int = 0
      for oneValueDailyDefenderBonusPerPokemon in dailyDefenderBonusPerPokemon  {
          output += "\(indent) dailyDefenderBonusPerPokemon[\(dailyDefenderBonusPerPokemonElementIndex)]: \(oneValueDailyDefenderBonusPerPokemon)\n"
          dailyDefenderBonusPerPokemonElementIndex += 1
      }
      if hasDailyDefenderBonusMaxDefenders {
        output += "\(indent) dailyDefenderBonusMaxDefenders: \(dailyDefenderBonusMaxDefenders) \n"
      }
      var dailyDefenderBonusCurrencyElementIndex:Int = 0
      for oneValueDailyDefenderBonusCurrency in dailyDefenderBonusCurrency  {
          output += "\(indent) dailyDefenderBonusCurrency[\(dailyDefenderBonusCurrencyElementIndex)]: \(oneValueDailyDefenderBonusCurrency)\n"
          dailyDefenderBonusCurrencyElementIndex += 1
      }
      if hasMinTimeBetweenClaimsMs {
        output += "\(indent) minTimeBetweenClaimsMs: \(minTimeBetweenClaimsMs) \n"
      }
      if hasDailyBonusEnabled {
        output += "\(indent) dailyBonusEnabled: \(dailyBonusEnabled) \n"
      }
      if hasDailyDefenderBonusEnabled {
        output += "\(indent) dailyDefenderBonusEnabled: \(dailyDefenderBonusEnabled) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasDailyBonusCoins {
               hashCode = (hashCode &* 31) &+ dailyBonusCoins.hashValue
            }
            for oneValueDailyDefenderBonusPerPokemon in dailyDefenderBonusPerPokemon {
                hashCode = (hashCode &* 31) &+ oneValueDailyDefenderBonusPerPokemon.hashValue
            }
            if hasDailyDefenderBonusMaxDefenders {
               hashCode = (hashCode &* 31) &+ dailyDefenderBonusMaxDefenders.hashValue
            }
            for oneValueDailyDefenderBonusCurrency in dailyDefenderBonusCurrency {
                hashCode = (hashCode &* 31) &+ oneValueDailyDefenderBonusCurrency.hashValue
            }
            if hasMinTimeBetweenClaimsMs {
               hashCode = (hashCode &* 31) &+ minTimeBetweenClaimsMs.hashValue
            }
            if hasDailyBonusEnabled {
               hashCode = (hashCode &* 31) &+ dailyBonusEnabled.hashValue
            }
            if hasDailyDefenderBonusEnabled {
               hashCode = (hashCode &* 31) &+ dailyDefenderBonusEnabled.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.IapSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.IapSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.IapSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.IapSettings = Pogoprotos.Settings.Master.IapSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.IapSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasDailyBonusCoins:Bool {
           get {
                return builderResult.hasDailyBonusCoins
           }
      }
      public var dailyBonusCoins:Int32 {
           get {
                return builderResult.dailyBonusCoins
           }
           set (value) {
               builderResult.hasDailyBonusCoins = true
               builderResult.dailyBonusCoins = value
           }
      }
      public func setDailyBonusCoins(value:Int32) -> Pogoprotos.Settings.Master.IapSettings.Builder {
        self.dailyBonusCoins = value
        return self
      }
      public func clearDailyBonusCoins() -> Pogoprotos.Settings.Master.IapSettings.Builder{
           builderResult.hasDailyBonusCoins = false
           builderResult.dailyBonusCoins = Int32(0)
           return self
      }
      public var dailyDefenderBonusPerPokemon:Array<Int32> {
           get {
               return builderResult.dailyDefenderBonusPerPokemon
           }
           set (array) {
               builderResult.dailyDefenderBonusPerPokemon = array
           }
      }
      public func setDailyDefenderBonusPerPokemon(value:Array<Int32>) -> Pogoprotos.Settings.Master.IapSettings.Builder {
        self.dailyDefenderBonusPerPokemon = value
        return self
      }
      public func clearDailyDefenderBonusPerPokemon() -> Pogoprotos.Settings.Master.IapSettings.Builder {
         builderResult.dailyDefenderBonusPerPokemon.removeAll(keepCapacity: false)
         return self
      }
      public var hasDailyDefenderBonusMaxDefenders:Bool {
           get {
                return builderResult.hasDailyDefenderBonusMaxDefenders
           }
      }
      public var dailyDefenderBonusMaxDefenders:Int32 {
           get {
                return builderResult.dailyDefenderBonusMaxDefenders
           }
           set (value) {
               builderResult.hasDailyDefenderBonusMaxDefenders = true
               builderResult.dailyDefenderBonusMaxDefenders = value
           }
      }
      public func setDailyDefenderBonusMaxDefenders(value:Int32) -> Pogoprotos.Settings.Master.IapSettings.Builder {
        self.dailyDefenderBonusMaxDefenders = value
        return self
      }
      public func clearDailyDefenderBonusMaxDefenders() -> Pogoprotos.Settings.Master.IapSettings.Builder{
           builderResult.hasDailyDefenderBonusMaxDefenders = false
           builderResult.dailyDefenderBonusMaxDefenders = Int32(0)
           return self
      }
      public var dailyDefenderBonusCurrency:Array<String> {
           get {
               return builderResult.dailyDefenderBonusCurrency
           }
           set (array) {
               builderResult.dailyDefenderBonusCurrency = array
           }
      }
      public func setDailyDefenderBonusCurrency(value:Array<String>) -> Pogoprotos.Settings.Master.IapSettings.Builder {
        self.dailyDefenderBonusCurrency = value
        return self
      }
      public func clearDailyDefenderBonusCurrency() -> Pogoprotos.Settings.Master.IapSettings.Builder {
         builderResult.dailyDefenderBonusCurrency.removeAll(keepCapacity: false)
         return self
      }
      public var hasMinTimeBetweenClaimsMs:Bool {
           get {
                return builderResult.hasMinTimeBetweenClaimsMs
           }
      }
      public var minTimeBetweenClaimsMs:Int64 {
           get {
                return builderResult.minTimeBetweenClaimsMs
           }
           set (value) {
               builderResult.hasMinTimeBetweenClaimsMs = true
               builderResult.minTimeBetweenClaimsMs = value
           }
      }
      public func setMinTimeBetweenClaimsMs(value:Int64) -> Pogoprotos.Settings.Master.IapSettings.Builder {
        self.minTimeBetweenClaimsMs = value
        return self
      }
      public func clearMinTimeBetweenClaimsMs() -> Pogoprotos.Settings.Master.IapSettings.Builder{
           builderResult.hasMinTimeBetweenClaimsMs = false
           builderResult.minTimeBetweenClaimsMs = Int64(0)
           return self
      }
      public var hasDailyBonusEnabled:Bool {
           get {
                return builderResult.hasDailyBonusEnabled
           }
      }
      public var dailyBonusEnabled:Bool {
           get {
                return builderResult.dailyBonusEnabled
           }
           set (value) {
               builderResult.hasDailyBonusEnabled = true
               builderResult.dailyBonusEnabled = value
           }
      }
      public func setDailyBonusEnabled(value:Bool) -> Pogoprotos.Settings.Master.IapSettings.Builder {
        self.dailyBonusEnabled = value
        return self
      }
      public func clearDailyBonusEnabled() -> Pogoprotos.Settings.Master.IapSettings.Builder{
           builderResult.hasDailyBonusEnabled = false
           builderResult.dailyBonusEnabled = false
           return self
      }
      public var hasDailyDefenderBonusEnabled:Bool {
           get {
                return builderResult.hasDailyDefenderBonusEnabled
           }
      }
      public var dailyDefenderBonusEnabled:Bool {
           get {
                return builderResult.dailyDefenderBonusEnabled
           }
           set (value) {
               builderResult.hasDailyDefenderBonusEnabled = true
               builderResult.dailyDefenderBonusEnabled = value
           }
      }
      public func setDailyDefenderBonusEnabled(value:Bool) -> Pogoprotos.Settings.Master.IapSettings.Builder {
        self.dailyDefenderBonusEnabled = value
        return self
      }
      public func clearDailyDefenderBonusEnabled() -> Pogoprotos.Settings.Master.IapSettings.Builder{
           builderResult.hasDailyDefenderBonusEnabled = false
           builderResult.dailyDefenderBonusEnabled = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.IapSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.IapSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
        return try Pogoprotos.Settings.Master.IapSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.IapSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.IapSettings {
        let returnMe:Pogoprotos.Settings.Master.IapSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.IapSettings) throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
        if other == Pogoprotos.Settings.Master.IapSettings() {
         return self
        }
        if other.hasDailyBonusCoins {
             dailyBonusCoins = other.dailyBonusCoins
        }
        if !other.dailyDefenderBonusPerPokemon.isEmpty {
            builderResult.dailyDefenderBonusPerPokemon += other.dailyDefenderBonusPerPokemon
        }
        if other.hasDailyDefenderBonusMaxDefenders {
             dailyDefenderBonusMaxDefenders = other.dailyDefenderBonusMaxDefenders
        }
        if !other.dailyDefenderBonusCurrency.isEmpty {
            builderResult.dailyDefenderBonusCurrency += other.dailyDefenderBonusCurrency
        }
        if other.hasMinTimeBetweenClaimsMs {
             minTimeBetweenClaimsMs = other.minTimeBetweenClaimsMs
        }
        if other.hasDailyBonusEnabled {
             dailyBonusEnabled = other.dailyBonusEnabled
        }
        if other.hasDailyDefenderBonusEnabled {
             dailyDefenderBonusEnabled = other.dailyDefenderBonusEnabled
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            dailyBonusCoins = try input.readInt32()

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.dailyDefenderBonusPerPokemon += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 24:
            dailyDefenderBonusMaxDefenders = try input.readInt32()

          case 34:
            dailyDefenderBonusCurrency += [try input.readString()]

          case 40:
            minTimeBetweenClaimsMs = try input.readInt64()

          case 48:
            dailyBonusEnabled = try input.readBool()

          case 56:
            dailyDefenderBonusEnabled = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.IapSettings.Builder()
        if let jsonValueDailyBonusCoins = jsonMap["dailyBonusCoins"] as? NSNumber {
          resultDecodedBuilder.dailyBonusCoins = jsonValueDailyBonusCoins.intValue
        }
        if let jsonValueDailyDefenderBonusPerPokemon = jsonMap["dailyDefenderBonusPerPokemon"] as? Array<NSNumber> {
          var jsonArrayDailyDefenderBonusPerPokemon:Array<Int32> = []
          for oneValueDailyDefenderBonusPerPokemon in jsonValueDailyDefenderBonusPerPokemon {
            jsonArrayDailyDefenderBonusPerPokemon += [oneValueDailyDefenderBonusPerPokemon.intValue]
          }
          resultDecodedBuilder.dailyDefenderBonusPerPokemon = jsonArrayDailyDefenderBonusPerPokemon
        }
        if let jsonValueDailyDefenderBonusMaxDefenders = jsonMap["dailyDefenderBonusMaxDefenders"] as? NSNumber {
          resultDecodedBuilder.dailyDefenderBonusMaxDefenders = jsonValueDailyDefenderBonusMaxDefenders.intValue
        }
        if let jsonValueDailyDefenderBonusCurrency = jsonMap["dailyDefenderBonusCurrency"] as? Array<String> {
          resultDecodedBuilder.dailyDefenderBonusCurrency = jsonValueDailyDefenderBonusCurrency
        }
        if let jsonValueMinTimeBetweenClaimsMs = jsonMap["minTimeBetweenClaimsMs"] as? String {
          resultDecodedBuilder.minTimeBetweenClaimsMs = Int64(jsonValueMinTimeBetweenClaimsMs)!
        }
        if let jsonValueDailyBonusEnabled = jsonMap["dailyBonusEnabled"] as? Bool {
          resultDecodedBuilder.dailyBonusEnabled = jsonValueDailyBonusEnabled
        }
        if let jsonValueDailyDefenderBonusEnabled = jsonMap["dailyDefenderBonusEnabled"] as? Bool {
          resultDecodedBuilder.dailyDefenderBonusEnabled = jsonValueDailyDefenderBonusEnabled
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.IapSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.IapSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class ItemSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var itemId:Pogoprotos.Inventory.Item.ItemId = Pogoprotos.Inventory.Item.ItemId.ItemUnknown
    public private(set) var hasItemId:Bool = false
    public private(set) var itemType:Pogoprotos.Inventory.Item.ItemType = Pogoprotos.Inventory.Item.ItemType.ItemTypeNone
    public private(set) var hasItemType:Bool = false
    public private(set) var category:Pogoprotos.Enums.ItemCategory = Pogoprotos.Enums.ItemCategory.ItemCategoryNone
    public private(set) var hasCategory:Bool = false
    public private(set) var hasDropFreq:Bool = false
    public private(set) var dropFreq:Float = Float(0)

    public private(set) var hasDropTrainerLevel:Bool = false
    public private(set) var dropTrainerLevel:Int32 = Int32(0)

    public private(set) var hasPokeball:Bool = false
    public private(set) var pokeball:Pogoprotos.Settings.Master.Item.PokeballAttributes!
    public private(set) var hasPotion:Bool = false
    public private(set) var potion:Pogoprotos.Settings.Master.Item.PotionAttributes!
    public private(set) var hasRevive:Bool = false
    public private(set) var revive:Pogoprotos.Settings.Master.Item.ReviveAttributes!
    public private(set) var hasBattle:Bool = false
    public private(set) var battle:Pogoprotos.Settings.Master.Item.BattleAttributes!
    public private(set) var hasFood:Bool = false
    public private(set) var food:Pogoprotos.Settings.Master.Item.FoodAttributes!
    public private(set) var hasInventoryUpgrade:Bool = false
    public private(set) var inventoryUpgrade:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes!
    public private(set) var hasXpBoost:Bool = false
    public private(set) var xpBoost:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes!
    public private(set) var hasIncense:Bool = false
    public private(set) var incense:Pogoprotos.Settings.Master.Item.IncenseAttributes!
    public private(set) var hasEggIncubator:Bool = false
    public private(set) var eggIncubator:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes!
    public private(set) var hasFortModifier:Bool = false
    public private(set) var fortModifier:Pogoprotos.Settings.Master.Item.FortModifierAttributes!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasItemId {
        try output.writeEnum(1, value:itemId.rawValue)
      }
      if hasItemType {
        try output.writeEnum(2, value:itemType.rawValue)
      }
      if hasCategory {
        try output.writeEnum(3, value:category.rawValue)
      }
      if hasDropFreq {
        try output.writeFloat(4, value:dropFreq)
      }
      if hasDropTrainerLevel {
        try output.writeInt32(5, value:dropTrainerLevel)
      }
      if hasPokeball {
        try output.writeMessage(6, value:pokeball)
      }
      if hasPotion {
        try output.writeMessage(7, value:potion)
      }
      if hasRevive {
        try output.writeMessage(8, value:revive)
      }
      if hasBattle {
        try output.writeMessage(9, value:battle)
      }
      if hasFood {
        try output.writeMessage(10, value:food)
      }
      if hasInventoryUpgrade {
        try output.writeMessage(11, value:inventoryUpgrade)
      }
      if hasXpBoost {
        try output.writeMessage(12, value:xpBoost)
      }
      if hasIncense {
        try output.writeMessage(13, value:incense)
      }
      if hasEggIncubator {
        try output.writeMessage(14, value:eggIncubator)
      }
      if hasFortModifier {
        try output.writeMessage(15, value:fortModifier)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasItemId) {
        serialize_size += itemId.rawValue.computeEnumSize(1)
      }
      if (hasItemType) {
        serialize_size += itemType.rawValue.computeEnumSize(2)
      }
      if (hasCategory) {
        serialize_size += category.rawValue.computeEnumSize(3)
      }
      if hasDropFreq {
        serialize_size += dropFreq.computeFloatSize(4)
      }
      if hasDropTrainerLevel {
        serialize_size += dropTrainerLevel.computeInt32Size(5)
      }
      if hasPokeball {
          if let varSizepokeball = pokeball?.computeMessageSize(6) {
              serialize_size += varSizepokeball
          }
      }
      if hasPotion {
          if let varSizepotion = potion?.computeMessageSize(7) {
              serialize_size += varSizepotion
          }
      }
      if hasRevive {
          if let varSizerevive = revive?.computeMessageSize(8) {
              serialize_size += varSizerevive
          }
      }
      if hasBattle {
          if let varSizebattle = battle?.computeMessageSize(9) {
              serialize_size += varSizebattle
          }
      }
      if hasFood {
          if let varSizefood = food?.computeMessageSize(10) {
              serialize_size += varSizefood
          }
      }
      if hasInventoryUpgrade {
          if let varSizeinventoryUpgrade = inventoryUpgrade?.computeMessageSize(11) {
              serialize_size += varSizeinventoryUpgrade
          }
      }
      if hasXpBoost {
          if let varSizexpBoost = xpBoost?.computeMessageSize(12) {
              serialize_size += varSizexpBoost
          }
      }
      if hasIncense {
          if let varSizeincense = incense?.computeMessageSize(13) {
              serialize_size += varSizeincense
          }
      }
      if hasEggIncubator {
          if let varSizeeggIncubator = eggIncubator?.computeMessageSize(14) {
              serialize_size += varSizeeggIncubator
          }
      }
      if hasFortModifier {
          if let varSizefortModifier = fortModifier?.computeMessageSize(15) {
              serialize_size += varSizefortModifier
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.ItemSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.ItemSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings? {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return Pogoprotos.Settings.Master.ItemSettings.classBuilder() as! Pogoprotos.Settings.Master.ItemSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.ItemSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.ItemSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.ItemSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return try Pogoprotos.Settings.Master.ItemSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.ItemSettings) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasItemId {
        jsonMap["itemId"] = itemId.toString()
      }
      if hasItemType {
        jsonMap["itemType"] = itemType.toString()
      }
      if hasCategory {
        jsonMap["category"] = category.toString()
      }
      if hasDropFreq {
        jsonMap["dropFreq"] = NSNumber(float:dropFreq)
      }
      if hasDropTrainerLevel {
        jsonMap["dropTrainerLevel"] = NSNumber(int:dropTrainerLevel)
      }
      if hasPokeball {
        jsonMap["pokeball"] = try pokeball.encode()
      }
      if hasPotion {
        jsonMap["potion"] = try potion.encode()
      }
      if hasRevive {
        jsonMap["revive"] = try revive.encode()
      }
      if hasBattle {
        jsonMap["battle"] = try battle.encode()
      }
      if hasFood {
        jsonMap["food"] = try food.encode()
      }
      if hasInventoryUpgrade {
        jsonMap["inventoryUpgrade"] = try inventoryUpgrade.encode()
      }
      if hasXpBoost {
        jsonMap["xpBoost"] = try xpBoost.encode()
      }
      if hasIncense {
        jsonMap["incense"] = try incense.encode()
      }
      if hasEggIncubator {
        jsonMap["eggIncubator"] = try eggIncubator.encode()
      }
      if hasFortModifier {
        jsonMap["fortModifier"] = try fortModifier.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.ItemSettings {
      return try Pogoprotos.Settings.Master.ItemSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasItemId) {
        output += "\(indent) itemId: \(itemId.description)\n"
      }
      if (hasItemType) {
        output += "\(indent) itemType: \(itemType.description)\n"
      }
      if (hasCategory) {
        output += "\(indent) category: \(category.description)\n"
      }
      if hasDropFreq {
        output += "\(indent) dropFreq: \(dropFreq) \n"
      }
      if hasDropTrainerLevel {
        output += "\(indent) dropTrainerLevel: \(dropTrainerLevel) \n"
      }
      if hasPokeball {
        output += "\(indent) pokeball {\n"
        if let outDescPokeball = pokeball {
          output += try outDescPokeball.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasPotion {
        output += "\(indent) potion {\n"
        if let outDescPotion = potion {
          output += try outDescPotion.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasRevive {
        output += "\(indent) revive {\n"
        if let outDescRevive = revive {
          output += try outDescRevive.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasBattle {
        output += "\(indent) battle {\n"
        if let outDescBattle = battle {
          output += try outDescBattle.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFood {
        output += "\(indent) food {\n"
        if let outDescFood = food {
          output += try outDescFood.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasInventoryUpgrade {
        output += "\(indent) inventoryUpgrade {\n"
        if let outDescInventoryUpgrade = inventoryUpgrade {
          output += try outDescInventoryUpgrade.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasXpBoost {
        output += "\(indent) xpBoost {\n"
        if let outDescXpBoost = xpBoost {
          output += try outDescXpBoost.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasIncense {
        output += "\(indent) incense {\n"
        if let outDescIncense = incense {
          output += try outDescIncense.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEggIncubator {
        output += "\(indent) eggIncubator {\n"
        if let outDescEggIncubator = eggIncubator {
          output += try outDescEggIncubator.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasFortModifier {
        output += "\(indent) fortModifier {\n"
        if let outDescFortModifier = fortModifier {
          output += try outDescFortModifier.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemId {
               hashCode = (hashCode &* 31) &+ Int(itemId.rawValue)
            }
            if hasItemType {
               hashCode = (hashCode &* 31) &+ Int(itemType.rawValue)
            }
            if hasCategory {
               hashCode = (hashCode &* 31) &+ Int(category.rawValue)
            }
            if hasDropFreq {
               hashCode = (hashCode &* 31) &+ dropFreq.hashValue
            }
            if hasDropTrainerLevel {
               hashCode = (hashCode &* 31) &+ dropTrainerLevel.hashValue
            }
            if hasPokeball {
                if let hashValuepokeball = pokeball?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokeball
                }
            }
            if hasPotion {
                if let hashValuepotion = potion?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepotion
                }
            }
            if hasRevive {
                if let hashValuerevive = revive?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuerevive
                }
            }
            if hasBattle {
                if let hashValuebattle = battle?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebattle
                }
            }
            if hasFood {
                if let hashValuefood = food?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefood
                }
            }
            if hasInventoryUpgrade {
                if let hashValueinventoryUpgrade = inventoryUpgrade?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinventoryUpgrade
                }
            }
            if hasXpBoost {
                if let hashValuexpBoost = xpBoost?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuexpBoost
                }
            }
            if hasIncense {
                if let hashValueincense = incense?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueincense
                }
            }
            if hasEggIncubator {
                if let hashValueeggIncubator = eggIncubator?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueeggIncubator
                }
            }
            if hasFortModifier {
                if let hashValuefortModifier = fortModifier?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefortModifier
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.ItemSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.ItemSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.ItemSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.ItemSettings = Pogoprotos.Settings.Master.ItemSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.ItemSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasItemId:Bool{
            get {
                return builderResult.hasItemId
            }
        }
        public var itemId:Pogoprotos.Inventory.Item.ItemId {
            get {
                return builderResult.itemId
            }
            set (value) {
                builderResult.hasItemId = true
                builderResult.itemId = value
            }
        }
        public func setItemId(value:Pogoprotos.Inventory.Item.ItemId) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
          self.itemId = value
          return self
        }
        public func clearItemId() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           builderResult.hasItemId = false
           builderResult.itemId = .ItemUnknown
           return self
        }
        public var hasItemType:Bool{
            get {
                return builderResult.hasItemType
            }
        }
        public var itemType:Pogoprotos.Inventory.Item.ItemType {
            get {
                return builderResult.itemType
            }
            set (value) {
                builderResult.hasItemType = true
                builderResult.itemType = value
            }
        }
        public func setItemType(value:Pogoprotos.Inventory.Item.ItemType) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
          self.itemType = value
          return self
        }
        public func clearItemType() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           builderResult.hasItemType = false
           builderResult.itemType = .ItemTypeNone
           return self
        }
        public var hasCategory:Bool{
            get {
                return builderResult.hasCategory
            }
        }
        public var category:Pogoprotos.Enums.ItemCategory {
            get {
                return builderResult.category
            }
            set (value) {
                builderResult.hasCategory = true
                builderResult.category = value
            }
        }
        public func setCategory(value:Pogoprotos.Enums.ItemCategory) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
          self.category = value
          return self
        }
        public func clearCategory() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           builderResult.hasCategory = false
           builderResult.category = .ItemCategoryNone
           return self
        }
      public var hasDropFreq:Bool {
           get {
                return builderResult.hasDropFreq
           }
      }
      public var dropFreq:Float {
           get {
                return builderResult.dropFreq
           }
           set (value) {
               builderResult.hasDropFreq = true
               builderResult.dropFreq = value
           }
      }
      public func setDropFreq(value:Float) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.dropFreq = value
        return self
      }
      public func clearDropFreq() -> Pogoprotos.Settings.Master.ItemSettings.Builder{
           builderResult.hasDropFreq = false
           builderResult.dropFreq = Float(0)
           return self
      }
      public var hasDropTrainerLevel:Bool {
           get {
                return builderResult.hasDropTrainerLevel
           }
      }
      public var dropTrainerLevel:Int32 {
           get {
                return builderResult.dropTrainerLevel
           }
           set (value) {
               builderResult.hasDropTrainerLevel = true
               builderResult.dropTrainerLevel = value
           }
      }
      public func setDropTrainerLevel(value:Int32) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.dropTrainerLevel = value
        return self
      }
      public func clearDropTrainerLevel() -> Pogoprotos.Settings.Master.ItemSettings.Builder{
           builderResult.hasDropTrainerLevel = false
           builderResult.dropTrainerLevel = Int32(0)
           return self
      }
      public var hasPokeball:Bool {
           get {
               return builderResult.hasPokeball
           }
      }
      public var pokeball:Pogoprotos.Settings.Master.Item.PokeballAttributes! {
           get {
               if pokeballBuilder_ != nil {
                  builderResult.pokeball = pokeballBuilder_.getMessage()
               }
               return builderResult.pokeball
           }
           set (value) {
               builderResult.hasPokeball = true
               builderResult.pokeball = value
           }
      }
      private var pokeballBuilder_:Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder! {
           didSet {
              builderResult.hasPokeball = true
           }
      }
      public func getPokeballBuilder() -> Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder {
        if pokeballBuilder_ == nil {
           pokeballBuilder_ = Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
           builderResult.pokeball = pokeballBuilder_.getMessage()
           if pokeball != nil {
              try! pokeballBuilder_.mergeFrom(pokeball)
           }
        }
        return pokeballBuilder_
      }
      public func setPokeball(value:Pogoprotos.Settings.Master.Item.PokeballAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.pokeball = value
        return self
      }
      public func mergePokeball(value:Pogoprotos.Settings.Master.Item.PokeballAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasPokeball {
          builderResult.pokeball = try Pogoprotos.Settings.Master.Item.PokeballAttributes.builderWithPrototype(builderResult.pokeball).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokeball = value
        }
        builderResult.hasPokeball = true
        return self
      }
      public func clearPokeball() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        pokeballBuilder_ = nil
        builderResult.hasPokeball = false
        builderResult.pokeball = nil
        return self
      }
      public var hasPotion:Bool {
           get {
               return builderResult.hasPotion
           }
      }
      public var potion:Pogoprotos.Settings.Master.Item.PotionAttributes! {
           get {
               if potionBuilder_ != nil {
                  builderResult.potion = potionBuilder_.getMessage()
               }
               return builderResult.potion
           }
           set (value) {
               builderResult.hasPotion = true
               builderResult.potion = value
           }
      }
      private var potionBuilder_:Pogoprotos.Settings.Master.Item.PotionAttributes.Builder! {
           didSet {
              builderResult.hasPotion = true
           }
      }
      public func getPotionBuilder() -> Pogoprotos.Settings.Master.Item.PotionAttributes.Builder {
        if potionBuilder_ == nil {
           potionBuilder_ = Pogoprotos.Settings.Master.Item.PotionAttributes.Builder()
           builderResult.potion = potionBuilder_.getMessage()
           if potion != nil {
              try! potionBuilder_.mergeFrom(potion)
           }
        }
        return potionBuilder_
      }
      public func setPotion(value:Pogoprotos.Settings.Master.Item.PotionAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.potion = value
        return self
      }
      public func mergePotion(value:Pogoprotos.Settings.Master.Item.PotionAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasPotion {
          builderResult.potion = try Pogoprotos.Settings.Master.Item.PotionAttributes.builderWithPrototype(builderResult.potion).mergeFrom(value).buildPartial()
        } else {
          builderResult.potion = value
        }
        builderResult.hasPotion = true
        return self
      }
      public func clearPotion() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        potionBuilder_ = nil
        builderResult.hasPotion = false
        builderResult.potion = nil
        return self
      }
      public var hasRevive:Bool {
           get {
               return builderResult.hasRevive
           }
      }
      public var revive:Pogoprotos.Settings.Master.Item.ReviveAttributes! {
           get {
               if reviveBuilder_ != nil {
                  builderResult.revive = reviveBuilder_.getMessage()
               }
               return builderResult.revive
           }
           set (value) {
               builderResult.hasRevive = true
               builderResult.revive = value
           }
      }
      private var reviveBuilder_:Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder! {
           didSet {
              builderResult.hasRevive = true
           }
      }
      public func getReviveBuilder() -> Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder {
        if reviveBuilder_ == nil {
           reviveBuilder_ = Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder()
           builderResult.revive = reviveBuilder_.getMessage()
           if revive != nil {
              try! reviveBuilder_.mergeFrom(revive)
           }
        }
        return reviveBuilder_
      }
      public func setRevive(value:Pogoprotos.Settings.Master.Item.ReviveAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.revive = value
        return self
      }
      public func mergeRevive(value:Pogoprotos.Settings.Master.Item.ReviveAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasRevive {
          builderResult.revive = try Pogoprotos.Settings.Master.Item.ReviveAttributes.builderWithPrototype(builderResult.revive).mergeFrom(value).buildPartial()
        } else {
          builderResult.revive = value
        }
        builderResult.hasRevive = true
        return self
      }
      public func clearRevive() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        reviveBuilder_ = nil
        builderResult.hasRevive = false
        builderResult.revive = nil
        return self
      }
      public var hasBattle:Bool {
           get {
               return builderResult.hasBattle
           }
      }
      public var battle:Pogoprotos.Settings.Master.Item.BattleAttributes! {
           get {
               if battleBuilder_ != nil {
                  builderResult.battle = battleBuilder_.getMessage()
               }
               return builderResult.battle
           }
           set (value) {
               builderResult.hasBattle = true
               builderResult.battle = value
           }
      }
      private var battleBuilder_:Pogoprotos.Settings.Master.Item.BattleAttributes.Builder! {
           didSet {
              builderResult.hasBattle = true
           }
      }
      public func getBattleBuilder() -> Pogoprotos.Settings.Master.Item.BattleAttributes.Builder {
        if battleBuilder_ == nil {
           battleBuilder_ = Pogoprotos.Settings.Master.Item.BattleAttributes.Builder()
           builderResult.battle = battleBuilder_.getMessage()
           if battle != nil {
              try! battleBuilder_.mergeFrom(battle)
           }
        }
        return battleBuilder_
      }
      public func setBattle(value:Pogoprotos.Settings.Master.Item.BattleAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.battle = value
        return self
      }
      public func mergeBattle(value:Pogoprotos.Settings.Master.Item.BattleAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasBattle {
          builderResult.battle = try Pogoprotos.Settings.Master.Item.BattleAttributes.builderWithPrototype(builderResult.battle).mergeFrom(value).buildPartial()
        } else {
          builderResult.battle = value
        }
        builderResult.hasBattle = true
        return self
      }
      public func clearBattle() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        battleBuilder_ = nil
        builderResult.hasBattle = false
        builderResult.battle = nil
        return self
      }
      public var hasFood:Bool {
           get {
               return builderResult.hasFood
           }
      }
      public var food:Pogoprotos.Settings.Master.Item.FoodAttributes! {
           get {
               if foodBuilder_ != nil {
                  builderResult.food = foodBuilder_.getMessage()
               }
               return builderResult.food
           }
           set (value) {
               builderResult.hasFood = true
               builderResult.food = value
           }
      }
      private var foodBuilder_:Pogoprotos.Settings.Master.Item.FoodAttributes.Builder! {
           didSet {
              builderResult.hasFood = true
           }
      }
      public func getFoodBuilder() -> Pogoprotos.Settings.Master.Item.FoodAttributes.Builder {
        if foodBuilder_ == nil {
           foodBuilder_ = Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
           builderResult.food = foodBuilder_.getMessage()
           if food != nil {
              try! foodBuilder_.mergeFrom(food)
           }
        }
        return foodBuilder_
      }
      public func setFood(value:Pogoprotos.Settings.Master.Item.FoodAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.food = value
        return self
      }
      public func mergeFood(value:Pogoprotos.Settings.Master.Item.FoodAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasFood {
          builderResult.food = try Pogoprotos.Settings.Master.Item.FoodAttributes.builderWithPrototype(builderResult.food).mergeFrom(value).buildPartial()
        } else {
          builderResult.food = value
        }
        builderResult.hasFood = true
        return self
      }
      public func clearFood() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        foodBuilder_ = nil
        builderResult.hasFood = false
        builderResult.food = nil
        return self
      }
      public var hasInventoryUpgrade:Bool {
           get {
               return builderResult.hasInventoryUpgrade
           }
      }
      public var inventoryUpgrade:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes! {
           get {
               if inventoryUpgradeBuilder_ != nil {
                  builderResult.inventoryUpgrade = inventoryUpgradeBuilder_.getMessage()
               }
               return builderResult.inventoryUpgrade
           }
           set (value) {
               builderResult.hasInventoryUpgrade = true
               builderResult.inventoryUpgrade = value
           }
      }
      private var inventoryUpgradeBuilder_:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder! {
           didSet {
              builderResult.hasInventoryUpgrade = true
           }
      }
      public func getInventoryUpgradeBuilder() -> Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder {
        if inventoryUpgradeBuilder_ == nil {
           inventoryUpgradeBuilder_ = Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder()
           builderResult.inventoryUpgrade = inventoryUpgradeBuilder_.getMessage()
           if inventoryUpgrade != nil {
              try! inventoryUpgradeBuilder_.mergeFrom(inventoryUpgrade)
           }
        }
        return inventoryUpgradeBuilder_
      }
      public func setInventoryUpgrade(value:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.inventoryUpgrade = value
        return self
      }
      public func mergeInventoryUpgrade(value:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasInventoryUpgrade {
          builderResult.inventoryUpgrade = try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.builderWithPrototype(builderResult.inventoryUpgrade).mergeFrom(value).buildPartial()
        } else {
          builderResult.inventoryUpgrade = value
        }
        builderResult.hasInventoryUpgrade = true
        return self
      }
      public func clearInventoryUpgrade() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        inventoryUpgradeBuilder_ = nil
        builderResult.hasInventoryUpgrade = false
        builderResult.inventoryUpgrade = nil
        return self
      }
      public var hasXpBoost:Bool {
           get {
               return builderResult.hasXpBoost
           }
      }
      public var xpBoost:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes! {
           get {
               if xpBoostBuilder_ != nil {
                  builderResult.xpBoost = xpBoostBuilder_.getMessage()
               }
               return builderResult.xpBoost
           }
           set (value) {
               builderResult.hasXpBoost = true
               builderResult.xpBoost = value
           }
      }
      private var xpBoostBuilder_:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder! {
           didSet {
              builderResult.hasXpBoost = true
           }
      }
      public func getXpBoostBuilder() -> Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder {
        if xpBoostBuilder_ == nil {
           xpBoostBuilder_ = Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder()
           builderResult.xpBoost = xpBoostBuilder_.getMessage()
           if xpBoost != nil {
              try! xpBoostBuilder_.mergeFrom(xpBoost)
           }
        }
        return xpBoostBuilder_
      }
      public func setXpBoost(value:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.xpBoost = value
        return self
      }
      public func mergeXpBoost(value:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasXpBoost {
          builderResult.xpBoost = try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.builderWithPrototype(builderResult.xpBoost).mergeFrom(value).buildPartial()
        } else {
          builderResult.xpBoost = value
        }
        builderResult.hasXpBoost = true
        return self
      }
      public func clearXpBoost() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        xpBoostBuilder_ = nil
        builderResult.hasXpBoost = false
        builderResult.xpBoost = nil
        return self
      }
      public var hasIncense:Bool {
           get {
               return builderResult.hasIncense
           }
      }
      public var incense:Pogoprotos.Settings.Master.Item.IncenseAttributes! {
           get {
               if incenseBuilder_ != nil {
                  builderResult.incense = incenseBuilder_.getMessage()
               }
               return builderResult.incense
           }
           set (value) {
               builderResult.hasIncense = true
               builderResult.incense = value
           }
      }
      private var incenseBuilder_:Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder! {
           didSet {
              builderResult.hasIncense = true
           }
      }
      public func getIncenseBuilder() -> Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder {
        if incenseBuilder_ == nil {
           incenseBuilder_ = Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
           builderResult.incense = incenseBuilder_.getMessage()
           if incense != nil {
              try! incenseBuilder_.mergeFrom(incense)
           }
        }
        return incenseBuilder_
      }
      public func setIncense(value:Pogoprotos.Settings.Master.Item.IncenseAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.incense = value
        return self
      }
      public func mergeIncense(value:Pogoprotos.Settings.Master.Item.IncenseAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasIncense {
          builderResult.incense = try Pogoprotos.Settings.Master.Item.IncenseAttributes.builderWithPrototype(builderResult.incense).mergeFrom(value).buildPartial()
        } else {
          builderResult.incense = value
        }
        builderResult.hasIncense = true
        return self
      }
      public func clearIncense() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        incenseBuilder_ = nil
        builderResult.hasIncense = false
        builderResult.incense = nil
        return self
      }
      public var hasEggIncubator:Bool {
           get {
               return builderResult.hasEggIncubator
           }
      }
      public var eggIncubator:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes! {
           get {
               if eggIncubatorBuilder_ != nil {
                  builderResult.eggIncubator = eggIncubatorBuilder_.getMessage()
               }
               return builderResult.eggIncubator
           }
           set (value) {
               builderResult.hasEggIncubator = true
               builderResult.eggIncubator = value
           }
      }
      private var eggIncubatorBuilder_:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder! {
           didSet {
              builderResult.hasEggIncubator = true
           }
      }
      public func getEggIncubatorBuilder() -> Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder {
        if eggIncubatorBuilder_ == nil {
           eggIncubatorBuilder_ = Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder()
           builderResult.eggIncubator = eggIncubatorBuilder_.getMessage()
           if eggIncubator != nil {
              try! eggIncubatorBuilder_.mergeFrom(eggIncubator)
           }
        }
        return eggIncubatorBuilder_
      }
      public func setEggIncubator(value:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.eggIncubator = value
        return self
      }
      public func mergeEggIncubator(value:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasEggIncubator {
          builderResult.eggIncubator = try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.builderWithPrototype(builderResult.eggIncubator).mergeFrom(value).buildPartial()
        } else {
          builderResult.eggIncubator = value
        }
        builderResult.hasEggIncubator = true
        return self
      }
      public func clearEggIncubator() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        eggIncubatorBuilder_ = nil
        builderResult.hasEggIncubator = false
        builderResult.eggIncubator = nil
        return self
      }
      public var hasFortModifier:Bool {
           get {
               return builderResult.hasFortModifier
           }
      }
      public var fortModifier:Pogoprotos.Settings.Master.Item.FortModifierAttributes! {
           get {
               if fortModifierBuilder_ != nil {
                  builderResult.fortModifier = fortModifierBuilder_.getMessage()
               }
               return builderResult.fortModifier
           }
           set (value) {
               builderResult.hasFortModifier = true
               builderResult.fortModifier = value
           }
      }
      private var fortModifierBuilder_:Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder! {
           didSet {
              builderResult.hasFortModifier = true
           }
      }
      public func getFortModifierBuilder() -> Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder {
        if fortModifierBuilder_ == nil {
           fortModifierBuilder_ = Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder()
           builderResult.fortModifier = fortModifierBuilder_.getMessage()
           if fortModifier != nil {
              try! fortModifierBuilder_.mergeFrom(fortModifier)
           }
        }
        return fortModifierBuilder_
      }
      public func setFortModifier(value:Pogoprotos.Settings.Master.Item.FortModifierAttributes!) -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        self.fortModifier = value
        return self
      }
      public func mergeFortModifier(value:Pogoprotos.Settings.Master.Item.FortModifierAttributes) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if builderResult.hasFortModifier {
          builderResult.fortModifier = try Pogoprotos.Settings.Master.Item.FortModifierAttributes.builderWithPrototype(builderResult.fortModifier).mergeFrom(value).buildPartial()
        } else {
          builderResult.fortModifier = value
        }
        builderResult.hasFortModifier = true
        return self
      }
      public func clearFortModifier() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        fortModifierBuilder_ = nil
        builderResult.hasFortModifier = false
        builderResult.fortModifier = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.ItemSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        return try Pogoprotos.Settings.Master.ItemSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.ItemSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.ItemSettings {
        let returnMe:Pogoprotos.Settings.Master.ItemSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.ItemSettings) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        if other == Pogoprotos.Settings.Master.ItemSettings() {
         return self
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        if other.hasItemType {
             itemType = other.itemType
        }
        if other.hasCategory {
             category = other.category
        }
        if other.hasDropFreq {
             dropFreq = other.dropFreq
        }
        if other.hasDropTrainerLevel {
             dropTrainerLevel = other.dropTrainerLevel
        }
        if (other.hasPokeball) {
            try mergePokeball(other.pokeball)
        }
        if (other.hasPotion) {
            try mergePotion(other.potion)
        }
        if (other.hasRevive) {
            try mergeRevive(other.revive)
        }
        if (other.hasBattle) {
            try mergeBattle(other.battle)
        }
        if (other.hasFood) {
            try mergeFood(other.food)
        }
        if (other.hasInventoryUpgrade) {
            try mergeInventoryUpgrade(other.inventoryUpgrade)
        }
        if (other.hasXpBoost) {
            try mergeXpBoost(other.xpBoost)
        }
        if (other.hasIncense) {
            try mergeIncense(other.incense)
        }
        if (other.hasEggIncubator) {
            try mergeEggIncubator(other.eggIncubator)
        }
        if (other.hasFortModifier) {
            try mergeFortModifier(other.fortModifier)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntitemId = try input.readEnum()
            if let enumsitemId = Pogoprotos.Inventory.Item.ItemId(rawValue:valueIntitemId){
                 itemId = enumsitemId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntitemId))
            }

          case 16:
            let valueIntitemType = try input.readEnum()
            if let enumsitemType = Pogoprotos.Inventory.Item.ItemType(rawValue:valueIntitemType){
                 itemType = enumsitemType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntitemType))
            }

          case 24:
            let valueIntcategory = try input.readEnum()
            if let enumscategory = Pogoprotos.Enums.ItemCategory(rawValue:valueIntcategory){
                 category = enumscategory
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntcategory))
            }

          case 37:
            dropFreq = try input.readFloat()

          case 40:
            dropTrainerLevel = try input.readInt32()

          case 50:
            let subBuilder:Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder = Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder()
            if hasPokeball {
              try subBuilder.mergeFrom(pokeball)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokeball = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Settings.Master.Item.PotionAttributes.Builder = Pogoprotos.Settings.Master.Item.PotionAttributes.Builder()
            if hasPotion {
              try subBuilder.mergeFrom(potion)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            potion = subBuilder.buildPartial()

          case 66:
            let subBuilder:Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder = Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder()
            if hasRevive {
              try subBuilder.mergeFrom(revive)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            revive = subBuilder.buildPartial()

          case 74:
            let subBuilder:Pogoprotos.Settings.Master.Item.BattleAttributes.Builder = Pogoprotos.Settings.Master.Item.BattleAttributes.Builder()
            if hasBattle {
              try subBuilder.mergeFrom(battle)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            battle = subBuilder.buildPartial()

          case 82:
            let subBuilder:Pogoprotos.Settings.Master.Item.FoodAttributes.Builder = Pogoprotos.Settings.Master.Item.FoodAttributes.Builder()
            if hasFood {
              try subBuilder.mergeFrom(food)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            food = subBuilder.buildPartial()

          case 90:
            let subBuilder:Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder = Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder()
            if hasInventoryUpgrade {
              try subBuilder.mergeFrom(inventoryUpgrade)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inventoryUpgrade = subBuilder.buildPartial()

          case 98:
            let subBuilder:Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder = Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder()
            if hasXpBoost {
              try subBuilder.mergeFrom(xpBoost)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            xpBoost = subBuilder.buildPartial()

          case 106:
            let subBuilder:Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder = Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder()
            if hasIncense {
              try subBuilder.mergeFrom(incense)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            incense = subBuilder.buildPartial()

          case 114:
            let subBuilder:Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder = Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder()
            if hasEggIncubator {
              try subBuilder.mergeFrom(eggIncubator)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            eggIncubator = subBuilder.buildPartial()

          case 122:
            let subBuilder:Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder = Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder()
            if hasFortModifier {
              try subBuilder.mergeFrom(fortModifier)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fortModifier = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.ItemSettings.Builder()
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = try Pogoprotos.Inventory.Item.ItemId.fromString(jsonValueItemId)
        }
        if let jsonValueItemType = jsonMap["itemType"] as? String {
          resultDecodedBuilder.itemType = try Pogoprotos.Inventory.Item.ItemType.fromString(jsonValueItemType)
        }
        if let jsonValueCategory = jsonMap["category"] as? String {
          resultDecodedBuilder.category = try Pogoprotos.Enums.ItemCategory.fromString(jsonValueCategory)
        }
        if let jsonValueDropFreq = jsonMap["dropFreq"] as? NSNumber {
          resultDecodedBuilder.dropFreq = jsonValueDropFreq.floatValue
        }
        if let jsonValueDropTrainerLevel = jsonMap["dropTrainerLevel"] as? NSNumber {
          resultDecodedBuilder.dropTrainerLevel = jsonValueDropTrainerLevel.intValue
        }
        if let jsonValuePokeball = jsonMap["pokeball"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokeball = try Pogoprotos.Settings.Master.Item.PokeballAttributes.Builder.decodeToBuilder(jsonValuePokeball).build()

        }
        if let jsonValuePotion = jsonMap["potion"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.potion = try Pogoprotos.Settings.Master.Item.PotionAttributes.Builder.decodeToBuilder(jsonValuePotion).build()

        }
        if let jsonValueRevive = jsonMap["revive"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.revive = try Pogoprotos.Settings.Master.Item.ReviveAttributes.Builder.decodeToBuilder(jsonValueRevive).build()

        }
        if let jsonValueBattle = jsonMap["battle"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.battle = try Pogoprotos.Settings.Master.Item.BattleAttributes.Builder.decodeToBuilder(jsonValueBattle).build()

        }
        if let jsonValueFood = jsonMap["food"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.food = try Pogoprotos.Settings.Master.Item.FoodAttributes.Builder.decodeToBuilder(jsonValueFood).build()

        }
        if let jsonValueInventoryUpgrade = jsonMap["inventoryUpgrade"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.inventoryUpgrade = try Pogoprotos.Settings.Master.Item.InventoryUpgradeAttributes.Builder.decodeToBuilder(jsonValueInventoryUpgrade).build()

        }
        if let jsonValueXpBoost = jsonMap["xpBoost"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.xpBoost = try Pogoprotos.Settings.Master.Item.ExperienceBoostAttributes.Builder.decodeToBuilder(jsonValueXpBoost).build()

        }
        if let jsonValueIncense = jsonMap["incense"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.incense = try Pogoprotos.Settings.Master.Item.IncenseAttributes.Builder.decodeToBuilder(jsonValueIncense).build()

        }
        if let jsonValueEggIncubator = jsonMap["eggIncubator"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.eggIncubator = try Pogoprotos.Settings.Master.Item.EggIncubatorAttributes.Builder.decodeToBuilder(jsonValueEggIncubator).build()

        }
        if let jsonValueFortModifier = jsonMap["fortModifier"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.fortModifier = try Pogoprotos.Settings.Master.Item.FortModifierAttributes.Builder.decodeToBuilder(jsonValueFortModifier).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.ItemSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.ItemSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class MoveSequenceSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var sequence:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !sequence.isEmpty {
        for oneValuesequence in sequence {
          try output.writeString(1, value:oneValuesequence)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeSequence:Int32 = 0
      for oneValuesequence in sequence {
          dataSizeSequence += oneValuesequence.computeStringSizeNoTag()
      }
      serialize_size += dataSizeSequence
      serialize_size += 1 * Int32(sequence.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.MoveSequenceSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.MoveSequenceSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings? {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
      return Pogoprotos.Settings.Master.MoveSequenceSettings.classBuilder() as! Pogoprotos.Settings.Master.MoveSequenceSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.MoveSequenceSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.MoveSequenceSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.MoveSequenceSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.MoveSequenceSettings) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !sequence.isEmpty {
        jsonMap["sequence"] = sequence
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
      return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var sequenceElementIndex:Int = 0
      for oneValueSequence in sequence  {
          output += "\(indent) sequence[\(sequenceElementIndex)]: \(oneValueSequence)\n"
          sequenceElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueSequence in sequence {
                hashCode = (hashCode &* 31) &+ oneValueSequence.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.MoveSequenceSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.MoveSequenceSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.MoveSequenceSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.MoveSequenceSettings = Pogoprotos.Settings.Master.MoveSequenceSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.MoveSequenceSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var sequence:Array<String> {
           get {
               return builderResult.sequence
           }
           set (array) {
               builderResult.sequence = array
           }
      }
      public func setSequence(value:Array<String>) -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
        self.sequence = value
        return self
      }
      public func clearSequence() -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
         builderResult.sequence.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.MoveSequenceSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
        return try Pogoprotos.Settings.Master.MoveSequenceSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.MoveSequenceSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.MoveSequenceSettings {
        let returnMe:Pogoprotos.Settings.Master.MoveSequenceSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.MoveSequenceSettings) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
        if other == Pogoprotos.Settings.Master.MoveSequenceSettings() {
         return self
        }
        if !other.sequence.isEmpty {
            builderResult.sequence += other.sequence
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            sequence += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.MoveSequenceSettings.Builder()
        if let jsonValueSequence = jsonMap["sequence"] as? Array<String> {
          resultDecodedBuilder.sequence = jsonValueSequence
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.MoveSequenceSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.MoveSequenceSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class MoveSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var movementId:Pogoprotos.Enums.PokemonMove = Pogoprotos.Enums.PokemonMove.MoveUnset
    public private(set) var hasMovementId:Bool = false
    public private(set) var hasAnimationId:Bool = false
    public private(set) var animationId:Int32 = Int32(0)

    public private(set) var pokemonType:Pogoprotos.Enums.PokemonType = Pogoprotos.Enums.PokemonType.PokemonTypeNone
    public private(set) var hasPokemonType:Bool = false
    public private(set) var hasPower:Bool = false
    public private(set) var power:Float = Float(0)

    public private(set) var hasAccuracyChance:Bool = false
    public private(set) var accuracyChance:Float = Float(0)

    public private(set) var hasCriticalChance:Bool = false
    public private(set) var criticalChance:Float = Float(0)

    public private(set) var hasHealScalar:Bool = false
    public private(set) var healScalar:Float = Float(0)

    public private(set) var hasStaminaLossScalar:Bool = false
    public private(set) var staminaLossScalar:Float = Float(0)

    public private(set) var hasTrainerLevelMin:Bool = false
    public private(set) var trainerLevelMin:Int32 = Int32(0)

    public private(set) var hasTrainerLevelMax:Bool = false
    public private(set) var trainerLevelMax:Int32 = Int32(0)

    public private(set) var hasVfxName:Bool = false
    public private(set) var vfxName:String = ""

    public private(set) var hasDurationMs:Bool = false
    public private(set) var durationMs:Int32 = Int32(0)

    public private(set) var hasDamageWindowStartMs:Bool = false
    public private(set) var damageWindowStartMs:Int32 = Int32(0)

    public private(set) var hasDamageWindowEndMs:Bool = false
    public private(set) var damageWindowEndMs:Int32 = Int32(0)

    public private(set) var hasEnergyDelta:Bool = false
    public private(set) var energyDelta:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMovementId {
        try output.writeEnum(1, value:movementId.rawValue)
      }
      if hasAnimationId {
        try output.writeInt32(2, value:animationId)
      }
      if hasPokemonType {
        try output.writeEnum(3, value:pokemonType.rawValue)
      }
      if hasPower {
        try output.writeFloat(4, value:power)
      }
      if hasAccuracyChance {
        try output.writeFloat(5, value:accuracyChance)
      }
      if hasCriticalChance {
        try output.writeFloat(6, value:criticalChance)
      }
      if hasHealScalar {
        try output.writeFloat(7, value:healScalar)
      }
      if hasStaminaLossScalar {
        try output.writeFloat(8, value:staminaLossScalar)
      }
      if hasTrainerLevelMin {
        try output.writeInt32(9, value:trainerLevelMin)
      }
      if hasTrainerLevelMax {
        try output.writeInt32(10, value:trainerLevelMax)
      }
      if hasVfxName {
        try output.writeString(11, value:vfxName)
      }
      if hasDurationMs {
        try output.writeInt32(12, value:durationMs)
      }
      if hasDamageWindowStartMs {
        try output.writeInt32(13, value:damageWindowStartMs)
      }
      if hasDamageWindowEndMs {
        try output.writeInt32(14, value:damageWindowEndMs)
      }
      if hasEnergyDelta {
        try output.writeInt32(15, value:energyDelta)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasMovementId) {
        serialize_size += movementId.rawValue.computeEnumSize(1)
      }
      if hasAnimationId {
        serialize_size += animationId.computeInt32Size(2)
      }
      if (hasPokemonType) {
        serialize_size += pokemonType.rawValue.computeEnumSize(3)
      }
      if hasPower {
        serialize_size += power.computeFloatSize(4)
      }
      if hasAccuracyChance {
        serialize_size += accuracyChance.computeFloatSize(5)
      }
      if hasCriticalChance {
        serialize_size += criticalChance.computeFloatSize(6)
      }
      if hasHealScalar {
        serialize_size += healScalar.computeFloatSize(7)
      }
      if hasStaminaLossScalar {
        serialize_size += staminaLossScalar.computeFloatSize(8)
      }
      if hasTrainerLevelMin {
        serialize_size += trainerLevelMin.computeInt32Size(9)
      }
      if hasTrainerLevelMax {
        serialize_size += trainerLevelMax.computeInt32Size(10)
      }
      if hasVfxName {
        serialize_size += vfxName.computeStringSize(11)
      }
      if hasDurationMs {
        serialize_size += durationMs.computeInt32Size(12)
      }
      if hasDamageWindowStartMs {
        serialize_size += damageWindowStartMs.computeInt32Size(13)
      }
      if hasDamageWindowEndMs {
        serialize_size += damageWindowEndMs.computeInt32Size(14)
      }
      if hasEnergyDelta {
        serialize_size += energyDelta.computeInt32Size(15)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.MoveSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.MoveSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.MoveSettings? {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.MoveSettings.Builder {
      return Pogoprotos.Settings.Master.MoveSettings.classBuilder() as! Pogoprotos.Settings.Master.MoveSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.MoveSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.MoveSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.MoveSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.MoveSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
      return try Pogoprotos.Settings.Master.MoveSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.MoveSettings) throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasMovementId {
        jsonMap["movementId"] = movementId.toString()
      }
      if hasAnimationId {
        jsonMap["animationId"] = NSNumber(int:animationId)
      }
      if hasPokemonType {
        jsonMap["pokemonType"] = pokemonType.toString()
      }
      if hasPower {
        jsonMap["power"] = NSNumber(float:power)
      }
      if hasAccuracyChance {
        jsonMap["accuracyChance"] = NSNumber(float:accuracyChance)
      }
      if hasCriticalChance {
        jsonMap["criticalChance"] = NSNumber(float:criticalChance)
      }
      if hasHealScalar {
        jsonMap["healScalar"] = NSNumber(float:healScalar)
      }
      if hasStaminaLossScalar {
        jsonMap["staminaLossScalar"] = NSNumber(float:staminaLossScalar)
      }
      if hasTrainerLevelMin {
        jsonMap["trainerLevelMin"] = NSNumber(int:trainerLevelMin)
      }
      if hasTrainerLevelMax {
        jsonMap["trainerLevelMax"] = NSNumber(int:trainerLevelMax)
      }
      if hasVfxName {
        jsonMap["vfxName"] = vfxName
      }
      if hasDurationMs {
        jsonMap["durationMs"] = NSNumber(int:durationMs)
      }
      if hasDamageWindowStartMs {
        jsonMap["damageWindowStartMs"] = NSNumber(int:damageWindowStartMs)
      }
      if hasDamageWindowEndMs {
        jsonMap["damageWindowEndMs"] = NSNumber(int:damageWindowEndMs)
      }
      if hasEnergyDelta {
        jsonMap["energyDelta"] = NSNumber(int:energyDelta)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.MoveSettings {
      return try Pogoprotos.Settings.Master.MoveSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasMovementId) {
        output += "\(indent) movementId: \(movementId.description)\n"
      }
      if hasAnimationId {
        output += "\(indent) animationId: \(animationId) \n"
      }
      if (hasPokemonType) {
        output += "\(indent) pokemonType: \(pokemonType.description)\n"
      }
      if hasPower {
        output += "\(indent) power: \(power) \n"
      }
      if hasAccuracyChance {
        output += "\(indent) accuracyChance: \(accuracyChance) \n"
      }
      if hasCriticalChance {
        output += "\(indent) criticalChance: \(criticalChance) \n"
      }
      if hasHealScalar {
        output += "\(indent) healScalar: \(healScalar) \n"
      }
      if hasStaminaLossScalar {
        output += "\(indent) staminaLossScalar: \(staminaLossScalar) \n"
      }
      if hasTrainerLevelMin {
        output += "\(indent) trainerLevelMin: \(trainerLevelMin) \n"
      }
      if hasTrainerLevelMax {
        output += "\(indent) trainerLevelMax: \(trainerLevelMax) \n"
      }
      if hasVfxName {
        output += "\(indent) vfxName: \(vfxName) \n"
      }
      if hasDurationMs {
        output += "\(indent) durationMs: \(durationMs) \n"
      }
      if hasDamageWindowStartMs {
        output += "\(indent) damageWindowStartMs: \(damageWindowStartMs) \n"
      }
      if hasDamageWindowEndMs {
        output += "\(indent) damageWindowEndMs: \(damageWindowEndMs) \n"
      }
      if hasEnergyDelta {
        output += "\(indent) energyDelta: \(energyDelta) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMovementId {
               hashCode = (hashCode &* 31) &+ Int(movementId.rawValue)
            }
            if hasAnimationId {
               hashCode = (hashCode &* 31) &+ animationId.hashValue
            }
            if hasPokemonType {
               hashCode = (hashCode &* 31) &+ Int(pokemonType.rawValue)
            }
            if hasPower {
               hashCode = (hashCode &* 31) &+ power.hashValue
            }
            if hasAccuracyChance {
               hashCode = (hashCode &* 31) &+ accuracyChance.hashValue
            }
            if hasCriticalChance {
               hashCode = (hashCode &* 31) &+ criticalChance.hashValue
            }
            if hasHealScalar {
               hashCode = (hashCode &* 31) &+ healScalar.hashValue
            }
            if hasStaminaLossScalar {
               hashCode = (hashCode &* 31) &+ staminaLossScalar.hashValue
            }
            if hasTrainerLevelMin {
               hashCode = (hashCode &* 31) &+ trainerLevelMin.hashValue
            }
            if hasTrainerLevelMax {
               hashCode = (hashCode &* 31) &+ trainerLevelMax.hashValue
            }
            if hasVfxName {
               hashCode = (hashCode &* 31) &+ vfxName.hashValue
            }
            if hasDurationMs {
               hashCode = (hashCode &* 31) &+ durationMs.hashValue
            }
            if hasDamageWindowStartMs {
               hashCode = (hashCode &* 31) &+ damageWindowStartMs.hashValue
            }
            if hasDamageWindowEndMs {
               hashCode = (hashCode &* 31) &+ damageWindowEndMs.hashValue
            }
            if hasEnergyDelta {
               hashCode = (hashCode &* 31) &+ energyDelta.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.MoveSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.MoveSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.MoveSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.MoveSettings = Pogoprotos.Settings.Master.MoveSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.MoveSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasMovementId:Bool{
            get {
                return builderResult.hasMovementId
            }
        }
        public var movementId:Pogoprotos.Enums.PokemonMove {
            get {
                return builderResult.movementId
            }
            set (value) {
                builderResult.hasMovementId = true
                builderResult.movementId = value
            }
        }
        public func setMovementId(value:Pogoprotos.Enums.PokemonMove) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
          self.movementId = value
          return self
        }
        public func clearMovementId() -> Pogoprotos.Settings.Master.MoveSettings.Builder {
           builderResult.hasMovementId = false
           builderResult.movementId = .MoveUnset
           return self
        }
      public var hasAnimationId:Bool {
           get {
                return builderResult.hasAnimationId
           }
      }
      public var animationId:Int32 {
           get {
                return builderResult.animationId
           }
           set (value) {
               builderResult.hasAnimationId = true
               builderResult.animationId = value
           }
      }
      public func setAnimationId(value:Int32) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.animationId = value
        return self
      }
      public func clearAnimationId() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasAnimationId = false
           builderResult.animationId = Int32(0)
           return self
      }
        public var hasPokemonType:Bool{
            get {
                return builderResult.hasPokemonType
            }
        }
        public var pokemonType:Pogoprotos.Enums.PokemonType {
            get {
                return builderResult.pokemonType
            }
            set (value) {
                builderResult.hasPokemonType = true
                builderResult.pokemonType = value
            }
        }
        public func setPokemonType(value:Pogoprotos.Enums.PokemonType) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
          self.pokemonType = value
          return self
        }
        public func clearPokemonType() -> Pogoprotos.Settings.Master.MoveSettings.Builder {
           builderResult.hasPokemonType = false
           builderResult.pokemonType = .PokemonTypeNone
           return self
        }
      public var hasPower:Bool {
           get {
                return builderResult.hasPower
           }
      }
      public var power:Float {
           get {
                return builderResult.power
           }
           set (value) {
               builderResult.hasPower = true
               builderResult.power = value
           }
      }
      public func setPower(value:Float) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.power = value
        return self
      }
      public func clearPower() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasPower = false
           builderResult.power = Float(0)
           return self
      }
      public var hasAccuracyChance:Bool {
           get {
                return builderResult.hasAccuracyChance
           }
      }
      public var accuracyChance:Float {
           get {
                return builderResult.accuracyChance
           }
           set (value) {
               builderResult.hasAccuracyChance = true
               builderResult.accuracyChance = value
           }
      }
      public func setAccuracyChance(value:Float) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.accuracyChance = value
        return self
      }
      public func clearAccuracyChance() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasAccuracyChance = false
           builderResult.accuracyChance = Float(0)
           return self
      }
      public var hasCriticalChance:Bool {
           get {
                return builderResult.hasCriticalChance
           }
      }
      public var criticalChance:Float {
           get {
                return builderResult.criticalChance
           }
           set (value) {
               builderResult.hasCriticalChance = true
               builderResult.criticalChance = value
           }
      }
      public func setCriticalChance(value:Float) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.criticalChance = value
        return self
      }
      public func clearCriticalChance() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasCriticalChance = false
           builderResult.criticalChance = Float(0)
           return self
      }
      public var hasHealScalar:Bool {
           get {
                return builderResult.hasHealScalar
           }
      }
      public var healScalar:Float {
           get {
                return builderResult.healScalar
           }
           set (value) {
               builderResult.hasHealScalar = true
               builderResult.healScalar = value
           }
      }
      public func setHealScalar(value:Float) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.healScalar = value
        return self
      }
      public func clearHealScalar() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasHealScalar = false
           builderResult.healScalar = Float(0)
           return self
      }
      public var hasStaminaLossScalar:Bool {
           get {
                return builderResult.hasStaminaLossScalar
           }
      }
      public var staminaLossScalar:Float {
           get {
                return builderResult.staminaLossScalar
           }
           set (value) {
               builderResult.hasStaminaLossScalar = true
               builderResult.staminaLossScalar = value
           }
      }
      public func setStaminaLossScalar(value:Float) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.staminaLossScalar = value
        return self
      }
      public func clearStaminaLossScalar() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasStaminaLossScalar = false
           builderResult.staminaLossScalar = Float(0)
           return self
      }
      public var hasTrainerLevelMin:Bool {
           get {
                return builderResult.hasTrainerLevelMin
           }
      }
      public var trainerLevelMin:Int32 {
           get {
                return builderResult.trainerLevelMin
           }
           set (value) {
               builderResult.hasTrainerLevelMin = true
               builderResult.trainerLevelMin = value
           }
      }
      public func setTrainerLevelMin(value:Int32) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.trainerLevelMin = value
        return self
      }
      public func clearTrainerLevelMin() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasTrainerLevelMin = false
           builderResult.trainerLevelMin = Int32(0)
           return self
      }
      public var hasTrainerLevelMax:Bool {
           get {
                return builderResult.hasTrainerLevelMax
           }
      }
      public var trainerLevelMax:Int32 {
           get {
                return builderResult.trainerLevelMax
           }
           set (value) {
               builderResult.hasTrainerLevelMax = true
               builderResult.trainerLevelMax = value
           }
      }
      public func setTrainerLevelMax(value:Int32) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.trainerLevelMax = value
        return self
      }
      public func clearTrainerLevelMax() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasTrainerLevelMax = false
           builderResult.trainerLevelMax = Int32(0)
           return self
      }
      public var hasVfxName:Bool {
           get {
                return builderResult.hasVfxName
           }
      }
      public var vfxName:String {
           get {
                return builderResult.vfxName
           }
           set (value) {
               builderResult.hasVfxName = true
               builderResult.vfxName = value
           }
      }
      public func setVfxName(value:String) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.vfxName = value
        return self
      }
      public func clearVfxName() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasVfxName = false
           builderResult.vfxName = ""
           return self
      }
      public var hasDurationMs:Bool {
           get {
                return builderResult.hasDurationMs
           }
      }
      public var durationMs:Int32 {
           get {
                return builderResult.durationMs
           }
           set (value) {
               builderResult.hasDurationMs = true
               builderResult.durationMs = value
           }
      }
      public func setDurationMs(value:Int32) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.durationMs = value
        return self
      }
      public func clearDurationMs() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasDurationMs = false
           builderResult.durationMs = Int32(0)
           return self
      }
      public var hasDamageWindowStartMs:Bool {
           get {
                return builderResult.hasDamageWindowStartMs
           }
      }
      public var damageWindowStartMs:Int32 {
           get {
                return builderResult.damageWindowStartMs
           }
           set (value) {
               builderResult.hasDamageWindowStartMs = true
               builderResult.damageWindowStartMs = value
           }
      }
      public func setDamageWindowStartMs(value:Int32) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.damageWindowStartMs = value
        return self
      }
      public func clearDamageWindowStartMs() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasDamageWindowStartMs = false
           builderResult.damageWindowStartMs = Int32(0)
           return self
      }
      public var hasDamageWindowEndMs:Bool {
           get {
                return builderResult.hasDamageWindowEndMs
           }
      }
      public var damageWindowEndMs:Int32 {
           get {
                return builderResult.damageWindowEndMs
           }
           set (value) {
               builderResult.hasDamageWindowEndMs = true
               builderResult.damageWindowEndMs = value
           }
      }
      public func setDamageWindowEndMs(value:Int32) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.damageWindowEndMs = value
        return self
      }
      public func clearDamageWindowEndMs() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasDamageWindowEndMs = false
           builderResult.damageWindowEndMs = Int32(0)
           return self
      }
      public var hasEnergyDelta:Bool {
           get {
                return builderResult.hasEnergyDelta
           }
      }
      public var energyDelta:Int32 {
           get {
                return builderResult.energyDelta
           }
           set (value) {
               builderResult.hasEnergyDelta = true
               builderResult.energyDelta = value
           }
      }
      public func setEnergyDelta(value:Int32) -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        self.energyDelta = value
        return self
      }
      public func clearEnergyDelta() -> Pogoprotos.Settings.Master.MoveSettings.Builder{
           builderResult.hasEnergyDelta = false
           builderResult.energyDelta = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.MoveSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        return try Pogoprotos.Settings.Master.MoveSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.MoveSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.MoveSettings {
        let returnMe:Pogoprotos.Settings.Master.MoveSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.MoveSettings) throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        if other == Pogoprotos.Settings.Master.MoveSettings() {
         return self
        }
        if other.hasMovementId {
             movementId = other.movementId
        }
        if other.hasAnimationId {
             animationId = other.animationId
        }
        if other.hasPokemonType {
             pokemonType = other.pokemonType
        }
        if other.hasPower {
             power = other.power
        }
        if other.hasAccuracyChance {
             accuracyChance = other.accuracyChance
        }
        if other.hasCriticalChance {
             criticalChance = other.criticalChance
        }
        if other.hasHealScalar {
             healScalar = other.healScalar
        }
        if other.hasStaminaLossScalar {
             staminaLossScalar = other.staminaLossScalar
        }
        if other.hasTrainerLevelMin {
             trainerLevelMin = other.trainerLevelMin
        }
        if other.hasTrainerLevelMax {
             trainerLevelMax = other.trainerLevelMax
        }
        if other.hasVfxName {
             vfxName = other.vfxName
        }
        if other.hasDurationMs {
             durationMs = other.durationMs
        }
        if other.hasDamageWindowStartMs {
             damageWindowStartMs = other.damageWindowStartMs
        }
        if other.hasDamageWindowEndMs {
             damageWindowEndMs = other.damageWindowEndMs
        }
        if other.hasEnergyDelta {
             energyDelta = other.energyDelta
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntmovementId = try input.readEnum()
            if let enumsmovementId = Pogoprotos.Enums.PokemonMove(rawValue:valueIntmovementId){
                 movementId = enumsmovementId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntmovementId))
            }

          case 16:
            animationId = try input.readInt32()

          case 24:
            let valueIntpokemonType = try input.readEnum()
            if let enumspokemonType = Pogoprotos.Enums.PokemonType(rawValue:valueIntpokemonType){
                 pokemonType = enumspokemonType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntpokemonType))
            }

          case 37:
            power = try input.readFloat()

          case 45:
            accuracyChance = try input.readFloat()

          case 53:
            criticalChance = try input.readFloat()

          case 61:
            healScalar = try input.readFloat()

          case 69:
            staminaLossScalar = try input.readFloat()

          case 72:
            trainerLevelMin = try input.readInt32()

          case 80:
            trainerLevelMax = try input.readInt32()

          case 90:
            vfxName = try input.readString()

          case 96:
            durationMs = try input.readInt32()

          case 104:
            damageWindowStartMs = try input.readInt32()

          case 112:
            damageWindowEndMs = try input.readInt32()

          case 120:
            energyDelta = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.MoveSettings.Builder()
        if let jsonValueMovementId = jsonMap["movementId"] as? String {
          resultDecodedBuilder.movementId = try Pogoprotos.Enums.PokemonMove.fromString(jsonValueMovementId)
        }
        if let jsonValueAnimationId = jsonMap["animationId"] as? NSNumber {
          resultDecodedBuilder.animationId = jsonValueAnimationId.intValue
        }
        if let jsonValuePokemonType = jsonMap["pokemonType"] as? String {
          resultDecodedBuilder.pokemonType = try Pogoprotos.Enums.PokemonType.fromString(jsonValuePokemonType)
        }
        if let jsonValuePower = jsonMap["power"] as? NSNumber {
          resultDecodedBuilder.power = jsonValuePower.floatValue
        }
        if let jsonValueAccuracyChance = jsonMap["accuracyChance"] as? NSNumber {
          resultDecodedBuilder.accuracyChance = jsonValueAccuracyChance.floatValue
        }
        if let jsonValueCriticalChance = jsonMap["criticalChance"] as? NSNumber {
          resultDecodedBuilder.criticalChance = jsonValueCriticalChance.floatValue
        }
        if let jsonValueHealScalar = jsonMap["healScalar"] as? NSNumber {
          resultDecodedBuilder.healScalar = jsonValueHealScalar.floatValue
        }
        if let jsonValueStaminaLossScalar = jsonMap["staminaLossScalar"] as? NSNumber {
          resultDecodedBuilder.staminaLossScalar = jsonValueStaminaLossScalar.floatValue
        }
        if let jsonValueTrainerLevelMin = jsonMap["trainerLevelMin"] as? NSNumber {
          resultDecodedBuilder.trainerLevelMin = jsonValueTrainerLevelMin.intValue
        }
        if let jsonValueTrainerLevelMax = jsonMap["trainerLevelMax"] as? NSNumber {
          resultDecodedBuilder.trainerLevelMax = jsonValueTrainerLevelMax.intValue
        }
        if let jsonValueVfxName = jsonMap["vfxName"] as? String {
          resultDecodedBuilder.vfxName = jsonValueVfxName
        }
        if let jsonValueDurationMs = jsonMap["durationMs"] as? NSNumber {
          resultDecodedBuilder.durationMs = jsonValueDurationMs.intValue
        }
        if let jsonValueDamageWindowStartMs = jsonMap["damageWindowStartMs"] as? NSNumber {
          resultDecodedBuilder.damageWindowStartMs = jsonValueDamageWindowStartMs.intValue
        }
        if let jsonValueDamageWindowEndMs = jsonMap["damageWindowEndMs"] as? NSNumber {
          resultDecodedBuilder.damageWindowEndMs = jsonValueDamageWindowEndMs.intValue
        }
        if let jsonValueEnergyDelta = jsonMap["energyDelta"] as? NSNumber {
          resultDecodedBuilder.energyDelta = jsonValueEnergyDelta.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.MoveSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.MoveSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PlayerLevelSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var rankNum:Array<Int32> = Array<Int32>()
    private var rankNumMemoizedSerializedSize:Int32 = -1
    public private(set) var requiredExperience:Array<Int32> = Array<Int32>()
    private var requiredExperienceMemoizedSerializedSize:Int32 = -1
    public private(set) var cpMultiplier:Array<Float> = Array<Float>()
    private var cpMultiplierMemoizedSerializedSize:Int32 = -1
    public private(set) var hasMaxEggPlayerLevel:Bool = false
    public private(set) var maxEggPlayerLevel:Int32 = Int32(0)

    public private(set) var hasMaxEncounterPlayerLevel:Bool = false
    public private(set) var maxEncounterPlayerLevel:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !rankNum.isEmpty {
        try output.writeRawVarint32(10)
        try output.writeRawVarint32(rankNumMemoizedSerializedSize)
        for oneValuerankNum in rankNum {
          try output.writeInt32NoTag(oneValuerankNum)
        }
      }
      if !requiredExperience.isEmpty {
        try output.writeRawVarint32(18)
        try output.writeRawVarint32(requiredExperienceMemoizedSerializedSize)
        for oneValuerequiredExperience in requiredExperience {
          try output.writeInt32NoTag(oneValuerequiredExperience)
        }
      }
      if !cpMultiplier.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(cpMultiplierMemoizedSerializedSize)
        for oneValuecpMultiplier in cpMultiplier {
          try output.writeFloatNoTag(oneValuecpMultiplier)
        }
      }
      if hasMaxEggPlayerLevel {
        try output.writeInt32(4, value:maxEggPlayerLevel)
      }
      if hasMaxEncounterPlayerLevel {
        try output.writeInt32(5, value:maxEncounterPlayerLevel)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeRankNum:Int32 = 0
      for oneValuerankNum in rankNum {
          dataSizeRankNum += oneValuerankNum.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRankNum
      if !rankNum.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRankNum.computeInt32SizeNoTag()
      }
      rankNumMemoizedSerializedSize = dataSizeRankNum
      var dataSizeRequiredExperience:Int32 = 0
      for oneValuerequiredExperience in requiredExperience {
          dataSizeRequiredExperience += oneValuerequiredExperience.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeRequiredExperience
      if !requiredExperience.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeRequiredExperience.computeInt32SizeNoTag()
      }
      requiredExperienceMemoizedSerializedSize = dataSizeRequiredExperience
      var dataSizeCpMultiplier:Int32 = 0
      dataSizeCpMultiplier = 4 * Int32(cpMultiplier.count)
      serialize_size += dataSizeCpMultiplier
      if !cpMultiplier.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeCpMultiplier.computeInt32SizeNoTag()
      }
      cpMultiplierMemoizedSerializedSize = dataSizeCpMultiplier
      if hasMaxEggPlayerLevel {
        serialize_size += maxEggPlayerLevel.computeInt32Size(4)
      }
      if hasMaxEncounterPlayerLevel {
        serialize_size += maxEncounterPlayerLevel.computeInt32Size(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.PlayerLevelSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.PlayerLevelSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings? {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return Pogoprotos.Settings.Master.PlayerLevelSettings.classBuilder() as! Pogoprotos.Settings.Master.PlayerLevelSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.PlayerLevelSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.PlayerLevelSettings) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !rankNum.isEmpty {
        var jsonArrayRankNum:Array<NSNumber> = []
          for oneValueRankNum in rankNum {
            jsonArrayRankNum += [NSNumber(int:oneValueRankNum)]
          }
        jsonMap["rankNum"] = jsonArrayRankNum
      }
      if !requiredExperience.isEmpty {
        var jsonArrayRequiredExperience:Array<NSNumber> = []
          for oneValueRequiredExperience in requiredExperience {
            jsonArrayRequiredExperience += [NSNumber(int:oneValueRequiredExperience)]
          }
        jsonMap["requiredExperience"] = jsonArrayRequiredExperience
      }
      if !cpMultiplier.isEmpty {
        var jsonArrayCpMultiplier:Array<NSNumber> = []
          for oneValueCpMultiplier in cpMultiplier {
            jsonArrayCpMultiplier += [NSNumber(float:oneValueCpMultiplier)]
          }
        jsonMap["cpMultiplier"] = jsonArrayCpMultiplier
      }
      if hasMaxEggPlayerLevel {
        jsonMap["maxEggPlayerLevel"] = NSNumber(int:maxEggPlayerLevel)
      }
      if hasMaxEncounterPlayerLevel {
        jsonMap["maxEncounterPlayerLevel"] = NSNumber(int:maxEncounterPlayerLevel)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
      return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var rankNumElementIndex:Int = 0
      for oneValueRankNum in rankNum  {
          output += "\(indent) rankNum[\(rankNumElementIndex)]: \(oneValueRankNum)\n"
          rankNumElementIndex += 1
      }
      var requiredExperienceElementIndex:Int = 0
      for oneValueRequiredExperience in requiredExperience  {
          output += "\(indent) requiredExperience[\(requiredExperienceElementIndex)]: \(oneValueRequiredExperience)\n"
          requiredExperienceElementIndex += 1
      }
      var cpMultiplierElementIndex:Int = 0
      for oneValueCpMultiplier in cpMultiplier  {
          output += "\(indent) cpMultiplier[\(cpMultiplierElementIndex)]: \(oneValueCpMultiplier)\n"
          cpMultiplierElementIndex += 1
      }
      if hasMaxEggPlayerLevel {
        output += "\(indent) maxEggPlayerLevel: \(maxEggPlayerLevel) \n"
      }
      if hasMaxEncounterPlayerLevel {
        output += "\(indent) maxEncounterPlayerLevel: \(maxEncounterPlayerLevel) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueRankNum in rankNum {
                hashCode = (hashCode &* 31) &+ oneValueRankNum.hashValue
            }
            for oneValueRequiredExperience in requiredExperience {
                hashCode = (hashCode &* 31) &+ oneValueRequiredExperience.hashValue
            }
            for oneValueCpMultiplier in cpMultiplier {
                hashCode = (hashCode &* 31) &+ oneValueCpMultiplier.hashValue
            }
            if hasMaxEggPlayerLevel {
               hashCode = (hashCode &* 31) &+ maxEggPlayerLevel.hashValue
            }
            if hasMaxEncounterPlayerLevel {
               hashCode = (hashCode &* 31) &+ maxEncounterPlayerLevel.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.PlayerLevelSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.PlayerLevelSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.PlayerLevelSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.PlayerLevelSettings = Pogoprotos.Settings.Master.PlayerLevelSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.PlayerLevelSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var rankNum:Array<Int32> {
           get {
               return builderResult.rankNum
           }
           set (array) {
               builderResult.rankNum = array
           }
      }
      public func setRankNum(value:Array<Int32>) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.rankNum = value
        return self
      }
      public func clearRankNum() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
         builderResult.rankNum.removeAll(keepCapacity: false)
         return self
      }
      public var requiredExperience:Array<Int32> {
           get {
               return builderResult.requiredExperience
           }
           set (array) {
               builderResult.requiredExperience = array
           }
      }
      public func setRequiredExperience(value:Array<Int32>) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.requiredExperience = value
        return self
      }
      public func clearRequiredExperience() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
         builderResult.requiredExperience.removeAll(keepCapacity: false)
         return self
      }
      public var cpMultiplier:Array<Float> {
           get {
               return builderResult.cpMultiplier
           }
           set (array) {
               builderResult.cpMultiplier = array
           }
      }
      public func setCpMultiplier(value:Array<Float>) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.cpMultiplier = value
        return self
      }
      public func clearCpMultiplier() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
         builderResult.cpMultiplier.removeAll(keepCapacity: false)
         return self
      }
      public var hasMaxEggPlayerLevel:Bool {
           get {
                return builderResult.hasMaxEggPlayerLevel
           }
      }
      public var maxEggPlayerLevel:Int32 {
           get {
                return builderResult.maxEggPlayerLevel
           }
           set (value) {
               builderResult.hasMaxEggPlayerLevel = true
               builderResult.maxEggPlayerLevel = value
           }
      }
      public func setMaxEggPlayerLevel(value:Int32) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.maxEggPlayerLevel = value
        return self
      }
      public func clearMaxEggPlayerLevel() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder{
           builderResult.hasMaxEggPlayerLevel = false
           builderResult.maxEggPlayerLevel = Int32(0)
           return self
      }
      public var hasMaxEncounterPlayerLevel:Bool {
           get {
                return builderResult.hasMaxEncounterPlayerLevel
           }
      }
      public var maxEncounterPlayerLevel:Int32 {
           get {
                return builderResult.maxEncounterPlayerLevel
           }
           set (value) {
               builderResult.hasMaxEncounterPlayerLevel = true
               builderResult.maxEncounterPlayerLevel = value
           }
      }
      public func setMaxEncounterPlayerLevel(value:Int32) -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        self.maxEncounterPlayerLevel = value
        return self
      }
      public func clearMaxEncounterPlayerLevel() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder{
           builderResult.hasMaxEncounterPlayerLevel = false
           builderResult.maxEncounterPlayerLevel = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.PlayerLevelSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        return try Pogoprotos.Settings.Master.PlayerLevelSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.PlayerLevelSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.PlayerLevelSettings {
        let returnMe:Pogoprotos.Settings.Master.PlayerLevelSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.PlayerLevelSettings) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        if other == Pogoprotos.Settings.Master.PlayerLevelSettings() {
         return self
        }
        if !other.rankNum.isEmpty {
            builderResult.rankNum += other.rankNum
        }
        if !other.requiredExperience.isEmpty {
            builderResult.requiredExperience += other.requiredExperience
        }
        if !other.cpMultiplier.isEmpty {
            builderResult.cpMultiplier += other.cpMultiplier
        }
        if other.hasMaxEggPlayerLevel {
             maxEggPlayerLevel = other.maxEggPlayerLevel
        }
        if other.hasMaxEncounterPlayerLevel {
             maxEncounterPlayerLevel = other.maxEncounterPlayerLevel
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.rankNum += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 18:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.requiredExperience += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.cpMultiplier += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 32:
            maxEggPlayerLevel = try input.readInt32()

          case 40:
            maxEncounterPlayerLevel = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.PlayerLevelSettings.Builder()
        if let jsonValueRankNum = jsonMap["rankNum"] as? Array<NSNumber> {
          var jsonArrayRankNum:Array<Int32> = []
          for oneValueRankNum in jsonValueRankNum {
            jsonArrayRankNum += [oneValueRankNum.intValue]
          }
          resultDecodedBuilder.rankNum = jsonArrayRankNum
        }
        if let jsonValueRequiredExperience = jsonMap["requiredExperience"] as? Array<NSNumber> {
          var jsonArrayRequiredExperience:Array<Int32> = []
          for oneValueRequiredExperience in jsonValueRequiredExperience {
            jsonArrayRequiredExperience += [oneValueRequiredExperience.intValue]
          }
          resultDecodedBuilder.requiredExperience = jsonArrayRequiredExperience
        }
        if let jsonValueCpMultiplier = jsonMap["cpMultiplier"] as? Array<NSNumber> {
          var jsonArrayCpMultiplier:Array<Float> = []
          for oneValueCpMultiplier in jsonValueCpMultiplier {
            jsonArrayCpMultiplier += [oneValueCpMultiplier.floatValue]
          }
          resultDecodedBuilder.cpMultiplier = jsonArrayCpMultiplier
        }
        if let jsonValueMaxEggPlayerLevel = jsonMap["maxEggPlayerLevel"] as? NSNumber {
          resultDecodedBuilder.maxEggPlayerLevel = jsonValueMaxEggPlayerLevel.intValue
        }
        if let jsonValueMaxEncounterPlayerLevel = jsonMap["maxEncounterPlayerLevel"] as? NSNumber {
          resultDecodedBuilder.maxEncounterPlayerLevel = jsonValueMaxEncounterPlayerLevel.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.PlayerLevelSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.PlayerLevelSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PokemonSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasPokemonId:Bool = false
    public private(set) var hasModelScale:Bool = false
    public private(set) var modelScale:Float = Float(0)

    public private(set) var types:Pogoprotos.Enums.PokemonType = Pogoprotos.Enums.PokemonType.PokemonTypeNone
    public private(set) var hasTypes:Bool = false
    public private(set) var type2:Pogoprotos.Enums.PokemonType = Pogoprotos.Enums.PokemonType.PokemonTypeNone
    public private(set) var hasType2:Bool = false
    public private(set) var hasCamera:Bool = false
    public private(set) var camera:Pogoprotos.Settings.Master.Pokemon.CameraAttributes!
    public private(set) var hasEncounter:Bool = false
    public private(set) var encounter:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes!
    public private(set) var hasStats:Bool = false
    public private(set) var stats:Pogoprotos.Settings.Master.Pokemon.StatsAttributes!
    private var quickMovesMemoizedSerializedSize:Int32 = 0
    public private(set) var quickMoves:Array<Pogoprotos.Enums.PokemonMove> = Array<Pogoprotos.Enums.PokemonMove>()
    private var cinematicMovesMemoizedSerializedSize:Int32 = 0
    public private(set) var cinematicMoves:Array<Pogoprotos.Enums.PokemonMove> = Array<Pogoprotos.Enums.PokemonMove>()
    public private(set) var animationTime:Array<Float> = Array<Float>()
    private var animationTimeMemoizedSerializedSize:Int32 = -1
    private var evolutionIdsMemoizedSerializedSize:Int32 = 0
    public private(set) var evolutionIds:Array<Pogoprotos.Enums.PokemonId> = Array<Pogoprotos.Enums.PokemonId>()
    public private(set) var hasEvolutionPips:Bool = false
    public private(set) var evolutionPips:Int32 = Int32(0)

    public private(set) var rarity:Pogoprotos.Enums.PokemonRarity = Pogoprotos.Enums.PokemonRarity.Normal
    public private(set) var hasRarity:Bool = false
    public private(set) var hasPokedexHeightM:Bool = false
    public private(set) var pokedexHeightM:Float = Float(0)

    public private(set) var hasPokedexWeightKg:Bool = false
    public private(set) var pokedexWeightKg:Float = Float(0)

    public private(set) var parentPokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasParentPokemonId:Bool = false
    public private(set) var hasHeightStdDev:Bool = false
    public private(set) var heightStdDev:Float = Float(0)

    public private(set) var hasWeightStdDev:Bool = false
    public private(set) var weightStdDev:Float = Float(0)

    public private(set) var hasKmDistanceToHatch:Bool = false
    public private(set) var kmDistanceToHatch:Float = Float(0)

    public private(set) var familyId:Pogoprotos.Enums.PokemonFamilyId = Pogoprotos.Enums.PokemonFamilyId.FamilyUnset
    public private(set) var hasFamilyId:Bool = false
    public private(set) var hasCandyToEvolve:Bool = false
    public private(set) var candyToEvolve:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonId {
        try output.writeEnum(1, value:pokemonId.rawValue)
      }
      if hasModelScale {
        try output.writeFloat(3, value:modelScale)
      }
      if hasTypes {
        try output.writeEnum(4, value:types.rawValue)
      }
      if hasType2 {
        try output.writeEnum(5, value:type2.rawValue)
      }
      if hasCamera {
        try output.writeMessage(6, value:camera)
      }
      if hasEncounter {
        try output.writeMessage(7, value:encounter)
      }
      if hasStats {
        try output.writeMessage(8, value:stats)
      }
      for oneValueOfquickMoves in quickMoves {
          try output.writeEnum(9, value:oneValueOfquickMoves.rawValue)
      }
      for oneValueOfcinematicMoves in cinematicMoves {
          try output.writeEnum(10, value:oneValueOfcinematicMoves.rawValue)
      }
      if !animationTime.isEmpty {
        try output.writeRawVarint32(90)
        try output.writeRawVarint32(animationTimeMemoizedSerializedSize)
        for oneValueanimationTime in animationTime {
          try output.writeFloatNoTag(oneValueanimationTime)
        }
      }
      for oneValueOfevolutionIds in evolutionIds {
          try output.writeEnum(12, value:oneValueOfevolutionIds.rawValue)
      }
      if hasEvolutionPips {
        try output.writeInt32(13, value:evolutionPips)
      }
      if hasRarity {
        try output.writeEnum(14, value:rarity.rawValue)
      }
      if hasPokedexHeightM {
        try output.writeFloat(15, value:pokedexHeightM)
      }
      if hasPokedexWeightKg {
        try output.writeFloat(16, value:pokedexWeightKg)
      }
      if hasParentPokemonId {
        try output.writeEnum(17, value:parentPokemonId.rawValue)
      }
      if hasHeightStdDev {
        try output.writeFloat(18, value:heightStdDev)
      }
      if hasWeightStdDev {
        try output.writeFloat(19, value:weightStdDev)
      }
      if hasKmDistanceToHatch {
        try output.writeFloat(20, value:kmDistanceToHatch)
      }
      if hasFamilyId {
        try output.writeEnum(21, value:familyId.rawValue)
      }
      if hasCandyToEvolve {
        try output.writeInt32(22, value:candyToEvolve)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(1)
      }
      if hasModelScale {
        serialize_size += modelScale.computeFloatSize(3)
      }
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(4)
      }
      if (hasType2) {
        serialize_size += type2.rawValue.computeEnumSize(5)
      }
      if hasCamera {
          if let varSizecamera = camera?.computeMessageSize(6) {
              serialize_size += varSizecamera
          }
      }
      if hasEncounter {
          if let varSizeencounter = encounter?.computeMessageSize(7) {
              serialize_size += varSizeencounter
          }
      }
      if hasStats {
          if let varSizestats = stats?.computeMessageSize(8) {
              serialize_size += varSizestats
          }
      }
      var dataSizequickMoves:Int32 = 0
      for oneValueOfquickMoves in quickMoves {
          dataSizequickMoves += oneValueOfquickMoves.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizequickMoves
      serialize_size += (1 * Int32(quickMoves.count))
      var dataSizecinematicMoves:Int32 = 0
      for oneValueOfcinematicMoves in cinematicMoves {
          dataSizecinematicMoves += oneValueOfcinematicMoves.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizecinematicMoves
      serialize_size += (1 * Int32(cinematicMoves.count))
      var dataSizeAnimationTime:Int32 = 0
      dataSizeAnimationTime = 4 * Int32(animationTime.count)
      serialize_size += dataSizeAnimationTime
      if !animationTime.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAnimationTime.computeInt32SizeNoTag()
      }
      animationTimeMemoizedSerializedSize = dataSizeAnimationTime
      var dataSizeevolutionIds:Int32 = 0
      for oneValueOfevolutionIds in evolutionIds {
          dataSizeevolutionIds += oneValueOfevolutionIds.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizeevolutionIds
      serialize_size += (1 * Int32(evolutionIds.count))
      if hasEvolutionPips {
        serialize_size += evolutionPips.computeInt32Size(13)
      }
      if (hasRarity) {
        serialize_size += rarity.rawValue.computeEnumSize(14)
      }
      if hasPokedexHeightM {
        serialize_size += pokedexHeightM.computeFloatSize(15)
      }
      if hasPokedexWeightKg {
        serialize_size += pokedexWeightKg.computeFloatSize(16)
      }
      if (hasParentPokemonId) {
        serialize_size += parentPokemonId.rawValue.computeEnumSize(17)
      }
      if hasHeightStdDev {
        serialize_size += heightStdDev.computeFloatSize(18)
      }
      if hasWeightStdDev {
        serialize_size += weightStdDev.computeFloatSize(19)
      }
      if hasKmDistanceToHatch {
        serialize_size += kmDistanceToHatch.computeFloatSize(20)
      }
      if (hasFamilyId) {
        serialize_size += familyId.rawValue.computeEnumSize(21)
      }
      if hasCandyToEvolve {
        serialize_size += candyToEvolve.computeInt32Size(22)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.PokemonSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.PokemonSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings? {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return Pogoprotos.Settings.Master.PokemonSettings.classBuilder() as! Pogoprotos.Settings.Master.PokemonSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.PokemonSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PokemonSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PokemonSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return try Pogoprotos.Settings.Master.PokemonSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.PokemonSettings) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasModelScale {
        jsonMap["modelScale"] = NSNumber(float:modelScale)
      }
      if hasTypes {
        jsonMap["type"] = types.toString()
      }
      if hasType2 {
        jsonMap["type2"] = type2.toString()
      }
      if hasCamera {
        jsonMap["camera"] = try camera.encode()
      }
      if hasEncounter {
        jsonMap["encounter"] = try encounter.encode()
      }
      if hasStats {
        jsonMap["stats"] = try stats.encode()
      }
      if !quickMoves.isEmpty {
        var jsonArrayQuickMoves:Array<String> = []
          for oneValueQuickMoves in quickMoves {
            jsonArrayQuickMoves += [oneValueQuickMoves.toString()]
          }
        jsonMap["quickMoves"] = jsonArrayQuickMoves
      }
      if !cinematicMoves.isEmpty {
        var jsonArrayCinematicMoves:Array<String> = []
          for oneValueCinematicMoves in cinematicMoves {
            jsonArrayCinematicMoves += [oneValueCinematicMoves.toString()]
          }
        jsonMap["cinematicMoves"] = jsonArrayCinematicMoves
      }
      if !animationTime.isEmpty {
        var jsonArrayAnimationTime:Array<NSNumber> = []
          for oneValueAnimationTime in animationTime {
            jsonArrayAnimationTime += [NSNumber(float:oneValueAnimationTime)]
          }
        jsonMap["animationTime"] = jsonArrayAnimationTime
      }
      if !evolutionIds.isEmpty {
        var jsonArrayEvolutionIds:Array<String> = []
          for oneValueEvolutionIds in evolutionIds {
            jsonArrayEvolutionIds += [oneValueEvolutionIds.toString()]
          }
        jsonMap["evolutionIds"] = jsonArrayEvolutionIds
      }
      if hasEvolutionPips {
        jsonMap["evolutionPips"] = NSNumber(int:evolutionPips)
      }
      if hasRarity {
        jsonMap["rarity"] = rarity.toString()
      }
      if hasPokedexHeightM {
        jsonMap["pokedexHeightM"] = NSNumber(float:pokedexHeightM)
      }
      if hasPokedexWeightKg {
        jsonMap["pokedexWeightKg"] = NSNumber(float:pokedexWeightKg)
      }
      if hasParentPokemonId {
        jsonMap["parentPokemonId"] = parentPokemonId.toString()
      }
      if hasHeightStdDev {
        jsonMap["heightStdDev"] = NSNumber(float:heightStdDev)
      }
      if hasWeightStdDev {
        jsonMap["weightStdDev"] = NSNumber(float:weightStdDev)
      }
      if hasKmDistanceToHatch {
        jsonMap["kmDistanceToHatch"] = NSNumber(float:kmDistanceToHatch)
      }
      if hasFamilyId {
        jsonMap["familyId"] = familyId.toString()
      }
      if hasCandyToEvolve {
        jsonMap["candyToEvolve"] = NSNumber(int:candyToEvolve)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonSettings {
      return try Pogoprotos.Settings.Master.PokemonSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasModelScale {
        output += "\(indent) modelScale: \(modelScale) \n"
      }
      if (hasTypes) {
        output += "\(indent) types: \(types.description)\n"
      }
      if (hasType2) {
        output += "\(indent) type2: \(type2.description)\n"
      }
      if hasCamera {
        output += "\(indent) camera {\n"
        if let outDescCamera = camera {
          output += try outDescCamera.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasEncounter {
        output += "\(indent) encounter {\n"
        if let outDescEncounter = encounter {
          output += try outDescEncounter.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasStats {
        output += "\(indent) stats {\n"
        if let outDescStats = stats {
          output += try outDescStats.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var quickMovesElementIndex:Int = 0
      for oneValueOfquickMoves in quickMoves {
          output += "\(indent) quickMoves[\(quickMovesElementIndex)]: \(oneValueOfquickMoves.description)\n"
          quickMovesElementIndex += 1
      }
      var cinematicMovesElementIndex:Int = 0
      for oneValueOfcinematicMoves in cinematicMoves {
          output += "\(indent) cinematicMoves[\(cinematicMovesElementIndex)]: \(oneValueOfcinematicMoves.description)\n"
          cinematicMovesElementIndex += 1
      }
      var animationTimeElementIndex:Int = 0
      for oneValueAnimationTime in animationTime  {
          output += "\(indent) animationTime[\(animationTimeElementIndex)]: \(oneValueAnimationTime)\n"
          animationTimeElementIndex += 1
      }
      var evolutionIdsElementIndex:Int = 0
      for oneValueOfevolutionIds in evolutionIds {
          output += "\(indent) evolutionIds[\(evolutionIdsElementIndex)]: \(oneValueOfevolutionIds.description)\n"
          evolutionIdsElementIndex += 1
      }
      if hasEvolutionPips {
        output += "\(indent) evolutionPips: \(evolutionPips) \n"
      }
      if (hasRarity) {
        output += "\(indent) rarity: \(rarity.description)\n"
      }
      if hasPokedexHeightM {
        output += "\(indent) pokedexHeightM: \(pokedexHeightM) \n"
      }
      if hasPokedexWeightKg {
        output += "\(indent) pokedexWeightKg: \(pokedexWeightKg) \n"
      }
      if (hasParentPokemonId) {
        output += "\(indent) parentPokemonId: \(parentPokemonId.description)\n"
      }
      if hasHeightStdDev {
        output += "\(indent) heightStdDev: \(heightStdDev) \n"
      }
      if hasWeightStdDev {
        output += "\(indent) weightStdDev: \(weightStdDev) \n"
      }
      if hasKmDistanceToHatch {
        output += "\(indent) kmDistanceToHatch: \(kmDistanceToHatch) \n"
      }
      if (hasFamilyId) {
        output += "\(indent) familyId: \(familyId.description)\n"
      }
      if hasCandyToEvolve {
        output += "\(indent) candyToEvolve: \(candyToEvolve) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasModelScale {
               hashCode = (hashCode &* 31) &+ modelScale.hashValue
            }
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            if hasType2 {
               hashCode = (hashCode &* 31) &+ Int(type2.rawValue)
            }
            if hasCamera {
                if let hashValuecamera = camera?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecamera
                }
            }
            if hasEncounter {
                if let hashValueencounter = encounter?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueencounter
                }
            }
            if hasStats {
                if let hashValuestats = stats?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuestats
                }
            }
            for oneValueOfquickMoves in quickMoves {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfquickMoves.rawValue)
            }
            for oneValueOfcinematicMoves in cinematicMoves {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfcinematicMoves.rawValue)
            }
            for oneValueAnimationTime in animationTime {
                hashCode = (hashCode &* 31) &+ oneValueAnimationTime.hashValue
            }
            for oneValueOfevolutionIds in evolutionIds {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfevolutionIds.rawValue)
            }
            if hasEvolutionPips {
               hashCode = (hashCode &* 31) &+ evolutionPips.hashValue
            }
            if hasRarity {
               hashCode = (hashCode &* 31) &+ Int(rarity.rawValue)
            }
            if hasPokedexHeightM {
               hashCode = (hashCode &* 31) &+ pokedexHeightM.hashValue
            }
            if hasPokedexWeightKg {
               hashCode = (hashCode &* 31) &+ pokedexWeightKg.hashValue
            }
            if hasParentPokemonId {
               hashCode = (hashCode &* 31) &+ Int(parentPokemonId.rawValue)
            }
            if hasHeightStdDev {
               hashCode = (hashCode &* 31) &+ heightStdDev.hashValue
            }
            if hasWeightStdDev {
               hashCode = (hashCode &* 31) &+ weightStdDev.hashValue
            }
            if hasKmDistanceToHatch {
               hashCode = (hashCode &* 31) &+ kmDistanceToHatch.hashValue
            }
            if hasFamilyId {
               hashCode = (hashCode &* 31) &+ Int(familyId.rawValue)
            }
            if hasCandyToEvolve {
               hashCode = (hashCode &* 31) &+ candyToEvolve.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.PokemonSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.PokemonSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.PokemonSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.PokemonSettings = Pogoprotos.Settings.Master.PokemonSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.PokemonSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
        public func setPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.pokemonId = value
          return self
        }
        public func clearPokemonId() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .Missingno
           return self
        }
      public var hasModelScale:Bool {
           get {
                return builderResult.hasModelScale
           }
      }
      public var modelScale:Float {
           get {
                return builderResult.modelScale
           }
           set (value) {
               builderResult.hasModelScale = true
               builderResult.modelScale = value
           }
      }
      public func setModelScale(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.modelScale = value
        return self
      }
      public func clearModelScale() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasModelScale = false
           builderResult.modelScale = Float(0)
           return self
      }
        public var hasTypes:Bool{
            get {
                return builderResult.hasTypes
            }
        }
        public var types:Pogoprotos.Enums.PokemonType {
            get {
                return builderResult.types
            }
            set (value) {
                builderResult.hasTypes = true
                builderResult.types = value
            }
        }
        public func setTypes(value:Pogoprotos.Enums.PokemonType) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.types = value
          return self
        }
        public func clearTypes() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasTypes = false
           builderResult.types = .PokemonTypeNone
           return self
        }
        public var hasType2:Bool{
            get {
                return builderResult.hasType2
            }
        }
        public var type2:Pogoprotos.Enums.PokemonType {
            get {
                return builderResult.type2
            }
            set (value) {
                builderResult.hasType2 = true
                builderResult.type2 = value
            }
        }
        public func setType2(value:Pogoprotos.Enums.PokemonType) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.type2 = value
          return self
        }
        public func clearType2() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasType2 = false
           builderResult.type2 = .PokemonTypeNone
           return self
        }
      public var hasCamera:Bool {
           get {
               return builderResult.hasCamera
           }
      }
      public var camera:Pogoprotos.Settings.Master.Pokemon.CameraAttributes! {
           get {
               if cameraBuilder_ != nil {
                  builderResult.camera = cameraBuilder_.getMessage()
               }
               return builderResult.camera
           }
           set (value) {
               builderResult.hasCamera = true
               builderResult.camera = value
           }
      }
      private var cameraBuilder_:Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder! {
           didSet {
              builderResult.hasCamera = true
           }
      }
      public func getCameraBuilder() -> Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder {
        if cameraBuilder_ == nil {
           cameraBuilder_ = Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
           builderResult.camera = cameraBuilder_.getMessage()
           if camera != nil {
              try! cameraBuilder_.mergeFrom(camera)
           }
        }
        return cameraBuilder_
      }
      public func setCamera(value:Pogoprotos.Settings.Master.Pokemon.CameraAttributes!) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.camera = value
        return self
      }
      public func mergeCamera(value:Pogoprotos.Settings.Master.Pokemon.CameraAttributes) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if builderResult.hasCamera {
          builderResult.camera = try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.builderWithPrototype(builderResult.camera).mergeFrom(value).buildPartial()
        } else {
          builderResult.camera = value
        }
        builderResult.hasCamera = true
        return self
      }
      public func clearCamera() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        cameraBuilder_ = nil
        builderResult.hasCamera = false
        builderResult.camera = nil
        return self
      }
      public var hasEncounter:Bool {
           get {
               return builderResult.hasEncounter
           }
      }
      public var encounter:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes! {
           get {
               if encounterBuilder_ != nil {
                  builderResult.encounter = encounterBuilder_.getMessage()
               }
               return builderResult.encounter
           }
           set (value) {
               builderResult.hasEncounter = true
               builderResult.encounter = value
           }
      }
      private var encounterBuilder_:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder! {
           didSet {
              builderResult.hasEncounter = true
           }
      }
      public func getEncounterBuilder() -> Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder {
        if encounterBuilder_ == nil {
           encounterBuilder_ = Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder()
           builderResult.encounter = encounterBuilder_.getMessage()
           if encounter != nil {
              try! encounterBuilder_.mergeFrom(encounter)
           }
        }
        return encounterBuilder_
      }
      public func setEncounter(value:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes!) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.encounter = value
        return self
      }
      public func mergeEncounter(value:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if builderResult.hasEncounter {
          builderResult.encounter = try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.builderWithPrototype(builderResult.encounter).mergeFrom(value).buildPartial()
        } else {
          builderResult.encounter = value
        }
        builderResult.hasEncounter = true
        return self
      }
      public func clearEncounter() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        encounterBuilder_ = nil
        builderResult.hasEncounter = false
        builderResult.encounter = nil
        return self
      }
      public var hasStats:Bool {
           get {
               return builderResult.hasStats
           }
      }
      public var stats:Pogoprotos.Settings.Master.Pokemon.StatsAttributes! {
           get {
               if statsBuilder_ != nil {
                  builderResult.stats = statsBuilder_.getMessage()
               }
               return builderResult.stats
           }
           set (value) {
               builderResult.hasStats = true
               builderResult.stats = value
           }
      }
      private var statsBuilder_:Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder! {
           didSet {
              builderResult.hasStats = true
           }
      }
      public func getStatsBuilder() -> Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder {
        if statsBuilder_ == nil {
           statsBuilder_ = Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder()
           builderResult.stats = statsBuilder_.getMessage()
           if stats != nil {
              try! statsBuilder_.mergeFrom(stats)
           }
        }
        return statsBuilder_
      }
      public func setStats(value:Pogoprotos.Settings.Master.Pokemon.StatsAttributes!) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.stats = value
        return self
      }
      public func mergeStats(value:Pogoprotos.Settings.Master.Pokemon.StatsAttributes) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if builderResult.hasStats {
          builderResult.stats = try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.builderWithPrototype(builderResult.stats).mergeFrom(value).buildPartial()
        } else {
          builderResult.stats = value
        }
        builderResult.hasStats = true
        return self
      }
      public func clearStats() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        statsBuilder_ = nil
        builderResult.hasStats = false
        builderResult.stats = nil
        return self
      }
      public var quickMoves:Array<Pogoprotos.Enums.PokemonMove> {
          get {
              return builderResult.quickMoves
          }
          set (value) {
              builderResult.quickMoves = value
          }
      }
      public func setQuickMoves(value:Array<Pogoprotos.Enums.PokemonMove>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.quickMoves = value
        return self
      }
      public func clearQuickMoves() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult.quickMoves.removeAll(keepCapacity: false)
        return self
      }
      public var cinematicMoves:Array<Pogoprotos.Enums.PokemonMove> {
          get {
              return builderResult.cinematicMoves
          }
          set (value) {
              builderResult.cinematicMoves = value
          }
      }
      public func setCinematicMoves(value:Array<Pogoprotos.Enums.PokemonMove>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.cinematicMoves = value
        return self
      }
      public func clearCinematicMoves() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult.cinematicMoves.removeAll(keepCapacity: false)
        return self
      }
      public var animationTime:Array<Float> {
           get {
               return builderResult.animationTime
           }
           set (array) {
               builderResult.animationTime = array
           }
      }
      public func setAnimationTime(value:Array<Float>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.animationTime = value
        return self
      }
      public func clearAnimationTime() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
         builderResult.animationTime.removeAll(keepCapacity: false)
         return self
      }
      public var evolutionIds:Array<Pogoprotos.Enums.PokemonId> {
          get {
              return builderResult.evolutionIds
          }
          set (value) {
              builderResult.evolutionIds = value
          }
      }
      public func setEvolutionIds(value:Array<Pogoprotos.Enums.PokemonId>) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.evolutionIds = value
        return self
      }
      public func clearEvolutionIds() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult.evolutionIds.removeAll(keepCapacity: false)
        return self
      }
      public var hasEvolutionPips:Bool {
           get {
                return builderResult.hasEvolutionPips
           }
      }
      public var evolutionPips:Int32 {
           get {
                return builderResult.evolutionPips
           }
           set (value) {
               builderResult.hasEvolutionPips = true
               builderResult.evolutionPips = value
           }
      }
      public func setEvolutionPips(value:Int32) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.evolutionPips = value
        return self
      }
      public func clearEvolutionPips() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasEvolutionPips = false
           builderResult.evolutionPips = Int32(0)
           return self
      }
        public var hasRarity:Bool{
            get {
                return builderResult.hasRarity
            }
        }
        public var rarity:Pogoprotos.Enums.PokemonRarity {
            get {
                return builderResult.rarity
            }
            set (value) {
                builderResult.hasRarity = true
                builderResult.rarity = value
            }
        }
        public func setRarity(value:Pogoprotos.Enums.PokemonRarity) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.rarity = value
          return self
        }
        public func clearRarity() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasRarity = false
           builderResult.rarity = .Normal
           return self
        }
      public var hasPokedexHeightM:Bool {
           get {
                return builderResult.hasPokedexHeightM
           }
      }
      public var pokedexHeightM:Float {
           get {
                return builderResult.pokedexHeightM
           }
           set (value) {
               builderResult.hasPokedexHeightM = true
               builderResult.pokedexHeightM = value
           }
      }
      public func setPokedexHeightM(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.pokedexHeightM = value
        return self
      }
      public func clearPokedexHeightM() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasPokedexHeightM = false
           builderResult.pokedexHeightM = Float(0)
           return self
      }
      public var hasPokedexWeightKg:Bool {
           get {
                return builderResult.hasPokedexWeightKg
           }
      }
      public var pokedexWeightKg:Float {
           get {
                return builderResult.pokedexWeightKg
           }
           set (value) {
               builderResult.hasPokedexWeightKg = true
               builderResult.pokedexWeightKg = value
           }
      }
      public func setPokedexWeightKg(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.pokedexWeightKg = value
        return self
      }
      public func clearPokedexWeightKg() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasPokedexWeightKg = false
           builderResult.pokedexWeightKg = Float(0)
           return self
      }
        public var hasParentPokemonId:Bool{
            get {
                return builderResult.hasParentPokemonId
            }
        }
        public var parentPokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.parentPokemonId
            }
            set (value) {
                builderResult.hasParentPokemonId = true
                builderResult.parentPokemonId = value
            }
        }
        public func setParentPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.parentPokemonId = value
          return self
        }
        public func clearParentPokemonId() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasParentPokemonId = false
           builderResult.parentPokemonId = .Missingno
           return self
        }
      public var hasHeightStdDev:Bool {
           get {
                return builderResult.hasHeightStdDev
           }
      }
      public var heightStdDev:Float {
           get {
                return builderResult.heightStdDev
           }
           set (value) {
               builderResult.hasHeightStdDev = true
               builderResult.heightStdDev = value
           }
      }
      public func setHeightStdDev(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.heightStdDev = value
        return self
      }
      public func clearHeightStdDev() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasHeightStdDev = false
           builderResult.heightStdDev = Float(0)
           return self
      }
      public var hasWeightStdDev:Bool {
           get {
                return builderResult.hasWeightStdDev
           }
      }
      public var weightStdDev:Float {
           get {
                return builderResult.weightStdDev
           }
           set (value) {
               builderResult.hasWeightStdDev = true
               builderResult.weightStdDev = value
           }
      }
      public func setWeightStdDev(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.weightStdDev = value
        return self
      }
      public func clearWeightStdDev() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasWeightStdDev = false
           builderResult.weightStdDev = Float(0)
           return self
      }
      public var hasKmDistanceToHatch:Bool {
           get {
                return builderResult.hasKmDistanceToHatch
           }
      }
      public var kmDistanceToHatch:Float {
           get {
                return builderResult.kmDistanceToHatch
           }
           set (value) {
               builderResult.hasKmDistanceToHatch = true
               builderResult.kmDistanceToHatch = value
           }
      }
      public func setKmDistanceToHatch(value:Float) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.kmDistanceToHatch = value
        return self
      }
      public func clearKmDistanceToHatch() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasKmDistanceToHatch = false
           builderResult.kmDistanceToHatch = Float(0)
           return self
      }
        public var hasFamilyId:Bool{
            get {
                return builderResult.hasFamilyId
            }
        }
        public var familyId:Pogoprotos.Enums.PokemonFamilyId {
            get {
                return builderResult.familyId
            }
            set (value) {
                builderResult.hasFamilyId = true
                builderResult.familyId = value
            }
        }
        public func setFamilyId(value:Pogoprotos.Enums.PokemonFamilyId) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
          self.familyId = value
          return self
        }
        public func clearFamilyId() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           builderResult.hasFamilyId = false
           builderResult.familyId = .FamilyUnset
           return self
        }
      public var hasCandyToEvolve:Bool {
           get {
                return builderResult.hasCandyToEvolve
           }
      }
      public var candyToEvolve:Int32 {
           get {
                return builderResult.candyToEvolve
           }
           set (value) {
               builderResult.hasCandyToEvolve = true
               builderResult.candyToEvolve = value
           }
      }
      public func setCandyToEvolve(value:Int32) -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        self.candyToEvolve = value
        return self
      }
      public func clearCandyToEvolve() -> Pogoprotos.Settings.Master.PokemonSettings.Builder{
           builderResult.hasCandyToEvolve = false
           builderResult.candyToEvolve = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.PokemonSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        return try Pogoprotos.Settings.Master.PokemonSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.PokemonSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.PokemonSettings {
        let returnMe:Pogoprotos.Settings.Master.PokemonSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.PokemonSettings) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        if other == Pogoprotos.Settings.Master.PokemonSettings() {
         return self
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasModelScale {
             modelScale = other.modelScale
        }
        if other.hasTypes {
             types = other.types
        }
        if other.hasType2 {
             type2 = other.type2
        }
        if (other.hasCamera) {
            try mergeCamera(other.camera)
        }
        if (other.hasEncounter) {
            try mergeEncounter(other.encounter)
        }
        if (other.hasStats) {
            try mergeStats(other.stats)
        }
        if !other.quickMoves.isEmpty {
           builderResult.quickMoves += other.quickMoves
        }
        if !other.cinematicMoves.isEmpty {
           builderResult.cinematicMoves += other.cinematicMoves
        }
        if !other.animationTime.isEmpty {
            builderResult.animationTime += other.animationTime
        }
        if !other.evolutionIds.isEmpty {
           builderResult.evolutionIds += other.evolutionIds
        }
        if other.hasEvolutionPips {
             evolutionPips = other.evolutionPips
        }
        if other.hasRarity {
             rarity = other.rarity
        }
        if other.hasPokedexHeightM {
             pokedexHeightM = other.pokedexHeightM
        }
        if other.hasPokedexWeightKg {
             pokedexWeightKg = other.pokedexWeightKg
        }
        if other.hasParentPokemonId {
             parentPokemonId = other.parentPokemonId
        }
        if other.hasHeightStdDev {
             heightStdDev = other.heightStdDev
        }
        if other.hasWeightStdDev {
             weightStdDev = other.weightStdDev
        }
        if other.hasKmDistanceToHatch {
             kmDistanceToHatch = other.kmDistanceToHatch
        }
        if other.hasFamilyId {
             familyId = other.familyId
        }
        if other.hasCandyToEvolve {
             candyToEvolve = other.candyToEvolve
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntpokemonId = try input.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntpokemonId))
            }

          case 29:
            modelScale = try input.readFloat()

          case 32:
            let valueInttypes = try input.readEnum()
            if let enumstypes = Pogoprotos.Enums.PokemonType(rawValue:valueInttypes){
                 types = enumstypes
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueInttypes))
            }

          case 40:
            let valueInttype2 = try input.readEnum()
            if let enumstype2 = Pogoprotos.Enums.PokemonType(rawValue:valueInttype2){
                 type2 = enumstype2
            } else {
                 try unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueInttype2))
            }

          case 50:
            let subBuilder:Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder = Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder()
            if hasCamera {
              try subBuilder.mergeFrom(camera)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            camera = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder = Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder()
            if hasEncounter {
              try subBuilder.mergeFrom(encounter)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            encounter = subBuilder.buildPartial()

          case 66:
            let subBuilder:Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder = Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder()
            if hasStats {
              try subBuilder.mergeFrom(stats)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            stats = subBuilder.buildPartial()

          case 72:
            let valueIntquickMoves = try input.readEnum()
            if let enumsquickMoves = Pogoprotos.Enums.PokemonMove(rawValue:valueIntquickMoves) {
                 builderResult.quickMoves += [enumsquickMoves]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntquickMoves))
            }

          case 80:
            let valueIntcinematicMoves = try input.readEnum()
            if let enumscinematicMoves = Pogoprotos.Enums.PokemonMove(rawValue:valueIntcinematicMoves) {
                 builderResult.cinematicMoves += [enumscinematicMoves]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(10, value:Int64(valueIntcinematicMoves))
            }

          case 90:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.animationTime += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 96:
            let valueIntevolutionIds = try input.readEnum()
            if let enumsevolutionIds = Pogoprotos.Enums.PokemonId(rawValue:valueIntevolutionIds) {
                 builderResult.evolutionIds += [enumsevolutionIds]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(12, value:Int64(valueIntevolutionIds))
            }

          case 104:
            evolutionPips = try input.readInt32()

          case 112:
            let valueIntrarity = try input.readEnum()
            if let enumsrarity = Pogoprotos.Enums.PokemonRarity(rawValue:valueIntrarity){
                 rarity = enumsrarity
            } else {
                 try unknownFieldsBuilder.mergeVarintField(14, value:Int64(valueIntrarity))
            }

          case 125:
            pokedexHeightM = try input.readFloat()

          case 133:
            pokedexWeightKg = try input.readFloat()

          case 136:
            let valueIntparentPokemonId = try input.readEnum()
            if let enumsparentPokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntparentPokemonId){
                 parentPokemonId = enumsparentPokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(17, value:Int64(valueIntparentPokemonId))
            }

          case 149:
            heightStdDev = try input.readFloat()

          case 157:
            weightStdDev = try input.readFloat()

          case 165:
            kmDistanceToHatch = try input.readFloat()

          case 168:
            let valueIntfamilyId = try input.readEnum()
            if let enumsfamilyId = Pogoprotos.Enums.PokemonFamilyId(rawValue:valueIntfamilyId){
                 familyId = enumsfamilyId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(21, value:Int64(valueIntfamilyId))
            }

          case 176:
            candyToEvolve = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.PokemonSettings.Builder()
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValuePokemonId)
        }
        if let jsonValueModelScale = jsonMap["modelScale"] as? NSNumber {
          resultDecodedBuilder.modelScale = jsonValueModelScale.floatValue
        }
        if let jsonValueTypes = jsonMap["type"] as? String {
          resultDecodedBuilder.types = try Pogoprotos.Enums.PokemonType.fromString(jsonValueTypes)
        }
        if let jsonValueType2 = jsonMap["type2"] as? String {
          resultDecodedBuilder.type2 = try Pogoprotos.Enums.PokemonType.fromString(jsonValueType2)
        }
        if let jsonValueCamera = jsonMap["camera"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.camera = try Pogoprotos.Settings.Master.Pokemon.CameraAttributes.Builder.decodeToBuilder(jsonValueCamera).build()

        }
        if let jsonValueEncounter = jsonMap["encounter"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.encounter = try Pogoprotos.Settings.Master.Pokemon.EncounterAttributes.Builder.decodeToBuilder(jsonValueEncounter).build()

        }
        if let jsonValueStats = jsonMap["stats"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.stats = try Pogoprotos.Settings.Master.Pokemon.StatsAttributes.Builder.decodeToBuilder(jsonValueStats).build()

        }
        if let jsonValueQuickMoves = jsonMap["quickMoves"] as? Array<String> {
          var jsonArrayQuickMoves:Array<Pogoprotos.Enums.PokemonMove> = []
          for oneValueQuickMoves in jsonValueQuickMoves {
            let enumFromStringQuickMoves = try Pogoprotos.Enums.PokemonMove.fromString(oneValueQuickMoves)
            jsonArrayQuickMoves += [enumFromStringQuickMoves]
          }
          resultDecodedBuilder.quickMoves = jsonArrayQuickMoves
        }
        if let jsonValueCinematicMoves = jsonMap["cinematicMoves"] as? Array<String> {
          var jsonArrayCinematicMoves:Array<Pogoprotos.Enums.PokemonMove> = []
          for oneValueCinematicMoves in jsonValueCinematicMoves {
            let enumFromStringCinematicMoves = try Pogoprotos.Enums.PokemonMove.fromString(oneValueCinematicMoves)
            jsonArrayCinematicMoves += [enumFromStringCinematicMoves]
          }
          resultDecodedBuilder.cinematicMoves = jsonArrayCinematicMoves
        }
        if let jsonValueAnimationTime = jsonMap["animationTime"] as? Array<NSNumber> {
          var jsonArrayAnimationTime:Array<Float> = []
          for oneValueAnimationTime in jsonValueAnimationTime {
            jsonArrayAnimationTime += [oneValueAnimationTime.floatValue]
          }
          resultDecodedBuilder.animationTime = jsonArrayAnimationTime
        }
        if let jsonValueEvolutionIds = jsonMap["evolutionIds"] as? Array<String> {
          var jsonArrayEvolutionIds:Array<Pogoprotos.Enums.PokemonId> = []
          for oneValueEvolutionIds in jsonValueEvolutionIds {
            let enumFromStringEvolutionIds = try Pogoprotos.Enums.PokemonId.fromString(oneValueEvolutionIds)
            jsonArrayEvolutionIds += [enumFromStringEvolutionIds]
          }
          resultDecodedBuilder.evolutionIds = jsonArrayEvolutionIds
        }
        if let jsonValueEvolutionPips = jsonMap["evolutionPips"] as? NSNumber {
          resultDecodedBuilder.evolutionPips = jsonValueEvolutionPips.intValue
        }
        if let jsonValueRarity = jsonMap["rarity"] as? String {
          resultDecodedBuilder.rarity = try Pogoprotos.Enums.PokemonRarity.fromString(jsonValueRarity)
        }
        if let jsonValuePokedexHeightM = jsonMap["pokedexHeightM"] as? NSNumber {
          resultDecodedBuilder.pokedexHeightM = jsonValuePokedexHeightM.floatValue
        }
        if let jsonValuePokedexWeightKg = jsonMap["pokedexWeightKg"] as? NSNumber {
          resultDecodedBuilder.pokedexWeightKg = jsonValuePokedexWeightKg.floatValue
        }
        if let jsonValueParentPokemonId = jsonMap["parentPokemonId"] as? String {
          resultDecodedBuilder.parentPokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValueParentPokemonId)
        }
        if let jsonValueHeightStdDev = jsonMap["heightStdDev"] as? NSNumber {
          resultDecodedBuilder.heightStdDev = jsonValueHeightStdDev.floatValue
        }
        if let jsonValueWeightStdDev = jsonMap["weightStdDev"] as? NSNumber {
          resultDecodedBuilder.weightStdDev = jsonValueWeightStdDev.floatValue
        }
        if let jsonValueKmDistanceToHatch = jsonMap["kmDistanceToHatch"] as? NSNumber {
          resultDecodedBuilder.kmDistanceToHatch = jsonValueKmDistanceToHatch.floatValue
        }
        if let jsonValueFamilyId = jsonMap["familyId"] as? String {
          resultDecodedBuilder.familyId = try Pogoprotos.Enums.PokemonFamilyId.fromString(jsonValueFamilyId)
        }
        if let jsonValueCandyToEvolve = jsonMap["candyToEvolve"] as? NSNumber {
          resultDecodedBuilder.candyToEvolve = jsonValueCandyToEvolve.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.PokemonSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class PokemonUpgradeSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasUpgradesPerLevel:Bool = false
    public private(set) var upgradesPerLevel:Int32 = Int32(0)

    public private(set) var hasAllowedLevelsAbovePlayer:Bool = false
    public private(set) var allowedLevelsAbovePlayer:Int32 = Int32(0)

    public private(set) var candyCost:Array<Int32> = Array<Int32>()
    private var candyCostMemoizedSerializedSize:Int32 = -1
    public private(set) var stardustCost:Array<Int32> = Array<Int32>()
    private var stardustCostMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUpgradesPerLevel {
        try output.writeInt32(1, value:upgradesPerLevel)
      }
      if hasAllowedLevelsAbovePlayer {
        try output.writeInt32(2, value:allowedLevelsAbovePlayer)
      }
      if !candyCost.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(candyCostMemoizedSerializedSize)
        for oneValuecandyCost in candyCost {
          try output.writeInt32NoTag(oneValuecandyCost)
        }
      }
      if !stardustCost.isEmpty {
        try output.writeRawVarint32(34)
        try output.writeRawVarint32(stardustCostMemoizedSerializedSize)
        for oneValuestardustCost in stardustCost {
          try output.writeInt32NoTag(oneValuestardustCost)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUpgradesPerLevel {
        serialize_size += upgradesPerLevel.computeInt32Size(1)
      }
      if hasAllowedLevelsAbovePlayer {
        serialize_size += allowedLevelsAbovePlayer.computeInt32Size(2)
      }
      var dataSizeCandyCost:Int32 = 0
      for oneValuecandyCost in candyCost {
          dataSizeCandyCost += oneValuecandyCost.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeCandyCost
      if !candyCost.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeCandyCost.computeInt32SizeNoTag()
      }
      candyCostMemoizedSerializedSize = dataSizeCandyCost
      var dataSizeStardustCost:Int32 = 0
      for oneValuestardustCost in stardustCost {
          dataSizeStardustCost += oneValuestardustCost.computeInt32SizeNoTag()
      }
      serialize_size += dataSizeStardustCost
      if !stardustCost.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeStardustCost.computeInt32SizeNoTag()
      }
      stardustCostMemoizedSerializedSize = dataSizeStardustCost
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.PokemonUpgradeSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.PokemonUpgradeSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings? {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
      return Pogoprotos.Settings.Master.PokemonUpgradeSettings.classBuilder() as! Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.PokemonUpgradeSettings) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasUpgradesPerLevel {
        jsonMap["upgradesPerLevel"] = NSNumber(int:upgradesPerLevel)
      }
      if hasAllowedLevelsAbovePlayer {
        jsonMap["allowedLevelsAbovePlayer"] = NSNumber(int:allowedLevelsAbovePlayer)
      }
      if !candyCost.isEmpty {
        var jsonArrayCandyCost:Array<NSNumber> = []
          for oneValueCandyCost in candyCost {
            jsonArrayCandyCost += [NSNumber(int:oneValueCandyCost)]
          }
        jsonMap["candyCost"] = jsonArrayCandyCost
      }
      if !stardustCost.isEmpty {
        var jsonArrayStardustCost:Array<NSNumber> = []
          for oneValueStardustCost in stardustCost {
            jsonArrayStardustCost += [NSNumber(int:oneValueStardustCost)]
          }
        jsonMap["stardustCost"] = jsonArrayStardustCost
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
      return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasUpgradesPerLevel {
        output += "\(indent) upgradesPerLevel: \(upgradesPerLevel) \n"
      }
      if hasAllowedLevelsAbovePlayer {
        output += "\(indent) allowedLevelsAbovePlayer: \(allowedLevelsAbovePlayer) \n"
      }
      var candyCostElementIndex:Int = 0
      for oneValueCandyCost in candyCost  {
          output += "\(indent) candyCost[\(candyCostElementIndex)]: \(oneValueCandyCost)\n"
          candyCostElementIndex += 1
      }
      var stardustCostElementIndex:Int = 0
      for oneValueStardustCost in stardustCost  {
          output += "\(indent) stardustCost[\(stardustCostElementIndex)]: \(oneValueStardustCost)\n"
          stardustCostElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUpgradesPerLevel {
               hashCode = (hashCode &* 31) &+ upgradesPerLevel.hashValue
            }
            if hasAllowedLevelsAbovePlayer {
               hashCode = (hashCode &* 31) &+ allowedLevelsAbovePlayer.hashValue
            }
            for oneValueCandyCost in candyCost {
                hashCode = (hashCode &* 31) &+ oneValueCandyCost.hashValue
            }
            for oneValueStardustCost in stardustCost {
                hashCode = (hashCode &* 31) &+ oneValueStardustCost.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.PokemonUpgradeSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.PokemonUpgradeSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.PokemonUpgradeSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.PokemonUpgradeSettings = Pogoprotos.Settings.Master.PokemonUpgradeSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUpgradesPerLevel:Bool {
           get {
                return builderResult.hasUpgradesPerLevel
           }
      }
      public var upgradesPerLevel:Int32 {
           get {
                return builderResult.upgradesPerLevel
           }
           set (value) {
               builderResult.hasUpgradesPerLevel = true
               builderResult.upgradesPerLevel = value
           }
      }
      public func setUpgradesPerLevel(value:Int32) -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        self.upgradesPerLevel = value
        return self
      }
      public func clearUpgradesPerLevel() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder{
           builderResult.hasUpgradesPerLevel = false
           builderResult.upgradesPerLevel = Int32(0)
           return self
      }
      public var hasAllowedLevelsAbovePlayer:Bool {
           get {
                return builderResult.hasAllowedLevelsAbovePlayer
           }
      }
      public var allowedLevelsAbovePlayer:Int32 {
           get {
                return builderResult.allowedLevelsAbovePlayer
           }
           set (value) {
               builderResult.hasAllowedLevelsAbovePlayer = true
               builderResult.allowedLevelsAbovePlayer = value
           }
      }
      public func setAllowedLevelsAbovePlayer(value:Int32) -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        self.allowedLevelsAbovePlayer = value
        return self
      }
      public func clearAllowedLevelsAbovePlayer() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder{
           builderResult.hasAllowedLevelsAbovePlayer = false
           builderResult.allowedLevelsAbovePlayer = Int32(0)
           return self
      }
      public var candyCost:Array<Int32> {
           get {
               return builderResult.candyCost
           }
           set (array) {
               builderResult.candyCost = array
           }
      }
      public func setCandyCost(value:Array<Int32>) -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        self.candyCost = value
        return self
      }
      public func clearCandyCost() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
         builderResult.candyCost.removeAll(keepCapacity: false)
         return self
      }
      public var stardustCost:Array<Int32> {
           get {
               return builderResult.stardustCost
           }
           set (array) {
               builderResult.stardustCost = array
           }
      }
      public func setStardustCost(value:Array<Int32>) -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        self.stardustCost = value
        return self
      }
      public func clearStardustCost() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
         builderResult.stardustCost.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.PokemonUpgradeSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.PokemonUpgradeSettings {
        let returnMe:Pogoprotos.Settings.Master.PokemonUpgradeSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.PokemonUpgradeSettings) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        if other == Pogoprotos.Settings.Master.PokemonUpgradeSettings() {
         return self
        }
        if other.hasUpgradesPerLevel {
             upgradesPerLevel = other.upgradesPerLevel
        }
        if other.hasAllowedLevelsAbovePlayer {
             allowedLevelsAbovePlayer = other.allowedLevelsAbovePlayer
        }
        if !other.candyCost.isEmpty {
            builderResult.candyCost += other.candyCost
        }
        if !other.stardustCost.isEmpty {
            builderResult.stardustCost += other.stardustCost
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            upgradesPerLevel = try input.readInt32()

          case 16:
            allowedLevelsAbovePlayer = try input.readInt32()

          case 26:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.candyCost += [try input.readInt32()]
            }
            input.popLimit(limit)

          case 34:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.stardustCost += [try input.readInt32()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder()
        if let jsonValueUpgradesPerLevel = jsonMap["upgradesPerLevel"] as? NSNumber {
          resultDecodedBuilder.upgradesPerLevel = jsonValueUpgradesPerLevel.intValue
        }
        if let jsonValueAllowedLevelsAbovePlayer = jsonMap["allowedLevelsAbovePlayer"] as? NSNumber {
          resultDecodedBuilder.allowedLevelsAbovePlayer = jsonValueAllowedLevelsAbovePlayer.intValue
        }
        if let jsonValueCandyCost = jsonMap["candyCost"] as? Array<NSNumber> {
          var jsonArrayCandyCost:Array<Int32> = []
          for oneValueCandyCost in jsonValueCandyCost {
            jsonArrayCandyCost += [oneValueCandyCost.intValue]
          }
          resultDecodedBuilder.candyCost = jsonArrayCandyCost
        }
        if let jsonValueStardustCost = jsonMap["stardustCost"] as? Array<NSNumber> {
          var jsonArrayStardustCost:Array<Int32> = []
          for oneValueStardustCost in jsonValueStardustCost {
            jsonArrayStardustCost += [oneValueStardustCost.intValue]
          }
          resultDecodedBuilder.stardustCost = jsonArrayStardustCost
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.PokemonUpgradeSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class TypeEffectiveSettings : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var attackScalar:Array<Float> = Array<Float>()
    private var attackScalarMemoizedSerializedSize:Int32 = -1
    public private(set) var attackType:Pogoprotos.Enums.PokemonType = Pogoprotos.Enums.PokemonType.PokemonTypeNone
    public private(set) var hasAttackType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !attackScalar.isEmpty {
        try output.writeRawVarint32(10)
        try output.writeRawVarint32(attackScalarMemoizedSerializedSize)
        for oneValueattackScalar in attackScalar {
          try output.writeFloatNoTag(oneValueattackScalar)
        }
      }
      if hasAttackType {
        try output.writeEnum(2, value:attackType.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeAttackScalar:Int32 = 0
      dataSizeAttackScalar = 4 * Int32(attackScalar.count)
      serialize_size += dataSizeAttackScalar
      if !attackScalar.isEmpty {
        serialize_size += 1
        serialize_size += dataSizeAttackScalar.computeInt32SizeNoTag()
      }
      attackScalarMemoizedSerializedSize = dataSizeAttackScalar
      if (hasAttackType) {
        serialize_size += attackType.rawValue.computeEnumSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Settings.Master.TypeEffectiveSettings> {
      var mergedArray = Array<Pogoprotos.Settings.Master.TypeEffectiveSettings>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings? {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Settings.Master.PogoprotosSettingsMasterRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return Pogoprotos.Settings.Master.TypeEffectiveSettings.classBuilder() as! Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder
    }
    public func getBuilder() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return classBuilder() as! Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Settings.Master.TypeEffectiveSettings) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !attackScalar.isEmpty {
        var jsonArrayAttackScalar:Array<NSNumber> = []
          for oneValueAttackScalar in attackScalar {
            jsonArrayAttackScalar += [NSNumber(float:oneValueAttackScalar)]
          }
        jsonMap["attackScalar"] = jsonArrayAttackScalar
      }
      if hasAttackType {
        jsonMap["attackType"] = attackType.toString()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
      return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var attackScalarElementIndex:Int = 0
      for oneValueAttackScalar in attackScalar  {
          output += "\(indent) attackScalar[\(attackScalarElementIndex)]: \(oneValueAttackScalar)\n"
          attackScalarElementIndex += 1
      }
      if (hasAttackType) {
        output += "\(indent) attackType: \(attackType.description)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueAttackScalar in attackScalar {
                hashCode = (hashCode &* 31) &+ oneValueAttackScalar.hashValue
            }
            if hasAttackType {
               hashCode = (hashCode &* 31) &+ Int(attackType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Settings.Master.TypeEffectiveSettings"
    }
    override public func className() -> String {
        return "Pogoprotos.Settings.Master.TypeEffectiveSettings"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Settings.Master.TypeEffectiveSettings.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Settings.Master.TypeEffectiveSettings = Pogoprotos.Settings.Master.TypeEffectiveSettings()
      public func getMessage() -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var attackScalar:Array<Float> {
           get {
               return builderResult.attackScalar
           }
           set (array) {
               builderResult.attackScalar = array
           }
      }
      public func setAttackScalar(value:Array<Float>) -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        self.attackScalar = value
        return self
      }
      public func clearAttackScalar() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
         builderResult.attackScalar.removeAll(keepCapacity: false)
         return self
      }
        public var hasAttackType:Bool{
            get {
                return builderResult.hasAttackType
            }
        }
        public var attackType:Pogoprotos.Enums.PokemonType {
            get {
                return builderResult.attackType
            }
            set (value) {
                builderResult.hasAttackType = true
                builderResult.attackType = value
            }
        }
        public func setAttackType(value:Pogoprotos.Enums.PokemonType) -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
          self.attackType = value
          return self
        }
        public func clearAttackType() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
           builderResult.hasAttackType = false
           builderResult.attackType = .PokemonTypeNone
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        builderResult = Pogoprotos.Settings.Master.TypeEffectiveSettings()
        return self
      }
      override public func clone() throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        return try Pogoprotos.Settings.Master.TypeEffectiveSettings.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Settings.Master.TypeEffectiveSettings {
        let returnMe:Pogoprotos.Settings.Master.TypeEffectiveSettings = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Settings.Master.TypeEffectiveSettings) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        if other == Pogoprotos.Settings.Master.TypeEffectiveSettings() {
         return self
        }
        if !other.attackScalar.isEmpty {
            builderResult.attackScalar += other.attackScalar
        }
        if other.hasAttackType {
             attackType = other.attackType
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.attackScalar += [try input.readFloat()]
            }
            input.popLimit(limit)

          case 16:
            let valueIntattackType = try input.readEnum()
            if let enumsattackType = Pogoprotos.Enums.PokemonType(rawValue:valueIntattackType){
                 attackType = enumsattackType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntattackType))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        let resultDecodedBuilder = Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder()
        if let jsonValueAttackScalar = jsonMap["attackScalar"] as? Array<NSNumber> {
          var jsonArrayAttackScalar:Array<Float> = []
          for oneValueAttackScalar in jsonValueAttackScalar {
            jsonArrayAttackScalar += [oneValueAttackScalar.floatValue]
          }
          resultDecodedBuilder.attackScalar = jsonArrayAttackScalar
        }
        if let jsonValueAttackType = jsonMap["attackType"] as? String {
          resultDecodedBuilder.attackType = try Pogoprotos.Enums.PokemonType.fromString(jsonValueAttackType)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Settings.Master.TypeEffectiveSettings.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
