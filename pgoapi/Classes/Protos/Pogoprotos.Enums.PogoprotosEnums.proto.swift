// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Enums.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Enums {
  public struct PogoprotosEnumsRoot {
    public static let `default` = PogoprotosEnumsRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum ActivityType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case activityUnknown = 0
    case activityCatchPokemon = 1
    case activityCatchLegendPokemon = 2
    case activityFleePokemon = 3
    case activityDefeatFort = 4
    case activityEvolvePokemon = 5
    case activityHatchEgg = 6
    case activityWalkKm = 7
    case activityPokedexEntryNew = 8
    case activityCatchFirstThrow = 9
    case activityCatchNiceThrow = 10
    case activityCatchGreatThrow = 11
    case activityCatchExcellentThrow = 12
    case activityCatchCurveball = 13
    case activityCatchFirstCatchOfDay = 14
    case activityCatchMilestone = 15
    case activityTrainPokemon = 16
    case activitySearchFort = 17
    case activityReleasePokemon = 18
    case activityHatchEggSmallBonus = 19
    case activityHatchEggMediumBonus = 20
    case activityHatchEggLargeBonus = 21
    case activityDefeatGymDefender = 22
    case activityDefeatGymLeader = 23
    public func toString() -> String {
      switch self {
      case .activityUnknown: return "ACTIVITY_UNKNOWN"
      case .activityCatchPokemon: return "ACTIVITY_CATCH_POKEMON"
      case .activityCatchLegendPokemon: return "ACTIVITY_CATCH_LEGEND_POKEMON"
      case .activityFleePokemon: return "ACTIVITY_FLEE_POKEMON"
      case .activityDefeatFort: return "ACTIVITY_DEFEAT_FORT"
      case .activityEvolvePokemon: return "ACTIVITY_EVOLVE_POKEMON"
      case .activityHatchEgg: return "ACTIVITY_HATCH_EGG"
      case .activityWalkKm: return "ACTIVITY_WALK_KM"
      case .activityPokedexEntryNew: return "ACTIVITY_POKEDEX_ENTRY_NEW"
      case .activityCatchFirstThrow: return "ACTIVITY_CATCH_FIRST_THROW"
      case .activityCatchNiceThrow: return "ACTIVITY_CATCH_NICE_THROW"
      case .activityCatchGreatThrow: return "ACTIVITY_CATCH_GREAT_THROW"
      case .activityCatchExcellentThrow: return "ACTIVITY_CATCH_EXCELLENT_THROW"
      case .activityCatchCurveball: return "ACTIVITY_CATCH_CURVEBALL"
      case .activityCatchFirstCatchOfDay: return "ACTIVITY_CATCH_FIRST_CATCH_OF_DAY"
      case .activityCatchMilestone: return "ACTIVITY_CATCH_MILESTONE"
      case .activityTrainPokemon: return "ACTIVITY_TRAIN_POKEMON"
      case .activitySearchFort: return "ACTIVITY_SEARCH_FORT"
      case .activityReleasePokemon: return "ACTIVITY_RELEASE_POKEMON"
      case .activityHatchEggSmallBonus: return "ACTIVITY_HATCH_EGG_SMALL_BONUS"
      case .activityHatchEggMediumBonus: return "ACTIVITY_HATCH_EGG_MEDIUM_BONUS"
      case .activityHatchEggLargeBonus: return "ACTIVITY_HATCH_EGG_LARGE_BONUS"
      case .activityDefeatGymDefender: return "ACTIVITY_DEFEAT_GYM_DEFENDER"
      case .activityDefeatGymLeader: return "ACTIVITY_DEFEAT_GYM_LEADER"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.ActivityType {
      switch str {
      case "ACTIVITY_UNKNOWN":  return .activityUnknown
      case "ACTIVITY_CATCH_POKEMON":  return .activityCatchPokemon
      case "ACTIVITY_CATCH_LEGEND_POKEMON":  return .activityCatchLegendPokemon
      case "ACTIVITY_FLEE_POKEMON":  return .activityFleePokemon
      case "ACTIVITY_DEFEAT_FORT":  return .activityDefeatFort
      case "ACTIVITY_EVOLVE_POKEMON":  return .activityEvolvePokemon
      case "ACTIVITY_HATCH_EGG":  return .activityHatchEgg
      case "ACTIVITY_WALK_KM":  return .activityWalkKm
      case "ACTIVITY_POKEDEX_ENTRY_NEW":  return .activityPokedexEntryNew
      case "ACTIVITY_CATCH_FIRST_THROW":  return .activityCatchFirstThrow
      case "ACTIVITY_CATCH_NICE_THROW":  return .activityCatchNiceThrow
      case "ACTIVITY_CATCH_GREAT_THROW":  return .activityCatchGreatThrow
      case "ACTIVITY_CATCH_EXCELLENT_THROW":  return .activityCatchExcellentThrow
      case "ACTIVITY_CATCH_CURVEBALL":  return .activityCatchCurveball
      case "ACTIVITY_CATCH_FIRST_CATCH_OF_DAY":  return .activityCatchFirstCatchOfDay
      case "ACTIVITY_CATCH_MILESTONE":  return .activityCatchMilestone
      case "ACTIVITY_TRAIN_POKEMON":  return .activityTrainPokemon
      case "ACTIVITY_SEARCH_FORT":  return .activitySearchFort
      case "ACTIVITY_RELEASE_POKEMON":  return .activityReleasePokemon
      case "ACTIVITY_HATCH_EGG_SMALL_BONUS":  return .activityHatchEggSmallBonus
      case "ACTIVITY_HATCH_EGG_MEDIUM_BONUS":  return .activityHatchEggMediumBonus
      case "ACTIVITY_HATCH_EGG_LARGE_BONUS":  return .activityHatchEggLargeBonus
      case "ACTIVITY_DEFEAT_GYM_DEFENDER":  return .activityDefeatGymDefender
      case "ACTIVITY_DEFEAT_GYM_LEADER":  return .activityDefeatGymLeader
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .activityUnknown: return ".activityUnknown"
      case .activityCatchPokemon: return ".activityCatchPokemon"
      case .activityCatchLegendPokemon: return ".activityCatchLegendPokemon"
      case .activityFleePokemon: return ".activityFleePokemon"
      case .activityDefeatFort: return ".activityDefeatFort"
      case .activityEvolvePokemon: return ".activityEvolvePokemon"
      case .activityHatchEgg: return ".activityHatchEgg"
      case .activityWalkKm: return ".activityWalkKm"
      case .activityPokedexEntryNew: return ".activityPokedexEntryNew"
      case .activityCatchFirstThrow: return ".activityCatchFirstThrow"
      case .activityCatchNiceThrow: return ".activityCatchNiceThrow"
      case .activityCatchGreatThrow: return ".activityCatchGreatThrow"
      case .activityCatchExcellentThrow: return ".activityCatchExcellentThrow"
      case .activityCatchCurveball: return ".activityCatchCurveball"
      case .activityCatchFirstCatchOfDay: return ".activityCatchFirstCatchOfDay"
      case .activityCatchMilestone: return ".activityCatchMilestone"
      case .activityTrainPokemon: return ".activityTrainPokemon"
      case .activitySearchFort: return ".activitySearchFort"
      case .activityReleasePokemon: return ".activityReleasePokemon"
      case .activityHatchEggSmallBonus: return ".activityHatchEggSmallBonus"
      case .activityHatchEggMediumBonus: return ".activityHatchEggMediumBonus"
      case .activityHatchEggLargeBonus: return ".activityHatchEggLargeBonus"
      case .activityDefeatGymDefender: return ".activityDefeatGymDefender"
      case .activityDefeatGymLeader: return ".activityDefeatGymLeader"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum BadgeType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case badgeUnset = 0
    case badgeTravelKm = 1
    case badgePokedexEntries = 2
    case badgeCaptureTotal = 3
    case badgeDefeatedFort = 4
    case badgeEvolvedTotal = 5
    case badgeHatchedTotal = 6
    case badgeEncounteredTotal = 7
    case badgePokestopsVisited = 8
    case badgeUniquePokestops = 9
    case badgePokeballThrown = 10
    case badgeBigMagikarp = 11
    case badgeDeployedTotal = 12
    case badgeBattleAttackWon = 13
    case badgeBattleTrainingWon = 14
    case badgeBattleDefendWon = 15
    case badgePrestigeRaised = 16
    case badgePrestigeDropped = 17
    case badgeTypeNormal = 18
    case badgeTypeFighting = 19
    case badgeTypeFlying = 20
    case badgeTypePoison = 21
    case badgeTypeGround = 22
    case badgeTypeRock = 23
    case badgeTypeBug = 24
    case badgeTypeGhost = 25
    case badgeTypeSteel = 26
    case badgeTypeFire = 27
    case badgeTypeWater = 28
    case badgeTypeGrass = 29
    case badgeTypeElectric = 30
    case badgeTypePsychic = 31
    case badgeTypeIce = 32
    case badgeTypeDragon = 33
    case badgeTypeDark = 34
    case badgeTypeFairy = 35
    case badgeSmallRattata = 36
    case badgePikachu = 37
    public func toString() -> String {
      switch self {
      case .badgeUnset: return "BADGE_UNSET"
      case .badgeTravelKm: return "BADGE_TRAVEL_KM"
      case .badgePokedexEntries: return "BADGE_POKEDEX_ENTRIES"
      case .badgeCaptureTotal: return "BADGE_CAPTURE_TOTAL"
      case .badgeDefeatedFort: return "BADGE_DEFEATED_FORT"
      case .badgeEvolvedTotal: return "BADGE_EVOLVED_TOTAL"
      case .badgeHatchedTotal: return "BADGE_HATCHED_TOTAL"
      case .badgeEncounteredTotal: return "BADGE_ENCOUNTERED_TOTAL"
      case .badgePokestopsVisited: return "BADGE_POKESTOPS_VISITED"
      case .badgeUniquePokestops: return "BADGE_UNIQUE_POKESTOPS"
      case .badgePokeballThrown: return "BADGE_POKEBALL_THROWN"
      case .badgeBigMagikarp: return "BADGE_BIG_MAGIKARP"
      case .badgeDeployedTotal: return "BADGE_DEPLOYED_TOTAL"
      case .badgeBattleAttackWon: return "BADGE_BATTLE_ATTACK_WON"
      case .badgeBattleTrainingWon: return "BADGE_BATTLE_TRAINING_WON"
      case .badgeBattleDefendWon: return "BADGE_BATTLE_DEFEND_WON"
      case .badgePrestigeRaised: return "BADGE_PRESTIGE_RAISED"
      case .badgePrestigeDropped: return "BADGE_PRESTIGE_DROPPED"
      case .badgeTypeNormal: return "BADGE_TYPE_NORMAL"
      case .badgeTypeFighting: return "BADGE_TYPE_FIGHTING"
      case .badgeTypeFlying: return "BADGE_TYPE_FLYING"
      case .badgeTypePoison: return "BADGE_TYPE_POISON"
      case .badgeTypeGround: return "BADGE_TYPE_GROUND"
      case .badgeTypeRock: return "BADGE_TYPE_ROCK"
      case .badgeTypeBug: return "BADGE_TYPE_BUG"
      case .badgeTypeGhost: return "BADGE_TYPE_GHOST"
      case .badgeTypeSteel: return "BADGE_TYPE_STEEL"
      case .badgeTypeFire: return "BADGE_TYPE_FIRE"
      case .badgeTypeWater: return "BADGE_TYPE_WATER"
      case .badgeTypeGrass: return "BADGE_TYPE_GRASS"
      case .badgeTypeElectric: return "BADGE_TYPE_ELECTRIC"
      case .badgeTypePsychic: return "BADGE_TYPE_PSYCHIC"
      case .badgeTypeIce: return "BADGE_TYPE_ICE"
      case .badgeTypeDragon: return "BADGE_TYPE_DRAGON"
      case .badgeTypeDark: return "BADGE_TYPE_DARK"
      case .badgeTypeFairy: return "BADGE_TYPE_FAIRY"
      case .badgeSmallRattata: return "BADGE_SMALL_RATTATA"
      case .badgePikachu: return "BADGE_PIKACHU"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.BadgeType {
      switch str {
      case "BADGE_UNSET":  return .badgeUnset
      case "BADGE_TRAVEL_KM":  return .badgeTravelKm
      case "BADGE_POKEDEX_ENTRIES":  return .badgePokedexEntries
      case "BADGE_CAPTURE_TOTAL":  return .badgeCaptureTotal
      case "BADGE_DEFEATED_FORT":  return .badgeDefeatedFort
      case "BADGE_EVOLVED_TOTAL":  return .badgeEvolvedTotal
      case "BADGE_HATCHED_TOTAL":  return .badgeHatchedTotal
      case "BADGE_ENCOUNTERED_TOTAL":  return .badgeEncounteredTotal
      case "BADGE_POKESTOPS_VISITED":  return .badgePokestopsVisited
      case "BADGE_UNIQUE_POKESTOPS":  return .badgeUniquePokestops
      case "BADGE_POKEBALL_THROWN":  return .badgePokeballThrown
      case "BADGE_BIG_MAGIKARP":  return .badgeBigMagikarp
      case "BADGE_DEPLOYED_TOTAL":  return .badgeDeployedTotal
      case "BADGE_BATTLE_ATTACK_WON":  return .badgeBattleAttackWon
      case "BADGE_BATTLE_TRAINING_WON":  return .badgeBattleTrainingWon
      case "BADGE_BATTLE_DEFEND_WON":  return .badgeBattleDefendWon
      case "BADGE_PRESTIGE_RAISED":  return .badgePrestigeRaised
      case "BADGE_PRESTIGE_DROPPED":  return .badgePrestigeDropped
      case "BADGE_TYPE_NORMAL":  return .badgeTypeNormal
      case "BADGE_TYPE_FIGHTING":  return .badgeTypeFighting
      case "BADGE_TYPE_FLYING":  return .badgeTypeFlying
      case "BADGE_TYPE_POISON":  return .badgeTypePoison
      case "BADGE_TYPE_GROUND":  return .badgeTypeGround
      case "BADGE_TYPE_ROCK":  return .badgeTypeRock
      case "BADGE_TYPE_BUG":  return .badgeTypeBug
      case "BADGE_TYPE_GHOST":  return .badgeTypeGhost
      case "BADGE_TYPE_STEEL":  return .badgeTypeSteel
      case "BADGE_TYPE_FIRE":  return .badgeTypeFire
      case "BADGE_TYPE_WATER":  return .badgeTypeWater
      case "BADGE_TYPE_GRASS":  return .badgeTypeGrass
      case "BADGE_TYPE_ELECTRIC":  return .badgeTypeElectric
      case "BADGE_TYPE_PSYCHIC":  return .badgeTypePsychic
      case "BADGE_TYPE_ICE":  return .badgeTypeIce
      case "BADGE_TYPE_DRAGON":  return .badgeTypeDragon
      case "BADGE_TYPE_DARK":  return .badgeTypeDark
      case "BADGE_TYPE_FAIRY":  return .badgeTypeFairy
      case "BADGE_SMALL_RATTATA":  return .badgeSmallRattata
      case "BADGE_PIKACHU":  return .badgePikachu
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .badgeUnset: return ".badgeUnset"
      case .badgeTravelKm: return ".badgeTravelKm"
      case .badgePokedexEntries: return ".badgePokedexEntries"
      case .badgeCaptureTotal: return ".badgeCaptureTotal"
      case .badgeDefeatedFort: return ".badgeDefeatedFort"
      case .badgeEvolvedTotal: return ".badgeEvolvedTotal"
      case .badgeHatchedTotal: return ".badgeHatchedTotal"
      case .badgeEncounteredTotal: return ".badgeEncounteredTotal"
      case .badgePokestopsVisited: return ".badgePokestopsVisited"
      case .badgeUniquePokestops: return ".badgeUniquePokestops"
      case .badgePokeballThrown: return ".badgePokeballThrown"
      case .badgeBigMagikarp: return ".badgeBigMagikarp"
      case .badgeDeployedTotal: return ".badgeDeployedTotal"
      case .badgeBattleAttackWon: return ".badgeBattleAttackWon"
      case .badgeBattleTrainingWon: return ".badgeBattleTrainingWon"
      case .badgeBattleDefendWon: return ".badgeBattleDefendWon"
      case .badgePrestigeRaised: return ".badgePrestigeRaised"
      case .badgePrestigeDropped: return ".badgePrestigeDropped"
      case .badgeTypeNormal: return ".badgeTypeNormal"
      case .badgeTypeFighting: return ".badgeTypeFighting"
      case .badgeTypeFlying: return ".badgeTypeFlying"
      case .badgeTypePoison: return ".badgeTypePoison"
      case .badgeTypeGround: return ".badgeTypeGround"
      case .badgeTypeRock: return ".badgeTypeRock"
      case .badgeTypeBug: return ".badgeTypeBug"
      case .badgeTypeGhost: return ".badgeTypeGhost"
      case .badgeTypeSteel: return ".badgeTypeSteel"
      case .badgeTypeFire: return ".badgeTypeFire"
      case .badgeTypeWater: return ".badgeTypeWater"
      case .badgeTypeGrass: return ".badgeTypeGrass"
      case .badgeTypeElectric: return ".badgeTypeElectric"
      case .badgeTypePsychic: return ".badgeTypePsychic"
      case .badgeTypeIce: return ".badgeTypeIce"
      case .badgeTypeDragon: return ".badgeTypeDragon"
      case .badgeTypeDark: return ".badgeTypeDark"
      case .badgeTypeFairy: return ".badgeTypeFairy"
      case .badgeSmallRattata: return ".badgeSmallRattata"
      case .badgePikachu: return ".badgePikachu"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum CameraInterpolation:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case camInterpCut = 0
    case camInterpLinear = 1
    case camInterpSmooth = 2
    case camInterpSmoothRotLinearMove = 3
    case camInterpDepends = 4
    public func toString() -> String {
      switch self {
      case .camInterpCut: return "CAM_INTERP_CUT"
      case .camInterpLinear: return "CAM_INTERP_LINEAR"
      case .camInterpSmooth: return "CAM_INTERP_SMOOTH"
      case .camInterpSmoothRotLinearMove: return "CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE"
      case .camInterpDepends: return "CAM_INTERP_DEPENDS"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.CameraInterpolation {
      switch str {
      case "CAM_INTERP_CUT":  return .camInterpCut
      case "CAM_INTERP_LINEAR":  return .camInterpLinear
      case "CAM_INTERP_SMOOTH":  return .camInterpSmooth
      case "CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE":  return .camInterpSmoothRotLinearMove
      case "CAM_INTERP_DEPENDS":  return .camInterpDepends
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .camInterpCut: return ".camInterpCut"
      case .camInterpLinear: return ".camInterpLinear"
      case .camInterpSmooth: return ".camInterpSmooth"
      case .camInterpSmoothRotLinearMove: return ".camInterpSmoothRotLinearMove"
      case .camInterpDepends: return ".camInterpDepends"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum CameraTarget:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case camTargetAttacker = 0
    case camTargetAttackerEdge = 1
    case camTargetAttackerGround = 2
    case camTargetDefender = 3
    case camTargetDefenderEdge = 4
    case camTargetDefenderGround = 5
    case camTargetAttackerDefender = 6
    case camTargetAttackerDefenderEdge = 7
    case camTargetDefenderAttacker = 8
    case camTargetDefenderAttackerEdge = 9
    case camTargetAttackerDefenderMirror = 11
    case camTargetShoulderAttackerDefender = 12
    case camTargetShoulderAttackerDefenderMirror = 13
    case camTargetAttackerDefenderWorld = 14
    public func toString() -> String {
      switch self {
      case .camTargetAttacker: return "CAM_TARGET_ATTACKER"
      case .camTargetAttackerEdge: return "CAM_TARGET_ATTACKER_EDGE"
      case .camTargetAttackerGround: return "CAM_TARGET_ATTACKER_GROUND"
      case .camTargetDefender: return "CAM_TARGET_DEFENDER"
      case .camTargetDefenderEdge: return "CAM_TARGET_DEFENDER_EDGE"
      case .camTargetDefenderGround: return "CAM_TARGET_DEFENDER_GROUND"
      case .camTargetAttackerDefender: return "CAM_TARGET_ATTACKER_DEFENDER"
      case .camTargetAttackerDefenderEdge: return "CAM_TARGET_ATTACKER_DEFENDER_EDGE"
      case .camTargetDefenderAttacker: return "CAM_TARGET_DEFENDER_ATTACKER"
      case .camTargetDefenderAttackerEdge: return "CAM_TARGET_DEFENDER_ATTACKER_EDGE"
      case .camTargetAttackerDefenderMirror: return "CAM_TARGET_ATTACKER_DEFENDER_MIRROR"
      case .camTargetShoulderAttackerDefender: return "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER"
      case .camTargetShoulderAttackerDefenderMirror: return "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER_MIRROR"
      case .camTargetAttackerDefenderWorld: return "CAM_TARGET_ATTACKER_DEFENDER_WORLD"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.CameraTarget {
      switch str {
      case "CAM_TARGET_ATTACKER":  return .camTargetAttacker
      case "CAM_TARGET_ATTACKER_EDGE":  return .camTargetAttackerEdge
      case "CAM_TARGET_ATTACKER_GROUND":  return .camTargetAttackerGround
      case "CAM_TARGET_DEFENDER":  return .camTargetDefender
      case "CAM_TARGET_DEFENDER_EDGE":  return .camTargetDefenderEdge
      case "CAM_TARGET_DEFENDER_GROUND":  return .camTargetDefenderGround
      case "CAM_TARGET_ATTACKER_DEFENDER":  return .camTargetAttackerDefender
      case "CAM_TARGET_ATTACKER_DEFENDER_EDGE":  return .camTargetAttackerDefenderEdge
      case "CAM_TARGET_DEFENDER_ATTACKER":  return .camTargetDefenderAttacker
      case "CAM_TARGET_DEFENDER_ATTACKER_EDGE":  return .camTargetDefenderAttackerEdge
      case "CAM_TARGET_ATTACKER_DEFENDER_MIRROR":  return .camTargetAttackerDefenderMirror
      case "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER":  return .camTargetShoulderAttackerDefender
      case "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER_MIRROR":  return .camTargetShoulderAttackerDefenderMirror
      case "CAM_TARGET_ATTACKER_DEFENDER_WORLD":  return .camTargetAttackerDefenderWorld
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .camTargetAttacker: return ".camTargetAttacker"
      case .camTargetAttackerEdge: return ".camTargetAttackerEdge"
      case .camTargetAttackerGround: return ".camTargetAttackerGround"
      case .camTargetDefender: return ".camTargetDefender"
      case .camTargetDefenderEdge: return ".camTargetDefenderEdge"
      case .camTargetDefenderGround: return ".camTargetDefenderGround"
      case .camTargetAttackerDefender: return ".camTargetAttackerDefender"
      case .camTargetAttackerDefenderEdge: return ".camTargetAttackerDefenderEdge"
      case .camTargetDefenderAttacker: return ".camTargetDefenderAttacker"
      case .camTargetDefenderAttackerEdge: return ".camTargetDefenderAttackerEdge"
      case .camTargetAttackerDefenderMirror: return ".camTargetAttackerDefenderMirror"
      case .camTargetShoulderAttackerDefender: return ".camTargetShoulderAttackerDefender"
      case .camTargetShoulderAttackerDefenderMirror: return ".camTargetShoulderAttackerDefenderMirror"
      case .camTargetAttackerDefenderWorld: return ".camTargetAttackerDefenderWorld"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum Gender:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case male = 0
    case female = 1
    public func toString() -> String {
      switch self {
      case .male: return "MALE"
      case .female: return "FEMALE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.Gender {
      switch str {
      case "MALE":  return .male
      case "FEMALE":  return .female
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .male: return ".male"
      case .female: return ".female"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum HoloIapItemCategory:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case iapCategoryNone = 0
    case iapCategoryBundle = 1
    case iapCategoryItems = 2
    case iapCategoryUpgrades = 3
    case iapCategoryPokecoins = 4
    public func toString() -> String {
      switch self {
      case .iapCategoryNone: return "IAP_CATEGORY_NONE"
      case .iapCategoryBundle: return "IAP_CATEGORY_BUNDLE"
      case .iapCategoryItems: return "IAP_CATEGORY_ITEMS"
      case .iapCategoryUpgrades: return "IAP_CATEGORY_UPGRADES"
      case .iapCategoryPokecoins: return "IAP_CATEGORY_POKECOINS"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.HoloIapItemCategory {
      switch str {
      case "IAP_CATEGORY_NONE":  return .iapCategoryNone
      case "IAP_CATEGORY_BUNDLE":  return .iapCategoryBundle
      case "IAP_CATEGORY_ITEMS":  return .iapCategoryItems
      case "IAP_CATEGORY_UPGRADES":  return .iapCategoryUpgrades
      case "IAP_CATEGORY_POKECOINS":  return .iapCategoryPokecoins
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .iapCategoryNone: return ".iapCategoryNone"
      case .iapCategoryBundle: return ".iapCategoryBundle"
      case .iapCategoryItems: return ".iapCategoryItems"
      case .iapCategoryUpgrades: return ".iapCategoryUpgrades"
      case .iapCategoryPokecoins: return ".iapCategoryPokecoins"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum ItemCategory:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case itemCategoryNone = 0
    case itemCategoryPokeball = 1
    case itemCategoryFood = 2
    case itemCategoryMedicine = 3
    case itemCategoryBoost = 4
    case itemCategoryUtilites = 5
    case itemCategoryCamera = 6
    case itemCategoryDisk = 7
    case itemCategoryIncubator = 8
    case itemCategoryIncense = 9
    case itemCategoryXpBoost = 10
    case itemCategoryInventoryUpgrade = 11
    public func toString() -> String {
      switch self {
      case .itemCategoryNone: return "ITEM_CATEGORY_NONE"
      case .itemCategoryPokeball: return "ITEM_CATEGORY_POKEBALL"
      case .itemCategoryFood: return "ITEM_CATEGORY_FOOD"
      case .itemCategoryMedicine: return "ITEM_CATEGORY_MEDICINE"
      case .itemCategoryBoost: return "ITEM_CATEGORY_BOOST"
      case .itemCategoryUtilites: return "ITEM_CATEGORY_UTILITES"
      case .itemCategoryCamera: return "ITEM_CATEGORY_CAMERA"
      case .itemCategoryDisk: return "ITEM_CATEGORY_DISK"
      case .itemCategoryIncubator: return "ITEM_CATEGORY_INCUBATOR"
      case .itemCategoryIncense: return "ITEM_CATEGORY_INCENSE"
      case .itemCategoryXpBoost: return "ITEM_CATEGORY_XP_BOOST"
      case .itemCategoryInventoryUpgrade: return "ITEM_CATEGORY_INVENTORY_UPGRADE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.ItemCategory {
      switch str {
      case "ITEM_CATEGORY_NONE":  return .itemCategoryNone
      case "ITEM_CATEGORY_POKEBALL":  return .itemCategoryPokeball
      case "ITEM_CATEGORY_FOOD":  return .itemCategoryFood
      case "ITEM_CATEGORY_MEDICINE":  return .itemCategoryMedicine
      case "ITEM_CATEGORY_BOOST":  return .itemCategoryBoost
      case "ITEM_CATEGORY_UTILITES":  return .itemCategoryUtilites
      case "ITEM_CATEGORY_CAMERA":  return .itemCategoryCamera
      case "ITEM_CATEGORY_DISK":  return .itemCategoryDisk
      case "ITEM_CATEGORY_INCUBATOR":  return .itemCategoryIncubator
      case "ITEM_CATEGORY_INCENSE":  return .itemCategoryIncense
      case "ITEM_CATEGORY_XP_BOOST":  return .itemCategoryXpBoost
      case "ITEM_CATEGORY_INVENTORY_UPGRADE":  return .itemCategoryInventoryUpgrade
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .itemCategoryNone: return ".itemCategoryNone"
      case .itemCategoryPokeball: return ".itemCategoryPokeball"
      case .itemCategoryFood: return ".itemCategoryFood"
      case .itemCategoryMedicine: return ".itemCategoryMedicine"
      case .itemCategoryBoost: return ".itemCategoryBoost"
      case .itemCategoryUtilites: return ".itemCategoryUtilites"
      case .itemCategoryCamera: return ".itemCategoryCamera"
      case .itemCategoryDisk: return ".itemCategoryDisk"
      case .itemCategoryIncubator: return ".itemCategoryIncubator"
      case .itemCategoryIncense: return ".itemCategoryIncense"
      case .itemCategoryXpBoost: return ".itemCategoryXpBoost"
      case .itemCategoryInventoryUpgrade: return ".itemCategoryInventoryUpgrade"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum ItemEffect:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case itemEffectNone = 0
    case itemEffectCapNoFlee = 1000
    case itemEffectCapNoMovement = 1002
    case itemEffectCapNoThreat = 1003
    case itemEffectCapTargetMax = 1004
    case itemEffectCapTargetSlow = 1005
    case itemEffectCapChanceNight = 1006
    case itemEffectCapChanceTrainer = 1007
    case itemEffectCapChanceFirstThrow = 1008
    case itemEffectCapChanceLegend = 1009
    case itemEffectCapChanceHeavy = 1010
    case itemEffectCapChanceRepeat = 1011
    case itemEffectCapChanceMultiThrow = 1012
    case itemEffectCapChanceAlways = 1013
    case itemEffectCapChanceSingleThrow = 1014
    public func toString() -> String {
      switch self {
      case .itemEffectNone: return "ITEM_EFFECT_NONE"
      case .itemEffectCapNoFlee: return "ITEM_EFFECT_CAP_NO_FLEE"
      case .itemEffectCapNoMovement: return "ITEM_EFFECT_CAP_NO_MOVEMENT"
      case .itemEffectCapNoThreat: return "ITEM_EFFECT_CAP_NO_THREAT"
      case .itemEffectCapTargetMax: return "ITEM_EFFECT_CAP_TARGET_MAX"
      case .itemEffectCapTargetSlow: return "ITEM_EFFECT_CAP_TARGET_SLOW"
      case .itemEffectCapChanceNight: return "ITEM_EFFECT_CAP_CHANCE_NIGHT"
      case .itemEffectCapChanceTrainer: return "ITEM_EFFECT_CAP_CHANCE_TRAINER"
      case .itemEffectCapChanceFirstThrow: return "ITEM_EFFECT_CAP_CHANCE_FIRST_THROW"
      case .itemEffectCapChanceLegend: return "ITEM_EFFECT_CAP_CHANCE_LEGEND"
      case .itemEffectCapChanceHeavy: return "ITEM_EFFECT_CAP_CHANCE_HEAVY"
      case .itemEffectCapChanceRepeat: return "ITEM_EFFECT_CAP_CHANCE_REPEAT"
      case .itemEffectCapChanceMultiThrow: return "ITEM_EFFECT_CAP_CHANCE_MULTI_THROW"
      case .itemEffectCapChanceAlways: return "ITEM_EFFECT_CAP_CHANCE_ALWAYS"
      case .itemEffectCapChanceSingleThrow: return "ITEM_EFFECT_CAP_CHANCE_SINGLE_THROW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.ItemEffect {
      switch str {
      case "ITEM_EFFECT_NONE":  return .itemEffectNone
      case "ITEM_EFFECT_CAP_NO_FLEE":  return .itemEffectCapNoFlee
      case "ITEM_EFFECT_CAP_NO_MOVEMENT":  return .itemEffectCapNoMovement
      case "ITEM_EFFECT_CAP_NO_THREAT":  return .itemEffectCapNoThreat
      case "ITEM_EFFECT_CAP_TARGET_MAX":  return .itemEffectCapTargetMax
      case "ITEM_EFFECT_CAP_TARGET_SLOW":  return .itemEffectCapTargetSlow
      case "ITEM_EFFECT_CAP_CHANCE_NIGHT":  return .itemEffectCapChanceNight
      case "ITEM_EFFECT_CAP_CHANCE_TRAINER":  return .itemEffectCapChanceTrainer
      case "ITEM_EFFECT_CAP_CHANCE_FIRST_THROW":  return .itemEffectCapChanceFirstThrow
      case "ITEM_EFFECT_CAP_CHANCE_LEGEND":  return .itemEffectCapChanceLegend
      case "ITEM_EFFECT_CAP_CHANCE_HEAVY":  return .itemEffectCapChanceHeavy
      case "ITEM_EFFECT_CAP_CHANCE_REPEAT":  return .itemEffectCapChanceRepeat
      case "ITEM_EFFECT_CAP_CHANCE_MULTI_THROW":  return .itemEffectCapChanceMultiThrow
      case "ITEM_EFFECT_CAP_CHANCE_ALWAYS":  return .itemEffectCapChanceAlways
      case "ITEM_EFFECT_CAP_CHANCE_SINGLE_THROW":  return .itemEffectCapChanceSingleThrow
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .itemEffectNone: return ".itemEffectNone"
      case .itemEffectCapNoFlee: return ".itemEffectCapNoFlee"
      case .itemEffectCapNoMovement: return ".itemEffectCapNoMovement"
      case .itemEffectCapNoThreat: return ".itemEffectCapNoThreat"
      case .itemEffectCapTargetMax: return ".itemEffectCapTargetMax"
      case .itemEffectCapTargetSlow: return ".itemEffectCapTargetSlow"
      case .itemEffectCapChanceNight: return ".itemEffectCapChanceNight"
      case .itemEffectCapChanceTrainer: return ".itemEffectCapChanceTrainer"
      case .itemEffectCapChanceFirstThrow: return ".itemEffectCapChanceFirstThrow"
      case .itemEffectCapChanceLegend: return ".itemEffectCapChanceLegend"
      case .itemEffectCapChanceHeavy: return ".itemEffectCapChanceHeavy"
      case .itemEffectCapChanceRepeat: return ".itemEffectCapChanceRepeat"
      case .itemEffectCapChanceMultiThrow: return ".itemEffectCapChanceMultiThrow"
      case .itemEffectCapChanceAlways: return ".itemEffectCapChanceAlways"
      case .itemEffectCapChanceSingleThrow: return ".itemEffectCapChanceSingleThrow"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum Platform:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case unset = 0
    case ios = 1
    case android = 2
    case osx = 3
    case windows = 4
    public func toString() -> String {
      switch self {
      case .unset: return "UNSET"
      case .ios: return "IOS"
      case .android: return "ANDROID"
      case .osx: return "OSX"
      case .windows: return "WINDOWS"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.Platform {
      switch str {
      case "UNSET":  return .unset
      case "IOS":  return .ios
      case "ANDROID":  return .android
      case "OSX":  return .osx
      case "WINDOWS":  return .windows
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .unset: return ".unset"
      case .ios: return ".ios"
      case .android: return ".android"
      case .osx: return ".osx"
      case .windows: return ".windows"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonFamilyId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case familyUnset = 0
    case familyBulbasaur = 1
    case familyCharmander = 4
    case familySquirtle = 7
    case familyCaterpie = 10
    case familyWeedle = 13
    case familyPidgey = 16
    case familyRattata = 19
    case familySpearow = 21
    case familyEkans = 23
    case familyPikachu = 25
    case familySandshrew = 27
    case familyNidoranFemale = 29
    case familyNidoranMale = 32
    case familyClefairy = 35
    case familyVulpix = 37
    case familyJigglypuff = 39
    case familyZubat = 41
    case familyOddish = 43
    case familyParas = 46
    case familyVenonat = 48
    case familyDiglett = 50
    case familyMeowth = 52
    case familyPsyduck = 54
    case familyMankey = 56
    case familyGrowlithe = 58
    case familyPoliwag = 60
    case familyAbra = 63
    case familyMachop = 66
    case familyBellsprout = 69
    case familyTentacool = 72
    case familyGeodude = 74
    case familyPonyta = 77
    case familySlowpoke = 79
    case familyMagnemite = 81
    case familyFarfetchd = 83
    case familyDoduo = 84
    case familySeel = 86
    case familyGrimer = 88
    case familyShellder = 90
    case familyGastly = 92
    case familyOnix = 95
    case familyDrowzee = 96
    case familyHypno = 97
    case familyKrabby = 98
    case familyVoltorb = 100
    case familyExeggcute = 102
    case familyCubone = 104
    case familyHitmonlee = 106
    case familyHitmonchan = 107
    case familyLickitung = 108
    case familyKoffing = 109
    case familyRhyhorn = 111
    case familyChansey = 113
    case familyTangela = 114
    case familyKangaskhan = 115
    case familyHorsea = 116
    case familyGoldeen = 118
    case familyStaryu = 120
    case familyMrMime = 122
    case familyScyther = 123
    case familyJynx = 124
    case familyElectabuzz = 125
    case familyMagmar = 126
    case familyPinsir = 127
    case familyTauros = 128
    case familyMagikarp = 129
    case familyLapras = 131
    case familyDitto = 132
    case familyEevee = 133
    case familyPorygon = 137
    case familyOmanyte = 138
    case familyKabuto = 140
    case familyAerodactyl = 142
    case familySnorlax = 143
    case familyArticuno = 144
    case familyZapdos = 145
    case familyMoltres = 146
    case familyDratini = 147
    case familyMewtwo = 150
    case familyMew = 151
    public func toString() -> String {
      switch self {
      case .familyUnset: return "FAMILY_UNSET"
      case .familyBulbasaur: return "FAMILY_BULBASAUR"
      case .familyCharmander: return "FAMILY_CHARMANDER"
      case .familySquirtle: return "FAMILY_SQUIRTLE"
      case .familyCaterpie: return "FAMILY_CATERPIE"
      case .familyWeedle: return "FAMILY_WEEDLE"
      case .familyPidgey: return "FAMILY_PIDGEY"
      case .familyRattata: return "FAMILY_RATTATA"
      case .familySpearow: return "FAMILY_SPEAROW"
      case .familyEkans: return "FAMILY_EKANS"
      case .familyPikachu: return "FAMILY_PIKACHU"
      case .familySandshrew: return "FAMILY_SANDSHREW"
      case .familyNidoranFemale: return "FAMILY_NIDORAN_FEMALE"
      case .familyNidoranMale: return "FAMILY_NIDORAN_MALE"
      case .familyClefairy: return "FAMILY_CLEFAIRY"
      case .familyVulpix: return "FAMILY_VULPIX"
      case .familyJigglypuff: return "FAMILY_JIGGLYPUFF"
      case .familyZubat: return "FAMILY_ZUBAT"
      case .familyOddish: return "FAMILY_ODDISH"
      case .familyParas: return "FAMILY_PARAS"
      case .familyVenonat: return "FAMILY_VENONAT"
      case .familyDiglett: return "FAMILY_DIGLETT"
      case .familyMeowth: return "FAMILY_MEOWTH"
      case .familyPsyduck: return "FAMILY_PSYDUCK"
      case .familyMankey: return "FAMILY_MANKEY"
      case .familyGrowlithe: return "FAMILY_GROWLITHE"
      case .familyPoliwag: return "FAMILY_POLIWAG"
      case .familyAbra: return "FAMILY_ABRA"
      case .familyMachop: return "FAMILY_MACHOP"
      case .familyBellsprout: return "FAMILY_BELLSPROUT"
      case .familyTentacool: return "FAMILY_TENTACOOL"
      case .familyGeodude: return "FAMILY_GEODUDE"
      case .familyPonyta: return "FAMILY_PONYTA"
      case .familySlowpoke: return "FAMILY_SLOWPOKE"
      case .familyMagnemite: return "FAMILY_MAGNEMITE"
      case .familyFarfetchd: return "FAMILY_FARFETCHD"
      case .familyDoduo: return "FAMILY_DODUO"
      case .familySeel: return "FAMILY_SEEL"
      case .familyGrimer: return "FAMILY_GRIMER"
      case .familyShellder: return "FAMILY_SHELLDER"
      case .familyGastly: return "FAMILY_GASTLY"
      case .familyOnix: return "FAMILY_ONIX"
      case .familyDrowzee: return "FAMILY_DROWZEE"
      case .familyHypno: return "FAMILY_HYPNO"
      case .familyKrabby: return "FAMILY_KRABBY"
      case .familyVoltorb: return "FAMILY_VOLTORB"
      case .familyExeggcute: return "FAMILY_EXEGGCUTE"
      case .familyCubone: return "FAMILY_CUBONE"
      case .familyHitmonlee: return "FAMILY_HITMONLEE"
      case .familyHitmonchan: return "FAMILY_HITMONCHAN"
      case .familyLickitung: return "FAMILY_LICKITUNG"
      case .familyKoffing: return "FAMILY_KOFFING"
      case .familyRhyhorn: return "FAMILY_RHYHORN"
      case .familyChansey: return "FAMILY_CHANSEY"
      case .familyTangela: return "FAMILY_TANGELA"
      case .familyKangaskhan: return "FAMILY_KANGASKHAN"
      case .familyHorsea: return "FAMILY_HORSEA"
      case .familyGoldeen: return "FAMILY_GOLDEEN"
      case .familyStaryu: return "FAMILY_STARYU"
      case .familyMrMime: return "FAMILY_MR_MIME"
      case .familyScyther: return "FAMILY_SCYTHER"
      case .familyJynx: return "FAMILY_JYNX"
      case .familyElectabuzz: return "FAMILY_ELECTABUZZ"
      case .familyMagmar: return "FAMILY_MAGMAR"
      case .familyPinsir: return "FAMILY_PINSIR"
      case .familyTauros: return "FAMILY_TAUROS"
      case .familyMagikarp: return "FAMILY_MAGIKARP"
      case .familyLapras: return "FAMILY_LAPRAS"
      case .familyDitto: return "FAMILY_DITTO"
      case .familyEevee: return "FAMILY_EEVEE"
      case .familyPorygon: return "FAMILY_PORYGON"
      case .familyOmanyte: return "FAMILY_OMANYTE"
      case .familyKabuto: return "FAMILY_KABUTO"
      case .familyAerodactyl: return "FAMILY_AERODACTYL"
      case .familySnorlax: return "FAMILY_SNORLAX"
      case .familyArticuno: return "FAMILY_ARTICUNO"
      case .familyZapdos: return "FAMILY_ZAPDOS"
      case .familyMoltres: return "FAMILY_MOLTRES"
      case .familyDratini: return "FAMILY_DRATINI"
      case .familyMewtwo: return "FAMILY_MEWTWO"
      case .familyMew: return "FAMILY_MEW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonFamilyId {
      switch str {
      case "FAMILY_UNSET":  return .familyUnset
      case "FAMILY_BULBASAUR":  return .familyBulbasaur
      case "FAMILY_CHARMANDER":  return .familyCharmander
      case "FAMILY_SQUIRTLE":  return .familySquirtle
      case "FAMILY_CATERPIE":  return .familyCaterpie
      case "FAMILY_WEEDLE":  return .familyWeedle
      case "FAMILY_PIDGEY":  return .familyPidgey
      case "FAMILY_RATTATA":  return .familyRattata
      case "FAMILY_SPEAROW":  return .familySpearow
      case "FAMILY_EKANS":  return .familyEkans
      case "FAMILY_PIKACHU":  return .familyPikachu
      case "FAMILY_SANDSHREW":  return .familySandshrew
      case "FAMILY_NIDORAN_FEMALE":  return .familyNidoranFemale
      case "FAMILY_NIDORAN_MALE":  return .familyNidoranMale
      case "FAMILY_CLEFAIRY":  return .familyClefairy
      case "FAMILY_VULPIX":  return .familyVulpix
      case "FAMILY_JIGGLYPUFF":  return .familyJigglypuff
      case "FAMILY_ZUBAT":  return .familyZubat
      case "FAMILY_ODDISH":  return .familyOddish
      case "FAMILY_PARAS":  return .familyParas
      case "FAMILY_VENONAT":  return .familyVenonat
      case "FAMILY_DIGLETT":  return .familyDiglett
      case "FAMILY_MEOWTH":  return .familyMeowth
      case "FAMILY_PSYDUCK":  return .familyPsyduck
      case "FAMILY_MANKEY":  return .familyMankey
      case "FAMILY_GROWLITHE":  return .familyGrowlithe
      case "FAMILY_POLIWAG":  return .familyPoliwag
      case "FAMILY_ABRA":  return .familyAbra
      case "FAMILY_MACHOP":  return .familyMachop
      case "FAMILY_BELLSPROUT":  return .familyBellsprout
      case "FAMILY_TENTACOOL":  return .familyTentacool
      case "FAMILY_GEODUDE":  return .familyGeodude
      case "FAMILY_PONYTA":  return .familyPonyta
      case "FAMILY_SLOWPOKE":  return .familySlowpoke
      case "FAMILY_MAGNEMITE":  return .familyMagnemite
      case "FAMILY_FARFETCHD":  return .familyFarfetchd
      case "FAMILY_DODUO":  return .familyDoduo
      case "FAMILY_SEEL":  return .familySeel
      case "FAMILY_GRIMER":  return .familyGrimer
      case "FAMILY_SHELLDER":  return .familyShellder
      case "FAMILY_GASTLY":  return .familyGastly
      case "FAMILY_ONIX":  return .familyOnix
      case "FAMILY_DROWZEE":  return .familyDrowzee
      case "FAMILY_HYPNO":  return .familyHypno
      case "FAMILY_KRABBY":  return .familyKrabby
      case "FAMILY_VOLTORB":  return .familyVoltorb
      case "FAMILY_EXEGGCUTE":  return .familyExeggcute
      case "FAMILY_CUBONE":  return .familyCubone
      case "FAMILY_HITMONLEE":  return .familyHitmonlee
      case "FAMILY_HITMONCHAN":  return .familyHitmonchan
      case "FAMILY_LICKITUNG":  return .familyLickitung
      case "FAMILY_KOFFING":  return .familyKoffing
      case "FAMILY_RHYHORN":  return .familyRhyhorn
      case "FAMILY_CHANSEY":  return .familyChansey
      case "FAMILY_TANGELA":  return .familyTangela
      case "FAMILY_KANGASKHAN":  return .familyKangaskhan
      case "FAMILY_HORSEA":  return .familyHorsea
      case "FAMILY_GOLDEEN":  return .familyGoldeen
      case "FAMILY_STARYU":  return .familyStaryu
      case "FAMILY_MR_MIME":  return .familyMrMime
      case "FAMILY_SCYTHER":  return .familyScyther
      case "FAMILY_JYNX":  return .familyJynx
      case "FAMILY_ELECTABUZZ":  return .familyElectabuzz
      case "FAMILY_MAGMAR":  return .familyMagmar
      case "FAMILY_PINSIR":  return .familyPinsir
      case "FAMILY_TAUROS":  return .familyTauros
      case "FAMILY_MAGIKARP":  return .familyMagikarp
      case "FAMILY_LAPRAS":  return .familyLapras
      case "FAMILY_DITTO":  return .familyDitto
      case "FAMILY_EEVEE":  return .familyEevee
      case "FAMILY_PORYGON":  return .familyPorygon
      case "FAMILY_OMANYTE":  return .familyOmanyte
      case "FAMILY_KABUTO":  return .familyKabuto
      case "FAMILY_AERODACTYL":  return .familyAerodactyl
      case "FAMILY_SNORLAX":  return .familySnorlax
      case "FAMILY_ARTICUNO":  return .familyArticuno
      case "FAMILY_ZAPDOS":  return .familyZapdos
      case "FAMILY_MOLTRES":  return .familyMoltres
      case "FAMILY_DRATINI":  return .familyDratini
      case "FAMILY_MEWTWO":  return .familyMewtwo
      case "FAMILY_MEW":  return .familyMew
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .familyUnset: return ".familyUnset"
      case .familyBulbasaur: return ".familyBulbasaur"
      case .familyCharmander: return ".familyCharmander"
      case .familySquirtle: return ".familySquirtle"
      case .familyCaterpie: return ".familyCaterpie"
      case .familyWeedle: return ".familyWeedle"
      case .familyPidgey: return ".familyPidgey"
      case .familyRattata: return ".familyRattata"
      case .familySpearow: return ".familySpearow"
      case .familyEkans: return ".familyEkans"
      case .familyPikachu: return ".familyPikachu"
      case .familySandshrew: return ".familySandshrew"
      case .familyNidoranFemale: return ".familyNidoranFemale"
      case .familyNidoranMale: return ".familyNidoranMale"
      case .familyClefairy: return ".familyClefairy"
      case .familyVulpix: return ".familyVulpix"
      case .familyJigglypuff: return ".familyJigglypuff"
      case .familyZubat: return ".familyZubat"
      case .familyOddish: return ".familyOddish"
      case .familyParas: return ".familyParas"
      case .familyVenonat: return ".familyVenonat"
      case .familyDiglett: return ".familyDiglett"
      case .familyMeowth: return ".familyMeowth"
      case .familyPsyduck: return ".familyPsyduck"
      case .familyMankey: return ".familyMankey"
      case .familyGrowlithe: return ".familyGrowlithe"
      case .familyPoliwag: return ".familyPoliwag"
      case .familyAbra: return ".familyAbra"
      case .familyMachop: return ".familyMachop"
      case .familyBellsprout: return ".familyBellsprout"
      case .familyTentacool: return ".familyTentacool"
      case .familyGeodude: return ".familyGeodude"
      case .familyPonyta: return ".familyPonyta"
      case .familySlowpoke: return ".familySlowpoke"
      case .familyMagnemite: return ".familyMagnemite"
      case .familyFarfetchd: return ".familyFarfetchd"
      case .familyDoduo: return ".familyDoduo"
      case .familySeel: return ".familySeel"
      case .familyGrimer: return ".familyGrimer"
      case .familyShellder: return ".familyShellder"
      case .familyGastly: return ".familyGastly"
      case .familyOnix: return ".familyOnix"
      case .familyDrowzee: return ".familyDrowzee"
      case .familyHypno: return ".familyHypno"
      case .familyKrabby: return ".familyKrabby"
      case .familyVoltorb: return ".familyVoltorb"
      case .familyExeggcute: return ".familyExeggcute"
      case .familyCubone: return ".familyCubone"
      case .familyHitmonlee: return ".familyHitmonlee"
      case .familyHitmonchan: return ".familyHitmonchan"
      case .familyLickitung: return ".familyLickitung"
      case .familyKoffing: return ".familyKoffing"
      case .familyRhyhorn: return ".familyRhyhorn"
      case .familyChansey: return ".familyChansey"
      case .familyTangela: return ".familyTangela"
      case .familyKangaskhan: return ".familyKangaskhan"
      case .familyHorsea: return ".familyHorsea"
      case .familyGoldeen: return ".familyGoldeen"
      case .familyStaryu: return ".familyStaryu"
      case .familyMrMime: return ".familyMrMime"
      case .familyScyther: return ".familyScyther"
      case .familyJynx: return ".familyJynx"
      case .familyElectabuzz: return ".familyElectabuzz"
      case .familyMagmar: return ".familyMagmar"
      case .familyPinsir: return ".familyPinsir"
      case .familyTauros: return ".familyTauros"
      case .familyMagikarp: return ".familyMagikarp"
      case .familyLapras: return ".familyLapras"
      case .familyDitto: return ".familyDitto"
      case .familyEevee: return ".familyEevee"
      case .familyPorygon: return ".familyPorygon"
      case .familyOmanyte: return ".familyOmanyte"
      case .familyKabuto: return ".familyKabuto"
      case .familyAerodactyl: return ".familyAerodactyl"
      case .familySnorlax: return ".familySnorlax"
      case .familyArticuno: return ".familyArticuno"
      case .familyZapdos: return ".familyZapdos"
      case .familyMoltres: return ".familyMoltres"
      case .familyDratini: return ".familyDratini"
      case .familyMewtwo: return ".familyMewtwo"
      case .familyMew: return ".familyMew"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case missingno = 0
    case bulbasaur = 1
    case ivysaur = 2
    case venusaur = 3
    case charmander = 4
    case charmeleon = 5
    case charizard = 6
    case squirtle = 7
    case wartortle = 8
    case blastoise = 9
    case caterpie = 10
    case metapod = 11
    case butterfree = 12
    case weedle = 13
    case kakuna = 14
    case beedrill = 15
    case pidgey = 16
    case pidgeotto = 17
    case pidgeot = 18
    case rattata = 19
    case raticate = 20
    case spearow = 21
    case fearow = 22
    case ekans = 23
    case arbok = 24
    case pikachu = 25
    case raichu = 26
    case sandshrew = 27
    case sandslash = 28
    case nidoranFemale = 29
    case nidorina = 30
    case nidoqueen = 31
    case nidoranMale = 32
    case nidorino = 33
    case nidoking = 34
    case clefairy = 35
    case clefable = 36
    case vulpix = 37
    case ninetales = 38
    case jigglypuff = 39
    case wigglytuff = 40
    case zubat = 41
    case golbat = 42
    case oddish = 43
    case gloom = 44
    case vileplume = 45
    case paras = 46
    case parasect = 47
    case venonat = 48
    case venomoth = 49
    case diglett = 50
    case dugtrio = 51
    case meowth = 52
    case persian = 53
    case psyduck = 54
    case golduck = 55
    case mankey = 56
    case primeape = 57
    case growlithe = 58
    case arcanine = 59
    case poliwag = 60
    case poliwhirl = 61
    case poliwrath = 62
    case abra = 63
    case kadabra = 64
    case alakazam = 65
    case machop = 66
    case machoke = 67
    case machamp = 68
    case bellsprout = 69
    case weepinbell = 70
    case victreebel = 71
    case tentacool = 72
    case tentacruel = 73
    case geodude = 74
    case graveler = 75
    case golem = 76
    case ponyta = 77
    case rapidash = 78
    case slowpoke = 79
    case slowbro = 80
    case magnemite = 81
    case magneton = 82
    case farfetchd = 83
    case doduo = 84
    case dodrio = 85
    case seel = 86
    case dewgong = 87
    case grimer = 88
    case muk = 89
    case shellder = 90
    case cloyster = 91
    case gastly = 92
    case haunter = 93
    case gengar = 94
    case onix = 95
    case drowzee = 96
    case hypno = 97
    case krabby = 98
    case kingler = 99
    case voltorb = 100
    case electrode = 101
    case exeggcute = 102
    case exeggutor = 103
    case cubone = 104
    case marowak = 105
    case hitmonlee = 106
    case hitmonchan = 107
    case lickitung = 108
    case koffing = 109
    case weezing = 110
    case rhyhorn = 111
    case rhydon = 112
    case chansey = 113
    case tangela = 114
    case kangaskhan = 115
    case horsea = 116
    case seadra = 117
    case goldeen = 118
    case seaking = 119
    case staryu = 120
    case starmie = 121
    case mrMime = 122
    case scyther = 123
    case jynx = 124
    case electabuzz = 125
    case magmar = 126
    case pinsir = 127
    case tauros = 128
    case magikarp = 129
    case gyarados = 130
    case lapras = 131
    case ditto = 132
    case eevee = 133
    case vaporeon = 134
    case jolteon = 135
    case flareon = 136
    case porygon = 137
    case omanyte = 138
    case omastar = 139
    case kabuto = 140
    case kabutops = 141
    case aerodactyl = 142
    case snorlax = 143
    case articuno = 144
    case zapdos = 145
    case moltres = 146
    case dratini = 147
    case dragonair = 148
    case dragonite = 149
    case mewtwo = 150
    case mew = 151
    public func toString() -> String {
      switch self {
      case .missingno: return "MISSINGNO"
      case .bulbasaur: return "BULBASAUR"
      case .ivysaur: return "IVYSAUR"
      case .venusaur: return "VENUSAUR"
      case .charmander: return "CHARMANDER"
      case .charmeleon: return "CHARMELEON"
      case .charizard: return "CHARIZARD"
      case .squirtle: return "SQUIRTLE"
      case .wartortle: return "WARTORTLE"
      case .blastoise: return "BLASTOISE"
      case .caterpie: return "CATERPIE"
      case .metapod: return "METAPOD"
      case .butterfree: return "BUTTERFREE"
      case .weedle: return "WEEDLE"
      case .kakuna: return "KAKUNA"
      case .beedrill: return "BEEDRILL"
      case .pidgey: return "PIDGEY"
      case .pidgeotto: return "PIDGEOTTO"
      case .pidgeot: return "PIDGEOT"
      case .rattata: return "RATTATA"
      case .raticate: return "RATICATE"
      case .spearow: return "SPEAROW"
      case .fearow: return "FEAROW"
      case .ekans: return "EKANS"
      case .arbok: return "ARBOK"
      case .pikachu: return "PIKACHU"
      case .raichu: return "RAICHU"
      case .sandshrew: return "SANDSHREW"
      case .sandslash: return "SANDSLASH"
      case .nidoranFemale: return "NIDORAN_FEMALE"
      case .nidorina: return "NIDORINA"
      case .nidoqueen: return "NIDOQUEEN"
      case .nidoranMale: return "NIDORAN_MALE"
      case .nidorino: return "NIDORINO"
      case .nidoking: return "NIDOKING"
      case .clefairy: return "CLEFAIRY"
      case .clefable: return "CLEFABLE"
      case .vulpix: return "VULPIX"
      case .ninetales: return "NINETALES"
      case .jigglypuff: return "JIGGLYPUFF"
      case .wigglytuff: return "WIGGLYTUFF"
      case .zubat: return "ZUBAT"
      case .golbat: return "GOLBAT"
      case .oddish: return "ODDISH"
      case .gloom: return "GLOOM"
      case .vileplume: return "VILEPLUME"
      case .paras: return "PARAS"
      case .parasect: return "PARASECT"
      case .venonat: return "VENONAT"
      case .venomoth: return "VENOMOTH"
      case .diglett: return "DIGLETT"
      case .dugtrio: return "DUGTRIO"
      case .meowth: return "MEOWTH"
      case .persian: return "PERSIAN"
      case .psyduck: return "PSYDUCK"
      case .golduck: return "GOLDUCK"
      case .mankey: return "MANKEY"
      case .primeape: return "PRIMEAPE"
      case .growlithe: return "GROWLITHE"
      case .arcanine: return "ARCANINE"
      case .poliwag: return "POLIWAG"
      case .poliwhirl: return "POLIWHIRL"
      case .poliwrath: return "POLIWRATH"
      case .abra: return "ABRA"
      case .kadabra: return "KADABRA"
      case .alakazam: return "ALAKAZAM"
      case .machop: return "MACHOP"
      case .machoke: return "MACHOKE"
      case .machamp: return "MACHAMP"
      case .bellsprout: return "BELLSPROUT"
      case .weepinbell: return "WEEPINBELL"
      case .victreebel: return "VICTREEBEL"
      case .tentacool: return "TENTACOOL"
      case .tentacruel: return "TENTACRUEL"
      case .geodude: return "GEODUDE"
      case .graveler: return "GRAVELER"
      case .golem: return "GOLEM"
      case .ponyta: return "PONYTA"
      case .rapidash: return "RAPIDASH"
      case .slowpoke: return "SLOWPOKE"
      case .slowbro: return "SLOWBRO"
      case .magnemite: return "MAGNEMITE"
      case .magneton: return "MAGNETON"
      case .farfetchd: return "FARFETCHD"
      case .doduo: return "DODUO"
      case .dodrio: return "DODRIO"
      case .seel: return "SEEL"
      case .dewgong: return "DEWGONG"
      case .grimer: return "GRIMER"
      case .muk: return "MUK"
      case .shellder: return "SHELLDER"
      case .cloyster: return "CLOYSTER"
      case .gastly: return "GASTLY"
      case .haunter: return "HAUNTER"
      case .gengar: return "GENGAR"
      case .onix: return "ONIX"
      case .drowzee: return "DROWZEE"
      case .hypno: return "HYPNO"
      case .krabby: return "KRABBY"
      case .kingler: return "KINGLER"
      case .voltorb: return "VOLTORB"
      case .electrode: return "ELECTRODE"
      case .exeggcute: return "EXEGGCUTE"
      case .exeggutor: return "EXEGGUTOR"
      case .cubone: return "CUBONE"
      case .marowak: return "MAROWAK"
      case .hitmonlee: return "HITMONLEE"
      case .hitmonchan: return "HITMONCHAN"
      case .lickitung: return "LICKITUNG"
      case .koffing: return "KOFFING"
      case .weezing: return "WEEZING"
      case .rhyhorn: return "RHYHORN"
      case .rhydon: return "RHYDON"
      case .chansey: return "CHANSEY"
      case .tangela: return "TANGELA"
      case .kangaskhan: return "KANGASKHAN"
      case .horsea: return "HORSEA"
      case .seadra: return "SEADRA"
      case .goldeen: return "GOLDEEN"
      case .seaking: return "SEAKING"
      case .staryu: return "STARYU"
      case .starmie: return "STARMIE"
      case .mrMime: return "MR_MIME"
      case .scyther: return "SCYTHER"
      case .jynx: return "JYNX"
      case .electabuzz: return "ELECTABUZZ"
      case .magmar: return "MAGMAR"
      case .pinsir: return "PINSIR"
      case .tauros: return "TAUROS"
      case .magikarp: return "MAGIKARP"
      case .gyarados: return "GYARADOS"
      case .lapras: return "LAPRAS"
      case .ditto: return "DITTO"
      case .eevee: return "EEVEE"
      case .vaporeon: return "VAPOREON"
      case .jolteon: return "JOLTEON"
      case .flareon: return "FLAREON"
      case .porygon: return "PORYGON"
      case .omanyte: return "OMANYTE"
      case .omastar: return "OMASTAR"
      case .kabuto: return "KABUTO"
      case .kabutops: return "KABUTOPS"
      case .aerodactyl: return "AERODACTYL"
      case .snorlax: return "SNORLAX"
      case .articuno: return "ARTICUNO"
      case .zapdos: return "ZAPDOS"
      case .moltres: return "MOLTRES"
      case .dratini: return "DRATINI"
      case .dragonair: return "DRAGONAIR"
      case .dragonite: return "DRAGONITE"
      case .mewtwo: return "MEWTWO"
      case .mew: return "MEW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonId {
      switch str {
      case "MISSINGNO":  return .missingno
      case "BULBASAUR":  return .bulbasaur
      case "IVYSAUR":  return .ivysaur
      case "VENUSAUR":  return .venusaur
      case "CHARMANDER":  return .charmander
      case "CHARMELEON":  return .charmeleon
      case "CHARIZARD":  return .charizard
      case "SQUIRTLE":  return .squirtle
      case "WARTORTLE":  return .wartortle
      case "BLASTOISE":  return .blastoise
      case "CATERPIE":  return .caterpie
      case "METAPOD":  return .metapod
      case "BUTTERFREE":  return .butterfree
      case "WEEDLE":  return .weedle
      case "KAKUNA":  return .kakuna
      case "BEEDRILL":  return .beedrill
      case "PIDGEY":  return .pidgey
      case "PIDGEOTTO":  return .pidgeotto
      case "PIDGEOT":  return .pidgeot
      case "RATTATA":  return .rattata
      case "RATICATE":  return .raticate
      case "SPEAROW":  return .spearow
      case "FEAROW":  return .fearow
      case "EKANS":  return .ekans
      case "ARBOK":  return .arbok
      case "PIKACHU":  return .pikachu
      case "RAICHU":  return .raichu
      case "SANDSHREW":  return .sandshrew
      case "SANDSLASH":  return .sandslash
      case "NIDORAN_FEMALE":  return .nidoranFemale
      case "NIDORINA":  return .nidorina
      case "NIDOQUEEN":  return .nidoqueen
      case "NIDORAN_MALE":  return .nidoranMale
      case "NIDORINO":  return .nidorino
      case "NIDOKING":  return .nidoking
      case "CLEFAIRY":  return .clefairy
      case "CLEFABLE":  return .clefable
      case "VULPIX":  return .vulpix
      case "NINETALES":  return .ninetales
      case "JIGGLYPUFF":  return .jigglypuff
      case "WIGGLYTUFF":  return .wigglytuff
      case "ZUBAT":  return .zubat
      case "GOLBAT":  return .golbat
      case "ODDISH":  return .oddish
      case "GLOOM":  return .gloom
      case "VILEPLUME":  return .vileplume
      case "PARAS":  return .paras
      case "PARASECT":  return .parasect
      case "VENONAT":  return .venonat
      case "VENOMOTH":  return .venomoth
      case "DIGLETT":  return .diglett
      case "DUGTRIO":  return .dugtrio
      case "MEOWTH":  return .meowth
      case "PERSIAN":  return .persian
      case "PSYDUCK":  return .psyduck
      case "GOLDUCK":  return .golduck
      case "MANKEY":  return .mankey
      case "PRIMEAPE":  return .primeape
      case "GROWLITHE":  return .growlithe
      case "ARCANINE":  return .arcanine
      case "POLIWAG":  return .poliwag
      case "POLIWHIRL":  return .poliwhirl
      case "POLIWRATH":  return .poliwrath
      case "ABRA":  return .abra
      case "KADABRA":  return .kadabra
      case "ALAKAZAM":  return .alakazam
      case "MACHOP":  return .machop
      case "MACHOKE":  return .machoke
      case "MACHAMP":  return .machamp
      case "BELLSPROUT":  return .bellsprout
      case "WEEPINBELL":  return .weepinbell
      case "VICTREEBEL":  return .victreebel
      case "TENTACOOL":  return .tentacool
      case "TENTACRUEL":  return .tentacruel
      case "GEODUDE":  return .geodude
      case "GRAVELER":  return .graveler
      case "GOLEM":  return .golem
      case "PONYTA":  return .ponyta
      case "RAPIDASH":  return .rapidash
      case "SLOWPOKE":  return .slowpoke
      case "SLOWBRO":  return .slowbro
      case "MAGNEMITE":  return .magnemite
      case "MAGNETON":  return .magneton
      case "FARFETCHD":  return .farfetchd
      case "DODUO":  return .doduo
      case "DODRIO":  return .dodrio
      case "SEEL":  return .seel
      case "DEWGONG":  return .dewgong
      case "GRIMER":  return .grimer
      case "MUK":  return .muk
      case "SHELLDER":  return .shellder
      case "CLOYSTER":  return .cloyster
      case "GASTLY":  return .gastly
      case "HAUNTER":  return .haunter
      case "GENGAR":  return .gengar
      case "ONIX":  return .onix
      case "DROWZEE":  return .drowzee
      case "HYPNO":  return .hypno
      case "KRABBY":  return .krabby
      case "KINGLER":  return .kingler
      case "VOLTORB":  return .voltorb
      case "ELECTRODE":  return .electrode
      case "EXEGGCUTE":  return .exeggcute
      case "EXEGGUTOR":  return .exeggutor
      case "CUBONE":  return .cubone
      case "MAROWAK":  return .marowak
      case "HITMONLEE":  return .hitmonlee
      case "HITMONCHAN":  return .hitmonchan
      case "LICKITUNG":  return .lickitung
      case "KOFFING":  return .koffing
      case "WEEZING":  return .weezing
      case "RHYHORN":  return .rhyhorn
      case "RHYDON":  return .rhydon
      case "CHANSEY":  return .chansey
      case "TANGELA":  return .tangela
      case "KANGASKHAN":  return .kangaskhan
      case "HORSEA":  return .horsea
      case "SEADRA":  return .seadra
      case "GOLDEEN":  return .goldeen
      case "SEAKING":  return .seaking
      case "STARYU":  return .staryu
      case "STARMIE":  return .starmie
      case "MR_MIME":  return .mrMime
      case "SCYTHER":  return .scyther
      case "JYNX":  return .jynx
      case "ELECTABUZZ":  return .electabuzz
      case "MAGMAR":  return .magmar
      case "PINSIR":  return .pinsir
      case "TAUROS":  return .tauros
      case "MAGIKARP":  return .magikarp
      case "GYARADOS":  return .gyarados
      case "LAPRAS":  return .lapras
      case "DITTO":  return .ditto
      case "EEVEE":  return .eevee
      case "VAPOREON":  return .vaporeon
      case "JOLTEON":  return .jolteon
      case "FLAREON":  return .flareon
      case "PORYGON":  return .porygon
      case "OMANYTE":  return .omanyte
      case "OMASTAR":  return .omastar
      case "KABUTO":  return .kabuto
      case "KABUTOPS":  return .kabutops
      case "AERODACTYL":  return .aerodactyl
      case "SNORLAX":  return .snorlax
      case "ARTICUNO":  return .articuno
      case "ZAPDOS":  return .zapdos
      case "MOLTRES":  return .moltres
      case "DRATINI":  return .dratini
      case "DRAGONAIR":  return .dragonair
      case "DRAGONITE":  return .dragonite
      case "MEWTWO":  return .mewtwo
      case "MEW":  return .mew
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .missingno: return ".missingno"
      case .bulbasaur: return ".bulbasaur"
      case .ivysaur: return ".ivysaur"
      case .venusaur: return ".venusaur"
      case .charmander: return ".charmander"
      case .charmeleon: return ".charmeleon"
      case .charizard: return ".charizard"
      case .squirtle: return ".squirtle"
      case .wartortle: return ".wartortle"
      case .blastoise: return ".blastoise"
      case .caterpie: return ".caterpie"
      case .metapod: return ".metapod"
      case .butterfree: return ".butterfree"
      case .weedle: return ".weedle"
      case .kakuna: return ".kakuna"
      case .beedrill: return ".beedrill"
      case .pidgey: return ".pidgey"
      case .pidgeotto: return ".pidgeotto"
      case .pidgeot: return ".pidgeot"
      case .rattata: return ".rattata"
      case .raticate: return ".raticate"
      case .spearow: return ".spearow"
      case .fearow: return ".fearow"
      case .ekans: return ".ekans"
      case .arbok: return ".arbok"
      case .pikachu: return ".pikachu"
      case .raichu: return ".raichu"
      case .sandshrew: return ".sandshrew"
      case .sandslash: return ".sandslash"
      case .nidoranFemale: return ".nidoranFemale"
      case .nidorina: return ".nidorina"
      case .nidoqueen: return ".nidoqueen"
      case .nidoranMale: return ".nidoranMale"
      case .nidorino: return ".nidorino"
      case .nidoking: return ".nidoking"
      case .clefairy: return ".clefairy"
      case .clefable: return ".clefable"
      case .vulpix: return ".vulpix"
      case .ninetales: return ".ninetales"
      case .jigglypuff: return ".jigglypuff"
      case .wigglytuff: return ".wigglytuff"
      case .zubat: return ".zubat"
      case .golbat: return ".golbat"
      case .oddish: return ".oddish"
      case .gloom: return ".gloom"
      case .vileplume: return ".vileplume"
      case .paras: return ".paras"
      case .parasect: return ".parasect"
      case .venonat: return ".venonat"
      case .venomoth: return ".venomoth"
      case .diglett: return ".diglett"
      case .dugtrio: return ".dugtrio"
      case .meowth: return ".meowth"
      case .persian: return ".persian"
      case .psyduck: return ".psyduck"
      case .golduck: return ".golduck"
      case .mankey: return ".mankey"
      case .primeape: return ".primeape"
      case .growlithe: return ".growlithe"
      case .arcanine: return ".arcanine"
      case .poliwag: return ".poliwag"
      case .poliwhirl: return ".poliwhirl"
      case .poliwrath: return ".poliwrath"
      case .abra: return ".abra"
      case .kadabra: return ".kadabra"
      case .alakazam: return ".alakazam"
      case .machop: return ".machop"
      case .machoke: return ".machoke"
      case .machamp: return ".machamp"
      case .bellsprout: return ".bellsprout"
      case .weepinbell: return ".weepinbell"
      case .victreebel: return ".victreebel"
      case .tentacool: return ".tentacool"
      case .tentacruel: return ".tentacruel"
      case .geodude: return ".geodude"
      case .graveler: return ".graveler"
      case .golem: return ".golem"
      case .ponyta: return ".ponyta"
      case .rapidash: return ".rapidash"
      case .slowpoke: return ".slowpoke"
      case .slowbro: return ".slowbro"
      case .magnemite: return ".magnemite"
      case .magneton: return ".magneton"
      case .farfetchd: return ".farfetchd"
      case .doduo: return ".doduo"
      case .dodrio: return ".dodrio"
      case .seel: return ".seel"
      case .dewgong: return ".dewgong"
      case .grimer: return ".grimer"
      case .muk: return ".muk"
      case .shellder: return ".shellder"
      case .cloyster: return ".cloyster"
      case .gastly: return ".gastly"
      case .haunter: return ".haunter"
      case .gengar: return ".gengar"
      case .onix: return ".onix"
      case .drowzee: return ".drowzee"
      case .hypno: return ".hypno"
      case .krabby: return ".krabby"
      case .kingler: return ".kingler"
      case .voltorb: return ".voltorb"
      case .electrode: return ".electrode"
      case .exeggcute: return ".exeggcute"
      case .exeggutor: return ".exeggutor"
      case .cubone: return ".cubone"
      case .marowak: return ".marowak"
      case .hitmonlee: return ".hitmonlee"
      case .hitmonchan: return ".hitmonchan"
      case .lickitung: return ".lickitung"
      case .koffing: return ".koffing"
      case .weezing: return ".weezing"
      case .rhyhorn: return ".rhyhorn"
      case .rhydon: return ".rhydon"
      case .chansey: return ".chansey"
      case .tangela: return ".tangela"
      case .kangaskhan: return ".kangaskhan"
      case .horsea: return ".horsea"
      case .seadra: return ".seadra"
      case .goldeen: return ".goldeen"
      case .seaking: return ".seaking"
      case .staryu: return ".staryu"
      case .starmie: return ".starmie"
      case .mrMime: return ".mrMime"
      case .scyther: return ".scyther"
      case .jynx: return ".jynx"
      case .electabuzz: return ".electabuzz"
      case .magmar: return ".magmar"
      case .pinsir: return ".pinsir"
      case .tauros: return ".tauros"
      case .magikarp: return ".magikarp"
      case .gyarados: return ".gyarados"
      case .lapras: return ".lapras"
      case .ditto: return ".ditto"
      case .eevee: return ".eevee"
      case .vaporeon: return ".vaporeon"
      case .jolteon: return ".jolteon"
      case .flareon: return ".flareon"
      case .porygon: return ".porygon"
      case .omanyte: return ".omanyte"
      case .omastar: return ".omastar"
      case .kabuto: return ".kabuto"
      case .kabutops: return ".kabutops"
      case .aerodactyl: return ".aerodactyl"
      case .snorlax: return ".snorlax"
      case .articuno: return ".articuno"
      case .zapdos: return ".zapdos"
      case .moltres: return ".moltres"
      case .dratini: return ".dratini"
      case .dragonair: return ".dragonair"
      case .dragonite: return ".dragonite"
      case .mewtwo: return ".mewtwo"
      case .mew: return ".mew"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonMove:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case moveUnset = 0
    case thunderShock = 1
    case quickAttack = 2
    case scratch = 3
    case ember = 4
    case vineWhip = 5
    case tackle = 6
    case razorLeaf = 7
    case takeDown = 8
    case waterGun = 9
    case bite = 10
    case pound = 11
    case doubleSlap = 12
    case wrap = 13
    case hyperBeam = 14
    case lick = 15
    case darkPulse = 16
    case smog = 17
    case sludge = 18
    case metalClaw = 19
    case viceGrip = 20
    case flameWheel = 21
    case megahorn = 22
    case wingAttack = 23
    case flamethrower = 24
    case suckerPunch = 25
    case dig = 26
    case lowKick = 27
    case crossChop = 28
    case psychoCut = 29
    case psybeam = 30
    case earthquake = 31
    case stoneEdge = 32
    case icePunch = 33
    case heartStamp = 34
    case discharge = 35
    case flashCannon = 36
    case peck = 37
    case drillPeck = 38
    case iceBeam = 39
    case blizzard = 40
    case airSlash = 41
    case heatWave = 42
    case twineedle = 43
    case poisonJab = 44
    case aerialAce = 45
    case drillRun = 46
    case petalBlizzard = 47
    case megaDrain = 48
    case bugBuzz = 49
    case poisonFang = 50
    case nightSlash = 51
    case slash = 52
    case bubbleBeam = 53
    case submission = 54
    case karateChop = 55
    case lowSweep = 56
    case aquaJet = 57
    case aquaTail = 58
    case seedBomb = 59
    case psyshock = 60
    case rockThrow = 61
    case ancientPower = 62
    case rockTomb = 63
    case rockSlide = 64
    case powerGem = 65
    case shadowSneak = 66
    case shadowPunch = 67
    case shadowClaw = 68
    case ominousWind = 69
    case shadowBall = 70
    case bulletPunch = 71
    case magnetBomb = 72
    case steelWing = 73
    case ironHead = 74
    case parabolicCharge = 75
    case spark = 76
    case thunderPunch = 77
    case thunder = 78
    case thunderbolt = 79
    case twister = 80
    case dragonBreath = 81
    case dragonPulse = 82
    case dragonClaw = 83
    case disarmingVoice = 84
    case drainingKiss = 85
    case dazzlingGleam = 86
    case moonblast = 87
    case playRough = 88
    case crossPoison = 89
    case sludgeBomb = 90
    case sludgeWave = 91
    case gunkShot = 92
    case mudShot = 93
    case boneClub = 94
    case bulldoze = 95
    case mudBomb = 96
    case furyCutter = 97
    case bugBite = 98
    case signalBeam = 99
    case xScissor = 100
    case flameCharge = 101
    case flameBurst = 102
    case fireBlast = 103
    case brine = 104
    case waterPulse = 105
    case scald = 106
    case hydroPump = 107
    case psychic = 108
    case psystrike = 109
    case iceShard = 110
    case icyWind = 111
    case frostBreath = 112
    case absorb = 113
    case gigaDrain = 114
    case firePunch = 115
    case solarBeam = 116
    case leafBlade = 117
    case powerWhip = 118
    case splash = 119
    case acid = 120
    case airCutter = 121
    case hurricane = 122
    case brickBreak = 123
    case cut = 124
    case swift = 125
    case hornAttack = 126
    case stomp = 127
    case headbutt = 128
    case hyperFang = 129
    case slam = 130
    case bodySlam = 131
    case rest = 132
    case struggle = 133
    case scaldBlastoise = 134
    case hydroPumpBlastoise = 135
    case wrapGreen = 136
    case wrapPink = 137
    case furyCutterFast = 200
    case bugBiteFast = 201
    case biteFast = 202
    case suckerPunchFast = 203
    case dragonBreathFast = 204
    case thunderShockFast = 205
    case sparkFast = 206
    case lowKickFast = 207
    case karateChopFast = 208
    case emberFast = 209
    case wingAttackFast = 210
    case peckFast = 211
    case lickFast = 212
    case shadowClawFast = 213
    case vineWhipFast = 214
    case razorLeafFast = 215
    case mudShotFast = 216
    case iceShardFast = 217
    case frostBreathFast = 218
    case quickAttackFast = 219
    case scratchFast = 220
    case tackleFast = 221
    case poundFast = 222
    case cutFast = 223
    case poisonJabFast = 224
    case acidFast = 225
    case psychoCutFast = 226
    case rockThrowFast = 227
    case metalClawFast = 228
    case bulletPunchFast = 229
    case waterGunFast = 230
    case splashFast = 231
    case waterGunFastBlastoise = 232
    case mudSlapFast = 233
    case zenHeadbuttFast = 234
    case confusionFast = 235
    case poisonStingFast = 236
    case bubbleFast = 237
    case feintAttackFast = 238
    case steelWingFast = 239
    case fireFangFast = 240
    case rockSmashFast = 241
    public func toString() -> String {
      switch self {
      case .moveUnset: return "MOVE_UNSET"
      case .thunderShock: return "THUNDER_SHOCK"
      case .quickAttack: return "QUICK_ATTACK"
      case .scratch: return "SCRATCH"
      case .ember: return "EMBER"
      case .vineWhip: return "VINE_WHIP"
      case .tackle: return "TACKLE"
      case .razorLeaf: return "RAZOR_LEAF"
      case .takeDown: return "TAKE_DOWN"
      case .waterGun: return "WATER_GUN"
      case .bite: return "BITE"
      case .pound: return "POUND"
      case .doubleSlap: return "DOUBLE_SLAP"
      case .wrap: return "WRAP"
      case .hyperBeam: return "HYPER_BEAM"
      case .lick: return "LICK"
      case .darkPulse: return "DARK_PULSE"
      case .smog: return "SMOG"
      case .sludge: return "SLUDGE"
      case .metalClaw: return "METAL_CLAW"
      case .viceGrip: return "VICE_GRIP"
      case .flameWheel: return "FLAME_WHEEL"
      case .megahorn: return "MEGAHORN"
      case .wingAttack: return "WING_ATTACK"
      case .flamethrower: return "FLAMETHROWER"
      case .suckerPunch: return "SUCKER_PUNCH"
      case .dig: return "DIG"
      case .lowKick: return "LOW_KICK"
      case .crossChop: return "CROSS_CHOP"
      case .psychoCut: return "PSYCHO_CUT"
      case .psybeam: return "PSYBEAM"
      case .earthquake: return "EARTHQUAKE"
      case .stoneEdge: return "STONE_EDGE"
      case .icePunch: return "ICE_PUNCH"
      case .heartStamp: return "HEART_STAMP"
      case .discharge: return "DISCHARGE"
      case .flashCannon: return "FLASH_CANNON"
      case .peck: return "PECK"
      case .drillPeck: return "DRILL_PECK"
      case .iceBeam: return "ICE_BEAM"
      case .blizzard: return "BLIZZARD"
      case .airSlash: return "AIR_SLASH"
      case .heatWave: return "HEAT_WAVE"
      case .twineedle: return "TWINEEDLE"
      case .poisonJab: return "POISON_JAB"
      case .aerialAce: return "AERIAL_ACE"
      case .drillRun: return "DRILL_RUN"
      case .petalBlizzard: return "PETAL_BLIZZARD"
      case .megaDrain: return "MEGA_DRAIN"
      case .bugBuzz: return "BUG_BUZZ"
      case .poisonFang: return "POISON_FANG"
      case .nightSlash: return "NIGHT_SLASH"
      case .slash: return "SLASH"
      case .bubbleBeam: return "BUBBLE_BEAM"
      case .submission: return "SUBMISSION"
      case .karateChop: return "KARATE_CHOP"
      case .lowSweep: return "LOW_SWEEP"
      case .aquaJet: return "AQUA_JET"
      case .aquaTail: return "AQUA_TAIL"
      case .seedBomb: return "SEED_BOMB"
      case .psyshock: return "PSYSHOCK"
      case .rockThrow: return "ROCK_THROW"
      case .ancientPower: return "ANCIENT_POWER"
      case .rockTomb: return "ROCK_TOMB"
      case .rockSlide: return "ROCK_SLIDE"
      case .powerGem: return "POWER_GEM"
      case .shadowSneak: return "SHADOW_SNEAK"
      case .shadowPunch: return "SHADOW_PUNCH"
      case .shadowClaw: return "SHADOW_CLAW"
      case .ominousWind: return "OMINOUS_WIND"
      case .shadowBall: return "SHADOW_BALL"
      case .bulletPunch: return "BULLET_PUNCH"
      case .magnetBomb: return "MAGNET_BOMB"
      case .steelWing: return "STEEL_WING"
      case .ironHead: return "IRON_HEAD"
      case .parabolicCharge: return "PARABOLIC_CHARGE"
      case .spark: return "SPARK"
      case .thunderPunch: return "THUNDER_PUNCH"
      case .thunder: return "THUNDER"
      case .thunderbolt: return "THUNDERBOLT"
      case .twister: return "TWISTER"
      case .dragonBreath: return "DRAGON_BREATH"
      case .dragonPulse: return "DRAGON_PULSE"
      case .dragonClaw: return "DRAGON_CLAW"
      case .disarmingVoice: return "DISARMING_VOICE"
      case .drainingKiss: return "DRAINING_KISS"
      case .dazzlingGleam: return "DAZZLING_GLEAM"
      case .moonblast: return "MOONBLAST"
      case .playRough: return "PLAY_ROUGH"
      case .crossPoison: return "CROSS_POISON"
      case .sludgeBomb: return "SLUDGE_BOMB"
      case .sludgeWave: return "SLUDGE_WAVE"
      case .gunkShot: return "GUNK_SHOT"
      case .mudShot: return "MUD_SHOT"
      case .boneClub: return "BONE_CLUB"
      case .bulldoze: return "BULLDOZE"
      case .mudBomb: return "MUD_BOMB"
      case .furyCutter: return "FURY_CUTTER"
      case .bugBite: return "BUG_BITE"
      case .signalBeam: return "SIGNAL_BEAM"
      case .xScissor: return "X_SCISSOR"
      case .flameCharge: return "FLAME_CHARGE"
      case .flameBurst: return "FLAME_BURST"
      case .fireBlast: return "FIRE_BLAST"
      case .brine: return "BRINE"
      case .waterPulse: return "WATER_PULSE"
      case .scald: return "SCALD"
      case .hydroPump: return "HYDRO_PUMP"
      case .psychic: return "PSYCHIC"
      case .psystrike: return "PSYSTRIKE"
      case .iceShard: return "ICE_SHARD"
      case .icyWind: return "ICY_WIND"
      case .frostBreath: return "FROST_BREATH"
      case .absorb: return "ABSORB"
      case .gigaDrain: return "GIGA_DRAIN"
      case .firePunch: return "FIRE_PUNCH"
      case .solarBeam: return "SOLAR_BEAM"
      case .leafBlade: return "LEAF_BLADE"
      case .powerWhip: return "POWER_WHIP"
      case .splash: return "SPLASH"
      case .acid: return "ACID"
      case .airCutter: return "AIR_CUTTER"
      case .hurricane: return "HURRICANE"
      case .brickBreak: return "BRICK_BREAK"
      case .cut: return "CUT"
      case .swift: return "SWIFT"
      case .hornAttack: return "HORN_ATTACK"
      case .stomp: return "STOMP"
      case .headbutt: return "HEADBUTT"
      case .hyperFang: return "HYPER_FANG"
      case .slam: return "SLAM"
      case .bodySlam: return "BODY_SLAM"
      case .rest: return "REST"
      case .struggle: return "STRUGGLE"
      case .scaldBlastoise: return "SCALD_BLASTOISE"
      case .hydroPumpBlastoise: return "HYDRO_PUMP_BLASTOISE"
      case .wrapGreen: return "WRAP_GREEN"
      case .wrapPink: return "WRAP_PINK"
      case .furyCutterFast: return "FURY_CUTTER_FAST"
      case .bugBiteFast: return "BUG_BITE_FAST"
      case .biteFast: return "BITE_FAST"
      case .suckerPunchFast: return "SUCKER_PUNCH_FAST"
      case .dragonBreathFast: return "DRAGON_BREATH_FAST"
      case .thunderShockFast: return "THUNDER_SHOCK_FAST"
      case .sparkFast: return "SPARK_FAST"
      case .lowKickFast: return "LOW_KICK_FAST"
      case .karateChopFast: return "KARATE_CHOP_FAST"
      case .emberFast: return "EMBER_FAST"
      case .wingAttackFast: return "WING_ATTACK_FAST"
      case .peckFast: return "PECK_FAST"
      case .lickFast: return "LICK_FAST"
      case .shadowClawFast: return "SHADOW_CLAW_FAST"
      case .vineWhipFast: return "VINE_WHIP_FAST"
      case .razorLeafFast: return "RAZOR_LEAF_FAST"
      case .mudShotFast: return "MUD_SHOT_FAST"
      case .iceShardFast: return "ICE_SHARD_FAST"
      case .frostBreathFast: return "FROST_BREATH_FAST"
      case .quickAttackFast: return "QUICK_ATTACK_FAST"
      case .scratchFast: return "SCRATCH_FAST"
      case .tackleFast: return "TACKLE_FAST"
      case .poundFast: return "POUND_FAST"
      case .cutFast: return "CUT_FAST"
      case .poisonJabFast: return "POISON_JAB_FAST"
      case .acidFast: return "ACID_FAST"
      case .psychoCutFast: return "PSYCHO_CUT_FAST"
      case .rockThrowFast: return "ROCK_THROW_FAST"
      case .metalClawFast: return "METAL_CLAW_FAST"
      case .bulletPunchFast: return "BULLET_PUNCH_FAST"
      case .waterGunFast: return "WATER_GUN_FAST"
      case .splashFast: return "SPLASH_FAST"
      case .waterGunFastBlastoise: return "WATER_GUN_FAST_BLASTOISE"
      case .mudSlapFast: return "MUD_SLAP_FAST"
      case .zenHeadbuttFast: return "ZEN_HEADBUTT_FAST"
      case .confusionFast: return "CONFUSION_FAST"
      case .poisonStingFast: return "POISON_STING_FAST"
      case .bubbleFast: return "BUBBLE_FAST"
      case .feintAttackFast: return "FEINT_ATTACK_FAST"
      case .steelWingFast: return "STEEL_WING_FAST"
      case .fireFangFast: return "FIRE_FANG_FAST"
      case .rockSmashFast: return "ROCK_SMASH_FAST"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonMove {
      switch str {
      case "MOVE_UNSET":  return .moveUnset
      case "THUNDER_SHOCK":  return .thunderShock
      case "QUICK_ATTACK":  return .quickAttack
      case "SCRATCH":  return .scratch
      case "EMBER":  return .ember
      case "VINE_WHIP":  return .vineWhip
      case "TACKLE":  return .tackle
      case "RAZOR_LEAF":  return .razorLeaf
      case "TAKE_DOWN":  return .takeDown
      case "WATER_GUN":  return .waterGun
      case "BITE":  return .bite
      case "POUND":  return .pound
      case "DOUBLE_SLAP":  return .doubleSlap
      case "WRAP":  return .wrap
      case "HYPER_BEAM":  return .hyperBeam
      case "LICK":  return .lick
      case "DARK_PULSE":  return .darkPulse
      case "SMOG":  return .smog
      case "SLUDGE":  return .sludge
      case "METAL_CLAW":  return .metalClaw
      case "VICE_GRIP":  return .viceGrip
      case "FLAME_WHEEL":  return .flameWheel
      case "MEGAHORN":  return .megahorn
      case "WING_ATTACK":  return .wingAttack
      case "FLAMETHROWER":  return .flamethrower
      case "SUCKER_PUNCH":  return .suckerPunch
      case "DIG":  return .dig
      case "LOW_KICK":  return .lowKick
      case "CROSS_CHOP":  return .crossChop
      case "PSYCHO_CUT":  return .psychoCut
      case "PSYBEAM":  return .psybeam
      case "EARTHQUAKE":  return .earthquake
      case "STONE_EDGE":  return .stoneEdge
      case "ICE_PUNCH":  return .icePunch
      case "HEART_STAMP":  return .heartStamp
      case "DISCHARGE":  return .discharge
      case "FLASH_CANNON":  return .flashCannon
      case "PECK":  return .peck
      case "DRILL_PECK":  return .drillPeck
      case "ICE_BEAM":  return .iceBeam
      case "BLIZZARD":  return .blizzard
      case "AIR_SLASH":  return .airSlash
      case "HEAT_WAVE":  return .heatWave
      case "TWINEEDLE":  return .twineedle
      case "POISON_JAB":  return .poisonJab
      case "AERIAL_ACE":  return .aerialAce
      case "DRILL_RUN":  return .drillRun
      case "PETAL_BLIZZARD":  return .petalBlizzard
      case "MEGA_DRAIN":  return .megaDrain
      case "BUG_BUZZ":  return .bugBuzz
      case "POISON_FANG":  return .poisonFang
      case "NIGHT_SLASH":  return .nightSlash
      case "SLASH":  return .slash
      case "BUBBLE_BEAM":  return .bubbleBeam
      case "SUBMISSION":  return .submission
      case "KARATE_CHOP":  return .karateChop
      case "LOW_SWEEP":  return .lowSweep
      case "AQUA_JET":  return .aquaJet
      case "AQUA_TAIL":  return .aquaTail
      case "SEED_BOMB":  return .seedBomb
      case "PSYSHOCK":  return .psyshock
      case "ROCK_THROW":  return .rockThrow
      case "ANCIENT_POWER":  return .ancientPower
      case "ROCK_TOMB":  return .rockTomb
      case "ROCK_SLIDE":  return .rockSlide
      case "POWER_GEM":  return .powerGem
      case "SHADOW_SNEAK":  return .shadowSneak
      case "SHADOW_PUNCH":  return .shadowPunch
      case "SHADOW_CLAW":  return .shadowClaw
      case "OMINOUS_WIND":  return .ominousWind
      case "SHADOW_BALL":  return .shadowBall
      case "BULLET_PUNCH":  return .bulletPunch
      case "MAGNET_BOMB":  return .magnetBomb
      case "STEEL_WING":  return .steelWing
      case "IRON_HEAD":  return .ironHead
      case "PARABOLIC_CHARGE":  return .parabolicCharge
      case "SPARK":  return .spark
      case "THUNDER_PUNCH":  return .thunderPunch
      case "THUNDER":  return .thunder
      case "THUNDERBOLT":  return .thunderbolt
      case "TWISTER":  return .twister
      case "DRAGON_BREATH":  return .dragonBreath
      case "DRAGON_PULSE":  return .dragonPulse
      case "DRAGON_CLAW":  return .dragonClaw
      case "DISARMING_VOICE":  return .disarmingVoice
      case "DRAINING_KISS":  return .drainingKiss
      case "DAZZLING_GLEAM":  return .dazzlingGleam
      case "MOONBLAST":  return .moonblast
      case "PLAY_ROUGH":  return .playRough
      case "CROSS_POISON":  return .crossPoison
      case "SLUDGE_BOMB":  return .sludgeBomb
      case "SLUDGE_WAVE":  return .sludgeWave
      case "GUNK_SHOT":  return .gunkShot
      case "MUD_SHOT":  return .mudShot
      case "BONE_CLUB":  return .boneClub
      case "BULLDOZE":  return .bulldoze
      case "MUD_BOMB":  return .mudBomb
      case "FURY_CUTTER":  return .furyCutter
      case "BUG_BITE":  return .bugBite
      case "SIGNAL_BEAM":  return .signalBeam
      case "X_SCISSOR":  return .xScissor
      case "FLAME_CHARGE":  return .flameCharge
      case "FLAME_BURST":  return .flameBurst
      case "FIRE_BLAST":  return .fireBlast
      case "BRINE":  return .brine
      case "WATER_PULSE":  return .waterPulse
      case "SCALD":  return .scald
      case "HYDRO_PUMP":  return .hydroPump
      case "PSYCHIC":  return .psychic
      case "PSYSTRIKE":  return .psystrike
      case "ICE_SHARD":  return .iceShard
      case "ICY_WIND":  return .icyWind
      case "FROST_BREATH":  return .frostBreath
      case "ABSORB":  return .absorb
      case "GIGA_DRAIN":  return .gigaDrain
      case "FIRE_PUNCH":  return .firePunch
      case "SOLAR_BEAM":  return .solarBeam
      case "LEAF_BLADE":  return .leafBlade
      case "POWER_WHIP":  return .powerWhip
      case "SPLASH":  return .splash
      case "ACID":  return .acid
      case "AIR_CUTTER":  return .airCutter
      case "HURRICANE":  return .hurricane
      case "BRICK_BREAK":  return .brickBreak
      case "CUT":  return .cut
      case "SWIFT":  return .swift
      case "HORN_ATTACK":  return .hornAttack
      case "STOMP":  return .stomp
      case "HEADBUTT":  return .headbutt
      case "HYPER_FANG":  return .hyperFang
      case "SLAM":  return .slam
      case "BODY_SLAM":  return .bodySlam
      case "REST":  return .rest
      case "STRUGGLE":  return .struggle
      case "SCALD_BLASTOISE":  return .scaldBlastoise
      case "HYDRO_PUMP_BLASTOISE":  return .hydroPumpBlastoise
      case "WRAP_GREEN":  return .wrapGreen
      case "WRAP_PINK":  return .wrapPink
      case "FURY_CUTTER_FAST":  return .furyCutterFast
      case "BUG_BITE_FAST":  return .bugBiteFast
      case "BITE_FAST":  return .biteFast
      case "SUCKER_PUNCH_FAST":  return .suckerPunchFast
      case "DRAGON_BREATH_FAST":  return .dragonBreathFast
      case "THUNDER_SHOCK_FAST":  return .thunderShockFast
      case "SPARK_FAST":  return .sparkFast
      case "LOW_KICK_FAST":  return .lowKickFast
      case "KARATE_CHOP_FAST":  return .karateChopFast
      case "EMBER_FAST":  return .emberFast
      case "WING_ATTACK_FAST":  return .wingAttackFast
      case "PECK_FAST":  return .peckFast
      case "LICK_FAST":  return .lickFast
      case "SHADOW_CLAW_FAST":  return .shadowClawFast
      case "VINE_WHIP_FAST":  return .vineWhipFast
      case "RAZOR_LEAF_FAST":  return .razorLeafFast
      case "MUD_SHOT_FAST":  return .mudShotFast
      case "ICE_SHARD_FAST":  return .iceShardFast
      case "FROST_BREATH_FAST":  return .frostBreathFast
      case "QUICK_ATTACK_FAST":  return .quickAttackFast
      case "SCRATCH_FAST":  return .scratchFast
      case "TACKLE_FAST":  return .tackleFast
      case "POUND_FAST":  return .poundFast
      case "CUT_FAST":  return .cutFast
      case "POISON_JAB_FAST":  return .poisonJabFast
      case "ACID_FAST":  return .acidFast
      case "PSYCHO_CUT_FAST":  return .psychoCutFast
      case "ROCK_THROW_FAST":  return .rockThrowFast
      case "METAL_CLAW_FAST":  return .metalClawFast
      case "BULLET_PUNCH_FAST":  return .bulletPunchFast
      case "WATER_GUN_FAST":  return .waterGunFast
      case "SPLASH_FAST":  return .splashFast
      case "WATER_GUN_FAST_BLASTOISE":  return .waterGunFastBlastoise
      case "MUD_SLAP_FAST":  return .mudSlapFast
      case "ZEN_HEADBUTT_FAST":  return .zenHeadbuttFast
      case "CONFUSION_FAST":  return .confusionFast
      case "POISON_STING_FAST":  return .poisonStingFast
      case "BUBBLE_FAST":  return .bubbleFast
      case "FEINT_ATTACK_FAST":  return .feintAttackFast
      case "STEEL_WING_FAST":  return .steelWingFast
      case "FIRE_FANG_FAST":  return .fireFangFast
      case "ROCK_SMASH_FAST":  return .rockSmashFast
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .moveUnset: return ".moveUnset"
      case .thunderShock: return ".thunderShock"
      case .quickAttack: return ".quickAttack"
      case .scratch: return ".scratch"
      case .ember: return ".ember"
      case .vineWhip: return ".vineWhip"
      case .tackle: return ".tackle"
      case .razorLeaf: return ".razorLeaf"
      case .takeDown: return ".takeDown"
      case .waterGun: return ".waterGun"
      case .bite: return ".bite"
      case .pound: return ".pound"
      case .doubleSlap: return ".doubleSlap"
      case .wrap: return ".wrap"
      case .hyperBeam: return ".hyperBeam"
      case .lick: return ".lick"
      case .darkPulse: return ".darkPulse"
      case .smog: return ".smog"
      case .sludge: return ".sludge"
      case .metalClaw: return ".metalClaw"
      case .viceGrip: return ".viceGrip"
      case .flameWheel: return ".flameWheel"
      case .megahorn: return ".megahorn"
      case .wingAttack: return ".wingAttack"
      case .flamethrower: return ".flamethrower"
      case .suckerPunch: return ".suckerPunch"
      case .dig: return ".dig"
      case .lowKick: return ".lowKick"
      case .crossChop: return ".crossChop"
      case .psychoCut: return ".psychoCut"
      case .psybeam: return ".psybeam"
      case .earthquake: return ".earthquake"
      case .stoneEdge: return ".stoneEdge"
      case .icePunch: return ".icePunch"
      case .heartStamp: return ".heartStamp"
      case .discharge: return ".discharge"
      case .flashCannon: return ".flashCannon"
      case .peck: return ".peck"
      case .drillPeck: return ".drillPeck"
      case .iceBeam: return ".iceBeam"
      case .blizzard: return ".blizzard"
      case .airSlash: return ".airSlash"
      case .heatWave: return ".heatWave"
      case .twineedle: return ".twineedle"
      case .poisonJab: return ".poisonJab"
      case .aerialAce: return ".aerialAce"
      case .drillRun: return ".drillRun"
      case .petalBlizzard: return ".petalBlizzard"
      case .megaDrain: return ".megaDrain"
      case .bugBuzz: return ".bugBuzz"
      case .poisonFang: return ".poisonFang"
      case .nightSlash: return ".nightSlash"
      case .slash: return ".slash"
      case .bubbleBeam: return ".bubbleBeam"
      case .submission: return ".submission"
      case .karateChop: return ".karateChop"
      case .lowSweep: return ".lowSweep"
      case .aquaJet: return ".aquaJet"
      case .aquaTail: return ".aquaTail"
      case .seedBomb: return ".seedBomb"
      case .psyshock: return ".psyshock"
      case .rockThrow: return ".rockThrow"
      case .ancientPower: return ".ancientPower"
      case .rockTomb: return ".rockTomb"
      case .rockSlide: return ".rockSlide"
      case .powerGem: return ".powerGem"
      case .shadowSneak: return ".shadowSneak"
      case .shadowPunch: return ".shadowPunch"
      case .shadowClaw: return ".shadowClaw"
      case .ominousWind: return ".ominousWind"
      case .shadowBall: return ".shadowBall"
      case .bulletPunch: return ".bulletPunch"
      case .magnetBomb: return ".magnetBomb"
      case .steelWing: return ".steelWing"
      case .ironHead: return ".ironHead"
      case .parabolicCharge: return ".parabolicCharge"
      case .spark: return ".spark"
      case .thunderPunch: return ".thunderPunch"
      case .thunder: return ".thunder"
      case .thunderbolt: return ".thunderbolt"
      case .twister: return ".twister"
      case .dragonBreath: return ".dragonBreath"
      case .dragonPulse: return ".dragonPulse"
      case .dragonClaw: return ".dragonClaw"
      case .disarmingVoice: return ".disarmingVoice"
      case .drainingKiss: return ".drainingKiss"
      case .dazzlingGleam: return ".dazzlingGleam"
      case .moonblast: return ".moonblast"
      case .playRough: return ".playRough"
      case .crossPoison: return ".crossPoison"
      case .sludgeBomb: return ".sludgeBomb"
      case .sludgeWave: return ".sludgeWave"
      case .gunkShot: return ".gunkShot"
      case .mudShot: return ".mudShot"
      case .boneClub: return ".boneClub"
      case .bulldoze: return ".bulldoze"
      case .mudBomb: return ".mudBomb"
      case .furyCutter: return ".furyCutter"
      case .bugBite: return ".bugBite"
      case .signalBeam: return ".signalBeam"
      case .xScissor: return ".xScissor"
      case .flameCharge: return ".flameCharge"
      case .flameBurst: return ".flameBurst"
      case .fireBlast: return ".fireBlast"
      case .brine: return ".brine"
      case .waterPulse: return ".waterPulse"
      case .scald: return ".scald"
      case .hydroPump: return ".hydroPump"
      case .psychic: return ".psychic"
      case .psystrike: return ".psystrike"
      case .iceShard: return ".iceShard"
      case .icyWind: return ".icyWind"
      case .frostBreath: return ".frostBreath"
      case .absorb: return ".absorb"
      case .gigaDrain: return ".gigaDrain"
      case .firePunch: return ".firePunch"
      case .solarBeam: return ".solarBeam"
      case .leafBlade: return ".leafBlade"
      case .powerWhip: return ".powerWhip"
      case .splash: return ".splash"
      case .acid: return ".acid"
      case .airCutter: return ".airCutter"
      case .hurricane: return ".hurricane"
      case .brickBreak: return ".brickBreak"
      case .cut: return ".cut"
      case .swift: return ".swift"
      case .hornAttack: return ".hornAttack"
      case .stomp: return ".stomp"
      case .headbutt: return ".headbutt"
      case .hyperFang: return ".hyperFang"
      case .slam: return ".slam"
      case .bodySlam: return ".bodySlam"
      case .rest: return ".rest"
      case .struggle: return ".struggle"
      case .scaldBlastoise: return ".scaldBlastoise"
      case .hydroPumpBlastoise: return ".hydroPumpBlastoise"
      case .wrapGreen: return ".wrapGreen"
      case .wrapPink: return ".wrapPink"
      case .furyCutterFast: return ".furyCutterFast"
      case .bugBiteFast: return ".bugBiteFast"
      case .biteFast: return ".biteFast"
      case .suckerPunchFast: return ".suckerPunchFast"
      case .dragonBreathFast: return ".dragonBreathFast"
      case .thunderShockFast: return ".thunderShockFast"
      case .sparkFast: return ".sparkFast"
      case .lowKickFast: return ".lowKickFast"
      case .karateChopFast: return ".karateChopFast"
      case .emberFast: return ".emberFast"
      case .wingAttackFast: return ".wingAttackFast"
      case .peckFast: return ".peckFast"
      case .lickFast: return ".lickFast"
      case .shadowClawFast: return ".shadowClawFast"
      case .vineWhipFast: return ".vineWhipFast"
      case .razorLeafFast: return ".razorLeafFast"
      case .mudShotFast: return ".mudShotFast"
      case .iceShardFast: return ".iceShardFast"
      case .frostBreathFast: return ".frostBreathFast"
      case .quickAttackFast: return ".quickAttackFast"
      case .scratchFast: return ".scratchFast"
      case .tackleFast: return ".tackleFast"
      case .poundFast: return ".poundFast"
      case .cutFast: return ".cutFast"
      case .poisonJabFast: return ".poisonJabFast"
      case .acidFast: return ".acidFast"
      case .psychoCutFast: return ".psychoCutFast"
      case .rockThrowFast: return ".rockThrowFast"
      case .metalClawFast: return ".metalClawFast"
      case .bulletPunchFast: return ".bulletPunchFast"
      case .waterGunFast: return ".waterGunFast"
      case .splashFast: return ".splashFast"
      case .waterGunFastBlastoise: return ".waterGunFastBlastoise"
      case .mudSlapFast: return ".mudSlapFast"
      case .zenHeadbuttFast: return ".zenHeadbuttFast"
      case .confusionFast: return ".confusionFast"
      case .poisonStingFast: return ".poisonStingFast"
      case .bubbleFast: return ".bubbleFast"
      case .feintAttackFast: return ".feintAttackFast"
      case .steelWingFast: return ".steelWingFast"
      case .fireFangFast: return ".fireFangFast"
      case .rockSmashFast: return ".rockSmashFast"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonMovementType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case movementStatic = 0
    case movementJump = 1
    case movementVertical = 2
    case movementPsychic = 3
    case movementElectric = 4
    case movementFlying = 5
    case movementHovering = 6
    public func toString() -> String {
      switch self {
      case .movementStatic: return "MOVEMENT_STATIC"
      case .movementJump: return "MOVEMENT_JUMP"
      case .movementVertical: return "MOVEMENT_VERTICAL"
      case .movementPsychic: return "MOVEMENT_PSYCHIC"
      case .movementElectric: return "MOVEMENT_ELECTRIC"
      case .movementFlying: return "MOVEMENT_FLYING"
      case .movementHovering: return "MOVEMENT_HOVERING"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonMovementType {
      switch str {
      case "MOVEMENT_STATIC":  return .movementStatic
      case "MOVEMENT_JUMP":  return .movementJump
      case "MOVEMENT_VERTICAL":  return .movementVertical
      case "MOVEMENT_PSYCHIC":  return .movementPsychic
      case "MOVEMENT_ELECTRIC":  return .movementElectric
      case "MOVEMENT_FLYING":  return .movementFlying
      case "MOVEMENT_HOVERING":  return .movementHovering
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .movementStatic: return ".movementStatic"
      case .movementJump: return ".movementJump"
      case .movementVertical: return ".movementVertical"
      case .movementPsychic: return ".movementPsychic"
      case .movementElectric: return ".movementElectric"
      case .movementFlying: return ".movementFlying"
      case .movementHovering: return ".movementHovering"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonRarity:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case pokemonRarityNormal = 0
    case pokemonRarityLegendary = 1
    case pokemonRarityMythic = 2
    public func toString() -> String {
      switch self {
      case .pokemonRarityNormal: return "POKEMON_RARITY_NORMAL"
      case .pokemonRarityLegendary: return "POKEMON_RARITY_LEGENDARY"
      case .pokemonRarityMythic: return "POKEMON_RARITY_MYTHIC"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonRarity {
      switch str {
      case "POKEMON_RARITY_NORMAL":  return .pokemonRarityNormal
      case "POKEMON_RARITY_LEGENDARY":  return .pokemonRarityLegendary
      case "POKEMON_RARITY_MYTHIC":  return .pokemonRarityMythic
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .pokemonRarityNormal: return ".pokemonRarityNormal"
      case .pokemonRarityLegendary: return ".pokemonRarityLegendary"
      case .pokemonRarityMythic: return ".pokemonRarityMythic"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case pokemonTypeNone = 0
    case pokemonTypeNormal = 1
    case pokemonTypeFighting = 2
    case pokemonTypeFlying = 3
    case pokemonTypePoison = 4
    case pokemonTypeGround = 5
    case pokemonTypeRock = 6
    case pokemonTypeBug = 7
    case pokemonTypeGhost = 8
    case pokemonTypeSteel = 9
    case pokemonTypeFire = 10
    case pokemonTypeWater = 11
    case pokemonTypeGrass = 12
    case pokemonTypeElectric = 13
    case pokemonTypePsychic = 14
    case pokemonTypeIce = 15
    case pokemonTypeDragon = 16
    case pokemonTypeDark = 17
    case pokemonTypeFairy = 18
    public func toString() -> String {
      switch self {
      case .pokemonTypeNone: return "POKEMON_TYPE_NONE"
      case .pokemonTypeNormal: return "POKEMON_TYPE_NORMAL"
      case .pokemonTypeFighting: return "POKEMON_TYPE_FIGHTING"
      case .pokemonTypeFlying: return "POKEMON_TYPE_FLYING"
      case .pokemonTypePoison: return "POKEMON_TYPE_POISON"
      case .pokemonTypeGround: return "POKEMON_TYPE_GROUND"
      case .pokemonTypeRock: return "POKEMON_TYPE_ROCK"
      case .pokemonTypeBug: return "POKEMON_TYPE_BUG"
      case .pokemonTypeGhost: return "POKEMON_TYPE_GHOST"
      case .pokemonTypeSteel: return "POKEMON_TYPE_STEEL"
      case .pokemonTypeFire: return "POKEMON_TYPE_FIRE"
      case .pokemonTypeWater: return "POKEMON_TYPE_WATER"
      case .pokemonTypeGrass: return "POKEMON_TYPE_GRASS"
      case .pokemonTypeElectric: return "POKEMON_TYPE_ELECTRIC"
      case .pokemonTypePsychic: return "POKEMON_TYPE_PSYCHIC"
      case .pokemonTypeIce: return "POKEMON_TYPE_ICE"
      case .pokemonTypeDragon: return "POKEMON_TYPE_DRAGON"
      case .pokemonTypeDark: return "POKEMON_TYPE_DARK"
      case .pokemonTypeFairy: return "POKEMON_TYPE_FAIRY"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonType {
      switch str {
      case "POKEMON_TYPE_NONE":  return .pokemonTypeNone
      case "POKEMON_TYPE_NORMAL":  return .pokemonTypeNormal
      case "POKEMON_TYPE_FIGHTING":  return .pokemonTypeFighting
      case "POKEMON_TYPE_FLYING":  return .pokemonTypeFlying
      case "POKEMON_TYPE_POISON":  return .pokemonTypePoison
      case "POKEMON_TYPE_GROUND":  return .pokemonTypeGround
      case "POKEMON_TYPE_ROCK":  return .pokemonTypeRock
      case "POKEMON_TYPE_BUG":  return .pokemonTypeBug
      case "POKEMON_TYPE_GHOST":  return .pokemonTypeGhost
      case "POKEMON_TYPE_STEEL":  return .pokemonTypeSteel
      case "POKEMON_TYPE_FIRE":  return .pokemonTypeFire
      case "POKEMON_TYPE_WATER":  return .pokemonTypeWater
      case "POKEMON_TYPE_GRASS":  return .pokemonTypeGrass
      case "POKEMON_TYPE_ELECTRIC":  return .pokemonTypeElectric
      case "POKEMON_TYPE_PSYCHIC":  return .pokemonTypePsychic
      case "POKEMON_TYPE_ICE":  return .pokemonTypeIce
      case "POKEMON_TYPE_DRAGON":  return .pokemonTypeDragon
      case "POKEMON_TYPE_DARK":  return .pokemonTypeDark
      case "POKEMON_TYPE_FAIRY":  return .pokemonTypeFairy
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .pokemonTypeNone: return ".pokemonTypeNone"
      case .pokemonTypeNormal: return ".pokemonTypeNormal"
      case .pokemonTypeFighting: return ".pokemonTypeFighting"
      case .pokemonTypeFlying: return ".pokemonTypeFlying"
      case .pokemonTypePoison: return ".pokemonTypePoison"
      case .pokemonTypeGround: return ".pokemonTypeGround"
      case .pokemonTypeRock: return ".pokemonTypeRock"
      case .pokemonTypeBug: return ".pokemonTypeBug"
      case .pokemonTypeGhost: return ".pokemonTypeGhost"
      case .pokemonTypeSteel: return ".pokemonTypeSteel"
      case .pokemonTypeFire: return ".pokemonTypeFire"
      case .pokemonTypeWater: return ".pokemonTypeWater"
      case .pokemonTypeGrass: return ".pokemonTypeGrass"
      case .pokemonTypeElectric: return ".pokemonTypeElectric"
      case .pokemonTypePsychic: return ".pokemonTypePsychic"
      case .pokemonTypeIce: return ".pokemonTypeIce"
      case .pokemonTypeDragon: return ".pokemonTypeDragon"
      case .pokemonTypeDark: return ".pokemonTypeDark"
      case .pokemonTypeFairy: return ".pokemonTypeFairy"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum TeamColor:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case neutral = 0
    case blue = 1
    case red = 2
    case yellow = 3
    public func toString() -> String {
      switch self {
      case .neutral: return "NEUTRAL"
      case .blue: return "BLUE"
      case .red: return "RED"
      case .yellow: return "YELLOW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.TeamColor {
      switch str {
      case "NEUTRAL":  return .neutral
      case "BLUE":  return .blue
      case "RED":  return .red
      case "YELLOW":  return .yellow
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .neutral: return ".neutral"
      case .blue: return ".blue"
      case .red: return ".red"
      case .yellow: return ".yellow"
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum TutorialState:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case legalScreen = 0
    case avatarSelection = 1
    case accountCreation = 2
    case pokemonCapture = 3
    case nameSelection = 4
    case pokemonBerry = 5
    case useItem = 6
    case firstTimeExperienceComplete = 7
    case pokestopTutorial = 8
    case gymTutorial = 9
    public func toString() -> String {
      switch self {
      case .legalScreen: return "LEGAL_SCREEN"
      case .avatarSelection: return "AVATAR_SELECTION"
      case .accountCreation: return "ACCOUNT_CREATION"
      case .pokemonCapture: return "POKEMON_CAPTURE"
      case .nameSelection: return "NAME_SELECTION"
      case .pokemonBerry: return "POKEMON_BERRY"
      case .useItem: return "USE_ITEM"
      case .firstTimeExperienceComplete: return "FIRST_TIME_EXPERIENCE_COMPLETE"
      case .pokestopTutorial: return "POKESTOP_TUTORIAL"
      case .gymTutorial: return "GYM_TUTORIAL"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.TutorialState {
      switch str {
      case "LEGAL_SCREEN":  return .legalScreen
      case "AVATAR_SELECTION":  return .avatarSelection
      case "ACCOUNT_CREATION":  return .accountCreation
      case "POKEMON_CAPTURE":  return .pokemonCapture
      case "NAME_SELECTION":  return .nameSelection
      case "POKEMON_BERRY":  return .pokemonBerry
      case "USE_ITEM":  return .useItem
      case "FIRST_TIME_EXPERIENCE_COMPLETE":  return .firstTimeExperienceComplete
      case "POKESTOP_TUTORIAL":  return .pokestopTutorial
      case "GYM_TUTORIAL":  return .gymTutorial
      default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
      switch self {
      case .legalScreen: return ".legalScreen"
      case .avatarSelection: return ".avatarSelection"
      case .accountCreation: return ".accountCreation"
      case .pokemonCapture: return ".pokemonCapture"
      case .nameSelection: return ".nameSelection"
      case .pokemonBerry: return ".pokemonBerry"
      case .useItem: return ".useItem"
      case .firstTimeExperienceComplete: return ".firstTimeExperienceComplete"
      case .pokestopTutorial: return ".pokestopTutorial"
      case .gymTutorial: return ".gymTutorial"
      }
    }
  }

  //Enum type declaration end 

}

// @@protoc_insertion_point(global_scope)
