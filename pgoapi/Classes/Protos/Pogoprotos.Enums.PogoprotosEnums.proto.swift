// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Enums.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Enums {
  public struct PogoprotosEnumsRoot {
    public static var sharedInstance : PogoprotosEnumsRoot {
     struct Static {
         static let instance : PogoprotosEnumsRoot = PogoprotosEnumsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum ActivityType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case ActivityUnknown = 0
    case ActivityCatchPokemon = 1
    case ActivityCatchLegendPokemon = 2
    case ActivityFleePokemon = 3
    case ActivityDefeatFort = 4
    case ActivityEvolvePokemon = 5
    case ActivityHatchEgg = 6
    case ActivityWalkKm = 7
    case ActivityPokedexEntryNew = 8
    case ActivityCatchFirstThrow = 9
    case ActivityCatchNiceThrow = 10
    case ActivityCatchGreatThrow = 11
    case ActivityCatchExcellentThrow = 12
    case ActivityCatchCurveball = 13
    case ActivityCatchFirstCatchOfDay = 14
    case ActivityCatchMilestone = 15
    case ActivityTrainPokemon = 16
    case ActivitySearchFort = 17
    case ActivityReleasePokemon = 18
    case ActivityHatchEggSmallBonus = 19
    case ActivityHatchEggMediumBonus = 20
    case ActivityHatchEggLargeBonus = 21
    case ActivityDefeatGymDefender = 22
    case ActivityDefeatGymLeader = 23
    public func toString() -> String {
      switch self {
      case .ActivityUnknown: return "ACTIVITY_UNKNOWN"
      case .ActivityCatchPokemon: return "ACTIVITY_CATCH_POKEMON"
      case .ActivityCatchLegendPokemon: return "ACTIVITY_CATCH_LEGEND_POKEMON"
      case .ActivityFleePokemon: return "ACTIVITY_FLEE_POKEMON"
      case .ActivityDefeatFort: return "ACTIVITY_DEFEAT_FORT"
      case .ActivityEvolvePokemon: return "ACTIVITY_EVOLVE_POKEMON"
      case .ActivityHatchEgg: return "ACTIVITY_HATCH_EGG"
      case .ActivityWalkKm: return "ACTIVITY_WALK_KM"
      case .ActivityPokedexEntryNew: return "ACTIVITY_POKEDEX_ENTRY_NEW"
      case .ActivityCatchFirstThrow: return "ACTIVITY_CATCH_FIRST_THROW"
      case .ActivityCatchNiceThrow: return "ACTIVITY_CATCH_NICE_THROW"
      case .ActivityCatchGreatThrow: return "ACTIVITY_CATCH_GREAT_THROW"
      case .ActivityCatchExcellentThrow: return "ACTIVITY_CATCH_EXCELLENT_THROW"
      case .ActivityCatchCurveball: return "ACTIVITY_CATCH_CURVEBALL"
      case .ActivityCatchFirstCatchOfDay: return "ACTIVITY_CATCH_FIRST_CATCH_OF_DAY"
      case .ActivityCatchMilestone: return "ACTIVITY_CATCH_MILESTONE"
      case .ActivityTrainPokemon: return "ACTIVITY_TRAIN_POKEMON"
      case .ActivitySearchFort: return "ACTIVITY_SEARCH_FORT"
      case .ActivityReleasePokemon: return "ACTIVITY_RELEASE_POKEMON"
      case .ActivityHatchEggSmallBonus: return "ACTIVITY_HATCH_EGG_SMALL_BONUS"
      case .ActivityHatchEggMediumBonus: return "ACTIVITY_HATCH_EGG_MEDIUM_BONUS"
      case .ActivityHatchEggLargeBonus: return "ACTIVITY_HATCH_EGG_LARGE_BONUS"
      case .ActivityDefeatGymDefender: return "ACTIVITY_DEFEAT_GYM_DEFENDER"
      case .ActivityDefeatGymLeader: return "ACTIVITY_DEFEAT_GYM_LEADER"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.ActivityType {
      switch str {
      case "ACTIVITY_UNKNOWN":  return .ActivityUnknown
      case "ACTIVITY_CATCH_POKEMON":  return .ActivityCatchPokemon
      case "ACTIVITY_CATCH_LEGEND_POKEMON":  return .ActivityCatchLegendPokemon
      case "ACTIVITY_FLEE_POKEMON":  return .ActivityFleePokemon
      case "ACTIVITY_DEFEAT_FORT":  return .ActivityDefeatFort
      case "ACTIVITY_EVOLVE_POKEMON":  return .ActivityEvolvePokemon
      case "ACTIVITY_HATCH_EGG":  return .ActivityHatchEgg
      case "ACTIVITY_WALK_KM":  return .ActivityWalkKm
      case "ACTIVITY_POKEDEX_ENTRY_NEW":  return .ActivityPokedexEntryNew
      case "ACTIVITY_CATCH_FIRST_THROW":  return .ActivityCatchFirstThrow
      case "ACTIVITY_CATCH_NICE_THROW":  return .ActivityCatchNiceThrow
      case "ACTIVITY_CATCH_GREAT_THROW":  return .ActivityCatchGreatThrow
      case "ACTIVITY_CATCH_EXCELLENT_THROW":  return .ActivityCatchExcellentThrow
      case "ACTIVITY_CATCH_CURVEBALL":  return .ActivityCatchCurveball
      case "ACTIVITY_CATCH_FIRST_CATCH_OF_DAY":  return .ActivityCatchFirstCatchOfDay
      case "ACTIVITY_CATCH_MILESTONE":  return .ActivityCatchMilestone
      case "ACTIVITY_TRAIN_POKEMON":  return .ActivityTrainPokemon
      case "ACTIVITY_SEARCH_FORT":  return .ActivitySearchFort
      case "ACTIVITY_RELEASE_POKEMON":  return .ActivityReleasePokemon
      case "ACTIVITY_HATCH_EGG_SMALL_BONUS":  return .ActivityHatchEggSmallBonus
      case "ACTIVITY_HATCH_EGG_MEDIUM_BONUS":  return .ActivityHatchEggMediumBonus
      case "ACTIVITY_HATCH_EGG_LARGE_BONUS":  return .ActivityHatchEggLargeBonus
      case "ACTIVITY_DEFEAT_GYM_DEFENDER":  return .ActivityDefeatGymDefender
      case "ACTIVITY_DEFEAT_GYM_LEADER":  return .ActivityDefeatGymLeader
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .ActivityUnknown: return ".ActivityUnknown"
            case .ActivityCatchPokemon: return ".ActivityCatchPokemon"
            case .ActivityCatchLegendPokemon: return ".ActivityCatchLegendPokemon"
            case .ActivityFleePokemon: return ".ActivityFleePokemon"
            case .ActivityDefeatFort: return ".ActivityDefeatFort"
            case .ActivityEvolvePokemon: return ".ActivityEvolvePokemon"
            case .ActivityHatchEgg: return ".ActivityHatchEgg"
            case .ActivityWalkKm: return ".ActivityWalkKm"
            case .ActivityPokedexEntryNew: return ".ActivityPokedexEntryNew"
            case .ActivityCatchFirstThrow: return ".ActivityCatchFirstThrow"
            case .ActivityCatchNiceThrow: return ".ActivityCatchNiceThrow"
            case .ActivityCatchGreatThrow: return ".ActivityCatchGreatThrow"
            case .ActivityCatchExcellentThrow: return ".ActivityCatchExcellentThrow"
            case .ActivityCatchCurveball: return ".ActivityCatchCurveball"
            case .ActivityCatchFirstCatchOfDay: return ".ActivityCatchFirstCatchOfDay"
            case .ActivityCatchMilestone: return ".ActivityCatchMilestone"
            case .ActivityTrainPokemon: return ".ActivityTrainPokemon"
            case .ActivitySearchFort: return ".ActivitySearchFort"
            case .ActivityReleasePokemon: return ".ActivityReleasePokemon"
            case .ActivityHatchEggSmallBonus: return ".ActivityHatchEggSmallBonus"
            case .ActivityHatchEggMediumBonus: return ".ActivityHatchEggMediumBonus"
            case .ActivityHatchEggLargeBonus: return ".ActivityHatchEggLargeBonus"
            case .ActivityDefeatGymDefender: return ".ActivityDefeatGymDefender"
            case .ActivityDefeatGymLeader: return ".ActivityDefeatGymLeader"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum BadgeType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case BadgeUnset = 0
    case BadgeTravelKm = 1
    case BadgePokedexEntries = 2
    case BadgeCaptureTotal = 3
    case BadgeDefeatedFort = 4
    case BadgeEvolvedTotal = 5
    case BadgeHatchedTotal = 6
    case BadgeEncounteredTotal = 7
    case BadgePokestopsVisited = 8
    case BadgeUniquePokestops = 9
    case BadgePokeballThrown = 10
    case BadgeBigMagikarp = 11
    case BadgeDeployedTotal = 12
    case BadgeBattleAttackWon = 13
    case BadgeBattleTrainingWon = 14
    case BadgeBattleDefendWon = 15
    case BadgePrestigeRaised = 16
    case BadgePrestigeDropped = 17
    case BadgeTypeNormal = 18
    case BadgeTypeFighting = 19
    case BadgeTypeFlying = 20
    case BadgeTypePoison = 21
    case BadgeTypeGround = 22
    case BadgeTypeRock = 23
    case BadgeTypeBug = 24
    case BadgeTypeGhost = 25
    case BadgeTypeSteel = 26
    case BadgeTypeFire = 27
    case BadgeTypeWater = 28
    case BadgeTypeGrass = 29
    case BadgeTypeElectric = 30
    case BadgeTypePsychic = 31
    case BadgeTypeIce = 32
    case BadgeTypeDragon = 33
    case BadgeTypeDark = 34
    case BadgeTypeFairy = 35
    case BadgeSmallRattata = 36
    case BadgePikachu = 37
    public func toString() -> String {
      switch self {
      case .BadgeUnset: return "BADGE_UNSET"
      case .BadgeTravelKm: return "BADGE_TRAVEL_KM"
      case .BadgePokedexEntries: return "BADGE_POKEDEX_ENTRIES"
      case .BadgeCaptureTotal: return "BADGE_CAPTURE_TOTAL"
      case .BadgeDefeatedFort: return "BADGE_DEFEATED_FORT"
      case .BadgeEvolvedTotal: return "BADGE_EVOLVED_TOTAL"
      case .BadgeHatchedTotal: return "BADGE_HATCHED_TOTAL"
      case .BadgeEncounteredTotal: return "BADGE_ENCOUNTERED_TOTAL"
      case .BadgePokestopsVisited: return "BADGE_POKESTOPS_VISITED"
      case .BadgeUniquePokestops: return "BADGE_UNIQUE_POKESTOPS"
      case .BadgePokeballThrown: return "BADGE_POKEBALL_THROWN"
      case .BadgeBigMagikarp: return "BADGE_BIG_MAGIKARP"
      case .BadgeDeployedTotal: return "BADGE_DEPLOYED_TOTAL"
      case .BadgeBattleAttackWon: return "BADGE_BATTLE_ATTACK_WON"
      case .BadgeBattleTrainingWon: return "BADGE_BATTLE_TRAINING_WON"
      case .BadgeBattleDefendWon: return "BADGE_BATTLE_DEFEND_WON"
      case .BadgePrestigeRaised: return "BADGE_PRESTIGE_RAISED"
      case .BadgePrestigeDropped: return "BADGE_PRESTIGE_DROPPED"
      case .BadgeTypeNormal: return "BADGE_TYPE_NORMAL"
      case .BadgeTypeFighting: return "BADGE_TYPE_FIGHTING"
      case .BadgeTypeFlying: return "BADGE_TYPE_FLYING"
      case .BadgeTypePoison: return "BADGE_TYPE_POISON"
      case .BadgeTypeGround: return "BADGE_TYPE_GROUND"
      case .BadgeTypeRock: return "BADGE_TYPE_ROCK"
      case .BadgeTypeBug: return "BADGE_TYPE_BUG"
      case .BadgeTypeGhost: return "BADGE_TYPE_GHOST"
      case .BadgeTypeSteel: return "BADGE_TYPE_STEEL"
      case .BadgeTypeFire: return "BADGE_TYPE_FIRE"
      case .BadgeTypeWater: return "BADGE_TYPE_WATER"
      case .BadgeTypeGrass: return "BADGE_TYPE_GRASS"
      case .BadgeTypeElectric: return "BADGE_TYPE_ELECTRIC"
      case .BadgeTypePsychic: return "BADGE_TYPE_PSYCHIC"
      case .BadgeTypeIce: return "BADGE_TYPE_ICE"
      case .BadgeTypeDragon: return "BADGE_TYPE_DRAGON"
      case .BadgeTypeDark: return "BADGE_TYPE_DARK"
      case .BadgeTypeFairy: return "BADGE_TYPE_FAIRY"
      case .BadgeSmallRattata: return "BADGE_SMALL_RATTATA"
      case .BadgePikachu: return "BADGE_PIKACHU"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.BadgeType {
      switch str {
      case "BADGE_UNSET":  return .BadgeUnset
      case "BADGE_TRAVEL_KM":  return .BadgeTravelKm
      case "BADGE_POKEDEX_ENTRIES":  return .BadgePokedexEntries
      case "BADGE_CAPTURE_TOTAL":  return .BadgeCaptureTotal
      case "BADGE_DEFEATED_FORT":  return .BadgeDefeatedFort
      case "BADGE_EVOLVED_TOTAL":  return .BadgeEvolvedTotal
      case "BADGE_HATCHED_TOTAL":  return .BadgeHatchedTotal
      case "BADGE_ENCOUNTERED_TOTAL":  return .BadgeEncounteredTotal
      case "BADGE_POKESTOPS_VISITED":  return .BadgePokestopsVisited
      case "BADGE_UNIQUE_POKESTOPS":  return .BadgeUniquePokestops
      case "BADGE_POKEBALL_THROWN":  return .BadgePokeballThrown
      case "BADGE_BIG_MAGIKARP":  return .BadgeBigMagikarp
      case "BADGE_DEPLOYED_TOTAL":  return .BadgeDeployedTotal
      case "BADGE_BATTLE_ATTACK_WON":  return .BadgeBattleAttackWon
      case "BADGE_BATTLE_TRAINING_WON":  return .BadgeBattleTrainingWon
      case "BADGE_BATTLE_DEFEND_WON":  return .BadgeBattleDefendWon
      case "BADGE_PRESTIGE_RAISED":  return .BadgePrestigeRaised
      case "BADGE_PRESTIGE_DROPPED":  return .BadgePrestigeDropped
      case "BADGE_TYPE_NORMAL":  return .BadgeTypeNormal
      case "BADGE_TYPE_FIGHTING":  return .BadgeTypeFighting
      case "BADGE_TYPE_FLYING":  return .BadgeTypeFlying
      case "BADGE_TYPE_POISON":  return .BadgeTypePoison
      case "BADGE_TYPE_GROUND":  return .BadgeTypeGround
      case "BADGE_TYPE_ROCK":  return .BadgeTypeRock
      case "BADGE_TYPE_BUG":  return .BadgeTypeBug
      case "BADGE_TYPE_GHOST":  return .BadgeTypeGhost
      case "BADGE_TYPE_STEEL":  return .BadgeTypeSteel
      case "BADGE_TYPE_FIRE":  return .BadgeTypeFire
      case "BADGE_TYPE_WATER":  return .BadgeTypeWater
      case "BADGE_TYPE_GRASS":  return .BadgeTypeGrass
      case "BADGE_TYPE_ELECTRIC":  return .BadgeTypeElectric
      case "BADGE_TYPE_PSYCHIC":  return .BadgeTypePsychic
      case "BADGE_TYPE_ICE":  return .BadgeTypeIce
      case "BADGE_TYPE_DRAGON":  return .BadgeTypeDragon
      case "BADGE_TYPE_DARK":  return .BadgeTypeDark
      case "BADGE_TYPE_FAIRY":  return .BadgeTypeFairy
      case "BADGE_SMALL_RATTATA":  return .BadgeSmallRattata
      case "BADGE_PIKACHU":  return .BadgePikachu
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .BadgeUnset: return ".BadgeUnset"
            case .BadgeTravelKm: return ".BadgeTravelKm"
            case .BadgePokedexEntries: return ".BadgePokedexEntries"
            case .BadgeCaptureTotal: return ".BadgeCaptureTotal"
            case .BadgeDefeatedFort: return ".BadgeDefeatedFort"
            case .BadgeEvolvedTotal: return ".BadgeEvolvedTotal"
            case .BadgeHatchedTotal: return ".BadgeHatchedTotal"
            case .BadgeEncounteredTotal: return ".BadgeEncounteredTotal"
            case .BadgePokestopsVisited: return ".BadgePokestopsVisited"
            case .BadgeUniquePokestops: return ".BadgeUniquePokestops"
            case .BadgePokeballThrown: return ".BadgePokeballThrown"
            case .BadgeBigMagikarp: return ".BadgeBigMagikarp"
            case .BadgeDeployedTotal: return ".BadgeDeployedTotal"
            case .BadgeBattleAttackWon: return ".BadgeBattleAttackWon"
            case .BadgeBattleTrainingWon: return ".BadgeBattleTrainingWon"
            case .BadgeBattleDefendWon: return ".BadgeBattleDefendWon"
            case .BadgePrestigeRaised: return ".BadgePrestigeRaised"
            case .BadgePrestigeDropped: return ".BadgePrestigeDropped"
            case .BadgeTypeNormal: return ".BadgeTypeNormal"
            case .BadgeTypeFighting: return ".BadgeTypeFighting"
            case .BadgeTypeFlying: return ".BadgeTypeFlying"
            case .BadgeTypePoison: return ".BadgeTypePoison"
            case .BadgeTypeGround: return ".BadgeTypeGround"
            case .BadgeTypeRock: return ".BadgeTypeRock"
            case .BadgeTypeBug: return ".BadgeTypeBug"
            case .BadgeTypeGhost: return ".BadgeTypeGhost"
            case .BadgeTypeSteel: return ".BadgeTypeSteel"
            case .BadgeTypeFire: return ".BadgeTypeFire"
            case .BadgeTypeWater: return ".BadgeTypeWater"
            case .BadgeTypeGrass: return ".BadgeTypeGrass"
            case .BadgeTypeElectric: return ".BadgeTypeElectric"
            case .BadgeTypePsychic: return ".BadgeTypePsychic"
            case .BadgeTypeIce: return ".BadgeTypeIce"
            case .BadgeTypeDragon: return ".BadgeTypeDragon"
            case .BadgeTypeDark: return ".BadgeTypeDark"
            case .BadgeTypeFairy: return ".BadgeTypeFairy"
            case .BadgeSmallRattata: return ".BadgeSmallRattata"
            case .BadgePikachu: return ".BadgePikachu"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum CameraInterpolation:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case CamInterpCut = 0
    case CamInterpLinear = 1
    case CamInterpSmooth = 2
    case CamInterpSmoothRotLinearMove = 3
    case CamInterpDepends = 4
    public func toString() -> String {
      switch self {
      case .CamInterpCut: return "CAM_INTERP_CUT"
      case .CamInterpLinear: return "CAM_INTERP_LINEAR"
      case .CamInterpSmooth: return "CAM_INTERP_SMOOTH"
      case .CamInterpSmoothRotLinearMove: return "CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE"
      case .CamInterpDepends: return "CAM_INTERP_DEPENDS"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.CameraInterpolation {
      switch str {
      case "CAM_INTERP_CUT":  return .CamInterpCut
      case "CAM_INTERP_LINEAR":  return .CamInterpLinear
      case "CAM_INTERP_SMOOTH":  return .CamInterpSmooth
      case "CAM_INTERP_SMOOTH_ROT_LINEAR_MOVE":  return .CamInterpSmoothRotLinearMove
      case "CAM_INTERP_DEPENDS":  return .CamInterpDepends
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .CamInterpCut: return ".CamInterpCut"
            case .CamInterpLinear: return ".CamInterpLinear"
            case .CamInterpSmooth: return ".CamInterpSmooth"
            case .CamInterpSmoothRotLinearMove: return ".CamInterpSmoothRotLinearMove"
            case .CamInterpDepends: return ".CamInterpDepends"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum CameraTarget:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case CamTargetAttacker = 0
    case CamTargetAttackerEdge = 1
    case CamTargetAttackerGround = 2
    case CamTargetDefender = 3
    case CamTargetDefenderEdge = 4
    case CamTargetDefenderGround = 5
    case CamTargetAttackerDefender = 6
    case CamTargetAttackerDefenderEdge = 7
    case CamTargetDefenderAttacker = 8
    case CamTargetDefenderAttackerEdge = 9
    case CamTargetAttackerDefenderMirror = 11
    case CamTargetShoulderAttackerDefender = 12
    case CamTargetShoulderAttackerDefenderMirror = 13
    case CamTargetAttackerDefenderWorld = 14
    public func toString() -> String {
      switch self {
      case .CamTargetAttacker: return "CAM_TARGET_ATTACKER"
      case .CamTargetAttackerEdge: return "CAM_TARGET_ATTACKER_EDGE"
      case .CamTargetAttackerGround: return "CAM_TARGET_ATTACKER_GROUND"
      case .CamTargetDefender: return "CAM_TARGET_DEFENDER"
      case .CamTargetDefenderEdge: return "CAM_TARGET_DEFENDER_EDGE"
      case .CamTargetDefenderGround: return "CAM_TARGET_DEFENDER_GROUND"
      case .CamTargetAttackerDefender: return "CAM_TARGET_ATTACKER_DEFENDER"
      case .CamTargetAttackerDefenderEdge: return "CAM_TARGET_ATTACKER_DEFENDER_EDGE"
      case .CamTargetDefenderAttacker: return "CAM_TARGET_DEFENDER_ATTACKER"
      case .CamTargetDefenderAttackerEdge: return "CAM_TARGET_DEFENDER_ATTACKER_EDGE"
      case .CamTargetAttackerDefenderMirror: return "CAM_TARGET_ATTACKER_DEFENDER_MIRROR"
      case .CamTargetShoulderAttackerDefender: return "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER"
      case .CamTargetShoulderAttackerDefenderMirror: return "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER_MIRROR"
      case .CamTargetAttackerDefenderWorld: return "CAM_TARGET_ATTACKER_DEFENDER_WORLD"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.CameraTarget {
      switch str {
      case "CAM_TARGET_ATTACKER":  return .CamTargetAttacker
      case "CAM_TARGET_ATTACKER_EDGE":  return .CamTargetAttackerEdge
      case "CAM_TARGET_ATTACKER_GROUND":  return .CamTargetAttackerGround
      case "CAM_TARGET_DEFENDER":  return .CamTargetDefender
      case "CAM_TARGET_DEFENDER_EDGE":  return .CamTargetDefenderEdge
      case "CAM_TARGET_DEFENDER_GROUND":  return .CamTargetDefenderGround
      case "CAM_TARGET_ATTACKER_DEFENDER":  return .CamTargetAttackerDefender
      case "CAM_TARGET_ATTACKER_DEFENDER_EDGE":  return .CamTargetAttackerDefenderEdge
      case "CAM_TARGET_DEFENDER_ATTACKER":  return .CamTargetDefenderAttacker
      case "CAM_TARGET_DEFENDER_ATTACKER_EDGE":  return .CamTargetDefenderAttackerEdge
      case "CAM_TARGET_ATTACKER_DEFENDER_MIRROR":  return .CamTargetAttackerDefenderMirror
      case "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER":  return .CamTargetShoulderAttackerDefender
      case "CAM_TARGET_SHOULDER_ATTACKER_DEFENDER_MIRROR":  return .CamTargetShoulderAttackerDefenderMirror
      case "CAM_TARGET_ATTACKER_DEFENDER_WORLD":  return .CamTargetAttackerDefenderWorld
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .CamTargetAttacker: return ".CamTargetAttacker"
            case .CamTargetAttackerEdge: return ".CamTargetAttackerEdge"
            case .CamTargetAttackerGround: return ".CamTargetAttackerGround"
            case .CamTargetDefender: return ".CamTargetDefender"
            case .CamTargetDefenderEdge: return ".CamTargetDefenderEdge"
            case .CamTargetDefenderGround: return ".CamTargetDefenderGround"
            case .CamTargetAttackerDefender: return ".CamTargetAttackerDefender"
            case .CamTargetAttackerDefenderEdge: return ".CamTargetAttackerDefenderEdge"
            case .CamTargetDefenderAttacker: return ".CamTargetDefenderAttacker"
            case .CamTargetDefenderAttackerEdge: return ".CamTargetDefenderAttackerEdge"
            case .CamTargetAttackerDefenderMirror: return ".CamTargetAttackerDefenderMirror"
            case .CamTargetShoulderAttackerDefender: return ".CamTargetShoulderAttackerDefender"
            case .CamTargetShoulderAttackerDefenderMirror: return ".CamTargetShoulderAttackerDefenderMirror"
            case .CamTargetAttackerDefenderWorld: return ".CamTargetAttackerDefenderWorld"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum Gender:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Male = 0
    case Female = 1
    public func toString() -> String {
      switch self {
      case .Male: return "MALE"
      case .Female: return "FEMALE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.Gender {
      switch str {
      case "MALE":  return .Male
      case "FEMALE":  return .Female
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Male: return ".Male"
            case .Female: return ".Female"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum HoloIapItemCategory:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case IapCategoryNone = 0
    case IapCategoryBundle = 1
    case IapCategoryItems = 2
    case IapCategoryUpgrades = 3
    case IapCategoryPokecoins = 4
    public func toString() -> String {
      switch self {
      case .IapCategoryNone: return "IAP_CATEGORY_NONE"
      case .IapCategoryBundle: return "IAP_CATEGORY_BUNDLE"
      case .IapCategoryItems: return "IAP_CATEGORY_ITEMS"
      case .IapCategoryUpgrades: return "IAP_CATEGORY_UPGRADES"
      case .IapCategoryPokecoins: return "IAP_CATEGORY_POKECOINS"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.HoloIapItemCategory {
      switch str {
      case "IAP_CATEGORY_NONE":  return .IapCategoryNone
      case "IAP_CATEGORY_BUNDLE":  return .IapCategoryBundle
      case "IAP_CATEGORY_ITEMS":  return .IapCategoryItems
      case "IAP_CATEGORY_UPGRADES":  return .IapCategoryUpgrades
      case "IAP_CATEGORY_POKECOINS":  return .IapCategoryPokecoins
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .IapCategoryNone: return ".IapCategoryNone"
            case .IapCategoryBundle: return ".IapCategoryBundle"
            case .IapCategoryItems: return ".IapCategoryItems"
            case .IapCategoryUpgrades: return ".IapCategoryUpgrades"
            case .IapCategoryPokecoins: return ".IapCategoryPokecoins"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum ItemCategory:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case ItemCategoryNone = 0
    case ItemCategoryPokeball = 1
    case ItemCategoryFood = 2
    case ItemCategoryMedicine = 3
    case ItemCategoryBoost = 4
    case ItemCategoryUtilites = 5
    case ItemCategoryCamera = 6
    case ItemCategoryDisk = 7
    case ItemCategoryIncubator = 8
    case ItemCategoryIncense = 9
    case ItemCategoryXpBoost = 10
    case ItemCategoryInventoryUpgrade = 11
    public func toString() -> String {
      switch self {
      case .ItemCategoryNone: return "ITEM_CATEGORY_NONE"
      case .ItemCategoryPokeball: return "ITEM_CATEGORY_POKEBALL"
      case .ItemCategoryFood: return "ITEM_CATEGORY_FOOD"
      case .ItemCategoryMedicine: return "ITEM_CATEGORY_MEDICINE"
      case .ItemCategoryBoost: return "ITEM_CATEGORY_BOOST"
      case .ItemCategoryUtilites: return "ITEM_CATEGORY_UTILITES"
      case .ItemCategoryCamera: return "ITEM_CATEGORY_CAMERA"
      case .ItemCategoryDisk: return "ITEM_CATEGORY_DISK"
      case .ItemCategoryIncubator: return "ITEM_CATEGORY_INCUBATOR"
      case .ItemCategoryIncense: return "ITEM_CATEGORY_INCENSE"
      case .ItemCategoryXpBoost: return "ITEM_CATEGORY_XP_BOOST"
      case .ItemCategoryInventoryUpgrade: return "ITEM_CATEGORY_INVENTORY_UPGRADE"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.ItemCategory {
      switch str {
      case "ITEM_CATEGORY_NONE":  return .ItemCategoryNone
      case "ITEM_CATEGORY_POKEBALL":  return .ItemCategoryPokeball
      case "ITEM_CATEGORY_FOOD":  return .ItemCategoryFood
      case "ITEM_CATEGORY_MEDICINE":  return .ItemCategoryMedicine
      case "ITEM_CATEGORY_BOOST":  return .ItemCategoryBoost
      case "ITEM_CATEGORY_UTILITES":  return .ItemCategoryUtilites
      case "ITEM_CATEGORY_CAMERA":  return .ItemCategoryCamera
      case "ITEM_CATEGORY_DISK":  return .ItemCategoryDisk
      case "ITEM_CATEGORY_INCUBATOR":  return .ItemCategoryIncubator
      case "ITEM_CATEGORY_INCENSE":  return .ItemCategoryIncense
      case "ITEM_CATEGORY_XP_BOOST":  return .ItemCategoryXpBoost
      case "ITEM_CATEGORY_INVENTORY_UPGRADE":  return .ItemCategoryInventoryUpgrade
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .ItemCategoryNone: return ".ItemCategoryNone"
            case .ItemCategoryPokeball: return ".ItemCategoryPokeball"
            case .ItemCategoryFood: return ".ItemCategoryFood"
            case .ItemCategoryMedicine: return ".ItemCategoryMedicine"
            case .ItemCategoryBoost: return ".ItemCategoryBoost"
            case .ItemCategoryUtilites: return ".ItemCategoryUtilites"
            case .ItemCategoryCamera: return ".ItemCategoryCamera"
            case .ItemCategoryDisk: return ".ItemCategoryDisk"
            case .ItemCategoryIncubator: return ".ItemCategoryIncubator"
            case .ItemCategoryIncense: return ".ItemCategoryIncense"
            case .ItemCategoryXpBoost: return ".ItemCategoryXpBoost"
            case .ItemCategoryInventoryUpgrade: return ".ItemCategoryInventoryUpgrade"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum ItemEffect:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case ItemEffectNone = 0
    case ItemEffectCapNoFlee = 1000
    case ItemEffectCapNoMovement = 1002
    case ItemEffectCapNoThreat = 1003
    case ItemEffectCapTargetMax = 1004
    case ItemEffectCapTargetSlow = 1005
    case ItemEffectCapChanceNight = 1006
    case ItemEffectCapChanceTrainer = 1007
    case ItemEffectCapChanceFirstThrow = 1008
    case ItemEffectCapChanceLegend = 1009
    case ItemEffectCapChanceHeavy = 1010
    case ItemEffectCapChanceRepeat = 1011
    case ItemEffectCapChanceMultiThrow = 1012
    case ItemEffectCapChanceAlways = 1013
    case ItemEffectCapChanceSingleThrow = 1014
    public func toString() -> String {
      switch self {
      case .ItemEffectNone: return "ITEM_EFFECT_NONE"
      case .ItemEffectCapNoFlee: return "ITEM_EFFECT_CAP_NO_FLEE"
      case .ItemEffectCapNoMovement: return "ITEM_EFFECT_CAP_NO_MOVEMENT"
      case .ItemEffectCapNoThreat: return "ITEM_EFFECT_CAP_NO_THREAT"
      case .ItemEffectCapTargetMax: return "ITEM_EFFECT_CAP_TARGET_MAX"
      case .ItemEffectCapTargetSlow: return "ITEM_EFFECT_CAP_TARGET_SLOW"
      case .ItemEffectCapChanceNight: return "ITEM_EFFECT_CAP_CHANCE_NIGHT"
      case .ItemEffectCapChanceTrainer: return "ITEM_EFFECT_CAP_CHANCE_TRAINER"
      case .ItemEffectCapChanceFirstThrow: return "ITEM_EFFECT_CAP_CHANCE_FIRST_THROW"
      case .ItemEffectCapChanceLegend: return "ITEM_EFFECT_CAP_CHANCE_LEGEND"
      case .ItemEffectCapChanceHeavy: return "ITEM_EFFECT_CAP_CHANCE_HEAVY"
      case .ItemEffectCapChanceRepeat: return "ITEM_EFFECT_CAP_CHANCE_REPEAT"
      case .ItemEffectCapChanceMultiThrow: return "ITEM_EFFECT_CAP_CHANCE_MULTI_THROW"
      case .ItemEffectCapChanceAlways: return "ITEM_EFFECT_CAP_CHANCE_ALWAYS"
      case .ItemEffectCapChanceSingleThrow: return "ITEM_EFFECT_CAP_CHANCE_SINGLE_THROW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.ItemEffect {
      switch str {
      case "ITEM_EFFECT_NONE":  return .ItemEffectNone
      case "ITEM_EFFECT_CAP_NO_FLEE":  return .ItemEffectCapNoFlee
      case "ITEM_EFFECT_CAP_NO_MOVEMENT":  return .ItemEffectCapNoMovement
      case "ITEM_EFFECT_CAP_NO_THREAT":  return .ItemEffectCapNoThreat
      case "ITEM_EFFECT_CAP_TARGET_MAX":  return .ItemEffectCapTargetMax
      case "ITEM_EFFECT_CAP_TARGET_SLOW":  return .ItemEffectCapTargetSlow
      case "ITEM_EFFECT_CAP_CHANCE_NIGHT":  return .ItemEffectCapChanceNight
      case "ITEM_EFFECT_CAP_CHANCE_TRAINER":  return .ItemEffectCapChanceTrainer
      case "ITEM_EFFECT_CAP_CHANCE_FIRST_THROW":  return .ItemEffectCapChanceFirstThrow
      case "ITEM_EFFECT_CAP_CHANCE_LEGEND":  return .ItemEffectCapChanceLegend
      case "ITEM_EFFECT_CAP_CHANCE_HEAVY":  return .ItemEffectCapChanceHeavy
      case "ITEM_EFFECT_CAP_CHANCE_REPEAT":  return .ItemEffectCapChanceRepeat
      case "ITEM_EFFECT_CAP_CHANCE_MULTI_THROW":  return .ItemEffectCapChanceMultiThrow
      case "ITEM_EFFECT_CAP_CHANCE_ALWAYS":  return .ItemEffectCapChanceAlways
      case "ITEM_EFFECT_CAP_CHANCE_SINGLE_THROW":  return .ItemEffectCapChanceSingleThrow
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .ItemEffectNone: return ".ItemEffectNone"
            case .ItemEffectCapNoFlee: return ".ItemEffectCapNoFlee"
            case .ItemEffectCapNoMovement: return ".ItemEffectCapNoMovement"
            case .ItemEffectCapNoThreat: return ".ItemEffectCapNoThreat"
            case .ItemEffectCapTargetMax: return ".ItemEffectCapTargetMax"
            case .ItemEffectCapTargetSlow: return ".ItemEffectCapTargetSlow"
            case .ItemEffectCapChanceNight: return ".ItemEffectCapChanceNight"
            case .ItemEffectCapChanceTrainer: return ".ItemEffectCapChanceTrainer"
            case .ItemEffectCapChanceFirstThrow: return ".ItemEffectCapChanceFirstThrow"
            case .ItemEffectCapChanceLegend: return ".ItemEffectCapChanceLegend"
            case .ItemEffectCapChanceHeavy: return ".ItemEffectCapChanceHeavy"
            case .ItemEffectCapChanceRepeat: return ".ItemEffectCapChanceRepeat"
            case .ItemEffectCapChanceMultiThrow: return ".ItemEffectCapChanceMultiThrow"
            case .ItemEffectCapChanceAlways: return ".ItemEffectCapChanceAlways"
            case .ItemEffectCapChanceSingleThrow: return ".ItemEffectCapChanceSingleThrow"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum Platform:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Unset = 0
    case Ios = 1
    case Android = 2
    case Osx = 3
    case Windows = 4
    public func toString() -> String {
      switch self {
      case .Unset: return "UNSET"
      case .Ios: return "IOS"
      case .Android: return "ANDROID"
      case .Osx: return "OSX"
      case .Windows: return "WINDOWS"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.Platform {
      switch str {
      case "UNSET":  return .Unset
      case "IOS":  return .Ios
      case "ANDROID":  return .Android
      case "OSX":  return .Osx
      case "WINDOWS":  return .Windows
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Unset: return ".Unset"
            case .Ios: return ".Ios"
            case .Android: return ".Android"
            case .Osx: return ".Osx"
            case .Windows: return ".Windows"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonFamilyId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case FamilyUnset = 0
    case FamilyBulbasaur = 1
    case FamilyCharmander = 4
    case FamilySquirtle = 7
    case FamilyCaterpie = 10
    case FamilyWeedle = 13
    case FamilyPidgey = 16
    case FamilyRattata = 19
    case FamilySpearow = 21
    case FamilyEkans = 23
    case FamilyPikachu = 25
    case FamilySandshrew = 27
    case FamilyNidoranFemale = 29
    case FamilyNidoranMale = 32
    case FamilyClefairy = 35
    case FamilyVulpix = 37
    case FamilyJigglypuff = 39
    case FamilyZubat = 41
    case FamilyOddish = 43
    case FamilyParas = 46
    case FamilyVenonat = 48
    case FamilyDiglett = 50
    case FamilyMeowth = 52
    case FamilyPsyduck = 54
    case FamilyMankey = 56
    case FamilyGrowlithe = 58
    case FamilyPoliwag = 60
    case FamilyAbra = 63
    case FamilyMachop = 66
    case FamilyBellsprout = 69
    case FamilyTentacool = 72
    case FamilyGeodude = 74
    case FamilyPonyta = 77
    case FamilySlowpoke = 79
    case FamilyMagnemite = 81
    case FamilyFarfetchd = 83
    case FamilyDoduo = 84
    case FamilySeel = 86
    case FamilyGrimer = 88
    case FamilyShellder = 90
    case FamilyGastly = 92
    case FamilyOnix = 95
    case FamilyDrowzee = 96
    case FamilyHypno = 97
    case FamilyKrabby = 98
    case FamilyVoltorb = 100
    case FamilyExeggcute = 102
    case FamilyCubone = 104
    case FamilyHitmonlee = 106
    case FamilyHitmonchan = 107
    case FamilyLickitung = 108
    case FamilyKoffing = 109
    case FamilyRhyhorn = 111
    case FamilyChansey = 113
    case FamilyTangela = 114
    case FamilyKangaskhan = 115
    case FamilyHorsea = 116
    case FamilyGoldeen = 118
    case FamilyStaryu = 120
    case FamilyMrMime = 122
    case FamilyScyther = 123
    case FamilyJynx = 124
    case FamilyElectabuzz = 125
    case FamilyMagmar = 126
    case FamilyPinsir = 127
    case FamilyTauros = 128
    case FamilyMagikarp = 129
    case FamilyLapras = 131
    case FamilyDitto = 132
    case FamilyEevee = 133
    case FamilyPorygon = 137
    case FamilyOmanyte = 138
    case FamilyKabuto = 140
    case FamilyAerodactyl = 142
    case FamilySnorlax = 143
    case FamilyArticuno = 144
    case FamilyZapdos = 145
    case FamilyMoltres = 146
    case FamilyDratini = 147
    case FamilyMewtwo = 150
    case FamilyMew = 151
    public func toString() -> String {
      switch self {
      case .FamilyUnset: return "FAMILY_UNSET"
      case .FamilyBulbasaur: return "FAMILY_BULBASAUR"
      case .FamilyCharmander: return "FAMILY_CHARMANDER"
      case .FamilySquirtle: return "FAMILY_SQUIRTLE"
      case .FamilyCaterpie: return "FAMILY_CATERPIE"
      case .FamilyWeedle: return "FAMILY_WEEDLE"
      case .FamilyPidgey: return "FAMILY_PIDGEY"
      case .FamilyRattata: return "FAMILY_RATTATA"
      case .FamilySpearow: return "FAMILY_SPEAROW"
      case .FamilyEkans: return "FAMILY_EKANS"
      case .FamilyPikachu: return "FAMILY_PIKACHU"
      case .FamilySandshrew: return "FAMILY_SANDSHREW"
      case .FamilyNidoranFemale: return "FAMILY_NIDORAN_FEMALE"
      case .FamilyNidoranMale: return "FAMILY_NIDORAN_MALE"
      case .FamilyClefairy: return "FAMILY_CLEFAIRY"
      case .FamilyVulpix: return "FAMILY_VULPIX"
      case .FamilyJigglypuff: return "FAMILY_JIGGLYPUFF"
      case .FamilyZubat: return "FAMILY_ZUBAT"
      case .FamilyOddish: return "FAMILY_ODDISH"
      case .FamilyParas: return "FAMILY_PARAS"
      case .FamilyVenonat: return "FAMILY_VENONAT"
      case .FamilyDiglett: return "FAMILY_DIGLETT"
      case .FamilyMeowth: return "FAMILY_MEOWTH"
      case .FamilyPsyduck: return "FAMILY_PSYDUCK"
      case .FamilyMankey: return "FAMILY_MANKEY"
      case .FamilyGrowlithe: return "FAMILY_GROWLITHE"
      case .FamilyPoliwag: return "FAMILY_POLIWAG"
      case .FamilyAbra: return "FAMILY_ABRA"
      case .FamilyMachop: return "FAMILY_MACHOP"
      case .FamilyBellsprout: return "FAMILY_BELLSPROUT"
      case .FamilyTentacool: return "FAMILY_TENTACOOL"
      case .FamilyGeodude: return "FAMILY_GEODUDE"
      case .FamilyPonyta: return "FAMILY_PONYTA"
      case .FamilySlowpoke: return "FAMILY_SLOWPOKE"
      case .FamilyMagnemite: return "FAMILY_MAGNEMITE"
      case .FamilyFarfetchd: return "FAMILY_FARFETCHD"
      case .FamilyDoduo: return "FAMILY_DODUO"
      case .FamilySeel: return "FAMILY_SEEL"
      case .FamilyGrimer: return "FAMILY_GRIMER"
      case .FamilyShellder: return "FAMILY_SHELLDER"
      case .FamilyGastly: return "FAMILY_GASTLY"
      case .FamilyOnix: return "FAMILY_ONIX"
      case .FamilyDrowzee: return "FAMILY_DROWZEE"
      case .FamilyHypno: return "FAMILY_HYPNO"
      case .FamilyKrabby: return "FAMILY_KRABBY"
      case .FamilyVoltorb: return "FAMILY_VOLTORB"
      case .FamilyExeggcute: return "FAMILY_EXEGGCUTE"
      case .FamilyCubone: return "FAMILY_CUBONE"
      case .FamilyHitmonlee: return "FAMILY_HITMONLEE"
      case .FamilyHitmonchan: return "FAMILY_HITMONCHAN"
      case .FamilyLickitung: return "FAMILY_LICKITUNG"
      case .FamilyKoffing: return "FAMILY_KOFFING"
      case .FamilyRhyhorn: return "FAMILY_RHYHORN"
      case .FamilyChansey: return "FAMILY_CHANSEY"
      case .FamilyTangela: return "FAMILY_TANGELA"
      case .FamilyKangaskhan: return "FAMILY_KANGASKHAN"
      case .FamilyHorsea: return "FAMILY_HORSEA"
      case .FamilyGoldeen: return "FAMILY_GOLDEEN"
      case .FamilyStaryu: return "FAMILY_STARYU"
      case .FamilyMrMime: return "FAMILY_MR_MIME"
      case .FamilyScyther: return "FAMILY_SCYTHER"
      case .FamilyJynx: return "FAMILY_JYNX"
      case .FamilyElectabuzz: return "FAMILY_ELECTABUZZ"
      case .FamilyMagmar: return "FAMILY_MAGMAR"
      case .FamilyPinsir: return "FAMILY_PINSIR"
      case .FamilyTauros: return "FAMILY_TAUROS"
      case .FamilyMagikarp: return "FAMILY_MAGIKARP"
      case .FamilyLapras: return "FAMILY_LAPRAS"
      case .FamilyDitto: return "FAMILY_DITTO"
      case .FamilyEevee: return "FAMILY_EEVEE"
      case .FamilyPorygon: return "FAMILY_PORYGON"
      case .FamilyOmanyte: return "FAMILY_OMANYTE"
      case .FamilyKabuto: return "FAMILY_KABUTO"
      case .FamilyAerodactyl: return "FAMILY_AERODACTYL"
      case .FamilySnorlax: return "FAMILY_SNORLAX"
      case .FamilyArticuno: return "FAMILY_ARTICUNO"
      case .FamilyZapdos: return "FAMILY_ZAPDOS"
      case .FamilyMoltres: return "FAMILY_MOLTRES"
      case .FamilyDratini: return "FAMILY_DRATINI"
      case .FamilyMewtwo: return "FAMILY_MEWTWO"
      case .FamilyMew: return "FAMILY_MEW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonFamilyId {
      switch str {
      case "FAMILY_UNSET":  return .FamilyUnset
      case "FAMILY_BULBASAUR":  return .FamilyBulbasaur
      case "FAMILY_CHARMANDER":  return .FamilyCharmander
      case "FAMILY_SQUIRTLE":  return .FamilySquirtle
      case "FAMILY_CATERPIE":  return .FamilyCaterpie
      case "FAMILY_WEEDLE":  return .FamilyWeedle
      case "FAMILY_PIDGEY":  return .FamilyPidgey
      case "FAMILY_RATTATA":  return .FamilyRattata
      case "FAMILY_SPEAROW":  return .FamilySpearow
      case "FAMILY_EKANS":  return .FamilyEkans
      case "FAMILY_PIKACHU":  return .FamilyPikachu
      case "FAMILY_SANDSHREW":  return .FamilySandshrew
      case "FAMILY_NIDORAN_FEMALE":  return .FamilyNidoranFemale
      case "FAMILY_NIDORAN_MALE":  return .FamilyNidoranMale
      case "FAMILY_CLEFAIRY":  return .FamilyClefairy
      case "FAMILY_VULPIX":  return .FamilyVulpix
      case "FAMILY_JIGGLYPUFF":  return .FamilyJigglypuff
      case "FAMILY_ZUBAT":  return .FamilyZubat
      case "FAMILY_ODDISH":  return .FamilyOddish
      case "FAMILY_PARAS":  return .FamilyParas
      case "FAMILY_VENONAT":  return .FamilyVenonat
      case "FAMILY_DIGLETT":  return .FamilyDiglett
      case "FAMILY_MEOWTH":  return .FamilyMeowth
      case "FAMILY_PSYDUCK":  return .FamilyPsyduck
      case "FAMILY_MANKEY":  return .FamilyMankey
      case "FAMILY_GROWLITHE":  return .FamilyGrowlithe
      case "FAMILY_POLIWAG":  return .FamilyPoliwag
      case "FAMILY_ABRA":  return .FamilyAbra
      case "FAMILY_MACHOP":  return .FamilyMachop
      case "FAMILY_BELLSPROUT":  return .FamilyBellsprout
      case "FAMILY_TENTACOOL":  return .FamilyTentacool
      case "FAMILY_GEODUDE":  return .FamilyGeodude
      case "FAMILY_PONYTA":  return .FamilyPonyta
      case "FAMILY_SLOWPOKE":  return .FamilySlowpoke
      case "FAMILY_MAGNEMITE":  return .FamilyMagnemite
      case "FAMILY_FARFETCHD":  return .FamilyFarfetchd
      case "FAMILY_DODUO":  return .FamilyDoduo
      case "FAMILY_SEEL":  return .FamilySeel
      case "FAMILY_GRIMER":  return .FamilyGrimer
      case "FAMILY_SHELLDER":  return .FamilyShellder
      case "FAMILY_GASTLY":  return .FamilyGastly
      case "FAMILY_ONIX":  return .FamilyOnix
      case "FAMILY_DROWZEE":  return .FamilyDrowzee
      case "FAMILY_HYPNO":  return .FamilyHypno
      case "FAMILY_KRABBY":  return .FamilyKrabby
      case "FAMILY_VOLTORB":  return .FamilyVoltorb
      case "FAMILY_EXEGGCUTE":  return .FamilyExeggcute
      case "FAMILY_CUBONE":  return .FamilyCubone
      case "FAMILY_HITMONLEE":  return .FamilyHitmonlee
      case "FAMILY_HITMONCHAN":  return .FamilyHitmonchan
      case "FAMILY_LICKITUNG":  return .FamilyLickitung
      case "FAMILY_KOFFING":  return .FamilyKoffing
      case "FAMILY_RHYHORN":  return .FamilyRhyhorn
      case "FAMILY_CHANSEY":  return .FamilyChansey
      case "FAMILY_TANGELA":  return .FamilyTangela
      case "FAMILY_KANGASKHAN":  return .FamilyKangaskhan
      case "FAMILY_HORSEA":  return .FamilyHorsea
      case "FAMILY_GOLDEEN":  return .FamilyGoldeen
      case "FAMILY_STARYU":  return .FamilyStaryu
      case "FAMILY_MR_MIME":  return .FamilyMrMime
      case "FAMILY_SCYTHER":  return .FamilyScyther
      case "FAMILY_JYNX":  return .FamilyJynx
      case "FAMILY_ELECTABUZZ":  return .FamilyElectabuzz
      case "FAMILY_MAGMAR":  return .FamilyMagmar
      case "FAMILY_PINSIR":  return .FamilyPinsir
      case "FAMILY_TAUROS":  return .FamilyTauros
      case "FAMILY_MAGIKARP":  return .FamilyMagikarp
      case "FAMILY_LAPRAS":  return .FamilyLapras
      case "FAMILY_DITTO":  return .FamilyDitto
      case "FAMILY_EEVEE":  return .FamilyEevee
      case "FAMILY_PORYGON":  return .FamilyPorygon
      case "FAMILY_OMANYTE":  return .FamilyOmanyte
      case "FAMILY_KABUTO":  return .FamilyKabuto
      case "FAMILY_AERODACTYL":  return .FamilyAerodactyl
      case "FAMILY_SNORLAX":  return .FamilySnorlax
      case "FAMILY_ARTICUNO":  return .FamilyArticuno
      case "FAMILY_ZAPDOS":  return .FamilyZapdos
      case "FAMILY_MOLTRES":  return .FamilyMoltres
      case "FAMILY_DRATINI":  return .FamilyDratini
      case "FAMILY_MEWTWO":  return .FamilyMewtwo
      case "FAMILY_MEW":  return .FamilyMew
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .FamilyUnset: return ".FamilyUnset"
            case .FamilyBulbasaur: return ".FamilyBulbasaur"
            case .FamilyCharmander: return ".FamilyCharmander"
            case .FamilySquirtle: return ".FamilySquirtle"
            case .FamilyCaterpie: return ".FamilyCaterpie"
            case .FamilyWeedle: return ".FamilyWeedle"
            case .FamilyPidgey: return ".FamilyPidgey"
            case .FamilyRattata: return ".FamilyRattata"
            case .FamilySpearow: return ".FamilySpearow"
            case .FamilyEkans: return ".FamilyEkans"
            case .FamilyPikachu: return ".FamilyPikachu"
            case .FamilySandshrew: return ".FamilySandshrew"
            case .FamilyNidoranFemale: return ".FamilyNidoranFemale"
            case .FamilyNidoranMale: return ".FamilyNidoranMale"
            case .FamilyClefairy: return ".FamilyClefairy"
            case .FamilyVulpix: return ".FamilyVulpix"
            case .FamilyJigglypuff: return ".FamilyJigglypuff"
            case .FamilyZubat: return ".FamilyZubat"
            case .FamilyOddish: return ".FamilyOddish"
            case .FamilyParas: return ".FamilyParas"
            case .FamilyVenonat: return ".FamilyVenonat"
            case .FamilyDiglett: return ".FamilyDiglett"
            case .FamilyMeowth: return ".FamilyMeowth"
            case .FamilyPsyduck: return ".FamilyPsyduck"
            case .FamilyMankey: return ".FamilyMankey"
            case .FamilyGrowlithe: return ".FamilyGrowlithe"
            case .FamilyPoliwag: return ".FamilyPoliwag"
            case .FamilyAbra: return ".FamilyAbra"
            case .FamilyMachop: return ".FamilyMachop"
            case .FamilyBellsprout: return ".FamilyBellsprout"
            case .FamilyTentacool: return ".FamilyTentacool"
            case .FamilyGeodude: return ".FamilyGeodude"
            case .FamilyPonyta: return ".FamilyPonyta"
            case .FamilySlowpoke: return ".FamilySlowpoke"
            case .FamilyMagnemite: return ".FamilyMagnemite"
            case .FamilyFarfetchd: return ".FamilyFarfetchd"
            case .FamilyDoduo: return ".FamilyDoduo"
            case .FamilySeel: return ".FamilySeel"
            case .FamilyGrimer: return ".FamilyGrimer"
            case .FamilyShellder: return ".FamilyShellder"
            case .FamilyGastly: return ".FamilyGastly"
            case .FamilyOnix: return ".FamilyOnix"
            case .FamilyDrowzee: return ".FamilyDrowzee"
            case .FamilyHypno: return ".FamilyHypno"
            case .FamilyKrabby: return ".FamilyKrabby"
            case .FamilyVoltorb: return ".FamilyVoltorb"
            case .FamilyExeggcute: return ".FamilyExeggcute"
            case .FamilyCubone: return ".FamilyCubone"
            case .FamilyHitmonlee: return ".FamilyHitmonlee"
            case .FamilyHitmonchan: return ".FamilyHitmonchan"
            case .FamilyLickitung: return ".FamilyLickitung"
            case .FamilyKoffing: return ".FamilyKoffing"
            case .FamilyRhyhorn: return ".FamilyRhyhorn"
            case .FamilyChansey: return ".FamilyChansey"
            case .FamilyTangela: return ".FamilyTangela"
            case .FamilyKangaskhan: return ".FamilyKangaskhan"
            case .FamilyHorsea: return ".FamilyHorsea"
            case .FamilyGoldeen: return ".FamilyGoldeen"
            case .FamilyStaryu: return ".FamilyStaryu"
            case .FamilyMrMime: return ".FamilyMrMime"
            case .FamilyScyther: return ".FamilyScyther"
            case .FamilyJynx: return ".FamilyJynx"
            case .FamilyElectabuzz: return ".FamilyElectabuzz"
            case .FamilyMagmar: return ".FamilyMagmar"
            case .FamilyPinsir: return ".FamilyPinsir"
            case .FamilyTauros: return ".FamilyTauros"
            case .FamilyMagikarp: return ".FamilyMagikarp"
            case .FamilyLapras: return ".FamilyLapras"
            case .FamilyDitto: return ".FamilyDitto"
            case .FamilyEevee: return ".FamilyEevee"
            case .FamilyPorygon: return ".FamilyPorygon"
            case .FamilyOmanyte: return ".FamilyOmanyte"
            case .FamilyKabuto: return ".FamilyKabuto"
            case .FamilyAerodactyl: return ".FamilyAerodactyl"
            case .FamilySnorlax: return ".FamilySnorlax"
            case .FamilyArticuno: return ".FamilyArticuno"
            case .FamilyZapdos: return ".FamilyZapdos"
            case .FamilyMoltres: return ".FamilyMoltres"
            case .FamilyDratini: return ".FamilyDratini"
            case .FamilyMewtwo: return ".FamilyMewtwo"
            case .FamilyMew: return ".FamilyMew"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonId:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Missingno = 0
    case Bulbasaur = 1
    case Ivysaur = 2
    case Venusaur = 3
    case Charmander = 4
    case Charmeleon = 5
    case Charizard = 6
    case Squirtle = 7
    case Wartortle = 8
    case Blastoise = 9
    case Caterpie = 10
    case Metapod = 11
    case Butterfree = 12
    case Weedle = 13
    case Kakuna = 14
    case Beedrill = 15
    case Pidgey = 16
    case Pidgeotto = 17
    case Pidgeot = 18
    case Rattata = 19
    case Raticate = 20
    case Spearow = 21
    case Fearow = 22
    case Ekans = 23
    case Arbok = 24
    case Pikachu = 25
    case Raichu = 26
    case Sandshrew = 27
    case Sandslash = 28
    case NidoranFemale = 29
    case Nidorina = 30
    case Nidoqueen = 31
    case NidoranMale = 32
    case Nidorino = 33
    case Nidoking = 34
    case Clefairy = 35
    case Clefable = 36
    case Vulpix = 37
    case Ninetales = 38
    case Jigglypuff = 39
    case Wigglytuff = 40
    case Zubat = 41
    case Golbat = 42
    case Oddish = 43
    case Gloom = 44
    case Vileplume = 45
    case Paras = 46
    case Parasect = 47
    case Venonat = 48
    case Venomoth = 49
    case Diglett = 50
    case Dugtrio = 51
    case Meowth = 52
    case Persian = 53
    case Psyduck = 54
    case Golduck = 55
    case Mankey = 56
    case Primeape = 57
    case Growlithe = 58
    case Arcanine = 59
    case Poliwag = 60
    case Poliwhirl = 61
    case Poliwrath = 62
    case Abra = 63
    case Kadabra = 64
    case Alakazam = 65
    case Machop = 66
    case Machoke = 67
    case Machamp = 68
    case Bellsprout = 69
    case Weepinbell = 70
    case Victreebel = 71
    case Tentacool = 72
    case Tentacruel = 73
    case Geodude = 74
    case Graveler = 75
    case Golem = 76
    case Ponyta = 77
    case Rapidash = 78
    case Slowpoke = 79
    case Slowbro = 80
    case Magnemite = 81
    case Magneton = 82
    case Farfetchd = 83
    case Doduo = 84
    case Dodrio = 85
    case Seel = 86
    case Dewgong = 87
    case Grimer = 88
    case Muk = 89
    case Shellder = 90
    case Cloyster = 91
    case Gastly = 92
    case Haunter = 93
    case Gengar = 94
    case Onix = 95
    case Drowzee = 96
    case Hypno = 97
    case Krabby = 98
    case Kingler = 99
    case Voltorb = 100
    case Electrode = 101
    case Exeggcute = 102
    case Exeggutor = 103
    case Cubone = 104
    case Marowak = 105
    case Hitmonlee = 106
    case Hitmonchan = 107
    case Lickitung = 108
    case Koffing = 109
    case Weezing = 110
    case Rhyhorn = 111
    case Rhydon = 112
    case Chansey = 113
    case Tangela = 114
    case Kangaskhan = 115
    case Horsea = 116
    case Seadra = 117
    case Goldeen = 118
    case Seaking = 119
    case Staryu = 120
    case Starmie = 121
    case MrMime = 122
    case Scyther = 123
    case Jynx = 124
    case Electabuzz = 125
    case Magmar = 126
    case Pinsir = 127
    case Tauros = 128
    case Magikarp = 129
    case Gyarados = 130
    case Lapras = 131
    case Ditto = 132
    case Eevee = 133
    case Vaporeon = 134
    case Jolteon = 135
    case Flareon = 136
    case Porygon = 137
    case Omanyte = 138
    case Omastar = 139
    case Kabuto = 140
    case Kabutops = 141
    case Aerodactyl = 142
    case Snorlax = 143
    case Articuno = 144
    case Zapdos = 145
    case Moltres = 146
    case Dratini = 147
    case Dragonair = 148
    case Dragonite = 149
    case Mewtwo = 150
    case Mew = 151
    public func toString() -> String {
      switch self {
      case .Missingno: return "MISSINGNO"
      case .Bulbasaur: return "BULBASAUR"
      case .Ivysaur: return "IVYSAUR"
      case .Venusaur: return "VENUSAUR"
      case .Charmander: return "CHARMANDER"
      case .Charmeleon: return "CHARMELEON"
      case .Charizard: return "CHARIZARD"
      case .Squirtle: return "SQUIRTLE"
      case .Wartortle: return "WARTORTLE"
      case .Blastoise: return "BLASTOISE"
      case .Caterpie: return "CATERPIE"
      case .Metapod: return "METAPOD"
      case .Butterfree: return "BUTTERFREE"
      case .Weedle: return "WEEDLE"
      case .Kakuna: return "KAKUNA"
      case .Beedrill: return "BEEDRILL"
      case .Pidgey: return "PIDGEY"
      case .Pidgeotto: return "PIDGEOTTO"
      case .Pidgeot: return "PIDGEOT"
      case .Rattata: return "RATTATA"
      case .Raticate: return "RATICATE"
      case .Spearow: return "SPEAROW"
      case .Fearow: return "FEAROW"
      case .Ekans: return "EKANS"
      case .Arbok: return "ARBOK"
      case .Pikachu: return "PIKACHU"
      case .Raichu: return "RAICHU"
      case .Sandshrew: return "SANDSHREW"
      case .Sandslash: return "SANDSLASH"
      case .NidoranFemale: return "NIDORAN_FEMALE"
      case .Nidorina: return "NIDORINA"
      case .Nidoqueen: return "NIDOQUEEN"
      case .NidoranMale: return "NIDORAN_MALE"
      case .Nidorino: return "NIDORINO"
      case .Nidoking: return "NIDOKING"
      case .Clefairy: return "CLEFAIRY"
      case .Clefable: return "CLEFABLE"
      case .Vulpix: return "VULPIX"
      case .Ninetales: return "NINETALES"
      case .Jigglypuff: return "JIGGLYPUFF"
      case .Wigglytuff: return "WIGGLYTUFF"
      case .Zubat: return "ZUBAT"
      case .Golbat: return "GOLBAT"
      case .Oddish: return "ODDISH"
      case .Gloom: return "GLOOM"
      case .Vileplume: return "VILEPLUME"
      case .Paras: return "PARAS"
      case .Parasect: return "PARASECT"
      case .Venonat: return "VENONAT"
      case .Venomoth: return "VENOMOTH"
      case .Diglett: return "DIGLETT"
      case .Dugtrio: return "DUGTRIO"
      case .Meowth: return "MEOWTH"
      case .Persian: return "PERSIAN"
      case .Psyduck: return "PSYDUCK"
      case .Golduck: return "GOLDUCK"
      case .Mankey: return "MANKEY"
      case .Primeape: return "PRIMEAPE"
      case .Growlithe: return "GROWLITHE"
      case .Arcanine: return "ARCANINE"
      case .Poliwag: return "POLIWAG"
      case .Poliwhirl: return "POLIWHIRL"
      case .Poliwrath: return "POLIWRATH"
      case .Abra: return "ABRA"
      case .Kadabra: return "KADABRA"
      case .Alakazam: return "ALAKAZAM"
      case .Machop: return "MACHOP"
      case .Machoke: return "MACHOKE"
      case .Machamp: return "MACHAMP"
      case .Bellsprout: return "BELLSPROUT"
      case .Weepinbell: return "WEEPINBELL"
      case .Victreebel: return "VICTREEBEL"
      case .Tentacool: return "TENTACOOL"
      case .Tentacruel: return "TENTACRUEL"
      case .Geodude: return "GEODUDE"
      case .Graveler: return "GRAVELER"
      case .Golem: return "GOLEM"
      case .Ponyta: return "PONYTA"
      case .Rapidash: return "RAPIDASH"
      case .Slowpoke: return "SLOWPOKE"
      case .Slowbro: return "SLOWBRO"
      case .Magnemite: return "MAGNEMITE"
      case .Magneton: return "MAGNETON"
      case .Farfetchd: return "FARFETCHD"
      case .Doduo: return "DODUO"
      case .Dodrio: return "DODRIO"
      case .Seel: return "SEEL"
      case .Dewgong: return "DEWGONG"
      case .Grimer: return "GRIMER"
      case .Muk: return "MUK"
      case .Shellder: return "SHELLDER"
      case .Cloyster: return "CLOYSTER"
      case .Gastly: return "GASTLY"
      case .Haunter: return "HAUNTER"
      case .Gengar: return "GENGAR"
      case .Onix: return "ONIX"
      case .Drowzee: return "DROWZEE"
      case .Hypno: return "HYPNO"
      case .Krabby: return "KRABBY"
      case .Kingler: return "KINGLER"
      case .Voltorb: return "VOLTORB"
      case .Electrode: return "ELECTRODE"
      case .Exeggcute: return "EXEGGCUTE"
      case .Exeggutor: return "EXEGGUTOR"
      case .Cubone: return "CUBONE"
      case .Marowak: return "MAROWAK"
      case .Hitmonlee: return "HITMONLEE"
      case .Hitmonchan: return "HITMONCHAN"
      case .Lickitung: return "LICKITUNG"
      case .Koffing: return "KOFFING"
      case .Weezing: return "WEEZING"
      case .Rhyhorn: return "RHYHORN"
      case .Rhydon: return "RHYDON"
      case .Chansey: return "CHANSEY"
      case .Tangela: return "TANGELA"
      case .Kangaskhan: return "KANGASKHAN"
      case .Horsea: return "HORSEA"
      case .Seadra: return "SEADRA"
      case .Goldeen: return "GOLDEEN"
      case .Seaking: return "SEAKING"
      case .Staryu: return "STARYU"
      case .Starmie: return "STARMIE"
      case .MrMime: return "MR_MIME"
      case .Scyther: return "SCYTHER"
      case .Jynx: return "JYNX"
      case .Electabuzz: return "ELECTABUZZ"
      case .Magmar: return "MAGMAR"
      case .Pinsir: return "PINSIR"
      case .Tauros: return "TAUROS"
      case .Magikarp: return "MAGIKARP"
      case .Gyarados: return "GYARADOS"
      case .Lapras: return "LAPRAS"
      case .Ditto: return "DITTO"
      case .Eevee: return "EEVEE"
      case .Vaporeon: return "VAPOREON"
      case .Jolteon: return "JOLTEON"
      case .Flareon: return "FLAREON"
      case .Porygon: return "PORYGON"
      case .Omanyte: return "OMANYTE"
      case .Omastar: return "OMASTAR"
      case .Kabuto: return "KABUTO"
      case .Kabutops: return "KABUTOPS"
      case .Aerodactyl: return "AERODACTYL"
      case .Snorlax: return "SNORLAX"
      case .Articuno: return "ARTICUNO"
      case .Zapdos: return "ZAPDOS"
      case .Moltres: return "MOLTRES"
      case .Dratini: return "DRATINI"
      case .Dragonair: return "DRAGONAIR"
      case .Dragonite: return "DRAGONITE"
      case .Mewtwo: return "MEWTWO"
      case .Mew: return "MEW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonId {
      switch str {
      case "MISSINGNO":  return .Missingno
      case "BULBASAUR":  return .Bulbasaur
      case "IVYSAUR":  return .Ivysaur
      case "VENUSAUR":  return .Venusaur
      case "CHARMANDER":  return .Charmander
      case "CHARMELEON":  return .Charmeleon
      case "CHARIZARD":  return .Charizard
      case "SQUIRTLE":  return .Squirtle
      case "WARTORTLE":  return .Wartortle
      case "BLASTOISE":  return .Blastoise
      case "CATERPIE":  return .Caterpie
      case "METAPOD":  return .Metapod
      case "BUTTERFREE":  return .Butterfree
      case "WEEDLE":  return .Weedle
      case "KAKUNA":  return .Kakuna
      case "BEEDRILL":  return .Beedrill
      case "PIDGEY":  return .Pidgey
      case "PIDGEOTTO":  return .Pidgeotto
      case "PIDGEOT":  return .Pidgeot
      case "RATTATA":  return .Rattata
      case "RATICATE":  return .Raticate
      case "SPEAROW":  return .Spearow
      case "FEAROW":  return .Fearow
      case "EKANS":  return .Ekans
      case "ARBOK":  return .Arbok
      case "PIKACHU":  return .Pikachu
      case "RAICHU":  return .Raichu
      case "SANDSHREW":  return .Sandshrew
      case "SANDSLASH":  return .Sandslash
      case "NIDORAN_FEMALE":  return .NidoranFemale
      case "NIDORINA":  return .Nidorina
      case "NIDOQUEEN":  return .Nidoqueen
      case "NIDORAN_MALE":  return .NidoranMale
      case "NIDORINO":  return .Nidorino
      case "NIDOKING":  return .Nidoking
      case "CLEFAIRY":  return .Clefairy
      case "CLEFABLE":  return .Clefable
      case "VULPIX":  return .Vulpix
      case "NINETALES":  return .Ninetales
      case "JIGGLYPUFF":  return .Jigglypuff
      case "WIGGLYTUFF":  return .Wigglytuff
      case "ZUBAT":  return .Zubat
      case "GOLBAT":  return .Golbat
      case "ODDISH":  return .Oddish
      case "GLOOM":  return .Gloom
      case "VILEPLUME":  return .Vileplume
      case "PARAS":  return .Paras
      case "PARASECT":  return .Parasect
      case "VENONAT":  return .Venonat
      case "VENOMOTH":  return .Venomoth
      case "DIGLETT":  return .Diglett
      case "DUGTRIO":  return .Dugtrio
      case "MEOWTH":  return .Meowth
      case "PERSIAN":  return .Persian
      case "PSYDUCK":  return .Psyduck
      case "GOLDUCK":  return .Golduck
      case "MANKEY":  return .Mankey
      case "PRIMEAPE":  return .Primeape
      case "GROWLITHE":  return .Growlithe
      case "ARCANINE":  return .Arcanine
      case "POLIWAG":  return .Poliwag
      case "POLIWHIRL":  return .Poliwhirl
      case "POLIWRATH":  return .Poliwrath
      case "ABRA":  return .Abra
      case "KADABRA":  return .Kadabra
      case "ALAKAZAM":  return .Alakazam
      case "MACHOP":  return .Machop
      case "MACHOKE":  return .Machoke
      case "MACHAMP":  return .Machamp
      case "BELLSPROUT":  return .Bellsprout
      case "WEEPINBELL":  return .Weepinbell
      case "VICTREEBEL":  return .Victreebel
      case "TENTACOOL":  return .Tentacool
      case "TENTACRUEL":  return .Tentacruel
      case "GEODUDE":  return .Geodude
      case "GRAVELER":  return .Graveler
      case "GOLEM":  return .Golem
      case "PONYTA":  return .Ponyta
      case "RAPIDASH":  return .Rapidash
      case "SLOWPOKE":  return .Slowpoke
      case "SLOWBRO":  return .Slowbro
      case "MAGNEMITE":  return .Magnemite
      case "MAGNETON":  return .Magneton
      case "FARFETCHD":  return .Farfetchd
      case "DODUO":  return .Doduo
      case "DODRIO":  return .Dodrio
      case "SEEL":  return .Seel
      case "DEWGONG":  return .Dewgong
      case "GRIMER":  return .Grimer
      case "MUK":  return .Muk
      case "SHELLDER":  return .Shellder
      case "CLOYSTER":  return .Cloyster
      case "GASTLY":  return .Gastly
      case "HAUNTER":  return .Haunter
      case "GENGAR":  return .Gengar
      case "ONIX":  return .Onix
      case "DROWZEE":  return .Drowzee
      case "HYPNO":  return .Hypno
      case "KRABBY":  return .Krabby
      case "KINGLER":  return .Kingler
      case "VOLTORB":  return .Voltorb
      case "ELECTRODE":  return .Electrode
      case "EXEGGCUTE":  return .Exeggcute
      case "EXEGGUTOR":  return .Exeggutor
      case "CUBONE":  return .Cubone
      case "MAROWAK":  return .Marowak
      case "HITMONLEE":  return .Hitmonlee
      case "HITMONCHAN":  return .Hitmonchan
      case "LICKITUNG":  return .Lickitung
      case "KOFFING":  return .Koffing
      case "WEEZING":  return .Weezing
      case "RHYHORN":  return .Rhyhorn
      case "RHYDON":  return .Rhydon
      case "CHANSEY":  return .Chansey
      case "TANGELA":  return .Tangela
      case "KANGASKHAN":  return .Kangaskhan
      case "HORSEA":  return .Horsea
      case "SEADRA":  return .Seadra
      case "GOLDEEN":  return .Goldeen
      case "SEAKING":  return .Seaking
      case "STARYU":  return .Staryu
      case "STARMIE":  return .Starmie
      case "MR_MIME":  return .MrMime
      case "SCYTHER":  return .Scyther
      case "JYNX":  return .Jynx
      case "ELECTABUZZ":  return .Electabuzz
      case "MAGMAR":  return .Magmar
      case "PINSIR":  return .Pinsir
      case "TAUROS":  return .Tauros
      case "MAGIKARP":  return .Magikarp
      case "GYARADOS":  return .Gyarados
      case "LAPRAS":  return .Lapras
      case "DITTO":  return .Ditto
      case "EEVEE":  return .Eevee
      case "VAPOREON":  return .Vaporeon
      case "JOLTEON":  return .Jolteon
      case "FLAREON":  return .Flareon
      case "PORYGON":  return .Porygon
      case "OMANYTE":  return .Omanyte
      case "OMASTAR":  return .Omastar
      case "KABUTO":  return .Kabuto
      case "KABUTOPS":  return .Kabutops
      case "AERODACTYL":  return .Aerodactyl
      case "SNORLAX":  return .Snorlax
      case "ARTICUNO":  return .Articuno
      case "ZAPDOS":  return .Zapdos
      case "MOLTRES":  return .Moltres
      case "DRATINI":  return .Dratini
      case "DRAGONAIR":  return .Dragonair
      case "DRAGONITE":  return .Dragonite
      case "MEWTWO":  return .Mewtwo
      case "MEW":  return .Mew
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Missingno: return ".Missingno"
            case .Bulbasaur: return ".Bulbasaur"
            case .Ivysaur: return ".Ivysaur"
            case .Venusaur: return ".Venusaur"
            case .Charmander: return ".Charmander"
            case .Charmeleon: return ".Charmeleon"
            case .Charizard: return ".Charizard"
            case .Squirtle: return ".Squirtle"
            case .Wartortle: return ".Wartortle"
            case .Blastoise: return ".Blastoise"
            case .Caterpie: return ".Caterpie"
            case .Metapod: return ".Metapod"
            case .Butterfree: return ".Butterfree"
            case .Weedle: return ".Weedle"
            case .Kakuna: return ".Kakuna"
            case .Beedrill: return ".Beedrill"
            case .Pidgey: return ".Pidgey"
            case .Pidgeotto: return ".Pidgeotto"
            case .Pidgeot: return ".Pidgeot"
            case .Rattata: return ".Rattata"
            case .Raticate: return ".Raticate"
            case .Spearow: return ".Spearow"
            case .Fearow: return ".Fearow"
            case .Ekans: return ".Ekans"
            case .Arbok: return ".Arbok"
            case .Pikachu: return ".Pikachu"
            case .Raichu: return ".Raichu"
            case .Sandshrew: return ".Sandshrew"
            case .Sandslash: return ".Sandslash"
            case .NidoranFemale: return ".NidoranFemale"
            case .Nidorina: return ".Nidorina"
            case .Nidoqueen: return ".Nidoqueen"
            case .NidoranMale: return ".NidoranMale"
            case .Nidorino: return ".Nidorino"
            case .Nidoking: return ".Nidoking"
            case .Clefairy: return ".Clefairy"
            case .Clefable: return ".Clefable"
            case .Vulpix: return ".Vulpix"
            case .Ninetales: return ".Ninetales"
            case .Jigglypuff: return ".Jigglypuff"
            case .Wigglytuff: return ".Wigglytuff"
            case .Zubat: return ".Zubat"
            case .Golbat: return ".Golbat"
            case .Oddish: return ".Oddish"
            case .Gloom: return ".Gloom"
            case .Vileplume: return ".Vileplume"
            case .Paras: return ".Paras"
            case .Parasect: return ".Parasect"
            case .Venonat: return ".Venonat"
            case .Venomoth: return ".Venomoth"
            case .Diglett: return ".Diglett"
            case .Dugtrio: return ".Dugtrio"
            case .Meowth: return ".Meowth"
            case .Persian: return ".Persian"
            case .Psyduck: return ".Psyduck"
            case .Golduck: return ".Golduck"
            case .Mankey: return ".Mankey"
            case .Primeape: return ".Primeape"
            case .Growlithe: return ".Growlithe"
            case .Arcanine: return ".Arcanine"
            case .Poliwag: return ".Poliwag"
            case .Poliwhirl: return ".Poliwhirl"
            case .Poliwrath: return ".Poliwrath"
            case .Abra: return ".Abra"
            case .Kadabra: return ".Kadabra"
            case .Alakazam: return ".Alakazam"
            case .Machop: return ".Machop"
            case .Machoke: return ".Machoke"
            case .Machamp: return ".Machamp"
            case .Bellsprout: return ".Bellsprout"
            case .Weepinbell: return ".Weepinbell"
            case .Victreebel: return ".Victreebel"
            case .Tentacool: return ".Tentacool"
            case .Tentacruel: return ".Tentacruel"
            case .Geodude: return ".Geodude"
            case .Graveler: return ".Graveler"
            case .Golem: return ".Golem"
            case .Ponyta: return ".Ponyta"
            case .Rapidash: return ".Rapidash"
            case .Slowpoke: return ".Slowpoke"
            case .Slowbro: return ".Slowbro"
            case .Magnemite: return ".Magnemite"
            case .Magneton: return ".Magneton"
            case .Farfetchd: return ".Farfetchd"
            case .Doduo: return ".Doduo"
            case .Dodrio: return ".Dodrio"
            case .Seel: return ".Seel"
            case .Dewgong: return ".Dewgong"
            case .Grimer: return ".Grimer"
            case .Muk: return ".Muk"
            case .Shellder: return ".Shellder"
            case .Cloyster: return ".Cloyster"
            case .Gastly: return ".Gastly"
            case .Haunter: return ".Haunter"
            case .Gengar: return ".Gengar"
            case .Onix: return ".Onix"
            case .Drowzee: return ".Drowzee"
            case .Hypno: return ".Hypno"
            case .Krabby: return ".Krabby"
            case .Kingler: return ".Kingler"
            case .Voltorb: return ".Voltorb"
            case .Electrode: return ".Electrode"
            case .Exeggcute: return ".Exeggcute"
            case .Exeggutor: return ".Exeggutor"
            case .Cubone: return ".Cubone"
            case .Marowak: return ".Marowak"
            case .Hitmonlee: return ".Hitmonlee"
            case .Hitmonchan: return ".Hitmonchan"
            case .Lickitung: return ".Lickitung"
            case .Koffing: return ".Koffing"
            case .Weezing: return ".Weezing"
            case .Rhyhorn: return ".Rhyhorn"
            case .Rhydon: return ".Rhydon"
            case .Chansey: return ".Chansey"
            case .Tangela: return ".Tangela"
            case .Kangaskhan: return ".Kangaskhan"
            case .Horsea: return ".Horsea"
            case .Seadra: return ".Seadra"
            case .Goldeen: return ".Goldeen"
            case .Seaking: return ".Seaking"
            case .Staryu: return ".Staryu"
            case .Starmie: return ".Starmie"
            case .MrMime: return ".MrMime"
            case .Scyther: return ".Scyther"
            case .Jynx: return ".Jynx"
            case .Electabuzz: return ".Electabuzz"
            case .Magmar: return ".Magmar"
            case .Pinsir: return ".Pinsir"
            case .Tauros: return ".Tauros"
            case .Magikarp: return ".Magikarp"
            case .Gyarados: return ".Gyarados"
            case .Lapras: return ".Lapras"
            case .Ditto: return ".Ditto"
            case .Eevee: return ".Eevee"
            case .Vaporeon: return ".Vaporeon"
            case .Jolteon: return ".Jolteon"
            case .Flareon: return ".Flareon"
            case .Porygon: return ".Porygon"
            case .Omanyte: return ".Omanyte"
            case .Omastar: return ".Omastar"
            case .Kabuto: return ".Kabuto"
            case .Kabutops: return ".Kabutops"
            case .Aerodactyl: return ".Aerodactyl"
            case .Snorlax: return ".Snorlax"
            case .Articuno: return ".Articuno"
            case .Zapdos: return ".Zapdos"
            case .Moltres: return ".Moltres"
            case .Dratini: return ".Dratini"
            case .Dragonair: return ".Dragonair"
            case .Dragonite: return ".Dragonite"
            case .Mewtwo: return ".Mewtwo"
            case .Mew: return ".Mew"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonMove:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case MoveUnset = 0
    case ThunderShock = 1
    case QuickAttack = 2
    case Scratch = 3
    case Ember = 4
    case VineWhip = 5
    case Tackle = 6
    case RazorLeaf = 7
    case TakeDown = 8
    case WaterGun = 9
    case Bite = 10
    case Pound = 11
    case DoubleSlap = 12
    case Wrap = 13
    case HyperBeam = 14
    case Lick = 15
    case DarkPulse = 16
    case Smog = 17
    case Sludge = 18
    case MetalClaw = 19
    case ViceGrip = 20
    case FlameWheel = 21
    case Megahorn = 22
    case WingAttack = 23
    case Flamethrower = 24
    case SuckerPunch = 25
    case Dig = 26
    case LowKick = 27
    case CrossChop = 28
    case PsychoCut = 29
    case Psybeam = 30
    case Earthquake = 31
    case StoneEdge = 32
    case IcePunch = 33
    case HeartStamp = 34
    case Discharge = 35
    case FlashCannon = 36
    case Peck = 37
    case DrillPeck = 38
    case IceBeam = 39
    case Blizzard = 40
    case AirSlash = 41
    case HeatWave = 42
    case Twineedle = 43
    case PoisonJab = 44
    case AerialAce = 45
    case DrillRun = 46
    case PetalBlizzard = 47
    case MegaDrain = 48
    case BugBuzz = 49
    case PoisonFang = 50
    case NightSlash = 51
    case Slash = 52
    case BubbleBeam = 53
    case Submission = 54
    case KarateChop = 55
    case LowSweep = 56
    case AquaJet = 57
    case AquaTail = 58
    case SeedBomb = 59
    case Psyshock = 60
    case RockThrow = 61
    case AncientPower = 62
    case RockTomb = 63
    case RockSlide = 64
    case PowerGem = 65
    case ShadowSneak = 66
    case ShadowPunch = 67
    case ShadowClaw = 68
    case OminousWind = 69
    case ShadowBall = 70
    case BulletPunch = 71
    case MagnetBomb = 72
    case SteelWing = 73
    case IronHead = 74
    case ParabolicCharge = 75
    case Spark = 76
    case ThunderPunch = 77
    case Thunder = 78
    case Thunderbolt = 79
    case Twister = 80
    case DragonBreath = 81
    case DragonPulse = 82
    case DragonClaw = 83
    case DisarmingVoice = 84
    case DrainingKiss = 85
    case DazzlingGleam = 86
    case Moonblast = 87
    case PlayRough = 88
    case CrossPoison = 89
    case SludgeBomb = 90
    case SludgeWave = 91
    case GunkShot = 92
    case MudShot = 93
    case BoneClub = 94
    case Bulldoze = 95
    case MudBomb = 96
    case FuryCutter = 97
    case BugBite = 98
    case SignalBeam = 99
    case XScissor = 100
    case FlameCharge = 101
    case FlameBurst = 102
    case FireBlast = 103
    case Brine = 104
    case WaterPulse = 105
    case Scald = 106
    case HydroPump = 107
    case Psychic = 108
    case Psystrike = 109
    case IceShard = 110
    case IcyWind = 111
    case FrostBreath = 112
    case Absorb = 113
    case GigaDrain = 114
    case FirePunch = 115
    case SolarBeam = 116
    case LeafBlade = 117
    case PowerWhip = 118
    case Splash = 119
    case Acid = 120
    case AirCutter = 121
    case Hurricane = 122
    case BrickBreak = 123
    case Cut = 124
    case Swift = 125
    case HornAttack = 126
    case Stomp = 127
    case Headbutt = 128
    case HyperFang = 129
    case Slam = 130
    case BodySlam = 131
    case Rest = 132
    case Struggle = 133
    case ScaldBlastoise = 134
    case HydroPumpBlastoise = 135
    case WrapGreen = 136
    case WrapPink = 137
    case FuryCutterFast = 200
    case BugBiteFast = 201
    case BiteFast = 202
    case SuckerPunchFast = 203
    case DragonBreathFast = 204
    case ThunderShockFast = 205
    case SparkFast = 206
    case LowKickFast = 207
    case KarateChopFast = 208
    case EmberFast = 209
    case WingAttackFast = 210
    case PeckFast = 211
    case LickFast = 212
    case ShadowClawFast = 213
    case VineWhipFast = 214
    case RazorLeafFast = 215
    case MudShotFast = 216
    case IceShardFast = 217
    case FrostBreathFast = 218
    case QuickAttackFast = 219
    case ScratchFast = 220
    case TackleFast = 221
    case PoundFast = 222
    case CutFast = 223
    case PoisonJabFast = 224
    case AcidFast = 225
    case PsychoCutFast = 226
    case RockThrowFast = 227
    case MetalClawFast = 228
    case BulletPunchFast = 229
    case WaterGunFast = 230
    case SplashFast = 231
    case WaterGunFastBlastoise = 232
    case MudSlapFast = 233
    case ZenHeadbuttFast = 234
    case ConfusionFast = 235
    case PoisonStingFast = 236
    case BubbleFast = 237
    case FeintAttackFast = 238
    case SteelWingFast = 239
    case FireFangFast = 240
    case RockSmashFast = 241
    public func toString() -> String {
      switch self {
      case .MoveUnset: return "MOVE_UNSET"
      case .ThunderShock: return "THUNDER_SHOCK"
      case .QuickAttack: return "QUICK_ATTACK"
      case .Scratch: return "SCRATCH"
      case .Ember: return "EMBER"
      case .VineWhip: return "VINE_WHIP"
      case .Tackle: return "TACKLE"
      case .RazorLeaf: return "RAZOR_LEAF"
      case .TakeDown: return "TAKE_DOWN"
      case .WaterGun: return "WATER_GUN"
      case .Bite: return "BITE"
      case .Pound: return "POUND"
      case .DoubleSlap: return "DOUBLE_SLAP"
      case .Wrap: return "WRAP"
      case .HyperBeam: return "HYPER_BEAM"
      case .Lick: return "LICK"
      case .DarkPulse: return "DARK_PULSE"
      case .Smog: return "SMOG"
      case .Sludge: return "SLUDGE"
      case .MetalClaw: return "METAL_CLAW"
      case .ViceGrip: return "VICE_GRIP"
      case .FlameWheel: return "FLAME_WHEEL"
      case .Megahorn: return "MEGAHORN"
      case .WingAttack: return "WING_ATTACK"
      case .Flamethrower: return "FLAMETHROWER"
      case .SuckerPunch: return "SUCKER_PUNCH"
      case .Dig: return "DIG"
      case .LowKick: return "LOW_KICK"
      case .CrossChop: return "CROSS_CHOP"
      case .PsychoCut: return "PSYCHO_CUT"
      case .Psybeam: return "PSYBEAM"
      case .Earthquake: return "EARTHQUAKE"
      case .StoneEdge: return "STONE_EDGE"
      case .IcePunch: return "ICE_PUNCH"
      case .HeartStamp: return "HEART_STAMP"
      case .Discharge: return "DISCHARGE"
      case .FlashCannon: return "FLASH_CANNON"
      case .Peck: return "PECK"
      case .DrillPeck: return "DRILL_PECK"
      case .IceBeam: return "ICE_BEAM"
      case .Blizzard: return "BLIZZARD"
      case .AirSlash: return "AIR_SLASH"
      case .HeatWave: return "HEAT_WAVE"
      case .Twineedle: return "TWINEEDLE"
      case .PoisonJab: return "POISON_JAB"
      case .AerialAce: return "AERIAL_ACE"
      case .DrillRun: return "DRILL_RUN"
      case .PetalBlizzard: return "PETAL_BLIZZARD"
      case .MegaDrain: return "MEGA_DRAIN"
      case .BugBuzz: return "BUG_BUZZ"
      case .PoisonFang: return "POISON_FANG"
      case .NightSlash: return "NIGHT_SLASH"
      case .Slash: return "SLASH"
      case .BubbleBeam: return "BUBBLE_BEAM"
      case .Submission: return "SUBMISSION"
      case .KarateChop: return "KARATE_CHOP"
      case .LowSweep: return "LOW_SWEEP"
      case .AquaJet: return "AQUA_JET"
      case .AquaTail: return "AQUA_TAIL"
      case .SeedBomb: return "SEED_BOMB"
      case .Psyshock: return "PSYSHOCK"
      case .RockThrow: return "ROCK_THROW"
      case .AncientPower: return "ANCIENT_POWER"
      case .RockTomb: return "ROCK_TOMB"
      case .RockSlide: return "ROCK_SLIDE"
      case .PowerGem: return "POWER_GEM"
      case .ShadowSneak: return "SHADOW_SNEAK"
      case .ShadowPunch: return "SHADOW_PUNCH"
      case .ShadowClaw: return "SHADOW_CLAW"
      case .OminousWind: return "OMINOUS_WIND"
      case .ShadowBall: return "SHADOW_BALL"
      case .BulletPunch: return "BULLET_PUNCH"
      case .MagnetBomb: return "MAGNET_BOMB"
      case .SteelWing: return "STEEL_WING"
      case .IronHead: return "IRON_HEAD"
      case .ParabolicCharge: return "PARABOLIC_CHARGE"
      case .Spark: return "SPARK"
      case .ThunderPunch: return "THUNDER_PUNCH"
      case .Thunder: return "THUNDER"
      case .Thunderbolt: return "THUNDERBOLT"
      case .Twister: return "TWISTER"
      case .DragonBreath: return "DRAGON_BREATH"
      case .DragonPulse: return "DRAGON_PULSE"
      case .DragonClaw: return "DRAGON_CLAW"
      case .DisarmingVoice: return "DISARMING_VOICE"
      case .DrainingKiss: return "DRAINING_KISS"
      case .DazzlingGleam: return "DAZZLING_GLEAM"
      case .Moonblast: return "MOONBLAST"
      case .PlayRough: return "PLAY_ROUGH"
      case .CrossPoison: return "CROSS_POISON"
      case .SludgeBomb: return "SLUDGE_BOMB"
      case .SludgeWave: return "SLUDGE_WAVE"
      case .GunkShot: return "GUNK_SHOT"
      case .MudShot: return "MUD_SHOT"
      case .BoneClub: return "BONE_CLUB"
      case .Bulldoze: return "BULLDOZE"
      case .MudBomb: return "MUD_BOMB"
      case .FuryCutter: return "FURY_CUTTER"
      case .BugBite: return "BUG_BITE"
      case .SignalBeam: return "SIGNAL_BEAM"
      case .XScissor: return "X_SCISSOR"
      case .FlameCharge: return "FLAME_CHARGE"
      case .FlameBurst: return "FLAME_BURST"
      case .FireBlast: return "FIRE_BLAST"
      case .Brine: return "BRINE"
      case .WaterPulse: return "WATER_PULSE"
      case .Scald: return "SCALD"
      case .HydroPump: return "HYDRO_PUMP"
      case .Psychic: return "PSYCHIC"
      case .Psystrike: return "PSYSTRIKE"
      case .IceShard: return "ICE_SHARD"
      case .IcyWind: return "ICY_WIND"
      case .FrostBreath: return "FROST_BREATH"
      case .Absorb: return "ABSORB"
      case .GigaDrain: return "GIGA_DRAIN"
      case .FirePunch: return "FIRE_PUNCH"
      case .SolarBeam: return "SOLAR_BEAM"
      case .LeafBlade: return "LEAF_BLADE"
      case .PowerWhip: return "POWER_WHIP"
      case .Splash: return "SPLASH"
      case .Acid: return "ACID"
      case .AirCutter: return "AIR_CUTTER"
      case .Hurricane: return "HURRICANE"
      case .BrickBreak: return "BRICK_BREAK"
      case .Cut: return "CUT"
      case .Swift: return "SWIFT"
      case .HornAttack: return "HORN_ATTACK"
      case .Stomp: return "STOMP"
      case .Headbutt: return "HEADBUTT"
      case .HyperFang: return "HYPER_FANG"
      case .Slam: return "SLAM"
      case .BodySlam: return "BODY_SLAM"
      case .Rest: return "REST"
      case .Struggle: return "STRUGGLE"
      case .ScaldBlastoise: return "SCALD_BLASTOISE"
      case .HydroPumpBlastoise: return "HYDRO_PUMP_BLASTOISE"
      case .WrapGreen: return "WRAP_GREEN"
      case .WrapPink: return "WRAP_PINK"
      case .FuryCutterFast: return "FURY_CUTTER_FAST"
      case .BugBiteFast: return "BUG_BITE_FAST"
      case .BiteFast: return "BITE_FAST"
      case .SuckerPunchFast: return "SUCKER_PUNCH_FAST"
      case .DragonBreathFast: return "DRAGON_BREATH_FAST"
      case .ThunderShockFast: return "THUNDER_SHOCK_FAST"
      case .SparkFast: return "SPARK_FAST"
      case .LowKickFast: return "LOW_KICK_FAST"
      case .KarateChopFast: return "KARATE_CHOP_FAST"
      case .EmberFast: return "EMBER_FAST"
      case .WingAttackFast: return "WING_ATTACK_FAST"
      case .PeckFast: return "PECK_FAST"
      case .LickFast: return "LICK_FAST"
      case .ShadowClawFast: return "SHADOW_CLAW_FAST"
      case .VineWhipFast: return "VINE_WHIP_FAST"
      case .RazorLeafFast: return "RAZOR_LEAF_FAST"
      case .MudShotFast: return "MUD_SHOT_FAST"
      case .IceShardFast: return "ICE_SHARD_FAST"
      case .FrostBreathFast: return "FROST_BREATH_FAST"
      case .QuickAttackFast: return "QUICK_ATTACK_FAST"
      case .ScratchFast: return "SCRATCH_FAST"
      case .TackleFast: return "TACKLE_FAST"
      case .PoundFast: return "POUND_FAST"
      case .CutFast: return "CUT_FAST"
      case .PoisonJabFast: return "POISON_JAB_FAST"
      case .AcidFast: return "ACID_FAST"
      case .PsychoCutFast: return "PSYCHO_CUT_FAST"
      case .RockThrowFast: return "ROCK_THROW_FAST"
      case .MetalClawFast: return "METAL_CLAW_FAST"
      case .BulletPunchFast: return "BULLET_PUNCH_FAST"
      case .WaterGunFast: return "WATER_GUN_FAST"
      case .SplashFast: return "SPLASH_FAST"
      case .WaterGunFastBlastoise: return "WATER_GUN_FAST_BLASTOISE"
      case .MudSlapFast: return "MUD_SLAP_FAST"
      case .ZenHeadbuttFast: return "ZEN_HEADBUTT_FAST"
      case .ConfusionFast: return "CONFUSION_FAST"
      case .PoisonStingFast: return "POISON_STING_FAST"
      case .BubbleFast: return "BUBBLE_FAST"
      case .FeintAttackFast: return "FEINT_ATTACK_FAST"
      case .SteelWingFast: return "STEEL_WING_FAST"
      case .FireFangFast: return "FIRE_FANG_FAST"
      case .RockSmashFast: return "ROCK_SMASH_FAST"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonMove {
      switch str {
      case "MOVE_UNSET":  return .MoveUnset
      case "THUNDER_SHOCK":  return .ThunderShock
      case "QUICK_ATTACK":  return .QuickAttack
      case "SCRATCH":  return .Scratch
      case "EMBER":  return .Ember
      case "VINE_WHIP":  return .VineWhip
      case "TACKLE":  return .Tackle
      case "RAZOR_LEAF":  return .RazorLeaf
      case "TAKE_DOWN":  return .TakeDown
      case "WATER_GUN":  return .WaterGun
      case "BITE":  return .Bite
      case "POUND":  return .Pound
      case "DOUBLE_SLAP":  return .DoubleSlap
      case "WRAP":  return .Wrap
      case "HYPER_BEAM":  return .HyperBeam
      case "LICK":  return .Lick
      case "DARK_PULSE":  return .DarkPulse
      case "SMOG":  return .Smog
      case "SLUDGE":  return .Sludge
      case "METAL_CLAW":  return .MetalClaw
      case "VICE_GRIP":  return .ViceGrip
      case "FLAME_WHEEL":  return .FlameWheel
      case "MEGAHORN":  return .Megahorn
      case "WING_ATTACK":  return .WingAttack
      case "FLAMETHROWER":  return .Flamethrower
      case "SUCKER_PUNCH":  return .SuckerPunch
      case "DIG":  return .Dig
      case "LOW_KICK":  return .LowKick
      case "CROSS_CHOP":  return .CrossChop
      case "PSYCHO_CUT":  return .PsychoCut
      case "PSYBEAM":  return .Psybeam
      case "EARTHQUAKE":  return .Earthquake
      case "STONE_EDGE":  return .StoneEdge
      case "ICE_PUNCH":  return .IcePunch
      case "HEART_STAMP":  return .HeartStamp
      case "DISCHARGE":  return .Discharge
      case "FLASH_CANNON":  return .FlashCannon
      case "PECK":  return .Peck
      case "DRILL_PECK":  return .DrillPeck
      case "ICE_BEAM":  return .IceBeam
      case "BLIZZARD":  return .Blizzard
      case "AIR_SLASH":  return .AirSlash
      case "HEAT_WAVE":  return .HeatWave
      case "TWINEEDLE":  return .Twineedle
      case "POISON_JAB":  return .PoisonJab
      case "AERIAL_ACE":  return .AerialAce
      case "DRILL_RUN":  return .DrillRun
      case "PETAL_BLIZZARD":  return .PetalBlizzard
      case "MEGA_DRAIN":  return .MegaDrain
      case "BUG_BUZZ":  return .BugBuzz
      case "POISON_FANG":  return .PoisonFang
      case "NIGHT_SLASH":  return .NightSlash
      case "SLASH":  return .Slash
      case "BUBBLE_BEAM":  return .BubbleBeam
      case "SUBMISSION":  return .Submission
      case "KARATE_CHOP":  return .KarateChop
      case "LOW_SWEEP":  return .LowSweep
      case "AQUA_JET":  return .AquaJet
      case "AQUA_TAIL":  return .AquaTail
      case "SEED_BOMB":  return .SeedBomb
      case "PSYSHOCK":  return .Psyshock
      case "ROCK_THROW":  return .RockThrow
      case "ANCIENT_POWER":  return .AncientPower
      case "ROCK_TOMB":  return .RockTomb
      case "ROCK_SLIDE":  return .RockSlide
      case "POWER_GEM":  return .PowerGem
      case "SHADOW_SNEAK":  return .ShadowSneak
      case "SHADOW_PUNCH":  return .ShadowPunch
      case "SHADOW_CLAW":  return .ShadowClaw
      case "OMINOUS_WIND":  return .OminousWind
      case "SHADOW_BALL":  return .ShadowBall
      case "BULLET_PUNCH":  return .BulletPunch
      case "MAGNET_BOMB":  return .MagnetBomb
      case "STEEL_WING":  return .SteelWing
      case "IRON_HEAD":  return .IronHead
      case "PARABOLIC_CHARGE":  return .ParabolicCharge
      case "SPARK":  return .Spark
      case "THUNDER_PUNCH":  return .ThunderPunch
      case "THUNDER":  return .Thunder
      case "THUNDERBOLT":  return .Thunderbolt
      case "TWISTER":  return .Twister
      case "DRAGON_BREATH":  return .DragonBreath
      case "DRAGON_PULSE":  return .DragonPulse
      case "DRAGON_CLAW":  return .DragonClaw
      case "DISARMING_VOICE":  return .DisarmingVoice
      case "DRAINING_KISS":  return .DrainingKiss
      case "DAZZLING_GLEAM":  return .DazzlingGleam
      case "MOONBLAST":  return .Moonblast
      case "PLAY_ROUGH":  return .PlayRough
      case "CROSS_POISON":  return .CrossPoison
      case "SLUDGE_BOMB":  return .SludgeBomb
      case "SLUDGE_WAVE":  return .SludgeWave
      case "GUNK_SHOT":  return .GunkShot
      case "MUD_SHOT":  return .MudShot
      case "BONE_CLUB":  return .BoneClub
      case "BULLDOZE":  return .Bulldoze
      case "MUD_BOMB":  return .MudBomb
      case "FURY_CUTTER":  return .FuryCutter
      case "BUG_BITE":  return .BugBite
      case "SIGNAL_BEAM":  return .SignalBeam
      case "X_SCISSOR":  return .XScissor
      case "FLAME_CHARGE":  return .FlameCharge
      case "FLAME_BURST":  return .FlameBurst
      case "FIRE_BLAST":  return .FireBlast
      case "BRINE":  return .Brine
      case "WATER_PULSE":  return .WaterPulse
      case "SCALD":  return .Scald
      case "HYDRO_PUMP":  return .HydroPump
      case "PSYCHIC":  return .Psychic
      case "PSYSTRIKE":  return .Psystrike
      case "ICE_SHARD":  return .IceShard
      case "ICY_WIND":  return .IcyWind
      case "FROST_BREATH":  return .FrostBreath
      case "ABSORB":  return .Absorb
      case "GIGA_DRAIN":  return .GigaDrain
      case "FIRE_PUNCH":  return .FirePunch
      case "SOLAR_BEAM":  return .SolarBeam
      case "LEAF_BLADE":  return .LeafBlade
      case "POWER_WHIP":  return .PowerWhip
      case "SPLASH":  return .Splash
      case "ACID":  return .Acid
      case "AIR_CUTTER":  return .AirCutter
      case "HURRICANE":  return .Hurricane
      case "BRICK_BREAK":  return .BrickBreak
      case "CUT":  return .Cut
      case "SWIFT":  return .Swift
      case "HORN_ATTACK":  return .HornAttack
      case "STOMP":  return .Stomp
      case "HEADBUTT":  return .Headbutt
      case "HYPER_FANG":  return .HyperFang
      case "SLAM":  return .Slam
      case "BODY_SLAM":  return .BodySlam
      case "REST":  return .Rest
      case "STRUGGLE":  return .Struggle
      case "SCALD_BLASTOISE":  return .ScaldBlastoise
      case "HYDRO_PUMP_BLASTOISE":  return .HydroPumpBlastoise
      case "WRAP_GREEN":  return .WrapGreen
      case "WRAP_PINK":  return .WrapPink
      case "FURY_CUTTER_FAST":  return .FuryCutterFast
      case "BUG_BITE_FAST":  return .BugBiteFast
      case "BITE_FAST":  return .BiteFast
      case "SUCKER_PUNCH_FAST":  return .SuckerPunchFast
      case "DRAGON_BREATH_FAST":  return .DragonBreathFast
      case "THUNDER_SHOCK_FAST":  return .ThunderShockFast
      case "SPARK_FAST":  return .SparkFast
      case "LOW_KICK_FAST":  return .LowKickFast
      case "KARATE_CHOP_FAST":  return .KarateChopFast
      case "EMBER_FAST":  return .EmberFast
      case "WING_ATTACK_FAST":  return .WingAttackFast
      case "PECK_FAST":  return .PeckFast
      case "LICK_FAST":  return .LickFast
      case "SHADOW_CLAW_FAST":  return .ShadowClawFast
      case "VINE_WHIP_FAST":  return .VineWhipFast
      case "RAZOR_LEAF_FAST":  return .RazorLeafFast
      case "MUD_SHOT_FAST":  return .MudShotFast
      case "ICE_SHARD_FAST":  return .IceShardFast
      case "FROST_BREATH_FAST":  return .FrostBreathFast
      case "QUICK_ATTACK_FAST":  return .QuickAttackFast
      case "SCRATCH_FAST":  return .ScratchFast
      case "TACKLE_FAST":  return .TackleFast
      case "POUND_FAST":  return .PoundFast
      case "CUT_FAST":  return .CutFast
      case "POISON_JAB_FAST":  return .PoisonJabFast
      case "ACID_FAST":  return .AcidFast
      case "PSYCHO_CUT_FAST":  return .PsychoCutFast
      case "ROCK_THROW_FAST":  return .RockThrowFast
      case "METAL_CLAW_FAST":  return .MetalClawFast
      case "BULLET_PUNCH_FAST":  return .BulletPunchFast
      case "WATER_GUN_FAST":  return .WaterGunFast
      case "SPLASH_FAST":  return .SplashFast
      case "WATER_GUN_FAST_BLASTOISE":  return .WaterGunFastBlastoise
      case "MUD_SLAP_FAST":  return .MudSlapFast
      case "ZEN_HEADBUTT_FAST":  return .ZenHeadbuttFast
      case "CONFUSION_FAST":  return .ConfusionFast
      case "POISON_STING_FAST":  return .PoisonStingFast
      case "BUBBLE_FAST":  return .BubbleFast
      case "FEINT_ATTACK_FAST":  return .FeintAttackFast
      case "STEEL_WING_FAST":  return .SteelWingFast
      case "FIRE_FANG_FAST":  return .FireFangFast
      case "ROCK_SMASH_FAST":  return .RockSmashFast
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .MoveUnset: return ".MoveUnset"
            case .ThunderShock: return ".ThunderShock"
            case .QuickAttack: return ".QuickAttack"
            case .Scratch: return ".Scratch"
            case .Ember: return ".Ember"
            case .VineWhip: return ".VineWhip"
            case .Tackle: return ".Tackle"
            case .RazorLeaf: return ".RazorLeaf"
            case .TakeDown: return ".TakeDown"
            case .WaterGun: return ".WaterGun"
            case .Bite: return ".Bite"
            case .Pound: return ".Pound"
            case .DoubleSlap: return ".DoubleSlap"
            case .Wrap: return ".Wrap"
            case .HyperBeam: return ".HyperBeam"
            case .Lick: return ".Lick"
            case .DarkPulse: return ".DarkPulse"
            case .Smog: return ".Smog"
            case .Sludge: return ".Sludge"
            case .MetalClaw: return ".MetalClaw"
            case .ViceGrip: return ".ViceGrip"
            case .FlameWheel: return ".FlameWheel"
            case .Megahorn: return ".Megahorn"
            case .WingAttack: return ".WingAttack"
            case .Flamethrower: return ".Flamethrower"
            case .SuckerPunch: return ".SuckerPunch"
            case .Dig: return ".Dig"
            case .LowKick: return ".LowKick"
            case .CrossChop: return ".CrossChop"
            case .PsychoCut: return ".PsychoCut"
            case .Psybeam: return ".Psybeam"
            case .Earthquake: return ".Earthquake"
            case .StoneEdge: return ".StoneEdge"
            case .IcePunch: return ".IcePunch"
            case .HeartStamp: return ".HeartStamp"
            case .Discharge: return ".Discharge"
            case .FlashCannon: return ".FlashCannon"
            case .Peck: return ".Peck"
            case .DrillPeck: return ".DrillPeck"
            case .IceBeam: return ".IceBeam"
            case .Blizzard: return ".Blizzard"
            case .AirSlash: return ".AirSlash"
            case .HeatWave: return ".HeatWave"
            case .Twineedle: return ".Twineedle"
            case .PoisonJab: return ".PoisonJab"
            case .AerialAce: return ".AerialAce"
            case .DrillRun: return ".DrillRun"
            case .PetalBlizzard: return ".PetalBlizzard"
            case .MegaDrain: return ".MegaDrain"
            case .BugBuzz: return ".BugBuzz"
            case .PoisonFang: return ".PoisonFang"
            case .NightSlash: return ".NightSlash"
            case .Slash: return ".Slash"
            case .BubbleBeam: return ".BubbleBeam"
            case .Submission: return ".Submission"
            case .KarateChop: return ".KarateChop"
            case .LowSweep: return ".LowSweep"
            case .AquaJet: return ".AquaJet"
            case .AquaTail: return ".AquaTail"
            case .SeedBomb: return ".SeedBomb"
            case .Psyshock: return ".Psyshock"
            case .RockThrow: return ".RockThrow"
            case .AncientPower: return ".AncientPower"
            case .RockTomb: return ".RockTomb"
            case .RockSlide: return ".RockSlide"
            case .PowerGem: return ".PowerGem"
            case .ShadowSneak: return ".ShadowSneak"
            case .ShadowPunch: return ".ShadowPunch"
            case .ShadowClaw: return ".ShadowClaw"
            case .OminousWind: return ".OminousWind"
            case .ShadowBall: return ".ShadowBall"
            case .BulletPunch: return ".BulletPunch"
            case .MagnetBomb: return ".MagnetBomb"
            case .SteelWing: return ".SteelWing"
            case .IronHead: return ".IronHead"
            case .ParabolicCharge: return ".ParabolicCharge"
            case .Spark: return ".Spark"
            case .ThunderPunch: return ".ThunderPunch"
            case .Thunder: return ".Thunder"
            case .Thunderbolt: return ".Thunderbolt"
            case .Twister: return ".Twister"
            case .DragonBreath: return ".DragonBreath"
            case .DragonPulse: return ".DragonPulse"
            case .DragonClaw: return ".DragonClaw"
            case .DisarmingVoice: return ".DisarmingVoice"
            case .DrainingKiss: return ".DrainingKiss"
            case .DazzlingGleam: return ".DazzlingGleam"
            case .Moonblast: return ".Moonblast"
            case .PlayRough: return ".PlayRough"
            case .CrossPoison: return ".CrossPoison"
            case .SludgeBomb: return ".SludgeBomb"
            case .SludgeWave: return ".SludgeWave"
            case .GunkShot: return ".GunkShot"
            case .MudShot: return ".MudShot"
            case .BoneClub: return ".BoneClub"
            case .Bulldoze: return ".Bulldoze"
            case .MudBomb: return ".MudBomb"
            case .FuryCutter: return ".FuryCutter"
            case .BugBite: return ".BugBite"
            case .SignalBeam: return ".SignalBeam"
            case .XScissor: return ".XScissor"
            case .FlameCharge: return ".FlameCharge"
            case .FlameBurst: return ".FlameBurst"
            case .FireBlast: return ".FireBlast"
            case .Brine: return ".Brine"
            case .WaterPulse: return ".WaterPulse"
            case .Scald: return ".Scald"
            case .HydroPump: return ".HydroPump"
            case .Psychic: return ".Psychic"
            case .Psystrike: return ".Psystrike"
            case .IceShard: return ".IceShard"
            case .IcyWind: return ".IcyWind"
            case .FrostBreath: return ".FrostBreath"
            case .Absorb: return ".Absorb"
            case .GigaDrain: return ".GigaDrain"
            case .FirePunch: return ".FirePunch"
            case .SolarBeam: return ".SolarBeam"
            case .LeafBlade: return ".LeafBlade"
            case .PowerWhip: return ".PowerWhip"
            case .Splash: return ".Splash"
            case .Acid: return ".Acid"
            case .AirCutter: return ".AirCutter"
            case .Hurricane: return ".Hurricane"
            case .BrickBreak: return ".BrickBreak"
            case .Cut: return ".Cut"
            case .Swift: return ".Swift"
            case .HornAttack: return ".HornAttack"
            case .Stomp: return ".Stomp"
            case .Headbutt: return ".Headbutt"
            case .HyperFang: return ".HyperFang"
            case .Slam: return ".Slam"
            case .BodySlam: return ".BodySlam"
            case .Rest: return ".Rest"
            case .Struggle: return ".Struggle"
            case .ScaldBlastoise: return ".ScaldBlastoise"
            case .HydroPumpBlastoise: return ".HydroPumpBlastoise"
            case .WrapGreen: return ".WrapGreen"
            case .WrapPink: return ".WrapPink"
            case .FuryCutterFast: return ".FuryCutterFast"
            case .BugBiteFast: return ".BugBiteFast"
            case .BiteFast: return ".BiteFast"
            case .SuckerPunchFast: return ".SuckerPunchFast"
            case .DragonBreathFast: return ".DragonBreathFast"
            case .ThunderShockFast: return ".ThunderShockFast"
            case .SparkFast: return ".SparkFast"
            case .LowKickFast: return ".LowKickFast"
            case .KarateChopFast: return ".KarateChopFast"
            case .EmberFast: return ".EmberFast"
            case .WingAttackFast: return ".WingAttackFast"
            case .PeckFast: return ".PeckFast"
            case .LickFast: return ".LickFast"
            case .ShadowClawFast: return ".ShadowClawFast"
            case .VineWhipFast: return ".VineWhipFast"
            case .RazorLeafFast: return ".RazorLeafFast"
            case .MudShotFast: return ".MudShotFast"
            case .IceShardFast: return ".IceShardFast"
            case .FrostBreathFast: return ".FrostBreathFast"
            case .QuickAttackFast: return ".QuickAttackFast"
            case .ScratchFast: return ".ScratchFast"
            case .TackleFast: return ".TackleFast"
            case .PoundFast: return ".PoundFast"
            case .CutFast: return ".CutFast"
            case .PoisonJabFast: return ".PoisonJabFast"
            case .AcidFast: return ".AcidFast"
            case .PsychoCutFast: return ".PsychoCutFast"
            case .RockThrowFast: return ".RockThrowFast"
            case .MetalClawFast: return ".MetalClawFast"
            case .BulletPunchFast: return ".BulletPunchFast"
            case .WaterGunFast: return ".WaterGunFast"
            case .SplashFast: return ".SplashFast"
            case .WaterGunFastBlastoise: return ".WaterGunFastBlastoise"
            case .MudSlapFast: return ".MudSlapFast"
            case .ZenHeadbuttFast: return ".ZenHeadbuttFast"
            case .ConfusionFast: return ".ConfusionFast"
            case .PoisonStingFast: return ".PoisonStingFast"
            case .BubbleFast: return ".BubbleFast"
            case .FeintAttackFast: return ".FeintAttackFast"
            case .SteelWingFast: return ".SteelWingFast"
            case .FireFangFast: return ".FireFangFast"
            case .RockSmashFast: return ".RockSmashFast"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonMovementType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case MovementStatic = 0
    case MovementJump = 1
    case MovementVertical = 2
    case MovementPsychic = 3
    case MovementElectric = 4
    case MovementFlying = 5
    case MovementHovering = 6
    public func toString() -> String {
      switch self {
      case .MovementStatic: return "MOVEMENT_STATIC"
      case .MovementJump: return "MOVEMENT_JUMP"
      case .MovementVertical: return "MOVEMENT_VERTICAL"
      case .MovementPsychic: return "MOVEMENT_PSYCHIC"
      case .MovementElectric: return "MOVEMENT_ELECTRIC"
      case .MovementFlying: return "MOVEMENT_FLYING"
      case .MovementHovering: return "MOVEMENT_HOVERING"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonMovementType {
      switch str {
      case "MOVEMENT_STATIC":  return .MovementStatic
      case "MOVEMENT_JUMP":  return .MovementJump
      case "MOVEMENT_VERTICAL":  return .MovementVertical
      case "MOVEMENT_PSYCHIC":  return .MovementPsychic
      case "MOVEMENT_ELECTRIC":  return .MovementElectric
      case "MOVEMENT_FLYING":  return .MovementFlying
      case "MOVEMENT_HOVERING":  return .MovementHovering
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .MovementStatic: return ".MovementStatic"
            case .MovementJump: return ".MovementJump"
            case .MovementVertical: return ".MovementVertical"
            case .MovementPsychic: return ".MovementPsychic"
            case .MovementElectric: return ".MovementElectric"
            case .MovementFlying: return ".MovementFlying"
            case .MovementHovering: return ".MovementHovering"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonRarity:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case PokemonRarityNormal = 0
    case PokemonRarityLegendary = 1
    case PokemonRarityMythic = 2
    public func toString() -> String {
      switch self {
      case .PokemonRarityNormal: return "POKEMON_RARITY_NORMAL"
      case .PokemonRarityLegendary: return "POKEMON_RARITY_LEGENDARY"
      case .PokemonRarityMythic: return "POKEMON_RARITY_MYTHIC"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonRarity {
      switch str {
      case "POKEMON_RARITY_NORMAL":  return .PokemonRarityNormal
      case "POKEMON_RARITY_LEGENDARY":  return .PokemonRarityLegendary
      case "POKEMON_RARITY_MYTHIC":  return .PokemonRarityMythic
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .PokemonRarityNormal: return ".PokemonRarityNormal"
            case .PokemonRarityLegendary: return ".PokemonRarityLegendary"
            case .PokemonRarityMythic: return ".PokemonRarityMythic"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum PokemonType:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case PokemonTypeNone = 0
    case PokemonTypeNormal = 1
    case PokemonTypeFighting = 2
    case PokemonTypeFlying = 3
    case PokemonTypePoison = 4
    case PokemonTypeGround = 5
    case PokemonTypeRock = 6
    case PokemonTypeBug = 7
    case PokemonTypeGhost = 8
    case PokemonTypeSteel = 9
    case PokemonTypeFire = 10
    case PokemonTypeWater = 11
    case PokemonTypeGrass = 12
    case PokemonTypeElectric = 13
    case PokemonTypePsychic = 14
    case PokemonTypeIce = 15
    case PokemonTypeDragon = 16
    case PokemonTypeDark = 17
    case PokemonTypeFairy = 18
    public func toString() -> String {
      switch self {
      case .PokemonTypeNone: return "POKEMON_TYPE_NONE"
      case .PokemonTypeNormal: return "POKEMON_TYPE_NORMAL"
      case .PokemonTypeFighting: return "POKEMON_TYPE_FIGHTING"
      case .PokemonTypeFlying: return "POKEMON_TYPE_FLYING"
      case .PokemonTypePoison: return "POKEMON_TYPE_POISON"
      case .PokemonTypeGround: return "POKEMON_TYPE_GROUND"
      case .PokemonTypeRock: return "POKEMON_TYPE_ROCK"
      case .PokemonTypeBug: return "POKEMON_TYPE_BUG"
      case .PokemonTypeGhost: return "POKEMON_TYPE_GHOST"
      case .PokemonTypeSteel: return "POKEMON_TYPE_STEEL"
      case .PokemonTypeFire: return "POKEMON_TYPE_FIRE"
      case .PokemonTypeWater: return "POKEMON_TYPE_WATER"
      case .PokemonTypeGrass: return "POKEMON_TYPE_GRASS"
      case .PokemonTypeElectric: return "POKEMON_TYPE_ELECTRIC"
      case .PokemonTypePsychic: return "POKEMON_TYPE_PSYCHIC"
      case .PokemonTypeIce: return "POKEMON_TYPE_ICE"
      case .PokemonTypeDragon: return "POKEMON_TYPE_DRAGON"
      case .PokemonTypeDark: return "POKEMON_TYPE_DARK"
      case .PokemonTypeFairy: return "POKEMON_TYPE_FAIRY"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.PokemonType {
      switch str {
      case "POKEMON_TYPE_NONE":  return .PokemonTypeNone
      case "POKEMON_TYPE_NORMAL":  return .PokemonTypeNormal
      case "POKEMON_TYPE_FIGHTING":  return .PokemonTypeFighting
      case "POKEMON_TYPE_FLYING":  return .PokemonTypeFlying
      case "POKEMON_TYPE_POISON":  return .PokemonTypePoison
      case "POKEMON_TYPE_GROUND":  return .PokemonTypeGround
      case "POKEMON_TYPE_ROCK":  return .PokemonTypeRock
      case "POKEMON_TYPE_BUG":  return .PokemonTypeBug
      case "POKEMON_TYPE_GHOST":  return .PokemonTypeGhost
      case "POKEMON_TYPE_STEEL":  return .PokemonTypeSteel
      case "POKEMON_TYPE_FIRE":  return .PokemonTypeFire
      case "POKEMON_TYPE_WATER":  return .PokemonTypeWater
      case "POKEMON_TYPE_GRASS":  return .PokemonTypeGrass
      case "POKEMON_TYPE_ELECTRIC":  return .PokemonTypeElectric
      case "POKEMON_TYPE_PSYCHIC":  return .PokemonTypePsychic
      case "POKEMON_TYPE_ICE":  return .PokemonTypeIce
      case "POKEMON_TYPE_DRAGON":  return .PokemonTypeDragon
      case "POKEMON_TYPE_DARK":  return .PokemonTypeDark
      case "POKEMON_TYPE_FAIRY":  return .PokemonTypeFairy
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .PokemonTypeNone: return ".PokemonTypeNone"
            case .PokemonTypeNormal: return ".PokemonTypeNormal"
            case .PokemonTypeFighting: return ".PokemonTypeFighting"
            case .PokemonTypeFlying: return ".PokemonTypeFlying"
            case .PokemonTypePoison: return ".PokemonTypePoison"
            case .PokemonTypeGround: return ".PokemonTypeGround"
            case .PokemonTypeRock: return ".PokemonTypeRock"
            case .PokemonTypeBug: return ".PokemonTypeBug"
            case .PokemonTypeGhost: return ".PokemonTypeGhost"
            case .PokemonTypeSteel: return ".PokemonTypeSteel"
            case .PokemonTypeFire: return ".PokemonTypeFire"
            case .PokemonTypeWater: return ".PokemonTypeWater"
            case .PokemonTypeGrass: return ".PokemonTypeGrass"
            case .PokemonTypeElectric: return ".PokemonTypeElectric"
            case .PokemonTypePsychic: return ".PokemonTypePsychic"
            case .PokemonTypeIce: return ".PokemonTypeIce"
            case .PokemonTypeDragon: return ".PokemonTypeDragon"
            case .PokemonTypeDark: return ".PokemonTypeDark"
            case .PokemonTypeFairy: return ".PokemonTypeFairy"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum TeamColor:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case Neutral = 0
    case Blue = 1
    case Red = 2
    case Yellow = 3
    public func toString() -> String {
      switch self {
      case .Neutral: return "NEUTRAL"
      case .Blue: return "BLUE"
      case .Red: return "RED"
      case .Yellow: return "YELLOW"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.TeamColor {
      switch str {
      case "NEUTRAL":  return .Neutral
      case "BLUE":  return .Blue
      case "RED":  return .Red
      case "YELLOW":  return .Yellow
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .Neutral: return ".Neutral"
            case .Blue: return ".Blue"
            case .Red: return ".Red"
            case .Yellow: return ".Yellow"
        }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum TutorialState:Int32, CustomDebugStringConvertible, CustomStringConvertible {
    case LegalScreen = 0
    case AvatarSelection = 1
    case AccountCreation = 2
    case PokemonCapture = 3
    case NameSelection = 4
    case PokemonBerry = 5
    case UseItem = 6
    case FirstTimeExperienceComplete = 7
    case PokestopTutorial = 8
    case GymTutorial = 9
    public func toString() -> String {
      switch self {
      case .LegalScreen: return "LEGAL_SCREEN"
      case .AvatarSelection: return "AVATAR_SELECTION"
      case .AccountCreation: return "ACCOUNT_CREATION"
      case .PokemonCapture: return "POKEMON_CAPTURE"
      case .NameSelection: return "NAME_SELECTION"
      case .PokemonBerry: return "POKEMON_BERRY"
      case .UseItem: return "USE_ITEM"
      case .FirstTimeExperienceComplete: return "FIRST_TIME_EXPERIENCE_COMPLETE"
      case .PokestopTutorial: return "POKESTOP_TUTORIAL"
      case .GymTutorial: return "GYM_TUTORIAL"
      }
    }
    public static func fromString(str:String) throws -> Pogoprotos.Enums.TutorialState {
      switch str {
      case "LEGAL_SCREEN":  return .LegalScreen
      case "AVATAR_SELECTION":  return .AvatarSelection
      case "ACCOUNT_CREATION":  return .AccountCreation
      case "POKEMON_CAPTURE":  return .PokemonCapture
      case "NAME_SELECTION":  return .NameSelection
      case "POKEMON_BERRY":  return .PokemonBerry
      case "USE_ITEM":  return .UseItem
      case "FIRST_TIME_EXPERIENCE_COMPLETE":  return .FirstTimeExperienceComplete
      case "POKESTOP_TUTORIAL":  return .PokestopTutorial
      case "GYM_TUTORIAL":  return .GymTutorial
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
            case .LegalScreen: return ".LegalScreen"
            case .AvatarSelection: return ".AvatarSelection"
            case .AccountCreation: return ".AccountCreation"
            case .PokemonCapture: return ".PokemonCapture"
            case .NameSelection: return ".NameSelection"
            case .PokemonBerry: return ".PokemonBerry"
            case .UseItem: return ".UseItem"
            case .FirstTimeExperienceComplete: return ".FirstTimeExperienceComplete"
            case .PokestopTutorial: return ".PokestopTutorial"
            case .GymTutorial: return ".GymTutorial"
        }
    }
  }

  //Enum type declaration end 

}

// @@protoc_insertion_point(global_scope)
