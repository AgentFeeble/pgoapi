// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Networking.Envelopes.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Networking.Envelopes {
  public struct PogoprotosNetworkingEnvelopesRoot {
    public static let `default` = PogoprotosNetworkingEnvelopesRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Networking.Platform.PogoprotosNetworkingPlatformRoot.default.registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Networking.Requests.PogoprotosNetworkingRequestsRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class AuthTicket : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Envelopes.AuthTicket, rhs: Pogoprotos.Networking.Envelopes.AuthTicket) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasStart == rhs.hasStart) && (!lhs.hasStart || lhs.start == rhs.start)
      fieldCheck = fieldCheck && (lhs.hasExpireTimestampMs == rhs.hasExpireTimestampMs) && (!lhs.hasExpireTimestampMs || lhs.expireTimestampMs == rhs.expireTimestampMs)
      fieldCheck = fieldCheck && (lhs.hasEnd == rhs.hasEnd) && (!lhs.hasEnd || lhs.end == rhs.end)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var start:Data = Data()
    public fileprivate(set) var hasStart:Bool = false

    public fileprivate(set) var expireTimestampMs:UInt64 = UInt64(0)
    public fileprivate(set) var hasExpireTimestampMs:Bool = false

    public fileprivate(set) var end:Data = Data()
    public fileprivate(set) var hasEnd:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasStart {
        try codedOutputStream.writeData(fieldNumber: 1, value:start)
      }
      if hasExpireTimestampMs {
        try codedOutputStream.writeUInt64(fieldNumber: 2, value:expireTimestampMs)
      }
      if hasEnd {
        try codedOutputStream.writeData(fieldNumber: 3, value:end)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStart {
        serialize_size += start.computeDataSize(fieldNumber: 1)
      }
      if hasExpireTimestampMs {
        serialize_size += expireTimestampMs.computeUInt64Size(fieldNumber: 2)
      }
      if hasEnd {
        serialize_size += end.computeDataSize(fieldNumber: 3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasStart {
        jsonMap["start"] = start.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
      }
      if hasExpireTimestampMs {
        jsonMap["expireTimestampMs"] = "\(expireTimestampMs)"
      }
      if hasEnd {
        jsonMap["end"] = end.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStart {
        output += "\(indent) start: \(start) \n"
      }
      if hasExpireTimestampMs {
        output += "\(indent) expireTimestampMs: \(expireTimestampMs) \n"
      }
      if hasEnd {
        output += "\(indent) end: \(end) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStart {
               hashCode = (hashCode &* 31) &+ start.hashValue
            }
            if hasExpireTimestampMs {
               hashCode = (hashCode &* 31) &+ expireTimestampMs.hashValue
            }
            if hasEnd {
               hashCode = (hashCode &* 31) &+ end.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Envelopes.AuthTicket = Pogoprotos.Networking.Envelopes.AuthTicket()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.AuthTicket {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStart:Bool {
           get {
                return builderResult.hasStart
           }
      }
      public var start:Data {
           get {
                return builderResult.start
           }
           set (value) {
               builderResult.hasStart = true
               builderResult.start = value
           }
      }
      @discardableResult
      public func setStart(_ value:Data) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.start = value
        return self
      }
      @discardableResult
      public func clearStart() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasStart = false
           builderResult.start = Data()
           return self
      }
      public var hasExpireTimestampMs:Bool {
           get {
                return builderResult.hasExpireTimestampMs
           }
      }
      public var expireTimestampMs:UInt64 {
           get {
                return builderResult.expireTimestampMs
           }
           set (value) {
               builderResult.hasExpireTimestampMs = true
               builderResult.expireTimestampMs = value
           }
      }
      @discardableResult
      public func setExpireTimestampMs(_ value:UInt64) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.expireTimestampMs = value
        return self
      }
      @discardableResult
      public func clearExpireTimestampMs() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasExpireTimestampMs = false
           builderResult.expireTimestampMs = UInt64(0)
           return self
      }
      public var hasEnd:Bool {
           get {
                return builderResult.hasEnd
           }
      }
      public var end:Data {
           get {
                return builderResult.end
           }
           set (value) {
               builderResult.hasEnd = true
               builderResult.end = value
           }
      }
      @discardableResult
      public func setEnd(_ value:Data) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.end = value
        return self
      }
      @discardableResult
      public func clearEnd() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasEnd = false
           builderResult.end = Data()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.AuthTicket()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.AuthTicket {
        let returnMe:Pogoprotos.Networking.Envelopes.AuthTicket = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if other == Pogoprotos.Networking.Envelopes.AuthTicket() {
         return self
        }
        if other.hasStart {
             start = other.start
        }
        if other.hasExpireTimestampMs {
             expireTimestampMs = other.expireTimestampMs
        }
        if other.hasEnd {
             end = other.end
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            start = try codedInputStream.readData()

          case 16:
            expireTimestampMs = try codedInputStream.readUInt64()

          case 26:
            end = try codedInputStream.readData()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
        if let jsonValueStart = jsonMap["start"] as? String {
          resultDecodedBuilder.start = Data(base64Encoded:jsonValueStart, options: Data.Base64DecodingOptions(rawValue:0))!
        }
        if let jsonValueExpireTimestampMs = jsonMap["expireTimestampMs"] as? String {
          resultDecodedBuilder.expireTimestampMs = UInt64(jsonValueExpireTimestampMs)!
        }
        if let jsonValueEnd = jsonMap["end"] as? String {
          resultDecodedBuilder.end = Data(base64Encoded:jsonValueEnd, options: Data.Base64DecodingOptions(rawValue:0))!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class RequestEnvelope : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
      fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
      fieldCheck = fieldCheck && (lhs.requests == rhs.requests)
      fieldCheck = fieldCheck && (lhs.platformRequests == rhs.platformRequests)
      fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
      fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
      fieldCheck = fieldCheck && (lhs.hasAccuracy == rhs.hasAccuracy) && (!lhs.hasAccuracy || lhs.accuracy == rhs.accuracy)
      fieldCheck = fieldCheck && (lhs.hasAuthInfo == rhs.hasAuthInfo) && (!lhs.hasAuthInfo || lhs.authInfo == rhs.authInfo)
      fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
      fieldCheck = fieldCheck && (lhs.hasMsSinceLastLocationfix == rhs.hasMsSinceLastLocationfix) && (!lhs.hasMsSinceLastLocationfix || lhs.msSinceLastLocationfix == rhs.msSinceLastLocationfix)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }



    //Nested type declaration start

      final public class AuthInfo : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
          fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }



        //Nested type declaration start

          final public class Jwt : GeneratedMessage {

            public static func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) -> Bool {
              if (lhs === rhs) {
                return true
              }
              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
              fieldCheck = fieldCheck && (lhs.hasContents == rhs.hasContents) && (!lhs.hasContents || lhs.contents == rhs.contents)
              fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
              fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
              return fieldCheck
            }

            public fileprivate(set) var contents:String = ""
            public fileprivate(set) var hasContents:Bool = false

            public fileprivate(set) var unknown2:Int32 = Int32(0)
            public fileprivate(set) var hasUnknown2:Bool = false

            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
              if hasContents {
                try codedOutputStream.writeString(fieldNumber: 1, value:contents)
              }
              if hasUnknown2 {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:unknown2)
              }
              try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasContents {
                serialize_size += contents.computeStringSize(fieldNumber: 1)
              }
              if hasUnknown2 {
                serialize_size += unknown2.computeInt32Size(fieldNumber: 2)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
              guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
              }

              var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
              if hasContents {
                jsonMap["contents"] = contents
              }
              if hasUnknown2 {
                jsonMap["unknown2"] = Int(unknown2)
              }
              return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
              var output = ""
              if hasContents {
                output += "\(indent) contents: \(contents) \n"
              }
              if hasUnknown2 {
                output += "\(indent) unknown2: \(unknown2) \n"
              }
              output += unknownFields.getDescription(indent: indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasContents {
                       hashCode = (hashCode &* 31) &+ contents.hashValue
                    }
                    if hasUnknown2 {
                       hashCode = (hashCode &* 31) &+ unknown2.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            override public func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              fileprivate var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
              public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasContents:Bool {
                   get {
                        return builderResult.hasContents
                   }
              }
              public var contents:String {
                   get {
                        return builderResult.contents
                   }
                   set (value) {
                       builderResult.hasContents = true
                       builderResult.contents = value
                   }
              }
              @discardableResult
              public func setContents(_ value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.contents = value
                return self
              }
              @discardableResult
              public func clearContents() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasContents = false
                   builderResult.contents = ""
                   return self
              }
              public var hasUnknown2:Bool {
                   get {
                        return builderResult.hasUnknown2
                   }
              }
              public var unknown2:Int32 {
                   get {
                        return builderResult.unknown2
                   }
                   set (value) {
                       builderResult.hasUnknown2 = true
                       builderResult.unknown2 = value
                   }
              }
              @discardableResult
              public func setUnknown2(_ value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.unknown2 = value
                return self
              }
              @discardableResult
              public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasUnknown2 = false
                   builderResult.unknown2 = Int32(0)
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              @discardableResult
              override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
                return self
              }
              override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(prototype:builderResult)
              }
              override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = builderResult
                return returnMe
              }
              @discardableResult
              public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt() {
                 return self
                }
                if other.hasContents {
                     contents = other.contents
                }
                if other.hasUnknown2 {
                     unknown2 = other.unknown2
                }
                _ = try merge(unknownField: other.unknownFields)
                return self
              }
              @discardableResult
              override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                   return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
              }
              @discardableResult
              override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                  let protobufTag = try codedInputStream.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 10:
                    contents = try codedInputStream.readString()

                  case 16:
                    unknown2 = try codedInputStream.readInt32()

                  default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
              class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if let jsonValueContents = jsonMap["contents"] as? String {
                  resultDecodedBuilder.contents = jsonValueContents
                }
                if let jsonValueUnknown2 = jsonMap["unknown2"] as? Int {
                  resultDecodedBuilder.unknown2 = Int32(jsonValueUnknown2)
                }
                return resultDecodedBuilder
              }
              override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonMap:jsDataCast)
              }
            }

          }

        //Nested type declaration end

        public fileprivate(set) var provider:String = ""
        public fileprivate(set) var hasProvider:Bool = false

        public fileprivate(set) var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!
        public fileprivate(set) var hasToken:Bool = false
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasProvider {
            try codedOutputStream.writeString(fieldNumber: 1, value:provider)
          }
          if hasToken {
            try codedOutputStream.writeMessage(fieldNumber: 2, value:token)
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasProvider {
            serialize_size += provider.computeStringSize(fieldNumber: 1)
          }
          if hasToken {
              if let varSizetoken = token?.computeMessageSize(fieldNumber: 2) {
                  serialize_size += varSizetoken
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasProvider {
            jsonMap["provider"] = provider
          }
          if hasToken {
            jsonMap["token"] = try token.encode()
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasProvider {
            output += "\(indent) provider: \(provider) \n"
          }
          if hasToken {
            output += "\(indent) token {\n"
            if let outDescToken = token {
              output += try outDescToken.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasProvider {
                   hashCode = (hashCode &* 31) &+ provider.hashValue
                }
                if hasToken {
                    if let hashValuetoken = token?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetoken
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasProvider:Bool {
               get {
                    return builderResult.hasProvider
               }
          }
          public var provider:String {
               get {
                    return builderResult.provider
               }
               set (value) {
                   builderResult.hasProvider = true
                   builderResult.provider = value
               }
          }
          @discardableResult
          public func setProvider(_ value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.provider = value
            return self
          }
          @discardableResult
          public func clearProvider() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder{
               builderResult.hasProvider = false
               builderResult.provider = ""
               return self
          }
          public var hasToken:Bool {
               get {
                   return builderResult.hasToken
               }
          }
          public var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt! {
               get {
                   if tokenBuilder_ != nil {
                      builderResult.token = tokenBuilder_.getMessage()
                   }
                   return builderResult.token
               }
               set (value) {
                   builderResult.hasToken = true
                   builderResult.token = value
               }
          }
          fileprivate var tokenBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder! {
               didSet {
                  builderResult.hasToken = true
               }
          }
          public func getTokenBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
            if tokenBuilder_ == nil {
               tokenBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
               builderResult.token = tokenBuilder_.getMessage()
               if token != nil {
                  try! tokenBuilder_.mergeFrom(other: token)
               }
            }
            return tokenBuilder_
          }
          @discardableResult
          public func setToken(_ value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.token = value
            return self
          }
          @discardableResult
          public func mergeToken(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if builderResult.hasToken {
              builderResult.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(prototype:builderResult.token).mergeFrom(other: value).buildPartial()
            } else {
              builderResult.token = value
            }
            builderResult.hasToken = true
            return self
          }
          @discardableResult
          public func clearToken() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            tokenBuilder_ = nil
            builderResult.hasToken = false
            builderResult.token = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo() {
             return self
            }
            if other.hasProvider {
                 provider = other.provider
            }
            if (other.hasToken) {
                try mergeToken(value: other.token)
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                provider = try codedInputStream.readString()

              case 18:
                let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if hasToken {
                  try subBuilder.mergeFrom(other: token)
                }
                try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                token = subBuilder.buildPartial()

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if let jsonValueProvider = jsonMap["provider"] as? String {
              resultDecodedBuilder.provider = jsonValueProvider
            }
            if let jsonValueToken = jsonMap["token"] as? Dictionary<String,Any> {
              resultDecodedBuilder.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonMap:jsonValueToken).build()

            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class PlatformRequest : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
          fieldCheck = fieldCheck && (lhs.hasRequestMessage == rhs.hasRequestMessage) && (!lhs.hasRequestMessage || lhs.requestMessage == rhs.requestMessage)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }

        public fileprivate(set) var type:Pogoprotos.Networking.Platform.PlatformRequestType = Pogoprotos.Networking.Platform.PlatformRequestType.methodUnset
        public fileprivate(set) var hasType:Bool = false
        public fileprivate(set) var requestMessage:Data = Data()
        public fileprivate(set) var hasRequestMessage:Bool = false

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasType {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:type.rawValue)
          }
          if hasRequestMessage {
            try codedOutputStream.writeData(fieldNumber: 2, value:requestMessage)
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if (hasType) {
            serialize_size += type.rawValue.computeEnumSize(fieldNumber: 1)
          }
          if hasRequestMessage {
            serialize_size += requestMessage.computeDataSize(fieldNumber: 2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasType {
            jsonMap["type"] = type.toString()
          }
          if hasRequestMessage {
            jsonMap["requestMessage"] = requestMessage.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if (hasType) {
            output += "\(indent) type: \(type.description)\n"
          }
          if hasRequestMessage {
            output += "\(indent) requestMessage: \(requestMessage) \n"
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasType {
                   hashCode = (hashCode &* 31) &+ Int(type.rawValue)
                }
                if hasRequestMessage {
                   hashCode = (hashCode &* 31) &+ requestMessage.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest = Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
              return builderResult
          }

          required override public init () {
             super.init()
          }
            public var hasType:Bool{
                get {
                    return builderResult.hasType
                }
            }
            public var type:Pogoprotos.Networking.Platform.PlatformRequestType {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasType = true
                    builderResult.type = value
                }
            }
          @discardableResult
            public func setType(_ value:Pogoprotos.Networking.Platform.PlatformRequestType) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
              self.type = value
              return self
            }
          @discardableResult
            public func clearType() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
               builderResult.hasType = false
               builderResult.type = .methodUnset
               return self
            }
          public var hasRequestMessage:Bool {
               get {
                    return builderResult.hasRequestMessage
               }
          }
          public var requestMessage:Data {
               get {
                    return builderResult.requestMessage
               }
               set (value) {
                   builderResult.hasRequestMessage = true
                   builderResult.requestMessage = value
               }
          }
          @discardableResult
          public func setRequestMessage(_ value:Data) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
            self.requestMessage = value
            return self
          }
          @discardableResult
          public func clearRequestMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder{
               builderResult.hasRequestMessage = false
               builderResult.requestMessage = Data()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
            let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
            if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest() {
             return self
            }
            if other.hasType {
                 type = other.type
            }
            if other.hasRequestMessage {
                 requestMessage = other.requestMessage
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                let valueInttype = try codedInputStream.readEnum()
                if let enumstype = Pogoprotos.Networking.Platform.PlatformRequestType(rawValue:valueInttype){
                     type = enumstype
                } else {
                     _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueInttype))
                }

              case 18:
                requestMessage = try codedInputStream.readData()

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder()
            if let jsonValueType = jsonMap["type"] as? String {
              resultDecodedBuilder.type = try Pogoprotos.Networking.Platform.PlatformRequestType.fromString(str: jsonValueType)
            }
            if let jsonValueRequestMessage = jsonMap["requestMessage"] as? String {
              resultDecodedBuilder.requestMessage = Data(base64Encoded:jsonValueRequestMessage, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public fileprivate(set) var statusCode:Int32 = Int32(0)
    public fileprivate(set) var hasStatusCode:Bool = false

    public fileprivate(set) var requestId:UInt64 = UInt64(0)
    public fileprivate(set) var hasRequestId:Bool = false

    public fileprivate(set) var requests:Array<Pogoprotos.Networking.Requests.Request>  = Array<Pogoprotos.Networking.Requests.Request>()
    public fileprivate(set) var platformRequests:Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest>  = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest>()
    public fileprivate(set) var latitude:Double = Double(0)
    public fileprivate(set) var hasLatitude:Bool = false

    public fileprivate(set) var longitude:Double = Double(0)
    public fileprivate(set) var hasLongitude:Bool = false

    public fileprivate(set) var accuracy:Double = Double(0)
    public fileprivate(set) var hasAccuracy:Bool = false

    public fileprivate(set) var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!
    public fileprivate(set) var hasAuthInfo:Bool = false
    public fileprivate(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public fileprivate(set) var hasAuthTicket:Bool = false
    public fileprivate(set) var msSinceLastLocationfix:Int64 = Int64(0)
    public fileprivate(set) var hasMsSinceLastLocationfix:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasStatusCode {
        try codedOutputStream.writeInt32(fieldNumber: 1, value:statusCode)
      }
      if hasRequestId {
        try codedOutputStream.writeUInt64(fieldNumber: 3, value:requestId)
      }
      for oneElementRequests in requests {
          try codedOutputStream.writeMessage(fieldNumber: 4, value:oneElementRequests)
      }
      for oneElementPlatformRequests in platformRequests {
          try codedOutputStream.writeMessage(fieldNumber: 6, value:oneElementPlatformRequests)
      }
      if hasLatitude {
        try codedOutputStream.writeDouble(fieldNumber: 7, value:latitude)
      }
      if hasLongitude {
        try codedOutputStream.writeDouble(fieldNumber: 8, value:longitude)
      }
      if hasAccuracy {
        try codedOutputStream.writeDouble(fieldNumber: 9, value:accuracy)
      }
      if hasAuthInfo {
        try codedOutputStream.writeMessage(fieldNumber: 10, value:authInfo)
      }
      if hasAuthTicket {
        try codedOutputStream.writeMessage(fieldNumber: 11, value:authTicket)
      }
      if hasMsSinceLastLocationfix {
        try codedOutputStream.writeInt64(fieldNumber: 12, value:msSinceLastLocationfix)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStatusCode {
        serialize_size += statusCode.computeInt32Size(fieldNumber: 1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(fieldNumber: 3)
      }
      for oneElementRequests in requests {
          serialize_size += oneElementRequests.computeMessageSize(fieldNumber: 4)
      }
      for oneElementPlatformRequests in platformRequests {
          serialize_size += oneElementPlatformRequests.computeMessageSize(fieldNumber: 6)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(fieldNumber: 7)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(fieldNumber: 8)
      }
      if hasAccuracy {
        serialize_size += accuracy.computeDoubleSize(fieldNumber: 9)
      }
      if hasAuthInfo {
          if let varSizeauthInfo = authInfo?.computeMessageSize(fieldNumber: 10) {
              serialize_size += varSizeauthInfo
          }
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(fieldNumber: 11) {
              serialize_size += varSizeauthTicket
          }
      }
      if hasMsSinceLastLocationfix {
        serialize_size += msSinceLastLocationfix.computeInt64Size(fieldNumber: 12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasStatusCode {
        jsonMap["statusCode"] = Int(statusCode)
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if !requests.isEmpty {
        var jsonArrayRequests:Array<Dictionary<String,Any>> = []
          for oneValueRequests in requests {
            let ecodedMessageRequests = try oneValueRequests.encode()
            jsonArrayRequests.append(ecodedMessageRequests)
          }
        jsonMap["requests"] = jsonArrayRequests
      }
      if !platformRequests.isEmpty {
        var jsonArrayPlatformRequests:Array<Dictionary<String,Any>> = []
          for oneValuePlatformRequests in platformRequests {
            let ecodedMessagePlatformRequests = try oneValuePlatformRequests.encode()
            jsonArrayPlatformRequests.append(ecodedMessagePlatformRequests)
          }
        jsonMap["platformRequests"] = jsonArrayPlatformRequests
      }
      if hasLatitude {
        jsonMap["latitude"] = Double(latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = Double(longitude)
      }
      if hasAccuracy {
        jsonMap["accuracy"] = Double(accuracy)
      }
      if hasAuthInfo {
        jsonMap["authInfo"] = try authInfo.encode()
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if hasMsSinceLastLocationfix {
        jsonMap["msSinceLastLocationfix"] = "\(msSinceLastLocationfix)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStatusCode {
        output += "\(indent) statusCode: \(statusCode) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      var requestsElementIndex:Int = 0
      for oneElementRequests in requests {
          output += "\(indent) requests[\(requestsElementIndex)] {\n"
          output += try oneElementRequests.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          requestsElementIndex += 1
      }
      var platformRequestsElementIndex:Int = 0
      for oneElementPlatformRequests in platformRequests {
          output += "\(indent) platformRequests[\(platformRequestsElementIndex)] {\n"
          output += try oneElementPlatformRequests.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          platformRequestsElementIndex += 1
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasAccuracy {
        output += "\(indent) accuracy: \(accuracy) \n"
      }
      if hasAuthInfo {
        output += "\(indent) authInfo {\n"
        if let outDescAuthInfo = authInfo {
          output += try outDescAuthInfo.getDescription(indent: "\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription(indent: "\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasMsSinceLastLocationfix {
        output += "\(indent) msSinceLastLocationfix: \(msSinceLastLocationfix) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ statusCode.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            for oneElementRequests in requests {
                hashCode = (hashCode &* 31) &+ oneElementRequests.hashValue
            }
            for oneElementPlatformRequests in platformRequests {
                hashCode = (hashCode &* 31) &+ oneElementPlatformRequests.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasAccuracy {
               hashCode = (hashCode &* 31) &+ accuracy.hashValue
            }
            if hasAuthInfo {
                if let hashValueauthInfo = authInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthInfo
                }
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            if hasMsSinceLastLocationfix {
               hashCode = (hashCode &* 31) &+ msSinceLastLocationfix.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope = Pogoprotos.Networking.Envelopes.RequestEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStatusCode:Bool {
           get {
                return builderResult.hasStatusCode
           }
      }
      public var statusCode:Int32 {
           get {
                return builderResult.statusCode
           }
           set (value) {
               builderResult.hasStatusCode = true
               builderResult.statusCode = value
           }
      }
      @discardableResult
      public func setStatusCode(_ value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.statusCode = value
        return self
      }
      @discardableResult
      public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasStatusCode = false
           builderResult.statusCode = Int32(0)
           return self
      }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      @discardableResult
      public func setRequestId(_ value:UInt64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requestId = value
        return self
      }
      @discardableResult
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var requests:Array<Pogoprotos.Networking.Requests.Request> {
           get {
               return builderResult.requests
           }
           set (value) {
               builderResult.requests = value
           }
      }
      @discardableResult
      public func setRequests(_ value:Array<Pogoprotos.Networking.Requests.Request>) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requests = value
        return self
      }
      @discardableResult
      public func clearRequests() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult.requests.removeAll(keepingCapacity: false)
        return self
      }
      public var platformRequests:Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest> {
           get {
               return builderResult.platformRequests
           }
           set (value) {
               builderResult.platformRequests = value
           }
      }
      @discardableResult
      public func setPlatformRequests(_ value:Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest>) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.platformRequests = value
        return self
      }
      @discardableResult
      public func clearPlatformRequests() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult.platformRequests.removeAll(keepingCapacity: false)
        return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      @discardableResult
      public func setLatitude(_ value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.latitude = value
        return self
      }
      @discardableResult
      public func clearLatitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      @discardableResult
      public func setLongitude(_ value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.longitude = value
        return self
      }
      @discardableResult
      public func clearLongitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasAccuracy:Bool {
           get {
                return builderResult.hasAccuracy
           }
      }
      public var accuracy:Double {
           get {
                return builderResult.accuracy
           }
           set (value) {
               builderResult.hasAccuracy = true
               builderResult.accuracy = value
           }
      }
      @discardableResult
      public func setAccuracy(_ value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.accuracy = value
        return self
      }
      @discardableResult
      public func clearAccuracy() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasAccuracy = false
           builderResult.accuracy = Double(0)
           return self
      }
      public var hasAuthInfo:Bool {
           get {
               return builderResult.hasAuthInfo
           }
      }
      public var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo! {
           get {
               if authInfoBuilder_ != nil {
                  builderResult.authInfo = authInfoBuilder_.getMessage()
               }
               return builderResult.authInfo
           }
           set (value) {
               builderResult.hasAuthInfo = true
               builderResult.authInfo = value
           }
      }
      fileprivate var authInfoBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder! {
           didSet {
              builderResult.hasAuthInfo = true
           }
      }
      public func getAuthInfoBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
        if authInfoBuilder_ == nil {
           authInfoBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
           builderResult.authInfo = authInfoBuilder_.getMessage()
           if authInfo != nil {
              try! authInfoBuilder_.mergeFrom(other: authInfo)
           }
        }
        return authInfoBuilder_
      }
      @discardableResult
      public func setAuthInfo(_ value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authInfo = value
        return self
      }
      @discardableResult
      public func mergeAuthInfo(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthInfo {
          builderResult.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(prototype:builderResult.authInfo).mergeFrom(other: value).buildPartial()
        } else {
          builderResult.authInfo = value
        }
        builderResult.hasAuthInfo = true
        return self
      }
      @discardableResult
      public func clearAuthInfo() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authInfoBuilder_ = nil
        builderResult.hasAuthInfo = false
        builderResult.authInfo = nil
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      fileprivate var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(other: authTicket)
           }
        }
        return authTicketBuilder_
      }
      @discardableResult
      public func setAuthTicket(_ value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authTicket = value
        return self
      }
      @discardableResult
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(prototype:builderResult.authTicket).mergeFrom(other: value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      @discardableResult
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var hasMsSinceLastLocationfix:Bool {
           get {
                return builderResult.hasMsSinceLastLocationfix
           }
      }
      public var msSinceLastLocationfix:Int64 {
           get {
                return builderResult.msSinceLastLocationfix
           }
           set (value) {
               builderResult.hasMsSinceLastLocationfix = true
               builderResult.msSinceLastLocationfix = value
           }
      }
      @discardableResult
      public func setMsSinceLastLocationfix(_ value:Int64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.msSinceLastLocationfix = value
        return self
      }
      @discardableResult
      public func clearMsSinceLastLocationfix() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasMsSinceLastLocationfix = false
           builderResult.msSinceLastLocationfix = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.RequestEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if !other.requests.isEmpty  {
           builderResult.requests += other.requests
        }
        if !other.platformRequests.isEmpty  {
           builderResult.platformRequests += other.platformRequests
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasAccuracy {
             accuracy = other.accuracy
        }
        if (other.hasAuthInfo) {
            try mergeAuthInfo(value: other.authInfo)
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(value: other.authTicket)
        }
        if other.hasMsSinceLastLocationfix {
             msSinceLastLocationfix = other.msSinceLastLocationfix
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            statusCode = try codedInputStream.readInt32()

          case 24:
            requestId = try codedInputStream.readUInt64()

          case 34:
            let subBuilder = Pogoprotos.Networking.Requests.Request.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            requests.append(subBuilder.buildPartial())

          case 50:
            let subBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            platformRequests.append(subBuilder.buildPartial())

          case 57:
            latitude = try codedInputStream.readDouble()

          case 65:
            longitude = try codedInputStream.readDouble()

          case 73:
            accuracy = try codedInputStream.readDouble()

          case 82:
            let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if hasAuthInfo {
              try subBuilder.mergeFrom(other: authInfo)
            }
            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
            authInfo = subBuilder.buildPartial()

          case 90:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(other: authTicket)
            }
            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 96:
            msSinceLastLocationfix = try codedInputStream.readInt64()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? Int {
          resultDecodedBuilder.statusCode = Int32(jsonValueStatusCode)
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueRequests = jsonMap["requests"] as? Array<Dictionary<String,Any>> {
          var jsonArrayRequests:Array<Pogoprotos.Networking.Requests.Request> = []
          for oneValueRequests in jsonValueRequests {
            let messageFromStringRequests = try Pogoprotos.Networking.Requests.Request.Builder.decodeToBuilder(jsonMap:oneValueRequests).build()

            jsonArrayRequests.append(messageFromStringRequests)
          }
          resultDecodedBuilder.requests = jsonArrayRequests
        }
        if let jsonValuePlatformRequests = jsonMap["platformRequests"] as? Array<Dictionary<String,Any>> {
          var jsonArrayPlatformRequests:Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest> = []
          for oneValuePlatformRequests in jsonValuePlatformRequests {
            let messageFromStringPlatformRequests = try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder.decodeToBuilder(jsonMap:oneValuePlatformRequests).build()

            jsonArrayPlatformRequests.append(messageFromStringPlatformRequests)
          }
          resultDecodedBuilder.platformRequests = jsonArrayPlatformRequests
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? Double {
          resultDecodedBuilder.latitude = Double(jsonValueLatitude)
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? Double {
          resultDecodedBuilder.longitude = Double(jsonValueLongitude)
        }
        if let jsonValueAccuracy = jsonMap["accuracy"] as? Double {
          resultDecodedBuilder.accuracy = Double(jsonValueAccuracy)
        }
        if let jsonValueAuthInfo = jsonMap["authInfo"] as? Dictionary<String,Any> {
          resultDecodedBuilder.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonMap:jsonValueAuthInfo).build()

        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,Any> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonMap:jsonValueAuthTicket).build()

        }
        if let jsonValueMsSinceLastLocationfix = jsonMap["msSinceLastLocationfix"] as? String {
          resultDecodedBuilder.msSinceLastLocationfix = Int64(jsonValueMsSinceLastLocationfix)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class ResponseEnvelope : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope, rhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
      fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
      fieldCheck = fieldCheck && (lhs.hasApiUrl == rhs.hasApiUrl) && (!lhs.hasApiUrl || lhs.apiUrl == rhs.apiUrl)
      fieldCheck = fieldCheck && (lhs.platformReturns == rhs.platformReturns)
      fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
      fieldCheck = fieldCheck && (lhs.returns == rhs.returns)
      fieldCheck = fieldCheck && (lhs.hasError == rhs.hasError) && (!lhs.hasError || lhs.error == rhs.error)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }



    //Nested type declaration start

      final public class PlatformResponse : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse, rhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
          fieldCheck = fieldCheck && (lhs.hasResponse == rhs.hasResponse) && (!lhs.hasResponse || lhs.response == rhs.response)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }

        public fileprivate(set) var type:Pogoprotos.Networking.Platform.PlatformRequestType = Pogoprotos.Networking.Platform.PlatformRequestType.methodUnset
        public fileprivate(set) var hasType:Bool = false
        public fileprivate(set) var response:Data = Data()
        public fileprivate(set) var hasResponse:Bool = false

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasType {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:type.rawValue)
          }
          if hasResponse {
            try codedOutputStream.writeData(fieldNumber: 2, value:response)
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if (hasType) {
            serialize_size += type.rawValue.computeEnumSize(fieldNumber: 1)
          }
          if hasResponse {
            serialize_size += response.computeDataSize(fieldNumber: 2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasType {
            jsonMap["type"] = type.toString()
          }
          if hasResponse {
            jsonMap["response"] = response.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if (hasType) {
            output += "\(indent) type: \(type.description)\n"
          }
          if hasResponse {
            output += "\(indent) response: \(response) \n"
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasType {
                   hashCode = (hashCode &* 31) &+ Int(type.rawValue)
                }
                if hasResponse {
                   hashCode = (hashCode &* 31) &+ response.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse = Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
              return builderResult
          }

          required override public init () {
             super.init()
          }
            public var hasType:Bool{
                get {
                    return builderResult.hasType
                }
            }
            public var type:Pogoprotos.Networking.Platform.PlatformRequestType {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasType = true
                    builderResult.type = value
                }
            }
          @discardableResult
            public func setType(_ value:Pogoprotos.Networking.Platform.PlatformRequestType) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
              self.type = value
              return self
            }
          @discardableResult
            public func clearType() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
               builderResult.hasType = false
               builderResult.type = .methodUnset
               return self
            }
          public var hasResponse:Bool {
               get {
                    return builderResult.hasResponse
               }
          }
          public var response:Data {
               get {
                    return builderResult.response
               }
               set (value) {
                   builderResult.hasResponse = true
                   builderResult.response = value
               }
          }
          @discardableResult
          public func setResponse(_ value:Data) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
            self.response = value
            return self
          }
          @discardableResult
          public func clearResponse() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder{
               builderResult.hasResponse = false
               builderResult.response = Data()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
            return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
            let returnMe:Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
            if other == Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse() {
             return self
            }
            if other.hasType {
                 type = other.type
            }
            if other.hasResponse {
                 response = other.response
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                let valueInttype = try codedInputStream.readEnum()
                if let enumstype = Pogoprotos.Networking.Platform.PlatformRequestType(rawValue:valueInttype){
                     type = enumstype
                } else {
                     _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueInttype))
                }

              case 18:
                response = try codedInputStream.readData()

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder()
            if let jsonValueType = jsonMap["type"] as? String {
              resultDecodedBuilder.type = try Pogoprotos.Networking.Platform.PlatformRequestType.fromString(str: jsonValueType)
            }
            if let jsonValueResponse = jsonMap["response"] as? String {
              resultDecodedBuilder.response = Data(base64Encoded:jsonValueResponse, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end



      //Enum type declaration start 

      public enum StatusCode:Int32, CustomDebugStringConvertible, CustomStringConvertible {
        case unknown = 0

        // valid response with no api url
        case ok = 1

        // the response envelope has api_url set and this response is valid
        case okRpcUrlInResponse = 2

        // bad request
        case badRequest = 3

        // using unimplemented request or corrupt request
        case invalidRequest = 51

        // invalid platform request or corrupt platform request
        case invalidPlatformRequest = 52

        // a new rpc endpoint is available and you should redirect to there
        case redirect = 53

        // occurs when you send blank authinfo, or sending nonsense timings (ie LocationFix.timestampSnapshot == Signature.timestampSinceStart)
        case sessionInvalidated = 100

        // occurs when the login token is invalid
        case invalidAuthToken = 102
        public func toString() -> String {
          switch self {
          case .unknown: return "UNKNOWN"
          case .ok: return "OK"
          case .okRpcUrlInResponse: return "OK_RPC_URL_IN_RESPONSE"
          case .badRequest: return "BAD_REQUEST"
          case .invalidRequest: return "INVALID_REQUEST"
          case .invalidPlatformRequest: return "INVALID_PLATFORM_REQUEST"
          case .redirect: return "REDIRECT"
          case .sessionInvalidated: return "SESSION_INVALIDATED"
          case .invalidAuthToken: return "INVALID_AUTH_TOKEN"
          }
        }
        public static func fromString(str:String) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.StatusCode {
          switch str {
          case "UNKNOWN":  return .unknown
          case "OK":  return .ok
          case "OK_RPC_URL_IN_RESPONSE":  return .okRpcUrlInResponse
          case "BAD_REQUEST":  return .badRequest
          case "INVALID_REQUEST":  return .invalidRequest
          case "INVALID_PLATFORM_REQUEST":  return .invalidPlatformRequest
          case "REDIRECT":  return .redirect
          case "SESSION_INVALIDATED":  return .sessionInvalidated
          case "INVALID_AUTH_TOKEN":  return .invalidAuthToken
          default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
          }
        }
        public var debugDescription:String { return getDescription() }
        public var description:String { return getDescription() }
        private func getDescription() -> String { 
          switch self {
          case .unknown: return ".unknown"
          case .ok: return ".ok"
          case .okRpcUrlInResponse: return ".okRpcUrlInResponse"
          case .badRequest: return ".badRequest"
          case .invalidRequest: return ".invalidRequest"
          case .invalidPlatformRequest: return ".invalidPlatformRequest"
          case .redirect: return ".redirect"
          case .sessionInvalidated: return ".sessionInvalidated"
          case .invalidAuthToken: return ".invalidAuthToken"
          }
        }
      }

      //Enum type declaration end 

    public fileprivate(set) var statusCode:Pogoprotos.Networking.Envelopes.ResponseEnvelope.StatusCode = Pogoprotos.Networking.Envelopes.ResponseEnvelope.StatusCode.unknown
    public fileprivate(set) var hasStatusCode:Bool = false
    public fileprivate(set) var requestId:UInt64 = UInt64(0)
    public fileprivate(set) var hasRequestId:Bool = false

    public fileprivate(set) var apiUrl:String = ""
    public fileprivate(set) var hasApiUrl:Bool = false

    public fileprivate(set) var platformReturns:Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse>  = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse>()
    public fileprivate(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public fileprivate(set) var hasAuthTicket:Bool = false
    public fileprivate(set) var returns:Array<Data> = Array<Data>()
    public fileprivate(set) var error:String = ""
    public fileprivate(set) var hasError:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasStatusCode {
        try codedOutputStream.writeEnum(fieldNumber: 1, value:statusCode.rawValue)
      }
      if hasRequestId {
        try codedOutputStream.writeUInt64(fieldNumber: 2, value:requestId)
      }
      if hasApiUrl {
        try codedOutputStream.writeString(fieldNumber: 3, value:apiUrl)
      }
      for oneElementPlatformReturns in platformReturns {
          try codedOutputStream.writeMessage(fieldNumber: 6, value:oneElementPlatformReturns)
      }
      if hasAuthTicket {
        try codedOutputStream.writeMessage(fieldNumber: 7, value:authTicket)
      }
      if !returns.isEmpty {
        for oneValuereturns in returns {
          try codedOutputStream.writeData(fieldNumber: 100, value:oneValuereturns)
        }
      }
      if hasError {
        try codedOutputStream.writeString(fieldNumber: 101, value:error)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasStatusCode) {
        serialize_size += statusCode.rawValue.computeEnumSize(fieldNumber: 1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(fieldNumber: 2)
      }
      if hasApiUrl {
        serialize_size += apiUrl.computeStringSize(fieldNumber: 3)
      }
      for oneElementPlatformReturns in platformReturns {
          serialize_size += oneElementPlatformReturns.computeMessageSize(fieldNumber: 6)
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(fieldNumber: 7) {
              serialize_size += varSizeauthTicket
          }
      }
      var dataSizeReturns:Int32 = 0
      for oneValuereturns in returns {
          dataSizeReturns += oneValuereturns.computeDataSizeNoTag()
      }
      serialize_size += dataSizeReturns
      serialize_size += 2 * Int32(returns.count)
      if hasError {
        serialize_size += error.computeStringSize(fieldNumber: 101)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasStatusCode {
        jsonMap["statusCode"] = statusCode.toString()
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if hasApiUrl {
        jsonMap["apiUrl"] = apiUrl
      }
      if !platformReturns.isEmpty {
        var jsonArrayPlatformReturns:Array<Dictionary<String,Any>> = []
          for oneValuePlatformReturns in platformReturns {
            let ecodedMessagePlatformReturns = try oneValuePlatformReturns.encode()
            jsonArrayPlatformReturns.append(ecodedMessagePlatformReturns)
          }
        jsonMap["platformReturns"] = jsonArrayPlatformReturns
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if !returns.isEmpty {
        var jsonArrayReturns:Array<String> = []
          for oneValueReturns in returns {
            jsonArrayReturns.append(oneValueReturns.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0)))
          }
        jsonMap["returns"] = jsonArrayReturns
      }
      if hasError {
        jsonMap["error"] = error
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasStatusCode) {
        output += "\(indent) statusCode: \(statusCode.description)\n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      if hasApiUrl {
        output += "\(indent) apiUrl: \(apiUrl) \n"
      }
      var platformReturnsElementIndex:Int = 0
      for oneElementPlatformReturns in platformReturns {
          output += "\(indent) platformReturns[\(platformReturnsElementIndex)] {\n"
          output += try oneElementPlatformReturns.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          platformReturnsElementIndex += 1
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription(indent: "\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var returnsElementIndex:Int = 0
      for oneValueReturns in returns  {
          output += "\(indent) returns[\(returnsElementIndex)]: \(oneValueReturns)\n"
          returnsElementIndex += 1
      }
      if hasError {
        output += "\(indent) error: \(error) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ Int(statusCode.rawValue)
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            if hasApiUrl {
               hashCode = (hashCode &* 31) &+ apiUrl.hashValue
            }
            for oneElementPlatformReturns in platformReturns {
                hashCode = (hashCode &* 31) &+ oneElementPlatformReturns.hashValue
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            for oneValueReturns in returns {
                hashCode = (hashCode &* 31) &+ oneValueReturns.hashValue
            }
            if hasError {
               hashCode = (hashCode &* 31) &+ error.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Envelopes.ResponseEnvelope = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasStatusCode:Bool{
            get {
                return builderResult.hasStatusCode
            }
        }
        public var statusCode:Pogoprotos.Networking.Envelopes.ResponseEnvelope.StatusCode {
            get {
                return builderResult.statusCode
            }
            set (value) {
                builderResult.hasStatusCode = true
                builderResult.statusCode = value
            }
        }
      @discardableResult
        public func setStatusCode(_ value:Pogoprotos.Networking.Envelopes.ResponseEnvelope.StatusCode) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
          self.statusCode = value
          return self
        }
      @discardableResult
        public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
           builderResult.hasStatusCode = false
           builderResult.statusCode = .unknown
           return self
        }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      @discardableResult
      public func setRequestId(_ value:UInt64) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.requestId = value
        return self
      }
      @discardableResult
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var hasApiUrl:Bool {
           get {
                return builderResult.hasApiUrl
           }
      }
      public var apiUrl:String {
           get {
                return builderResult.apiUrl
           }
           set (value) {
               builderResult.hasApiUrl = true
               builderResult.apiUrl = value
           }
      }
      @discardableResult
      public func setApiUrl(_ value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.apiUrl = value
        return self
      }
      @discardableResult
      public func clearApiUrl() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasApiUrl = false
           builderResult.apiUrl = ""
           return self
      }
      public var platformReturns:Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse> {
           get {
               return builderResult.platformReturns
           }
           set (value) {
               builderResult.platformReturns = value
           }
      }
      @discardableResult
      public func setPlatformReturns(_ value:Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse>) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.platformReturns = value
        return self
      }
      @discardableResult
      public func clearPlatformReturns() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        builderResult.platformReturns.removeAll(keepingCapacity: false)
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      fileprivate var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(other: authTicket)
           }
        }
        return authTicketBuilder_
      }
      @discardableResult
      public func setAuthTicket(_ value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.authTicket = value
        return self
      }
      @discardableResult
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(prototype:builderResult.authTicket).mergeFrom(other: value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      @discardableResult
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var returns:Array<Data> {
           get {
               return builderResult.returns
           }
           set (array) {
               builderResult.returns = array
           }
      }
      @discardableResult
      public func setReturns(_ value:Array<Data>) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.returns = value
        return self
      }
      @discardableResult
      public func clearReturns() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
         builderResult.returns.removeAll(keepingCapacity: false)
         return self
      }
      public var hasError:Bool {
           get {
                return builderResult.hasError
           }
      }
      public var error:String {
           get {
                return builderResult.error
           }
           set (value) {
               builderResult.hasError = true
               builderResult.error = value
           }
      }
      @discardableResult
      public func setError(_ value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.error = value
        return self
      }
      @discardableResult
      public func clearError() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasError = false
           builderResult.error = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.ResponseEnvelope = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.ResponseEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if other.hasApiUrl {
             apiUrl = other.apiUrl
        }
        if !other.platformReturns.isEmpty  {
           builderResult.platformReturns += other.platformReturns
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(value: other.authTicket)
        }
        if !other.returns.isEmpty {
            builderResult.returns += other.returns
        }
        if other.hasError {
             error = other.error
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntstatusCode = try codedInputStream.readEnum()
            if let enumsstatusCode = Pogoprotos.Networking.Envelopes.ResponseEnvelope.StatusCode(rawValue:valueIntstatusCode){
                 statusCode = enumsstatusCode
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntstatusCode))
            }

          case 16:
            requestId = try codedInputStream.readUInt64()

          case 26:
            apiUrl = try codedInputStream.readString()

          case 50:
            let subBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            platformReturns.append(subBuilder.buildPartial())

          case 58:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(other: authTicket)
            }
            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 802:
            returns += [try codedInputStream.readData()]

          case 810:
            error = try codedInputStream.readString()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? String {
          resultDecodedBuilder.statusCode = try Pogoprotos.Networking.Envelopes.ResponseEnvelope.StatusCode.fromString(str: jsonValueStatusCode)
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueApiUrl = jsonMap["apiUrl"] as? String {
          resultDecodedBuilder.apiUrl = jsonValueApiUrl
        }
        if let jsonValuePlatformReturns = jsonMap["platformReturns"] as? Array<Dictionary<String,Any>> {
          var jsonArrayPlatformReturns:Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse> = []
          for oneValuePlatformReturns in jsonValuePlatformReturns {
            let messageFromStringPlatformReturns = try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder.decodeToBuilder(jsonMap:oneValuePlatformReturns).build()

            jsonArrayPlatformReturns.append(messageFromStringPlatformReturns)
          }
          resultDecodedBuilder.platformReturns = jsonArrayPlatformReturns
        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,Any> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonMap:jsonValueAuthTicket).build()

        }
        if let jsonValueReturns = jsonMap["returns"] as? Array<String> {
          var jsonArrayReturns:Array<Data> = []
          for oneValueReturns in jsonValueReturns {
            jsonArrayReturns.append(Data(base64Encoded:oneValueReturns, options: Data.Base64DecodingOptions(rawValue:0))!)
          }
          resultDecodedBuilder.returns = jsonArrayReturns
        }
        if let jsonValueError = jsonMap["error"] as? String {
          resultDecodedBuilder.error = jsonValueError
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class SignalAgglomUpdates : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates, rhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.field1 == rhs.field1)
      fieldCheck = fieldCheck && (lhs.hasTimestampMsSinceStart == rhs.hasTimestampMsSinceStart) && (!lhs.hasTimestampMsSinceStart || lhs.timestampMsSinceStart == rhs.timestampMsSinceStart)
      fieldCheck = fieldCheck && (lhs.hasField3 == rhs.hasField3) && (!lhs.hasField3 || lhs.field3 == rhs.field3)
      fieldCheck = fieldCheck && (lhs.locationUpdates == rhs.locationUpdates)
      fieldCheck = fieldCheck && (lhs.androidGpsInfo == rhs.androidGpsInfo)
      fieldCheck = fieldCheck && (lhs.field6 == rhs.field6)
      fieldCheck = fieldCheck && (lhs.sensorUpdates == rhs.sensorUpdates)
      fieldCheck = fieldCheck && (lhs.hasDeviceInfo == rhs.hasDeviceInfo) && (!lhs.hasDeviceInfo || lhs.deviceInfo == rhs.deviceInfo)
      fieldCheck = fieldCheck && (lhs.hasIosDeviceInfo == rhs.hasIosDeviceInfo) && (!lhs.hasIosDeviceInfo || lhs.iosDeviceInfo == rhs.iosDeviceInfo)
      fieldCheck = fieldCheck && (lhs.hasLocationHashByTokenSeed == rhs.hasLocationHashByTokenSeed) && (!lhs.hasLocationHashByTokenSeed || lhs.locationHashByTokenSeed == rhs.locationHashByTokenSeed)
      fieldCheck = fieldCheck && (lhs.hasField11 == rhs.hasField11) && (!lhs.hasField11 || lhs.field11 == rhs.field11)
      fieldCheck = fieldCheck && (lhs.hasField12 == rhs.hasField12) && (!lhs.hasField12 || lhs.field12 == rhs.field12)
      fieldCheck = fieldCheck && (lhs.hasField13 == rhs.hasField13) && (!lhs.hasField13 || lhs.field13 == rhs.field13)
      fieldCheck = fieldCheck && (lhs.hasField14 == rhs.hasField14) && (!lhs.hasField14 || lhs.field14 == rhs.field14)
      fieldCheck = fieldCheck && (lhs.hasField15 == rhs.hasField15) && (!lhs.hasField15 || lhs.field15 == rhs.field15)
      fieldCheck = fieldCheck && (lhs.hasField16 == rhs.hasField16) && (!lhs.hasField16 || lhs.field16 == rhs.field16)
      fieldCheck = fieldCheck && (lhs.hasField17 == rhs.hasField17) && (!lhs.hasField17 || lhs.field17 == rhs.field17)
      fieldCheck = fieldCheck && (lhs.hasField18 == rhs.hasField18) && (!lhs.hasField18 || lhs.field18 == rhs.field18)
      fieldCheck = fieldCheck && (lhs.hasField19 == rhs.hasField19) && (!lhs.hasField19 || lhs.field19 == rhs.field19)
      fieldCheck = fieldCheck && (lhs.hasLocationHash == rhs.hasLocationHash) && (!lhs.hasLocationHash || lhs.locationHash == rhs.locationHash)
      fieldCheck = fieldCheck && (lhs.hasField21 == rhs.hasField21) && (!lhs.hasField21 || lhs.field21 == rhs.field21)
      fieldCheck = fieldCheck && (lhs.hasField22 == rhs.hasField22) && (!lhs.hasField22 || lhs.field22 == rhs.field22)
      fieldCheck = fieldCheck && (lhs.hasEpochTimestampMs == rhs.hasEpochTimestampMs) && (!lhs.hasEpochTimestampMs || lhs.epochTimestampMs == rhs.epochTimestampMs)
      fieldCheck = fieldCheck && (lhs.requestHashes == rhs.requestHashes)
      fieldCheck = fieldCheck && (lhs.hasField25 == rhs.hasField25) && (!lhs.hasField25 || lhs.field25 == rhs.field25)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }



    //Nested type declaration start

      // 100% - Reference iOS lib "LocationUpdate" structure for bridge
      final public class LocationUpdate : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate, rhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
          fieldCheck = fieldCheck && (lhs.hasTimestampMs == rhs.hasTimestampMs) && (!lhs.hasTimestampMs || lhs.timestampMs == rhs.timestampMs)
          fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
          fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
          fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
          fieldCheck = fieldCheck && (lhs.hasDeviceSpeed == rhs.hasDeviceSpeed) && (!lhs.hasDeviceSpeed || lhs.deviceSpeed == rhs.deviceSpeed)
          fieldCheck = fieldCheck && (lhs.hasDeviceCourse == rhs.hasDeviceCourse) && (!lhs.hasDeviceCourse || lhs.deviceCourse == rhs.deviceCourse)
          fieldCheck = fieldCheck && (lhs.hasHorizontalAccuracy == rhs.hasHorizontalAccuracy) && (!lhs.hasHorizontalAccuracy || lhs.horizontalAccuracy == rhs.horizontalAccuracy)
          fieldCheck = fieldCheck && (lhs.hasVerticalAccuracy == rhs.hasVerticalAccuracy) && (!lhs.hasVerticalAccuracy || lhs.verticalAccuracy == rhs.verticalAccuracy)
          fieldCheck = fieldCheck && (lhs.hasProviderStatus == rhs.hasProviderStatus) && (!lhs.hasProviderStatus || lhs.providerStatus == rhs.providerStatus)
          fieldCheck = fieldCheck && (lhs.hasFloor == rhs.hasFloor) && (!lhs.hasFloor || lhs.floor == rhs.floor)
          fieldCheck = fieldCheck && (lhs.hasLocationType == rhs.hasLocationType) && (!lhs.hasLocationType || lhs.locationType == rhs.locationType)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }

        // "network", "gps", "fused" - only these 3 values (com.nianticlabs.location.NianticLocationManager.class)
        public fileprivate(set) var name:String = ""
        public fileprivate(set) var hasName:Bool = false

        public fileprivate(set) var timestampMs:Int64 = Int64(0)
        public fileprivate(set) var hasTimestampMs:Bool = false

        public fileprivate(set) var altitude:Float = Float(0)
        public fileprivate(set) var hasAltitude:Bool = false

        public fileprivate(set) var latitude:Float = Float(0)
        public fileprivate(set) var hasLatitude:Bool = false

        public fileprivate(set) var longitude:Float = Float(0)
        public fileprivate(set) var hasLongitude:Bool = false

        public fileprivate(set) var deviceSpeed:Float = Float(0)
        public fileprivate(set) var hasDeviceSpeed:Bool = false

        public fileprivate(set) var deviceCourse:Float = Float(0)
        public fileprivate(set) var hasDeviceCourse:Bool = false

        public fileprivate(set) var horizontalAccuracy:Float = Float(0)
        public fileprivate(set) var hasHorizontalAccuracy:Bool = false

        public fileprivate(set) var verticalAccuracy:Float = Float(0)
        public fileprivate(set) var hasVerticalAccuracy:Bool = false

        public fileprivate(set) var providerStatus:Int32 = Int32(0)
        public fileprivate(set) var hasProviderStatus:Bool = false

        public fileprivate(set) var floor:Int64 = Int64(0)
        public fileprivate(set) var hasFloor:Bool = false

        public fileprivate(set) var locationType:Int32 = Int32(0)
        public fileprivate(set) var hasLocationType:Bool = false

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasName {
            try codedOutputStream.writeString(fieldNumber: 1, value:name)
          }
          if hasTimestampMs {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:timestampMs)
          }
          if hasAltitude {
            try codedOutputStream.writeFloat(fieldNumber: 4, value:altitude)
          }
          if hasLatitude {
            try codedOutputStream.writeFloat(fieldNumber: 13, value:latitude)
          }
          if hasLongitude {
            try codedOutputStream.writeFloat(fieldNumber: 14, value:longitude)
          }
          if hasDeviceSpeed {
            try codedOutputStream.writeFloat(fieldNumber: 18, value:deviceSpeed)
          }
          if hasDeviceCourse {
            try codedOutputStream.writeFloat(fieldNumber: 20, value:deviceCourse)
          }
          if hasHorizontalAccuracy {
            try codedOutputStream.writeFloat(fieldNumber: 21, value:horizontalAccuracy)
          }
          if hasVerticalAccuracy {
            try codedOutputStream.writeFloat(fieldNumber: 22, value:verticalAccuracy)
          }
          if hasProviderStatus {
            try codedOutputStream.writeInt32(fieldNumber: 26, value:providerStatus)
          }
          if hasFloor {
            try codedOutputStream.writeInt64(fieldNumber: 27, value:floor)
          }
          if hasLocationType {
            try codedOutputStream.writeInt32(fieldNumber: 28, value:locationType)
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 1)
          }
          if hasTimestampMs {
            serialize_size += timestampMs.computeInt64Size(fieldNumber: 2)
          }
          if hasAltitude {
            serialize_size += altitude.computeFloatSize(fieldNumber: 4)
          }
          if hasLatitude {
            serialize_size += latitude.computeFloatSize(fieldNumber: 13)
          }
          if hasLongitude {
            serialize_size += longitude.computeFloatSize(fieldNumber: 14)
          }
          if hasDeviceSpeed {
            serialize_size += deviceSpeed.computeFloatSize(fieldNumber: 18)
          }
          if hasDeviceCourse {
            serialize_size += deviceCourse.computeFloatSize(fieldNumber: 20)
          }
          if hasHorizontalAccuracy {
            serialize_size += horizontalAccuracy.computeFloatSize(fieldNumber: 21)
          }
          if hasVerticalAccuracy {
            serialize_size += verticalAccuracy.computeFloatSize(fieldNumber: 22)
          }
          if hasProviderStatus {
            serialize_size += providerStatus.computeInt32Size(fieldNumber: 26)
          }
          if hasFloor {
            serialize_size += floor.computeInt64Size(fieldNumber: 27)
          }
          if hasLocationType {
            serialize_size += locationType.computeInt32Size(fieldNumber: 28)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasName {
            jsonMap["name"] = name
          }
          if hasTimestampMs {
            jsonMap["timestampMs"] = "\(timestampMs)"
          }
          if hasAltitude {
            jsonMap["altitude"] = Float(altitude)
          }
          if hasLatitude {
            jsonMap["latitude"] = Float(latitude)
          }
          if hasLongitude {
            jsonMap["longitude"] = Float(longitude)
          }
          if hasDeviceSpeed {
            jsonMap["deviceSpeed"] = Float(deviceSpeed)
          }
          if hasDeviceCourse {
            jsonMap["deviceCourse"] = Float(deviceCourse)
          }
          if hasHorizontalAccuracy {
            jsonMap["horizontalAccuracy"] = Float(horizontalAccuracy)
          }
          if hasVerticalAccuracy {
            jsonMap["verticalAccuracy"] = Float(verticalAccuracy)
          }
          if hasProviderStatus {
            jsonMap["providerStatus"] = Int(providerStatus)
          }
          if hasFloor {
            jsonMap["floor"] = "\(floor)"
          }
          if hasLocationType {
            jsonMap["locationType"] = Int(locationType)
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasName {
            output += "\(indent) name: \(name) \n"
          }
          if hasTimestampMs {
            output += "\(indent) timestampMs: \(timestampMs) \n"
          }
          if hasAltitude {
            output += "\(indent) altitude: \(altitude) \n"
          }
          if hasLatitude {
            output += "\(indent) latitude: \(latitude) \n"
          }
          if hasLongitude {
            output += "\(indent) longitude: \(longitude) \n"
          }
          if hasDeviceSpeed {
            output += "\(indent) deviceSpeed: \(deviceSpeed) \n"
          }
          if hasDeviceCourse {
            output += "\(indent) deviceCourse: \(deviceCourse) \n"
          }
          if hasHorizontalAccuracy {
            output += "\(indent) horizontalAccuracy: \(horizontalAccuracy) \n"
          }
          if hasVerticalAccuracy {
            output += "\(indent) verticalAccuracy: \(verticalAccuracy) \n"
          }
          if hasProviderStatus {
            output += "\(indent) providerStatus: \(providerStatus) \n"
          }
          if hasFloor {
            output += "\(indent) floor: \(floor) \n"
          }
          if hasLocationType {
            output += "\(indent) locationType: \(locationType) \n"
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasName {
                   hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasTimestampMs {
                   hashCode = (hashCode &* 31) &+ timestampMs.hashValue
                }
                if hasAltitude {
                   hashCode = (hashCode &* 31) &+ altitude.hashValue
                }
                if hasLatitude {
                   hashCode = (hashCode &* 31) &+ latitude.hashValue
                }
                if hasLongitude {
                   hashCode = (hashCode &* 31) &+ longitude.hashValue
                }
                if hasDeviceSpeed {
                   hashCode = (hashCode &* 31) &+ deviceSpeed.hashValue
                }
                if hasDeviceCourse {
                   hashCode = (hashCode &* 31) &+ deviceCourse.hashValue
                }
                if hasHorizontalAccuracy {
                   hashCode = (hashCode &* 31) &+ horizontalAccuracy.hashValue
                }
                if hasVerticalAccuracy {
                   hashCode = (hashCode &* 31) &+ verticalAccuracy.hashValue
                }
                if hasProviderStatus {
                   hashCode = (hashCode &* 31) &+ providerStatus.hashValue
                }
                if hasFloor {
                   hashCode = (hashCode &* 31) &+ floor.hashValue
                }
                if hasLocationType {
                   hashCode = (hashCode &* 31) &+ locationType.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          public var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          @discardableResult
          public func setName(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.name = value
            return self
          }
          @discardableResult
          public func clearName() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          public var hasTimestampMs:Bool {
               get {
                    return builderResult.hasTimestampMs
               }
          }
          public var timestampMs:Int64 {
               get {
                    return builderResult.timestampMs
               }
               set (value) {
                   builderResult.hasTimestampMs = true
                   builderResult.timestampMs = value
               }
          }
          @discardableResult
          public func setTimestampMs(_ value:Int64) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.timestampMs = value
            return self
          }
          @discardableResult
          public func clearTimestampMs() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasTimestampMs = false
               builderResult.timestampMs = Int64(0)
               return self
          }
          public var hasAltitude:Bool {
               get {
                    return builderResult.hasAltitude
               }
          }
          public var altitude:Float {
               get {
                    return builderResult.altitude
               }
               set (value) {
                   builderResult.hasAltitude = true
                   builderResult.altitude = value
               }
          }
          @discardableResult
          public func setAltitude(_ value:Float) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.altitude = value
            return self
          }
          @discardableResult
          public func clearAltitude() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasAltitude = false
               builderResult.altitude = Float(0)
               return self
          }
          public var hasLatitude:Bool {
               get {
                    return builderResult.hasLatitude
               }
          }
          public var latitude:Float {
               get {
                    return builderResult.latitude
               }
               set (value) {
                   builderResult.hasLatitude = true
                   builderResult.latitude = value
               }
          }
          @discardableResult
          public func setLatitude(_ value:Float) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.latitude = value
            return self
          }
          @discardableResult
          public func clearLatitude() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasLatitude = false
               builderResult.latitude = Float(0)
               return self
          }
          public var hasLongitude:Bool {
               get {
                    return builderResult.hasLongitude
               }
          }
          public var longitude:Float {
               get {
                    return builderResult.longitude
               }
               set (value) {
                   builderResult.hasLongitude = true
                   builderResult.longitude = value
               }
          }
          @discardableResult
          public func setLongitude(_ value:Float) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.longitude = value
            return self
          }
          @discardableResult
          public func clearLongitude() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasLongitude = false
               builderResult.longitude = Float(0)
               return self
          }
          public var hasDeviceSpeed:Bool {
               get {
                    return builderResult.hasDeviceSpeed
               }
          }
          public var deviceSpeed:Float {
               get {
                    return builderResult.deviceSpeed
               }
               set (value) {
                   builderResult.hasDeviceSpeed = true
                   builderResult.deviceSpeed = value
               }
          }
          @discardableResult
          public func setDeviceSpeed(_ value:Float) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.deviceSpeed = value
            return self
          }
          @discardableResult
          public func clearDeviceSpeed() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasDeviceSpeed = false
               builderResult.deviceSpeed = Float(0)
               return self
          }
          public var hasDeviceCourse:Bool {
               get {
                    return builderResult.hasDeviceCourse
               }
          }
          public var deviceCourse:Float {
               get {
                    return builderResult.deviceCourse
               }
               set (value) {
                   builderResult.hasDeviceCourse = true
                   builderResult.deviceCourse = value
               }
          }
          @discardableResult
          public func setDeviceCourse(_ value:Float) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.deviceCourse = value
            return self
          }
          @discardableResult
          public func clearDeviceCourse() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasDeviceCourse = false
               builderResult.deviceCourse = Float(0)
               return self
          }
          public var hasHorizontalAccuracy:Bool {
               get {
                    return builderResult.hasHorizontalAccuracy
               }
          }
          public var horizontalAccuracy:Float {
               get {
                    return builderResult.horizontalAccuracy
               }
               set (value) {
                   builderResult.hasHorizontalAccuracy = true
                   builderResult.horizontalAccuracy = value
               }
          }
          @discardableResult
          public func setHorizontalAccuracy(_ value:Float) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.horizontalAccuracy = value
            return self
          }
          @discardableResult
          public func clearHorizontalAccuracy() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasHorizontalAccuracy = false
               builderResult.horizontalAccuracy = Float(0)
               return self
          }
          public var hasVerticalAccuracy:Bool {
               get {
                    return builderResult.hasVerticalAccuracy
               }
          }
          public var verticalAccuracy:Float {
               get {
                    return builderResult.verticalAccuracy
               }
               set (value) {
                   builderResult.hasVerticalAccuracy = true
                   builderResult.verticalAccuracy = value
               }
          }
          @discardableResult
          public func setVerticalAccuracy(_ value:Float) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.verticalAccuracy = value
            return self
          }
          @discardableResult
          public func clearVerticalAccuracy() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasVerticalAccuracy = false
               builderResult.verticalAccuracy = Float(0)
               return self
          }
          public var hasProviderStatus:Bool {
               get {
                    return builderResult.hasProviderStatus
               }
          }
          public var providerStatus:Int32 {
               get {
                    return builderResult.providerStatus
               }
               set (value) {
                   builderResult.hasProviderStatus = true
                   builderResult.providerStatus = value
               }
          }
          @discardableResult
          public func setProviderStatus(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.providerStatus = value
            return self
          }
          @discardableResult
          public func clearProviderStatus() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasProviderStatus = false
               builderResult.providerStatus = Int32(0)
               return self
          }
          public var hasFloor:Bool {
               get {
                    return builderResult.hasFloor
               }
          }
          public var floor:Int64 {
               get {
                    return builderResult.floor
               }
               set (value) {
                   builderResult.hasFloor = true
                   builderResult.floor = value
               }
          }
          @discardableResult
          public func setFloor(_ value:Int64) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.floor = value
            return self
          }
          @discardableResult
          public func clearFloor() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasFloor = false
               builderResult.floor = Int64(0)
               return self
          }
          public var hasLocationType:Bool {
               get {
                    return builderResult.hasLocationType
               }
          }
          public var locationType:Int32 {
               get {
                    return builderResult.locationType
               }
               set (value) {
                   builderResult.hasLocationType = true
                   builderResult.locationType = value
               }
          }
          @discardableResult
          public func setLocationType(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            self.locationType = value
            return self
          }
          @discardableResult
          public func clearLocationType() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder{
               builderResult.hasLocationType = false
               builderResult.locationType = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
            let returnMe:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            if other == Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate() {
             return self
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasTimestampMs {
                 timestampMs = other.timestampMs
            }
            if other.hasAltitude {
                 altitude = other.altitude
            }
            if other.hasLatitude {
                 latitude = other.latitude
            }
            if other.hasLongitude {
                 longitude = other.longitude
            }
            if other.hasDeviceSpeed {
                 deviceSpeed = other.deviceSpeed
            }
            if other.hasDeviceCourse {
                 deviceCourse = other.deviceCourse
            }
            if other.hasHorizontalAccuracy {
                 horizontalAccuracy = other.horizontalAccuracy
            }
            if other.hasVerticalAccuracy {
                 verticalAccuracy = other.verticalAccuracy
            }
            if other.hasProviderStatus {
                 providerStatus = other.providerStatus
            }
            if other.hasFloor {
                 floor = other.floor
            }
            if other.hasLocationType {
                 locationType = other.locationType
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                name = try codedInputStream.readString()

              case 16:
                timestampMs = try codedInputStream.readInt64()

              case 37:
                altitude = try codedInputStream.readFloat()

              case 109:
                latitude = try codedInputStream.readFloat()

              case 117:
                longitude = try codedInputStream.readFloat()

              case 149:
                deviceSpeed = try codedInputStream.readFloat()

              case 165:
                deviceCourse = try codedInputStream.readFloat()

              case 173:
                horizontalAccuracy = try codedInputStream.readFloat()

              case 181:
                verticalAccuracy = try codedInputStream.readFloat()

              case 208:
                providerStatus = try codedInputStream.readInt32()

              case 216:
                floor = try codedInputStream.readInt64()

              case 224:
                locationType = try codedInputStream.readInt32()

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder()
            if let jsonValueName = jsonMap["name"] as? String {
              resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueTimestampMs = jsonMap["timestampMs"] as? String {
              resultDecodedBuilder.timestampMs = Int64(jsonValueTimestampMs)!
            }
            if let jsonValueAltitude = jsonMap["altitude"] as? Float {
              resultDecodedBuilder.altitude = Float(jsonValueAltitude)
            }
            if let jsonValueLatitude = jsonMap["latitude"] as? Float {
              resultDecodedBuilder.latitude = Float(jsonValueLatitude)
            }
            if let jsonValueLongitude = jsonMap["longitude"] as? Float {
              resultDecodedBuilder.longitude = Float(jsonValueLongitude)
            }
            if let jsonValueDeviceSpeed = jsonMap["deviceSpeed"] as? Float {
              resultDecodedBuilder.deviceSpeed = Float(jsonValueDeviceSpeed)
            }
            if let jsonValueDeviceCourse = jsonMap["deviceCourse"] as? Float {
              resultDecodedBuilder.deviceCourse = Float(jsonValueDeviceCourse)
            }
            if let jsonValueHorizontalAccuracy = jsonMap["horizontalAccuracy"] as? Float {
              resultDecodedBuilder.horizontalAccuracy = Float(jsonValueHorizontalAccuracy)
            }
            if let jsonValueVerticalAccuracy = jsonMap["verticalAccuracy"] as? Float {
              resultDecodedBuilder.verticalAccuracy = Float(jsonValueVerticalAccuracy)
            }
            if let jsonValueProviderStatus = jsonMap["providerStatus"] as? Int {
              resultDecodedBuilder.providerStatus = Int32(jsonValueProviderStatus)
            }
            if let jsonValueFloor = jsonMap["floor"] as? String {
              resultDecodedBuilder.floor = Int64(jsonValueFloor)!
            }
            if let jsonValueLocationType = jsonMap["locationType"] as? Int {
              resultDecodedBuilder.locationType = Int32(jsonValueLocationType)
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      // iOS only
      final public class IosdeviceInfo : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo, rhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasBool1 == rhs.hasBool1) && (!lhs.hasBool1 || lhs.bool1 == rhs.bool1)
          fieldCheck = fieldCheck && (lhs.hasBool2 == rhs.hasBool2) && (!lhs.hasBool2 || lhs.bool2 == rhs.bool2)
          fieldCheck = fieldCheck && (lhs.hasBool3 == rhs.hasBool3) && (!lhs.hasBool3 || lhs.bool3 == rhs.bool3)
          fieldCheck = fieldCheck && (lhs.hasBool4 == rhs.hasBool4) && (!lhs.hasBool4 || lhs.bool4 == rhs.bool4)
          fieldCheck = fieldCheck && (lhs.hasBool5 == rhs.hasBool5) && (!lhs.hasBool5 || lhs.bool5 == rhs.bool5)
          fieldCheck = fieldCheck && (lhs.hasBool6 == rhs.hasBool6) && (!lhs.hasBool6 || lhs.bool6 == rhs.bool6)
          fieldCheck = fieldCheck && (lhs.hasBool7 == rhs.hasBool7) && (!lhs.hasBool7 || lhs.bool7 == rhs.bool7)
          fieldCheck = fieldCheck && (lhs.hasBool8 == rhs.hasBool8) && (!lhs.hasBool8 || lhs.bool8 == rhs.bool8)
          fieldCheck = fieldCheck && (lhs.hasBool9 == rhs.hasBool9) && (!lhs.hasBool9 || lhs.bool9 == rhs.bool9)
          fieldCheck = fieldCheck && (lhs.hasBool10 == rhs.hasBool10) && (!lhs.hasBool10 || lhs.bool10 == rhs.bool10)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }

        public fileprivate(set) var bool1:Bool = false
        public fileprivate(set) var hasBool1:Bool = false

        public fileprivate(set) var bool2:Bool = false
        public fileprivate(set) var hasBool2:Bool = false

        // 1
        public fileprivate(set) var bool3:Bool = false
        public fileprivate(set) var hasBool3:Bool = false

        public fileprivate(set) var bool4:Bool = false
        public fileprivate(set) var hasBool4:Bool = false

        // 1
        public fileprivate(set) var bool5:Bool = false
        public fileprivate(set) var hasBool5:Bool = false

        // 1
        public fileprivate(set) var bool6:Bool = false
        public fileprivate(set) var hasBool6:Bool = false

        public fileprivate(set) var bool7:Bool = false
        public fileprivate(set) var hasBool7:Bool = false

        public fileprivate(set) var bool8:Bool = false
        public fileprivate(set) var hasBool8:Bool = false

        public fileprivate(set) var bool9:Bool = false
        public fileprivate(set) var hasBool9:Bool = false

        public fileprivate(set) var bool10:Bool = false
        public fileprivate(set) var hasBool10:Bool = false

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasBool1 {
            try codedOutputStream.writeBool(fieldNumber: 1, value:bool1)
          }
          if hasBool2 {
            try codedOutputStream.writeBool(fieldNumber: 2, value:bool2)
          }
          if hasBool3 {
            try codedOutputStream.writeBool(fieldNumber: 3, value:bool3)
          }
          if hasBool4 {
            try codedOutputStream.writeBool(fieldNumber: 4, value:bool4)
          }
          if hasBool5 {
            try codedOutputStream.writeBool(fieldNumber: 5, value:bool5)
          }
          if hasBool6 {
            try codedOutputStream.writeBool(fieldNumber: 6, value:bool6)
          }
          if hasBool7 {
            try codedOutputStream.writeBool(fieldNumber: 7, value:bool7)
          }
          if hasBool8 {
            try codedOutputStream.writeBool(fieldNumber: 8, value:bool8)
          }
          if hasBool9 {
            try codedOutputStream.writeBool(fieldNumber: 9, value:bool9)
          }
          if hasBool10 {
            try codedOutputStream.writeBool(fieldNumber: 10, value:bool10)
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasBool1 {
            serialize_size += bool1.computeBoolSize(fieldNumber: 1)
          }
          if hasBool2 {
            serialize_size += bool2.computeBoolSize(fieldNumber: 2)
          }
          if hasBool3 {
            serialize_size += bool3.computeBoolSize(fieldNumber: 3)
          }
          if hasBool4 {
            serialize_size += bool4.computeBoolSize(fieldNumber: 4)
          }
          if hasBool5 {
            serialize_size += bool5.computeBoolSize(fieldNumber: 5)
          }
          if hasBool6 {
            serialize_size += bool6.computeBoolSize(fieldNumber: 6)
          }
          if hasBool7 {
            serialize_size += bool7.computeBoolSize(fieldNumber: 7)
          }
          if hasBool8 {
            serialize_size += bool8.computeBoolSize(fieldNumber: 8)
          }
          if hasBool9 {
            serialize_size += bool9.computeBoolSize(fieldNumber: 9)
          }
          if hasBool10 {
            serialize_size += bool10.computeBoolSize(fieldNumber: 10)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasBool1 {
            jsonMap["bool1"] = bool1
          }
          if hasBool2 {
            jsonMap["bool2"] = bool2
          }
          if hasBool3 {
            jsonMap["bool3"] = bool3
          }
          if hasBool4 {
            jsonMap["bool4"] = bool4
          }
          if hasBool5 {
            jsonMap["bool5"] = bool5
          }
          if hasBool6 {
            jsonMap["bool6"] = bool6
          }
          if hasBool7 {
            jsonMap["bool7"] = bool7
          }
          if hasBool8 {
            jsonMap["bool8"] = bool8
          }
          if hasBool9 {
            jsonMap["bool9"] = bool9
          }
          if hasBool10 {
            jsonMap["bool10"] = bool10
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasBool1 {
            output += "\(indent) bool1: \(bool1) \n"
          }
          if hasBool2 {
            output += "\(indent) bool2: \(bool2) \n"
          }
          if hasBool3 {
            output += "\(indent) bool3: \(bool3) \n"
          }
          if hasBool4 {
            output += "\(indent) bool4: \(bool4) \n"
          }
          if hasBool5 {
            output += "\(indent) bool5: \(bool5) \n"
          }
          if hasBool6 {
            output += "\(indent) bool6: \(bool6) \n"
          }
          if hasBool7 {
            output += "\(indent) bool7: \(bool7) \n"
          }
          if hasBool8 {
            output += "\(indent) bool8: \(bool8) \n"
          }
          if hasBool9 {
            output += "\(indent) bool9: \(bool9) \n"
          }
          if hasBool10 {
            output += "\(indent) bool10: \(bool10) \n"
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasBool1 {
                   hashCode = (hashCode &* 31) &+ bool1.hashValue
                }
                if hasBool2 {
                   hashCode = (hashCode &* 31) &+ bool2.hashValue
                }
                if hasBool3 {
                   hashCode = (hashCode &* 31) &+ bool3.hashValue
                }
                if hasBool4 {
                   hashCode = (hashCode &* 31) &+ bool4.hashValue
                }
                if hasBool5 {
                   hashCode = (hashCode &* 31) &+ bool5.hashValue
                }
                if hasBool6 {
                   hashCode = (hashCode &* 31) &+ bool6.hashValue
                }
                if hasBool7 {
                   hashCode = (hashCode &* 31) &+ bool7.hashValue
                }
                if hasBool8 {
                   hashCode = (hashCode &* 31) &+ bool8.hashValue
                }
                if hasBool9 {
                   hashCode = (hashCode &* 31) &+ bool9.hashValue
                }
                if hasBool10 {
                   hashCode = (hashCode &* 31) &+ bool10.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasBool1:Bool {
               get {
                    return builderResult.hasBool1
               }
          }
          public var bool1:Bool {
               get {
                    return builderResult.bool1
               }
               set (value) {
                   builderResult.hasBool1 = true
                   builderResult.bool1 = value
               }
          }
          @discardableResult
          public func setBool1(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool1 = value
            return self
          }
          @discardableResult
          public func clearBool1() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool1 = false
               builderResult.bool1 = false
               return self
          }
          public var hasBool2:Bool {
               get {
                    return builderResult.hasBool2
               }
          }
          public var bool2:Bool {
               get {
                    return builderResult.bool2
               }
               set (value) {
                   builderResult.hasBool2 = true
                   builderResult.bool2 = value
               }
          }
          @discardableResult
          public func setBool2(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool2 = value
            return self
          }
          @discardableResult
          public func clearBool2() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool2 = false
               builderResult.bool2 = false
               return self
          }
          public var hasBool3:Bool {
               get {
                    return builderResult.hasBool3
               }
          }
          public var bool3:Bool {
               get {
                    return builderResult.bool3
               }
               set (value) {
                   builderResult.hasBool3 = true
                   builderResult.bool3 = value
               }
          }
          @discardableResult
          public func setBool3(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool3 = value
            return self
          }
          @discardableResult
          public func clearBool3() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool3 = false
               builderResult.bool3 = false
               return self
          }
          public var hasBool4:Bool {
               get {
                    return builderResult.hasBool4
               }
          }
          public var bool4:Bool {
               get {
                    return builderResult.bool4
               }
               set (value) {
                   builderResult.hasBool4 = true
                   builderResult.bool4 = value
               }
          }
          @discardableResult
          public func setBool4(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool4 = value
            return self
          }
          @discardableResult
          public func clearBool4() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool4 = false
               builderResult.bool4 = false
               return self
          }
          public var hasBool5:Bool {
               get {
                    return builderResult.hasBool5
               }
          }
          public var bool5:Bool {
               get {
                    return builderResult.bool5
               }
               set (value) {
                   builderResult.hasBool5 = true
                   builderResult.bool5 = value
               }
          }
          @discardableResult
          public func setBool5(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool5 = value
            return self
          }
          @discardableResult
          public func clearBool5() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool5 = false
               builderResult.bool5 = false
               return self
          }
          public var hasBool6:Bool {
               get {
                    return builderResult.hasBool6
               }
          }
          public var bool6:Bool {
               get {
                    return builderResult.bool6
               }
               set (value) {
                   builderResult.hasBool6 = true
                   builderResult.bool6 = value
               }
          }
          @discardableResult
          public func setBool6(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool6 = value
            return self
          }
          @discardableResult
          public func clearBool6() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool6 = false
               builderResult.bool6 = false
               return self
          }
          public var hasBool7:Bool {
               get {
                    return builderResult.hasBool7
               }
          }
          public var bool7:Bool {
               get {
                    return builderResult.bool7
               }
               set (value) {
                   builderResult.hasBool7 = true
                   builderResult.bool7 = value
               }
          }
          @discardableResult
          public func setBool7(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool7 = value
            return self
          }
          @discardableResult
          public func clearBool7() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool7 = false
               builderResult.bool7 = false
               return self
          }
          public var hasBool8:Bool {
               get {
                    return builderResult.hasBool8
               }
          }
          public var bool8:Bool {
               get {
                    return builderResult.bool8
               }
               set (value) {
                   builderResult.hasBool8 = true
                   builderResult.bool8 = value
               }
          }
          @discardableResult
          public func setBool8(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool8 = value
            return self
          }
          @discardableResult
          public func clearBool8() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool8 = false
               builderResult.bool8 = false
               return self
          }
          public var hasBool9:Bool {
               get {
                    return builderResult.hasBool9
               }
          }
          public var bool9:Bool {
               get {
                    return builderResult.bool9
               }
               set (value) {
                   builderResult.hasBool9 = true
                   builderResult.bool9 = value
               }
          }
          @discardableResult
          public func setBool9(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool9 = value
            return self
          }
          @discardableResult
          public func clearBool9() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool9 = false
               builderResult.bool9 = false
               return self
          }
          public var hasBool10:Bool {
               get {
                    return builderResult.hasBool10
               }
          }
          public var bool10:Bool {
               get {
                    return builderResult.bool10
               }
               set (value) {
                   builderResult.hasBool10 = true
                   builderResult.bool10 = value
               }
          }
          @discardableResult
          public func setBool10(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            self.bool10 = value
            return self
          }
          @discardableResult
          public func clearBool10() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder{
               builderResult.hasBool10 = false
               builderResult.bool10 = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo() {
             return self
            }
            if other.hasBool1 {
                 bool1 = other.bool1
            }
            if other.hasBool2 {
                 bool2 = other.bool2
            }
            if other.hasBool3 {
                 bool3 = other.bool3
            }
            if other.hasBool4 {
                 bool4 = other.bool4
            }
            if other.hasBool5 {
                 bool5 = other.bool5
            }
            if other.hasBool6 {
                 bool6 = other.bool6
            }
            if other.hasBool7 {
                 bool7 = other.bool7
            }
            if other.hasBool8 {
                 bool8 = other.bool8
            }
            if other.hasBool9 {
                 bool9 = other.bool9
            }
            if other.hasBool10 {
                 bool10 = other.bool10
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                bool1 = try codedInputStream.readBool()

              case 16:
                bool2 = try codedInputStream.readBool()

              case 24:
                bool3 = try codedInputStream.readBool()

              case 32:
                bool4 = try codedInputStream.readBool()

              case 40:
                bool5 = try codedInputStream.readBool()

              case 48:
                bool6 = try codedInputStream.readBool()

              case 56:
                bool7 = try codedInputStream.readBool()

              case 64:
                bool8 = try codedInputStream.readBool()

              case 72:
                bool9 = try codedInputStream.readBool()

              case 80:
                bool10 = try codedInputStream.readBool()

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder()
            if let jsonValueBool1 = jsonMap["bool1"] as? Bool {
              resultDecodedBuilder.bool1 = jsonValueBool1
            }
            if let jsonValueBool2 = jsonMap["bool2"] as? Bool {
              resultDecodedBuilder.bool2 = jsonValueBool2
            }
            if let jsonValueBool3 = jsonMap["bool3"] as? Bool {
              resultDecodedBuilder.bool3 = jsonValueBool3
            }
            if let jsonValueBool4 = jsonMap["bool4"] as? Bool {
              resultDecodedBuilder.bool4 = jsonValueBool4
            }
            if let jsonValueBool5 = jsonMap["bool5"] as? Bool {
              resultDecodedBuilder.bool5 = jsonValueBool5
            }
            if let jsonValueBool6 = jsonMap["bool6"] as? Bool {
              resultDecodedBuilder.bool6 = jsonValueBool6
            }
            if let jsonValueBool7 = jsonMap["bool7"] as? Bool {
              resultDecodedBuilder.bool7 = jsonValueBool7
            }
            if let jsonValueBool8 = jsonMap["bool8"] as? Bool {
              resultDecodedBuilder.bool8 = jsonValueBool8
            }
            if let jsonValueBool9 = jsonMap["bool9"] as? Bool {
              resultDecodedBuilder.bool9 = jsonValueBool9
            }
            if let jsonValueBool10 = jsonMap["bool10"] as? Bool {
              resultDecodedBuilder.bool10 = jsonValueBool10
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      // 100% - Reference iOS lib "LocationUpdate" structure for bridge
      final public class SensorUpdate : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate, rhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
          fieldCheck = fieldCheck && (lhs.hasAccelerationX == rhs.hasAccelerationX) && (!lhs.hasAccelerationX || lhs.accelerationX == rhs.accelerationX)
          fieldCheck = fieldCheck && (lhs.hasAccelerationY == rhs.hasAccelerationY) && (!lhs.hasAccelerationY || lhs.accelerationY == rhs.accelerationY)
          fieldCheck = fieldCheck && (lhs.hasAccelerationZ == rhs.hasAccelerationZ) && (!lhs.hasAccelerationZ || lhs.accelerationZ == rhs.accelerationZ)
          fieldCheck = fieldCheck && (lhs.hasMagneticFieldX == rhs.hasMagneticFieldX) && (!lhs.hasMagneticFieldX || lhs.magneticFieldX == rhs.magneticFieldX)
          fieldCheck = fieldCheck && (lhs.hasMagneticFieldY == rhs.hasMagneticFieldY) && (!lhs.hasMagneticFieldY || lhs.magneticFieldY == rhs.magneticFieldY)
          fieldCheck = fieldCheck && (lhs.hasMagneticFieldZ == rhs.hasMagneticFieldZ) && (!lhs.hasMagneticFieldZ || lhs.magneticFieldZ == rhs.magneticFieldZ)
          fieldCheck = fieldCheck && (lhs.hasMagneticFieldAccuracy == rhs.hasMagneticFieldAccuracy) && (!lhs.hasMagneticFieldAccuracy || lhs.magneticFieldAccuracy == rhs.magneticFieldAccuracy)
          fieldCheck = fieldCheck && (lhs.hasAttitudePitch == rhs.hasAttitudePitch) && (!lhs.hasAttitudePitch || lhs.attitudePitch == rhs.attitudePitch)
          fieldCheck = fieldCheck && (lhs.hasAttitudeYaw == rhs.hasAttitudeYaw) && (!lhs.hasAttitudeYaw || lhs.attitudeYaw == rhs.attitudeYaw)
          fieldCheck = fieldCheck && (lhs.hasAttitudeRoll == rhs.hasAttitudeRoll) && (!lhs.hasAttitudeRoll || lhs.attitudeRoll == rhs.attitudeRoll)
          fieldCheck = fieldCheck && (lhs.hasRotationRateX == rhs.hasRotationRateX) && (!lhs.hasRotationRateX || lhs.rotationRateX == rhs.rotationRateX)
          fieldCheck = fieldCheck && (lhs.hasRotationRateY == rhs.hasRotationRateY) && (!lhs.hasRotationRateY || lhs.rotationRateY == rhs.rotationRateY)
          fieldCheck = fieldCheck && (lhs.hasRotationRateZ == rhs.hasRotationRateZ) && (!lhs.hasRotationRateZ || lhs.rotationRateZ == rhs.rotationRateZ)
          fieldCheck = fieldCheck && (lhs.hasGravityX == rhs.hasGravityX) && (!lhs.hasGravityX || lhs.gravityX == rhs.gravityX)
          fieldCheck = fieldCheck && (lhs.hasGravityY == rhs.hasGravityY) && (!lhs.hasGravityY || lhs.gravityY == rhs.gravityY)
          fieldCheck = fieldCheck && (lhs.hasGravityZ == rhs.hasGravityZ) && (!lhs.hasGravityZ || lhs.gravityZ == rhs.gravityZ)
          fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }

        public fileprivate(set) var timestamp:UInt64 = UInt64(0)
        public fileprivate(set) var hasTimestamp:Bool = false

        public fileprivate(set) var accelerationX:Double = Double(0)
        public fileprivate(set) var hasAccelerationX:Bool = false

        public fileprivate(set) var accelerationY:Double = Double(0)
        public fileprivate(set) var hasAccelerationY:Bool = false

        public fileprivate(set) var accelerationZ:Double = Double(0)
        public fileprivate(set) var hasAccelerationZ:Bool = false

        public fileprivate(set) var magneticFieldX:Double = Double(0)
        public fileprivate(set) var hasMagneticFieldX:Bool = false

        public fileprivate(set) var magneticFieldY:Double = Double(0)
        public fileprivate(set) var hasMagneticFieldY:Bool = false

        public fileprivate(set) var magneticFieldZ:Double = Double(0)
        public fileprivate(set) var hasMagneticFieldZ:Bool = false

        public fileprivate(set) var magneticFieldAccuracy:Int32 = Int32(0)
        public fileprivate(set) var hasMagneticFieldAccuracy:Bool = false

        public fileprivate(set) var attitudePitch:Double = Double(0)
        public fileprivate(set) var hasAttitudePitch:Bool = false

        public fileprivate(set) var attitudeYaw:Double = Double(0)
        public fileprivate(set) var hasAttitudeYaw:Bool = false

        public fileprivate(set) var attitudeRoll:Double = Double(0)
        public fileprivate(set) var hasAttitudeRoll:Bool = false

        public fileprivate(set) var rotationRateX:Double = Double(0)
        public fileprivate(set) var hasRotationRateX:Bool = false

        public fileprivate(set) var rotationRateY:Double = Double(0)
        public fileprivate(set) var hasRotationRateY:Bool = false

        public fileprivate(set) var rotationRateZ:Double = Double(0)
        public fileprivate(set) var hasRotationRateZ:Bool = false

        public fileprivate(set) var gravityX:Double = Double(0)
        public fileprivate(set) var hasGravityX:Bool = false

        public fileprivate(set) var gravityY:Double = Double(0)
        public fileprivate(set) var hasGravityY:Bool = false

        public fileprivate(set) var gravityZ:Double = Double(0)
        public fileprivate(set) var hasGravityZ:Bool = false

        public fileprivate(set) var status:Int32 = Int32(0)
        public fileprivate(set) var hasStatus:Bool = false

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasTimestamp {
            try codedOutputStream.writeUInt64(fieldNumber: 1, value:timestamp)
          }
          if hasAccelerationX {
            try codedOutputStream.writeDouble(fieldNumber: 3, value:accelerationX)
          }
          if hasAccelerationY {
            try codedOutputStream.writeDouble(fieldNumber: 4, value:accelerationY)
          }
          if hasAccelerationZ {
            try codedOutputStream.writeDouble(fieldNumber: 5, value:accelerationZ)
          }
          if hasMagneticFieldX {
            try codedOutputStream.writeDouble(fieldNumber: 6, value:magneticFieldX)
          }
          if hasMagneticFieldY {
            try codedOutputStream.writeDouble(fieldNumber: 7, value:magneticFieldY)
          }
          if hasMagneticFieldZ {
            try codedOutputStream.writeDouble(fieldNumber: 8, value:magneticFieldZ)
          }
          if hasMagneticFieldAccuracy {
            try codedOutputStream.writeInt32(fieldNumber: 9, value:magneticFieldAccuracy)
          }
          if hasAttitudePitch {
            try codedOutputStream.writeDouble(fieldNumber: 10, value:attitudePitch)
          }
          if hasAttitudeYaw {
            try codedOutputStream.writeDouble(fieldNumber: 11, value:attitudeYaw)
          }
          if hasAttitudeRoll {
            try codedOutputStream.writeDouble(fieldNumber: 12, value:attitudeRoll)
          }
          if hasRotationRateX {
            try codedOutputStream.writeDouble(fieldNumber: 13, value:rotationRateX)
          }
          if hasRotationRateY {
            try codedOutputStream.writeDouble(fieldNumber: 14, value:rotationRateY)
          }
          if hasRotationRateZ {
            try codedOutputStream.writeDouble(fieldNumber: 15, value:rotationRateZ)
          }
          if hasGravityX {
            try codedOutputStream.writeDouble(fieldNumber: 16, value:gravityX)
          }
          if hasGravityY {
            try codedOutputStream.writeDouble(fieldNumber: 17, value:gravityY)
          }
          if hasGravityZ {
            try codedOutputStream.writeDouble(fieldNumber: 18, value:gravityZ)
          }
          if hasStatus {
            try codedOutputStream.writeInt32(fieldNumber: 19, value:status)
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasTimestamp {
            serialize_size += timestamp.computeUInt64Size(fieldNumber: 1)
          }
          if hasAccelerationX {
            serialize_size += accelerationX.computeDoubleSize(fieldNumber: 3)
          }
          if hasAccelerationY {
            serialize_size += accelerationY.computeDoubleSize(fieldNumber: 4)
          }
          if hasAccelerationZ {
            serialize_size += accelerationZ.computeDoubleSize(fieldNumber: 5)
          }
          if hasMagneticFieldX {
            serialize_size += magneticFieldX.computeDoubleSize(fieldNumber: 6)
          }
          if hasMagneticFieldY {
            serialize_size += magneticFieldY.computeDoubleSize(fieldNumber: 7)
          }
          if hasMagneticFieldZ {
            serialize_size += magneticFieldZ.computeDoubleSize(fieldNumber: 8)
          }
          if hasMagneticFieldAccuracy {
            serialize_size += magneticFieldAccuracy.computeInt32Size(fieldNumber: 9)
          }
          if hasAttitudePitch {
            serialize_size += attitudePitch.computeDoubleSize(fieldNumber: 10)
          }
          if hasAttitudeYaw {
            serialize_size += attitudeYaw.computeDoubleSize(fieldNumber: 11)
          }
          if hasAttitudeRoll {
            serialize_size += attitudeRoll.computeDoubleSize(fieldNumber: 12)
          }
          if hasRotationRateX {
            serialize_size += rotationRateX.computeDoubleSize(fieldNumber: 13)
          }
          if hasRotationRateY {
            serialize_size += rotationRateY.computeDoubleSize(fieldNumber: 14)
          }
          if hasRotationRateZ {
            serialize_size += rotationRateZ.computeDoubleSize(fieldNumber: 15)
          }
          if hasGravityX {
            serialize_size += gravityX.computeDoubleSize(fieldNumber: 16)
          }
          if hasGravityY {
            serialize_size += gravityY.computeDoubleSize(fieldNumber: 17)
          }
          if hasGravityZ {
            serialize_size += gravityZ.computeDoubleSize(fieldNumber: 18)
          }
          if hasStatus {
            serialize_size += status.computeInt32Size(fieldNumber: 19)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasTimestamp {
            jsonMap["timestamp"] = "\(timestamp)"
          }
          if hasAccelerationX {
            jsonMap["accelerationX"] = Double(accelerationX)
          }
          if hasAccelerationY {
            jsonMap["accelerationY"] = Double(accelerationY)
          }
          if hasAccelerationZ {
            jsonMap["accelerationZ"] = Double(accelerationZ)
          }
          if hasMagneticFieldX {
            jsonMap["magneticFieldX"] = Double(magneticFieldX)
          }
          if hasMagneticFieldY {
            jsonMap["magneticFieldY"] = Double(magneticFieldY)
          }
          if hasMagneticFieldZ {
            jsonMap["magneticFieldZ"] = Double(magneticFieldZ)
          }
          if hasMagneticFieldAccuracy {
            jsonMap["magneticFieldAccuracy"] = Int(magneticFieldAccuracy)
          }
          if hasAttitudePitch {
            jsonMap["attitudePitch"] = Double(attitudePitch)
          }
          if hasAttitudeYaw {
            jsonMap["attitudeYaw"] = Double(attitudeYaw)
          }
          if hasAttitudeRoll {
            jsonMap["attitudeRoll"] = Double(attitudeRoll)
          }
          if hasRotationRateX {
            jsonMap["rotationRateX"] = Double(rotationRateX)
          }
          if hasRotationRateY {
            jsonMap["rotationRateY"] = Double(rotationRateY)
          }
          if hasRotationRateZ {
            jsonMap["rotationRateZ"] = Double(rotationRateZ)
          }
          if hasGravityX {
            jsonMap["gravityX"] = Double(gravityX)
          }
          if hasGravityY {
            jsonMap["gravityY"] = Double(gravityY)
          }
          if hasGravityZ {
            jsonMap["gravityZ"] = Double(gravityZ)
          }
          if hasStatus {
            jsonMap["status"] = Int(status)
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasTimestamp {
            output += "\(indent) timestamp: \(timestamp) \n"
          }
          if hasAccelerationX {
            output += "\(indent) accelerationX: \(accelerationX) \n"
          }
          if hasAccelerationY {
            output += "\(indent) accelerationY: \(accelerationY) \n"
          }
          if hasAccelerationZ {
            output += "\(indent) accelerationZ: \(accelerationZ) \n"
          }
          if hasMagneticFieldX {
            output += "\(indent) magneticFieldX: \(magneticFieldX) \n"
          }
          if hasMagneticFieldY {
            output += "\(indent) magneticFieldY: \(magneticFieldY) \n"
          }
          if hasMagneticFieldZ {
            output += "\(indent) magneticFieldZ: \(magneticFieldZ) \n"
          }
          if hasMagneticFieldAccuracy {
            output += "\(indent) magneticFieldAccuracy: \(magneticFieldAccuracy) \n"
          }
          if hasAttitudePitch {
            output += "\(indent) attitudePitch: \(attitudePitch) \n"
          }
          if hasAttitudeYaw {
            output += "\(indent) attitudeYaw: \(attitudeYaw) \n"
          }
          if hasAttitudeRoll {
            output += "\(indent) attitudeRoll: \(attitudeRoll) \n"
          }
          if hasRotationRateX {
            output += "\(indent) rotationRateX: \(rotationRateX) \n"
          }
          if hasRotationRateY {
            output += "\(indent) rotationRateY: \(rotationRateY) \n"
          }
          if hasRotationRateZ {
            output += "\(indent) rotationRateZ: \(rotationRateZ) \n"
          }
          if hasGravityX {
            output += "\(indent) gravityX: \(gravityX) \n"
          }
          if hasGravityY {
            output += "\(indent) gravityY: \(gravityY) \n"
          }
          if hasGravityZ {
            output += "\(indent) gravityZ: \(gravityZ) \n"
          }
          if hasStatus {
            output += "\(indent) status: \(status) \n"
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTimestamp {
                   hashCode = (hashCode &* 31) &+ timestamp.hashValue
                }
                if hasAccelerationX {
                   hashCode = (hashCode &* 31) &+ accelerationX.hashValue
                }
                if hasAccelerationY {
                   hashCode = (hashCode &* 31) &+ accelerationY.hashValue
                }
                if hasAccelerationZ {
                   hashCode = (hashCode &* 31) &+ accelerationZ.hashValue
                }
                if hasMagneticFieldX {
                   hashCode = (hashCode &* 31) &+ magneticFieldX.hashValue
                }
                if hasMagneticFieldY {
                   hashCode = (hashCode &* 31) &+ magneticFieldY.hashValue
                }
                if hasMagneticFieldZ {
                   hashCode = (hashCode &* 31) &+ magneticFieldZ.hashValue
                }
                if hasMagneticFieldAccuracy {
                   hashCode = (hashCode &* 31) &+ magneticFieldAccuracy.hashValue
                }
                if hasAttitudePitch {
                   hashCode = (hashCode &* 31) &+ attitudePitch.hashValue
                }
                if hasAttitudeYaw {
                   hashCode = (hashCode &* 31) &+ attitudeYaw.hashValue
                }
                if hasAttitudeRoll {
                   hashCode = (hashCode &* 31) &+ attitudeRoll.hashValue
                }
                if hasRotationRateX {
                   hashCode = (hashCode &* 31) &+ rotationRateX.hashValue
                }
                if hasRotationRateY {
                   hashCode = (hashCode &* 31) &+ rotationRateY.hashValue
                }
                if hasRotationRateZ {
                   hashCode = (hashCode &* 31) &+ rotationRateZ.hashValue
                }
                if hasGravityX {
                   hashCode = (hashCode &* 31) &+ gravityX.hashValue
                }
                if hasGravityY {
                   hashCode = (hashCode &* 31) &+ gravityY.hashValue
                }
                if hasGravityZ {
                   hashCode = (hashCode &* 31) &+ gravityZ.hashValue
                }
                if hasStatus {
                   hashCode = (hashCode &* 31) &+ status.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasTimestamp:Bool {
               get {
                    return builderResult.hasTimestamp
               }
          }
          public var timestamp:UInt64 {
               get {
                    return builderResult.timestamp
               }
               set (value) {
                   builderResult.hasTimestamp = true
                   builderResult.timestamp = value
               }
          }
          @discardableResult
          public func setTimestamp(_ value:UInt64) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.timestamp = value
            return self
          }
          @discardableResult
          public func clearTimestamp() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasTimestamp = false
               builderResult.timestamp = UInt64(0)
               return self
          }
          public var hasAccelerationX:Bool {
               get {
                    return builderResult.hasAccelerationX
               }
          }
          public var accelerationX:Double {
               get {
                    return builderResult.accelerationX
               }
               set (value) {
                   builderResult.hasAccelerationX = true
                   builderResult.accelerationX = value
               }
          }
          @discardableResult
          public func setAccelerationX(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.accelerationX = value
            return self
          }
          @discardableResult
          public func clearAccelerationX() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasAccelerationX = false
               builderResult.accelerationX = Double(0)
               return self
          }
          public var hasAccelerationY:Bool {
               get {
                    return builderResult.hasAccelerationY
               }
          }
          public var accelerationY:Double {
               get {
                    return builderResult.accelerationY
               }
               set (value) {
                   builderResult.hasAccelerationY = true
                   builderResult.accelerationY = value
               }
          }
          @discardableResult
          public func setAccelerationY(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.accelerationY = value
            return self
          }
          @discardableResult
          public func clearAccelerationY() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasAccelerationY = false
               builderResult.accelerationY = Double(0)
               return self
          }
          public var hasAccelerationZ:Bool {
               get {
                    return builderResult.hasAccelerationZ
               }
          }
          public var accelerationZ:Double {
               get {
                    return builderResult.accelerationZ
               }
               set (value) {
                   builderResult.hasAccelerationZ = true
                   builderResult.accelerationZ = value
               }
          }
          @discardableResult
          public func setAccelerationZ(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.accelerationZ = value
            return self
          }
          @discardableResult
          public func clearAccelerationZ() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasAccelerationZ = false
               builderResult.accelerationZ = Double(0)
               return self
          }
          public var hasMagneticFieldX:Bool {
               get {
                    return builderResult.hasMagneticFieldX
               }
          }
          public var magneticFieldX:Double {
               get {
                    return builderResult.magneticFieldX
               }
               set (value) {
                   builderResult.hasMagneticFieldX = true
                   builderResult.magneticFieldX = value
               }
          }
          @discardableResult
          public func setMagneticFieldX(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.magneticFieldX = value
            return self
          }
          @discardableResult
          public func clearMagneticFieldX() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasMagneticFieldX = false
               builderResult.magneticFieldX = Double(0)
               return self
          }
          public var hasMagneticFieldY:Bool {
               get {
                    return builderResult.hasMagneticFieldY
               }
          }
          public var magneticFieldY:Double {
               get {
                    return builderResult.magneticFieldY
               }
               set (value) {
                   builderResult.hasMagneticFieldY = true
                   builderResult.magneticFieldY = value
               }
          }
          @discardableResult
          public func setMagneticFieldY(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.magneticFieldY = value
            return self
          }
          @discardableResult
          public func clearMagneticFieldY() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasMagneticFieldY = false
               builderResult.magneticFieldY = Double(0)
               return self
          }
          public var hasMagneticFieldZ:Bool {
               get {
                    return builderResult.hasMagneticFieldZ
               }
          }
          public var magneticFieldZ:Double {
               get {
                    return builderResult.magneticFieldZ
               }
               set (value) {
                   builderResult.hasMagneticFieldZ = true
                   builderResult.magneticFieldZ = value
               }
          }
          @discardableResult
          public func setMagneticFieldZ(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.magneticFieldZ = value
            return self
          }
          @discardableResult
          public func clearMagneticFieldZ() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasMagneticFieldZ = false
               builderResult.magneticFieldZ = Double(0)
               return self
          }
          public var hasMagneticFieldAccuracy:Bool {
               get {
                    return builderResult.hasMagneticFieldAccuracy
               }
          }
          public var magneticFieldAccuracy:Int32 {
               get {
                    return builderResult.magneticFieldAccuracy
               }
               set (value) {
                   builderResult.hasMagneticFieldAccuracy = true
                   builderResult.magneticFieldAccuracy = value
               }
          }
          @discardableResult
          public func setMagneticFieldAccuracy(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.magneticFieldAccuracy = value
            return self
          }
          @discardableResult
          public func clearMagneticFieldAccuracy() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasMagneticFieldAccuracy = false
               builderResult.magneticFieldAccuracy = Int32(0)
               return self
          }
          public var hasAttitudePitch:Bool {
               get {
                    return builderResult.hasAttitudePitch
               }
          }
          public var attitudePitch:Double {
               get {
                    return builderResult.attitudePitch
               }
               set (value) {
                   builderResult.hasAttitudePitch = true
                   builderResult.attitudePitch = value
               }
          }
          @discardableResult
          public func setAttitudePitch(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.attitudePitch = value
            return self
          }
          @discardableResult
          public func clearAttitudePitch() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasAttitudePitch = false
               builderResult.attitudePitch = Double(0)
               return self
          }
          public var hasAttitudeYaw:Bool {
               get {
                    return builderResult.hasAttitudeYaw
               }
          }
          public var attitudeYaw:Double {
               get {
                    return builderResult.attitudeYaw
               }
               set (value) {
                   builderResult.hasAttitudeYaw = true
                   builderResult.attitudeYaw = value
               }
          }
          @discardableResult
          public func setAttitudeYaw(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.attitudeYaw = value
            return self
          }
          @discardableResult
          public func clearAttitudeYaw() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasAttitudeYaw = false
               builderResult.attitudeYaw = Double(0)
               return self
          }
          public var hasAttitudeRoll:Bool {
               get {
                    return builderResult.hasAttitudeRoll
               }
          }
          public var attitudeRoll:Double {
               get {
                    return builderResult.attitudeRoll
               }
               set (value) {
                   builderResult.hasAttitudeRoll = true
                   builderResult.attitudeRoll = value
               }
          }
          @discardableResult
          public func setAttitudeRoll(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.attitudeRoll = value
            return self
          }
          @discardableResult
          public func clearAttitudeRoll() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasAttitudeRoll = false
               builderResult.attitudeRoll = Double(0)
               return self
          }
          public var hasRotationRateX:Bool {
               get {
                    return builderResult.hasRotationRateX
               }
          }
          public var rotationRateX:Double {
               get {
                    return builderResult.rotationRateX
               }
               set (value) {
                   builderResult.hasRotationRateX = true
                   builderResult.rotationRateX = value
               }
          }
          @discardableResult
          public func setRotationRateX(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.rotationRateX = value
            return self
          }
          @discardableResult
          public func clearRotationRateX() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasRotationRateX = false
               builderResult.rotationRateX = Double(0)
               return self
          }
          public var hasRotationRateY:Bool {
               get {
                    return builderResult.hasRotationRateY
               }
          }
          public var rotationRateY:Double {
               get {
                    return builderResult.rotationRateY
               }
               set (value) {
                   builderResult.hasRotationRateY = true
                   builderResult.rotationRateY = value
               }
          }
          @discardableResult
          public func setRotationRateY(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.rotationRateY = value
            return self
          }
          @discardableResult
          public func clearRotationRateY() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasRotationRateY = false
               builderResult.rotationRateY = Double(0)
               return self
          }
          public var hasRotationRateZ:Bool {
               get {
                    return builderResult.hasRotationRateZ
               }
          }
          public var rotationRateZ:Double {
               get {
                    return builderResult.rotationRateZ
               }
               set (value) {
                   builderResult.hasRotationRateZ = true
                   builderResult.rotationRateZ = value
               }
          }
          @discardableResult
          public func setRotationRateZ(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.rotationRateZ = value
            return self
          }
          @discardableResult
          public func clearRotationRateZ() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasRotationRateZ = false
               builderResult.rotationRateZ = Double(0)
               return self
          }
          public var hasGravityX:Bool {
               get {
                    return builderResult.hasGravityX
               }
          }
          public var gravityX:Double {
               get {
                    return builderResult.gravityX
               }
               set (value) {
                   builderResult.hasGravityX = true
                   builderResult.gravityX = value
               }
          }
          @discardableResult
          public func setGravityX(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.gravityX = value
            return self
          }
          @discardableResult
          public func clearGravityX() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasGravityX = false
               builderResult.gravityX = Double(0)
               return self
          }
          public var hasGravityY:Bool {
               get {
                    return builderResult.hasGravityY
               }
          }
          public var gravityY:Double {
               get {
                    return builderResult.gravityY
               }
               set (value) {
                   builderResult.hasGravityY = true
                   builderResult.gravityY = value
               }
          }
          @discardableResult
          public func setGravityY(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.gravityY = value
            return self
          }
          @discardableResult
          public func clearGravityY() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasGravityY = false
               builderResult.gravityY = Double(0)
               return self
          }
          public var hasGravityZ:Bool {
               get {
                    return builderResult.hasGravityZ
               }
          }
          public var gravityZ:Double {
               get {
                    return builderResult.gravityZ
               }
               set (value) {
                   builderResult.hasGravityZ = true
                   builderResult.gravityZ = value
               }
          }
          @discardableResult
          public func setGravityZ(_ value:Double) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.gravityZ = value
            return self
          }
          @discardableResult
          public func clearGravityZ() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasGravityZ = false
               builderResult.gravityZ = Double(0)
               return self
          }
          public var hasStatus:Bool {
               get {
                    return builderResult.hasStatus
               }
          }
          public var status:Int32 {
               get {
                    return builderResult.status
               }
               set (value) {
                   builderResult.hasStatus = true
                   builderResult.status = value
               }
          }
          @discardableResult
          public func setStatus(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            self.status = value
            return self
          }
          @discardableResult
          public func clearStatus() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder{
               builderResult.hasStatus = false
               builderResult.status = Int32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
            let returnMe:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            if other == Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate() {
             return self
            }
            if other.hasTimestamp {
                 timestamp = other.timestamp
            }
            if other.hasAccelerationX {
                 accelerationX = other.accelerationX
            }
            if other.hasAccelerationY {
                 accelerationY = other.accelerationY
            }
            if other.hasAccelerationZ {
                 accelerationZ = other.accelerationZ
            }
            if other.hasMagneticFieldX {
                 magneticFieldX = other.magneticFieldX
            }
            if other.hasMagneticFieldY {
                 magneticFieldY = other.magneticFieldY
            }
            if other.hasMagneticFieldZ {
                 magneticFieldZ = other.magneticFieldZ
            }
            if other.hasMagneticFieldAccuracy {
                 magneticFieldAccuracy = other.magneticFieldAccuracy
            }
            if other.hasAttitudePitch {
                 attitudePitch = other.attitudePitch
            }
            if other.hasAttitudeYaw {
                 attitudeYaw = other.attitudeYaw
            }
            if other.hasAttitudeRoll {
                 attitudeRoll = other.attitudeRoll
            }
            if other.hasRotationRateX {
                 rotationRateX = other.rotationRateX
            }
            if other.hasRotationRateY {
                 rotationRateY = other.rotationRateY
            }
            if other.hasRotationRateZ {
                 rotationRateZ = other.rotationRateZ
            }
            if other.hasGravityX {
                 gravityX = other.gravityX
            }
            if other.hasGravityY {
                 gravityY = other.gravityY
            }
            if other.hasGravityZ {
                 gravityZ = other.gravityZ
            }
            if other.hasStatus {
                 status = other.status
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                timestamp = try codedInputStream.readUInt64()

              case 25:
                accelerationX = try codedInputStream.readDouble()

              case 33:
                accelerationY = try codedInputStream.readDouble()

              case 41:
                accelerationZ = try codedInputStream.readDouble()

              case 49:
                magneticFieldX = try codedInputStream.readDouble()

              case 57:
                magneticFieldY = try codedInputStream.readDouble()

              case 65:
                magneticFieldZ = try codedInputStream.readDouble()

              case 72:
                magneticFieldAccuracy = try codedInputStream.readInt32()

              case 81:
                attitudePitch = try codedInputStream.readDouble()

              case 89:
                attitudeYaw = try codedInputStream.readDouble()

              case 97:
                attitudeRoll = try codedInputStream.readDouble()

              case 105:
                rotationRateX = try codedInputStream.readDouble()

              case 113:
                rotationRateY = try codedInputStream.readDouble()

              case 121:
                rotationRateZ = try codedInputStream.readDouble()

              case 129:
                gravityX = try codedInputStream.readDouble()

              case 137:
                gravityY = try codedInputStream.readDouble()

              case 145:
                gravityZ = try codedInputStream.readDouble()

              case 152:
                status = try codedInputStream.readInt32()

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder()
            if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
              resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
            }
            if let jsonValueAccelerationX = jsonMap["accelerationX"] as? Double {
              resultDecodedBuilder.accelerationX = Double(jsonValueAccelerationX)
            }
            if let jsonValueAccelerationY = jsonMap["accelerationY"] as? Double {
              resultDecodedBuilder.accelerationY = Double(jsonValueAccelerationY)
            }
            if let jsonValueAccelerationZ = jsonMap["accelerationZ"] as? Double {
              resultDecodedBuilder.accelerationZ = Double(jsonValueAccelerationZ)
            }
            if let jsonValueMagneticFieldX = jsonMap["magneticFieldX"] as? Double {
              resultDecodedBuilder.magneticFieldX = Double(jsonValueMagneticFieldX)
            }
            if let jsonValueMagneticFieldY = jsonMap["magneticFieldY"] as? Double {
              resultDecodedBuilder.magneticFieldY = Double(jsonValueMagneticFieldY)
            }
            if let jsonValueMagneticFieldZ = jsonMap["magneticFieldZ"] as? Double {
              resultDecodedBuilder.magneticFieldZ = Double(jsonValueMagneticFieldZ)
            }
            if let jsonValueMagneticFieldAccuracy = jsonMap["magneticFieldAccuracy"] as? Int {
              resultDecodedBuilder.magneticFieldAccuracy = Int32(jsonValueMagneticFieldAccuracy)
            }
            if let jsonValueAttitudePitch = jsonMap["attitudePitch"] as? Double {
              resultDecodedBuilder.attitudePitch = Double(jsonValueAttitudePitch)
            }
            if let jsonValueAttitudeYaw = jsonMap["attitudeYaw"] as? Double {
              resultDecodedBuilder.attitudeYaw = Double(jsonValueAttitudeYaw)
            }
            if let jsonValueAttitudeRoll = jsonMap["attitudeRoll"] as? Double {
              resultDecodedBuilder.attitudeRoll = Double(jsonValueAttitudeRoll)
            }
            if let jsonValueRotationRateX = jsonMap["rotationRateX"] as? Double {
              resultDecodedBuilder.rotationRateX = Double(jsonValueRotationRateX)
            }
            if let jsonValueRotationRateY = jsonMap["rotationRateY"] as? Double {
              resultDecodedBuilder.rotationRateY = Double(jsonValueRotationRateY)
            }
            if let jsonValueRotationRateZ = jsonMap["rotationRateZ"] as? Double {
              resultDecodedBuilder.rotationRateZ = Double(jsonValueRotationRateZ)
            }
            if let jsonValueGravityX = jsonMap["gravityX"] as? Double {
              resultDecodedBuilder.gravityX = Double(jsonValueGravityX)
            }
            if let jsonValueGravityY = jsonMap["gravityY"] as? Double {
              resultDecodedBuilder.gravityY = Double(jsonValueGravityY)
            }
            if let jsonValueGravityZ = jsonMap["gravityZ"] as? Double {
              resultDecodedBuilder.gravityZ = Double(jsonValueGravityZ)
            }
            if let jsonValueStatus = jsonMap["status"] as? Int {
              resultDecodedBuilder.status = Int32(jsonValueStatus)
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class DeviceInfo : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo, rhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasDeviceId == rhs.hasDeviceId) && (!lhs.hasDeviceId || lhs.deviceId == rhs.deviceId)
          fieldCheck = fieldCheck && (lhs.hasAndroidBoardName == rhs.hasAndroidBoardName) && (!lhs.hasAndroidBoardName || lhs.androidBoardName == rhs.androidBoardName)
          fieldCheck = fieldCheck && (lhs.hasAndroidBootloader == rhs.hasAndroidBootloader) && (!lhs.hasAndroidBootloader || lhs.androidBootloader == rhs.androidBootloader)
          fieldCheck = fieldCheck && (lhs.hasDeviceBrand == rhs.hasDeviceBrand) && (!lhs.hasDeviceBrand || lhs.deviceBrand == rhs.deviceBrand)
          fieldCheck = fieldCheck && (lhs.hasDeviceModel == rhs.hasDeviceModel) && (!lhs.hasDeviceModel || lhs.deviceModel == rhs.deviceModel)
          fieldCheck = fieldCheck && (lhs.hasDeviceModelIdentifier == rhs.hasDeviceModelIdentifier) && (!lhs.hasDeviceModelIdentifier || lhs.deviceModelIdentifier == rhs.deviceModelIdentifier)
          fieldCheck = fieldCheck && (lhs.hasDeviceCommsModel == rhs.hasDeviceCommsModel) && (!lhs.hasDeviceCommsModel || lhs.deviceCommsModel == rhs.deviceCommsModel)
          fieldCheck = fieldCheck && (lhs.hasHardwareManufacturer == rhs.hasHardwareManufacturer) && (!lhs.hasHardwareManufacturer || lhs.hardwareManufacturer == rhs.hardwareManufacturer)
          fieldCheck = fieldCheck && (lhs.hasHardwareModel == rhs.hasHardwareModel) && (!lhs.hasHardwareModel || lhs.hardwareModel == rhs.hardwareModel)
          fieldCheck = fieldCheck && (lhs.hasFirmwareBrand == rhs.hasFirmwareBrand) && (!lhs.hasFirmwareBrand || lhs.firmwareBrand == rhs.firmwareBrand)
          fieldCheck = fieldCheck && (lhs.hasFirmwareTags == rhs.hasFirmwareTags) && (!lhs.hasFirmwareTags || lhs.firmwareTags == rhs.firmwareTags)
          fieldCheck = fieldCheck && (lhs.hasFirmwareType == rhs.hasFirmwareType) && (!lhs.hasFirmwareType || lhs.firmwareType == rhs.firmwareType)
          fieldCheck = fieldCheck && (lhs.hasFirmwareFingerprint == rhs.hasFirmwareFingerprint) && (!lhs.hasFirmwareFingerprint || lhs.firmwareFingerprint == rhs.firmwareFingerprint)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }

        public fileprivate(set) var deviceId:String = ""
        public fileprivate(set) var hasDeviceId:Bool = false

        public fileprivate(set) var androidBoardName:String = ""
        public fileprivate(set) var hasAndroidBoardName:Bool = false

        public fileprivate(set) var androidBootloader:String = ""
        public fileprivate(set) var hasAndroidBootloader:Bool = false

        // product.brand
        public fileprivate(set) var deviceBrand:String = ""
        public fileprivate(set) var hasDeviceBrand:Bool = false

        // product.device
        public fileprivate(set) var deviceModel:String = ""
        public fileprivate(set) var hasDeviceModel:Bool = false

        // Android only, build.display.id
        public fileprivate(set) var deviceModelIdentifier:String = ""
        public fileprivate(set) var hasDeviceModelIdentifier:Bool = false

        // boot.hardware
        public fileprivate(set) var deviceCommsModel:String = ""
        public fileprivate(set) var hasDeviceCommsModel:Bool = false

        // product.manufacturer
        public fileprivate(set) var hardwareManufacturer:String = ""
        public fileprivate(set) var hasHardwareManufacturer:Bool = false

        // product.model
        public fileprivate(set) var hardwareModel:String = ""
        public fileprivate(set) var hasHardwareModel:Bool = false

        // On iOS: "iPhone OS", product.name
        public fileprivate(set) var firmwareBrand:String = ""
        public fileprivate(set) var hasFirmwareBrand:Bool = false

        // Android only, build.tags
        public fileprivate(set) var firmwareTags:String = ""
        public fileprivate(set) var hasFirmwareTags:Bool = false

        // On iOS instead: iOS version; // build.type
        public fileprivate(set) var firmwareType:String = ""
        public fileprivate(set) var hasFirmwareType:Bool = false

        // Android only, build.fingerprint
        public fileprivate(set) var firmwareFingerprint:String = ""
        public fileprivate(set) var hasFirmwareFingerprint:Bool = false

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasDeviceId {
            try codedOutputStream.writeString(fieldNumber: 1, value:deviceId)
          }
          if hasAndroidBoardName {
            try codedOutputStream.writeString(fieldNumber: 2, value:androidBoardName)
          }
          if hasAndroidBootloader {
            try codedOutputStream.writeString(fieldNumber: 3, value:androidBootloader)
          }
          if hasDeviceBrand {
            try codedOutputStream.writeString(fieldNumber: 4, value:deviceBrand)
          }
          if hasDeviceModel {
            try codedOutputStream.writeString(fieldNumber: 5, value:deviceModel)
          }
          if hasDeviceModelIdentifier {
            try codedOutputStream.writeString(fieldNumber: 6, value:deviceModelIdentifier)
          }
          if hasDeviceCommsModel {
            try codedOutputStream.writeString(fieldNumber: 7, value:deviceCommsModel)
          }
          if hasHardwareManufacturer {
            try codedOutputStream.writeString(fieldNumber: 8, value:hardwareManufacturer)
          }
          if hasHardwareModel {
            try codedOutputStream.writeString(fieldNumber: 9, value:hardwareModel)
          }
          if hasFirmwareBrand {
            try codedOutputStream.writeString(fieldNumber: 10, value:firmwareBrand)
          }
          if hasFirmwareTags {
            try codedOutputStream.writeString(fieldNumber: 12, value:firmwareTags)
          }
          if hasFirmwareType {
            try codedOutputStream.writeString(fieldNumber: 13, value:firmwareType)
          }
          if hasFirmwareFingerprint {
            try codedOutputStream.writeString(fieldNumber: 14, value:firmwareFingerprint)
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasDeviceId {
            serialize_size += deviceId.computeStringSize(fieldNumber: 1)
          }
          if hasAndroidBoardName {
            serialize_size += androidBoardName.computeStringSize(fieldNumber: 2)
          }
          if hasAndroidBootloader {
            serialize_size += androidBootloader.computeStringSize(fieldNumber: 3)
          }
          if hasDeviceBrand {
            serialize_size += deviceBrand.computeStringSize(fieldNumber: 4)
          }
          if hasDeviceModel {
            serialize_size += deviceModel.computeStringSize(fieldNumber: 5)
          }
          if hasDeviceModelIdentifier {
            serialize_size += deviceModelIdentifier.computeStringSize(fieldNumber: 6)
          }
          if hasDeviceCommsModel {
            serialize_size += deviceCommsModel.computeStringSize(fieldNumber: 7)
          }
          if hasHardwareManufacturer {
            serialize_size += hardwareManufacturer.computeStringSize(fieldNumber: 8)
          }
          if hasHardwareModel {
            serialize_size += hardwareModel.computeStringSize(fieldNumber: 9)
          }
          if hasFirmwareBrand {
            serialize_size += firmwareBrand.computeStringSize(fieldNumber: 10)
          }
          if hasFirmwareTags {
            serialize_size += firmwareTags.computeStringSize(fieldNumber: 12)
          }
          if hasFirmwareType {
            serialize_size += firmwareType.computeStringSize(fieldNumber: 13)
          }
          if hasFirmwareFingerprint {
            serialize_size += firmwareFingerprint.computeStringSize(fieldNumber: 14)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasDeviceId {
            jsonMap["deviceId"] = deviceId
          }
          if hasAndroidBoardName {
            jsonMap["androidBoardName"] = androidBoardName
          }
          if hasAndroidBootloader {
            jsonMap["androidBootloader"] = androidBootloader
          }
          if hasDeviceBrand {
            jsonMap["deviceBrand"] = deviceBrand
          }
          if hasDeviceModel {
            jsonMap["deviceModel"] = deviceModel
          }
          if hasDeviceModelIdentifier {
            jsonMap["deviceModelIdentifier"] = deviceModelIdentifier
          }
          if hasDeviceCommsModel {
            jsonMap["deviceCommsModel"] = deviceCommsModel
          }
          if hasHardwareManufacturer {
            jsonMap["hardwareManufacturer"] = hardwareManufacturer
          }
          if hasHardwareModel {
            jsonMap["hardwareModel"] = hardwareModel
          }
          if hasFirmwareBrand {
            jsonMap["firmwareBrand"] = firmwareBrand
          }
          if hasFirmwareTags {
            jsonMap["firmwareTags"] = firmwareTags
          }
          if hasFirmwareType {
            jsonMap["firmwareType"] = firmwareType
          }
          if hasFirmwareFingerprint {
            jsonMap["firmwareFingerprint"] = firmwareFingerprint
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasDeviceId {
            output += "\(indent) deviceId: \(deviceId) \n"
          }
          if hasAndroidBoardName {
            output += "\(indent) androidBoardName: \(androidBoardName) \n"
          }
          if hasAndroidBootloader {
            output += "\(indent) androidBootloader: \(androidBootloader) \n"
          }
          if hasDeviceBrand {
            output += "\(indent) deviceBrand: \(deviceBrand) \n"
          }
          if hasDeviceModel {
            output += "\(indent) deviceModel: \(deviceModel) \n"
          }
          if hasDeviceModelIdentifier {
            output += "\(indent) deviceModelIdentifier: \(deviceModelIdentifier) \n"
          }
          if hasDeviceCommsModel {
            output += "\(indent) deviceCommsModel: \(deviceCommsModel) \n"
          }
          if hasHardwareManufacturer {
            output += "\(indent) hardwareManufacturer: \(hardwareManufacturer) \n"
          }
          if hasHardwareModel {
            output += "\(indent) hardwareModel: \(hardwareModel) \n"
          }
          if hasFirmwareBrand {
            output += "\(indent) firmwareBrand: \(firmwareBrand) \n"
          }
          if hasFirmwareTags {
            output += "\(indent) firmwareTags: \(firmwareTags) \n"
          }
          if hasFirmwareType {
            output += "\(indent) firmwareType: \(firmwareType) \n"
          }
          if hasFirmwareFingerprint {
            output += "\(indent) firmwareFingerprint: \(firmwareFingerprint) \n"
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDeviceId {
                   hashCode = (hashCode &* 31) &+ deviceId.hashValue
                }
                if hasAndroidBoardName {
                   hashCode = (hashCode &* 31) &+ androidBoardName.hashValue
                }
                if hasAndroidBootloader {
                   hashCode = (hashCode &* 31) &+ androidBootloader.hashValue
                }
                if hasDeviceBrand {
                   hashCode = (hashCode &* 31) &+ deviceBrand.hashValue
                }
                if hasDeviceModel {
                   hashCode = (hashCode &* 31) &+ deviceModel.hashValue
                }
                if hasDeviceModelIdentifier {
                   hashCode = (hashCode &* 31) &+ deviceModelIdentifier.hashValue
                }
                if hasDeviceCommsModel {
                   hashCode = (hashCode &* 31) &+ deviceCommsModel.hashValue
                }
                if hasHardwareManufacturer {
                   hashCode = (hashCode &* 31) &+ hardwareManufacturer.hashValue
                }
                if hasHardwareModel {
                   hashCode = (hashCode &* 31) &+ hardwareModel.hashValue
                }
                if hasFirmwareBrand {
                   hashCode = (hashCode &* 31) &+ firmwareBrand.hashValue
                }
                if hasFirmwareTags {
                   hashCode = (hashCode &* 31) &+ firmwareTags.hashValue
                }
                if hasFirmwareType {
                   hashCode = (hashCode &* 31) &+ firmwareType.hashValue
                }
                if hasFirmwareFingerprint {
                   hashCode = (hashCode &* 31) &+ firmwareFingerprint.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasDeviceId:Bool {
               get {
                    return builderResult.hasDeviceId
               }
          }
          public var deviceId:String {
               get {
                    return builderResult.deviceId
               }
               set (value) {
                   builderResult.hasDeviceId = true
                   builderResult.deviceId = value
               }
          }
          @discardableResult
          public func setDeviceId(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.deviceId = value
            return self
          }
          @discardableResult
          public func clearDeviceId() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasDeviceId = false
               builderResult.deviceId = ""
               return self
          }
          public var hasAndroidBoardName:Bool {
               get {
                    return builderResult.hasAndroidBoardName
               }
          }
          public var androidBoardName:String {
               get {
                    return builderResult.androidBoardName
               }
               set (value) {
                   builderResult.hasAndroidBoardName = true
                   builderResult.androidBoardName = value
               }
          }
          @discardableResult
          public func setAndroidBoardName(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.androidBoardName = value
            return self
          }
          @discardableResult
          public func clearAndroidBoardName() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasAndroidBoardName = false
               builderResult.androidBoardName = ""
               return self
          }
          public var hasAndroidBootloader:Bool {
               get {
                    return builderResult.hasAndroidBootloader
               }
          }
          public var androidBootloader:String {
               get {
                    return builderResult.androidBootloader
               }
               set (value) {
                   builderResult.hasAndroidBootloader = true
                   builderResult.androidBootloader = value
               }
          }
          @discardableResult
          public func setAndroidBootloader(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.androidBootloader = value
            return self
          }
          @discardableResult
          public func clearAndroidBootloader() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasAndroidBootloader = false
               builderResult.androidBootloader = ""
               return self
          }
          public var hasDeviceBrand:Bool {
               get {
                    return builderResult.hasDeviceBrand
               }
          }
          public var deviceBrand:String {
               get {
                    return builderResult.deviceBrand
               }
               set (value) {
                   builderResult.hasDeviceBrand = true
                   builderResult.deviceBrand = value
               }
          }
          @discardableResult
          public func setDeviceBrand(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.deviceBrand = value
            return self
          }
          @discardableResult
          public func clearDeviceBrand() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasDeviceBrand = false
               builderResult.deviceBrand = ""
               return self
          }
          public var hasDeviceModel:Bool {
               get {
                    return builderResult.hasDeviceModel
               }
          }
          public var deviceModel:String {
               get {
                    return builderResult.deviceModel
               }
               set (value) {
                   builderResult.hasDeviceModel = true
                   builderResult.deviceModel = value
               }
          }
          @discardableResult
          public func setDeviceModel(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.deviceModel = value
            return self
          }
          @discardableResult
          public func clearDeviceModel() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasDeviceModel = false
               builderResult.deviceModel = ""
               return self
          }
          public var hasDeviceModelIdentifier:Bool {
               get {
                    return builderResult.hasDeviceModelIdentifier
               }
          }
          public var deviceModelIdentifier:String {
               get {
                    return builderResult.deviceModelIdentifier
               }
               set (value) {
                   builderResult.hasDeviceModelIdentifier = true
                   builderResult.deviceModelIdentifier = value
               }
          }
          @discardableResult
          public func setDeviceModelIdentifier(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.deviceModelIdentifier = value
            return self
          }
          @discardableResult
          public func clearDeviceModelIdentifier() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasDeviceModelIdentifier = false
               builderResult.deviceModelIdentifier = ""
               return self
          }
          public var hasDeviceCommsModel:Bool {
               get {
                    return builderResult.hasDeviceCommsModel
               }
          }
          public var deviceCommsModel:String {
               get {
                    return builderResult.deviceCommsModel
               }
               set (value) {
                   builderResult.hasDeviceCommsModel = true
                   builderResult.deviceCommsModel = value
               }
          }
          @discardableResult
          public func setDeviceCommsModel(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.deviceCommsModel = value
            return self
          }
          @discardableResult
          public func clearDeviceCommsModel() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasDeviceCommsModel = false
               builderResult.deviceCommsModel = ""
               return self
          }
          public var hasHardwareManufacturer:Bool {
               get {
                    return builderResult.hasHardwareManufacturer
               }
          }
          public var hardwareManufacturer:String {
               get {
                    return builderResult.hardwareManufacturer
               }
               set (value) {
                   builderResult.hasHardwareManufacturer = true
                   builderResult.hardwareManufacturer = value
               }
          }
          @discardableResult
          public func setHardwareManufacturer(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.hardwareManufacturer = value
            return self
          }
          @discardableResult
          public func clearHardwareManufacturer() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasHardwareManufacturer = false
               builderResult.hardwareManufacturer = ""
               return self
          }
          public var hasHardwareModel:Bool {
               get {
                    return builderResult.hasHardwareModel
               }
          }
          public var hardwareModel:String {
               get {
                    return builderResult.hardwareModel
               }
               set (value) {
                   builderResult.hasHardwareModel = true
                   builderResult.hardwareModel = value
               }
          }
          @discardableResult
          public func setHardwareModel(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.hardwareModel = value
            return self
          }
          @discardableResult
          public func clearHardwareModel() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasHardwareModel = false
               builderResult.hardwareModel = ""
               return self
          }
          public var hasFirmwareBrand:Bool {
               get {
                    return builderResult.hasFirmwareBrand
               }
          }
          public var firmwareBrand:String {
               get {
                    return builderResult.firmwareBrand
               }
               set (value) {
                   builderResult.hasFirmwareBrand = true
                   builderResult.firmwareBrand = value
               }
          }
          @discardableResult
          public func setFirmwareBrand(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.firmwareBrand = value
            return self
          }
          @discardableResult
          public func clearFirmwareBrand() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasFirmwareBrand = false
               builderResult.firmwareBrand = ""
               return self
          }
          public var hasFirmwareTags:Bool {
               get {
                    return builderResult.hasFirmwareTags
               }
          }
          public var firmwareTags:String {
               get {
                    return builderResult.firmwareTags
               }
               set (value) {
                   builderResult.hasFirmwareTags = true
                   builderResult.firmwareTags = value
               }
          }
          @discardableResult
          public func setFirmwareTags(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.firmwareTags = value
            return self
          }
          @discardableResult
          public func clearFirmwareTags() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasFirmwareTags = false
               builderResult.firmwareTags = ""
               return self
          }
          public var hasFirmwareType:Bool {
               get {
                    return builderResult.hasFirmwareType
               }
          }
          public var firmwareType:String {
               get {
                    return builderResult.firmwareType
               }
               set (value) {
                   builderResult.hasFirmwareType = true
                   builderResult.firmwareType = value
               }
          }
          @discardableResult
          public func setFirmwareType(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.firmwareType = value
            return self
          }
          @discardableResult
          public func clearFirmwareType() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasFirmwareType = false
               builderResult.firmwareType = ""
               return self
          }
          public var hasFirmwareFingerprint:Bool {
               get {
                    return builderResult.hasFirmwareFingerprint
               }
          }
          public var firmwareFingerprint:String {
               get {
                    return builderResult.firmwareFingerprint
               }
               set (value) {
                   builderResult.hasFirmwareFingerprint = true
                   builderResult.firmwareFingerprint = value
               }
          }
          @discardableResult
          public func setFirmwareFingerprint(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            self.firmwareFingerprint = value
            return self
          }
          @discardableResult
          public func clearFirmwareFingerprint() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder{
               builderResult.hasFirmwareFingerprint = false
               builderResult.firmwareFingerprint = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo() {
             return self
            }
            if other.hasDeviceId {
                 deviceId = other.deviceId
            }
            if other.hasAndroidBoardName {
                 androidBoardName = other.androidBoardName
            }
            if other.hasAndroidBootloader {
                 androidBootloader = other.androidBootloader
            }
            if other.hasDeviceBrand {
                 deviceBrand = other.deviceBrand
            }
            if other.hasDeviceModel {
                 deviceModel = other.deviceModel
            }
            if other.hasDeviceModelIdentifier {
                 deviceModelIdentifier = other.deviceModelIdentifier
            }
            if other.hasDeviceCommsModel {
                 deviceCommsModel = other.deviceCommsModel
            }
            if other.hasHardwareManufacturer {
                 hardwareManufacturer = other.hardwareManufacturer
            }
            if other.hasHardwareModel {
                 hardwareModel = other.hardwareModel
            }
            if other.hasFirmwareBrand {
                 firmwareBrand = other.firmwareBrand
            }
            if other.hasFirmwareTags {
                 firmwareTags = other.firmwareTags
            }
            if other.hasFirmwareType {
                 firmwareType = other.firmwareType
            }
            if other.hasFirmwareFingerprint {
                 firmwareFingerprint = other.firmwareFingerprint
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                deviceId = try codedInputStream.readString()

              case 18:
                androidBoardName = try codedInputStream.readString()

              case 26:
                androidBootloader = try codedInputStream.readString()

              case 34:
                deviceBrand = try codedInputStream.readString()

              case 42:
                deviceModel = try codedInputStream.readString()

              case 50:
                deviceModelIdentifier = try codedInputStream.readString()

              case 58:
                deviceCommsModel = try codedInputStream.readString()

              case 66:
                hardwareManufacturer = try codedInputStream.readString()

              case 74:
                hardwareModel = try codedInputStream.readString()

              case 82:
                firmwareBrand = try codedInputStream.readString()

              case 98:
                firmwareTags = try codedInputStream.readString()

              case 106:
                firmwareType = try codedInputStream.readString()

              case 114:
                firmwareFingerprint = try codedInputStream.readString()

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder()
            if let jsonValueDeviceId = jsonMap["deviceId"] as? String {
              resultDecodedBuilder.deviceId = jsonValueDeviceId
            }
            if let jsonValueAndroidBoardName = jsonMap["androidBoardName"] as? String {
              resultDecodedBuilder.androidBoardName = jsonValueAndroidBoardName
            }
            if let jsonValueAndroidBootloader = jsonMap["androidBootloader"] as? String {
              resultDecodedBuilder.androidBootloader = jsonValueAndroidBootloader
            }
            if let jsonValueDeviceBrand = jsonMap["deviceBrand"] as? String {
              resultDecodedBuilder.deviceBrand = jsonValueDeviceBrand
            }
            if let jsonValueDeviceModel = jsonMap["deviceModel"] as? String {
              resultDecodedBuilder.deviceModel = jsonValueDeviceModel
            }
            if let jsonValueDeviceModelIdentifier = jsonMap["deviceModelIdentifier"] as? String {
              resultDecodedBuilder.deviceModelIdentifier = jsonValueDeviceModelIdentifier
            }
            if let jsonValueDeviceCommsModel = jsonMap["deviceCommsModel"] as? String {
              resultDecodedBuilder.deviceCommsModel = jsonValueDeviceCommsModel
            }
            if let jsonValueHardwareManufacturer = jsonMap["hardwareManufacturer"] as? String {
              resultDecodedBuilder.hardwareManufacturer = jsonValueHardwareManufacturer
            }
            if let jsonValueHardwareModel = jsonMap["hardwareModel"] as? String {
              resultDecodedBuilder.hardwareModel = jsonValueHardwareModel
            }
            if let jsonValueFirmwareBrand = jsonMap["firmwareBrand"] as? String {
              resultDecodedBuilder.firmwareBrand = jsonValueFirmwareBrand
            }
            if let jsonValueFirmwareTags = jsonMap["firmwareTags"] as? String {
              resultDecodedBuilder.firmwareTags = jsonValueFirmwareTags
            }
            if let jsonValueFirmwareType = jsonMap["firmwareType"] as? String {
              resultDecodedBuilder.firmwareType = jsonValueFirmwareType
            }
            if let jsonValueFirmwareFingerprint = jsonMap["firmwareFingerprint"] as? String {
              resultDecodedBuilder.firmwareFingerprint = jsonValueFirmwareFingerprint
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class AndroidGpsInfo : GeneratedMessage {

        public static func == (lhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo, rhs: Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasTimeToFix == rhs.hasTimeToFix) && (!lhs.hasTimeToFix || lhs.timeToFix == rhs.timeToFix)
          fieldCheck = fieldCheck && (lhs.satellitesPrn == rhs.satellitesPrn)
          fieldCheck = fieldCheck && (lhs.azimuth == rhs.azimuth)
          fieldCheck = fieldCheck && (lhs.elevation == rhs.elevation)
          fieldCheck = fieldCheck && (lhs.snr == rhs.snr)
          fieldCheck = fieldCheck && (lhs.hasAlmanac == rhs.hasAlmanac)
          fieldCheck = fieldCheck && (lhs.hasEphemeris == rhs.hasEphemeris)
          fieldCheck = fieldCheck && (lhs.usedInFix == rhs.usedInFix)
          fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          return fieldCheck
        }

        public fileprivate(set) var timeToFix:UInt64 = UInt64(0)
        public fileprivate(set) var hasTimeToFix:Bool = false

        public fileprivate(set) var satellitesPrn:Array<Int32> = Array<Int32>()
        private var satellitesPrnMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var azimuth:Array<Float> = Array<Float>()
        private var azimuthMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var elevation:Array<Float> = Array<Float>()
        private var elevationMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var snr:Array<Float> = Array<Float>()
        private var snrMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var hasAlmanac:Array<Bool> = Array<Bool>()
        private var hasAlmanacMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var hasEphemeris:Array<Bool> = Array<Bool>()
        private var hasEphemerisMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var usedInFix:Array<Bool> = Array<Bool>()
        private var usedInFixMemoizedSerializedSize:Int32 = -1
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
          if hasTimeToFix {
            try codedOutputStream.writeUInt64(fieldNumber: 1, value:timeToFix)
          }
          if !satellitesPrn.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 18)
            try codedOutputStream.writeRawVarint32(value: satellitesPrnMemoizedSerializedSize)
            for oneValuesatellitesPrn in satellitesPrn {
              try codedOutputStream.writeInt32NoTag(value: oneValuesatellitesPrn)
            }
          }
          if !azimuth.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 26)
            try codedOutputStream.writeRawVarint32(value: azimuthMemoizedSerializedSize)
            for oneValueazimuth in azimuth {
              try codedOutputStream.writeFloatNoTag(value: oneValueazimuth)
            }
          }
          if !elevation.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 34)
            try codedOutputStream.writeRawVarint32(value: elevationMemoizedSerializedSize)
            for oneValueelevation in elevation {
              try codedOutputStream.writeFloatNoTag(value: oneValueelevation)
            }
          }
          if !snr.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 42)
            try codedOutputStream.writeRawVarint32(value: snrMemoizedSerializedSize)
            for oneValuesnr in snr {
              try codedOutputStream.writeFloatNoTag(value: oneValuesnr)
            }
          }
          if !hasAlmanac.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 50)
            try codedOutputStream.writeRawVarint32(value: hasAlmanacMemoizedSerializedSize)
            for oneValuehasAlmanac in hasAlmanac {
              try codedOutputStream.writeBoolNoTag(value: oneValuehasAlmanac)
            }
          }
          if !hasEphemeris.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 58)
            try codedOutputStream.writeRawVarint32(value: hasEphemerisMemoizedSerializedSize)
            for oneValuehasEphemeris in hasEphemeris {
              try codedOutputStream.writeBoolNoTag(value: oneValuehasEphemeris)
            }
          }
          if !usedInFix.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 66)
            try codedOutputStream.writeRawVarint32(value: usedInFixMemoizedSerializedSize)
            for oneValueusedInFix in usedInFix {
              try codedOutputStream.writeBoolNoTag(value: oneValueusedInFix)
            }
          }
          try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasTimeToFix {
            serialize_size += timeToFix.computeUInt64Size(fieldNumber: 1)
          }
          var dataSizeSatellitesPrn:Int32 = 0
          for oneValuesatellitesPrn in satellitesPrn {
              dataSizeSatellitesPrn += oneValuesatellitesPrn.computeInt32SizeNoTag()
          }
          serialize_size += dataSizeSatellitesPrn
          if !satellitesPrn.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeSatellitesPrn.computeInt32SizeNoTag()
          }
          satellitesPrnMemoizedSerializedSize = dataSizeSatellitesPrn
          var dataSizeAzimuth:Int32 = 0
          dataSizeAzimuth = 4 * Int32(azimuth.count)
          serialize_size += dataSizeAzimuth
          if !azimuth.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeAzimuth.computeInt32SizeNoTag()
          }
          azimuthMemoizedSerializedSize = dataSizeAzimuth
          var dataSizeElevation:Int32 = 0
          dataSizeElevation = 4 * Int32(elevation.count)
          serialize_size += dataSizeElevation
          if !elevation.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeElevation.computeInt32SizeNoTag()
          }
          elevationMemoizedSerializedSize = dataSizeElevation
          var dataSizeSnr:Int32 = 0
          dataSizeSnr = 4 * Int32(snr.count)
          serialize_size += dataSizeSnr
          if !snr.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeSnr.computeInt32SizeNoTag()
          }
          snrMemoizedSerializedSize = dataSizeSnr
          var dataSizeHasAlmanac:Int32 = 0
          dataSizeHasAlmanac = 1 * Int32(hasAlmanac.count)
          serialize_size += dataSizeHasAlmanac
          if !hasAlmanac.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeHasAlmanac.computeInt32SizeNoTag()
          }
          hasAlmanacMemoizedSerializedSize = dataSizeHasAlmanac
          var dataSizeHasEphemeris:Int32 = 0
          dataSizeHasEphemeris = 1 * Int32(hasEphemeris.count)
          serialize_size += dataSizeHasEphemeris
          if !hasEphemeris.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeHasEphemeris.computeInt32SizeNoTag()
          }
          hasEphemerisMemoizedSerializedSize = dataSizeHasEphemeris
          var dataSizeUsedInFix:Int32 = 0
          dataSizeUsedInFix = 1 * Int32(usedInFix.count)
          serialize_size += dataSizeUsedInFix
          if !usedInFix.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeUsedInFix.computeInt32SizeNoTag()
          }
          usedInFixMemoizedSerializedSize = dataSizeUsedInFix
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
          return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
          guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
          if hasTimeToFix {
            jsonMap["timeToFix"] = "\(timeToFix)"
          }
          if !satellitesPrn.isEmpty {
            var jsonArraySatellitesPrn:Array<Int> = []
              for oneValueSatellitesPrn in satellitesPrn {
                jsonArraySatellitesPrn.append(Int(oneValueSatellitesPrn))
              }
            jsonMap["satellitesPrn"] = jsonArraySatellitesPrn
          }
          if !azimuth.isEmpty {
            var jsonArrayAzimuth:Array<Float> = []
              for oneValueAzimuth in azimuth {
                jsonArrayAzimuth.append(Float(oneValueAzimuth))
              }
            jsonMap["azimuth"] = jsonArrayAzimuth
          }
          if !elevation.isEmpty {
            var jsonArrayElevation:Array<Float> = []
              for oneValueElevation in elevation {
                jsonArrayElevation.append(Float(oneValueElevation))
              }
            jsonMap["elevation"] = jsonArrayElevation
          }
          if !snr.isEmpty {
            var jsonArraySnr:Array<Float> = []
              for oneValueSnr in snr {
                jsonArraySnr.append(Float(oneValueSnr))
              }
            jsonMap["snr"] = jsonArraySnr
          }
          if !hasAlmanac.isEmpty {
            var jsonArrayHasAlmanac:Array<Bool> = []
              for oneValueHasAlmanac in hasAlmanac {
                jsonArrayHasAlmanac.append(oneValueHasAlmanac)
              }
            jsonMap["hasAlmanac"] = jsonArrayHasAlmanac
          }
          if !hasEphemeris.isEmpty {
            var jsonArrayHasEphemeris:Array<Bool> = []
              for oneValueHasEphemeris in hasEphemeris {
                jsonArrayHasEphemeris.append(oneValueHasEphemeris)
              }
            jsonMap["hasEphemeris"] = jsonArrayHasEphemeris
          }
          if !usedInFix.isEmpty {
            var jsonArrayUsedInFix:Array<Bool> = []
              for oneValueUsedInFix in usedInFix {
                jsonArrayUsedInFix.append(oneValueUsedInFix)
              }
            jsonMap["usedInFix"] = jsonArrayUsedInFix
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasTimeToFix {
            output += "\(indent) timeToFix: \(timeToFix) \n"
          }
          var satellitesPrnElementIndex:Int = 0
          for oneValueSatellitesPrn in satellitesPrn  {
              output += "\(indent) satellitesPrn[\(satellitesPrnElementIndex)]: \(oneValueSatellitesPrn)\n"
              satellitesPrnElementIndex += 1
          }
          var azimuthElementIndex:Int = 0
          for oneValueAzimuth in azimuth  {
              output += "\(indent) azimuth[\(azimuthElementIndex)]: \(oneValueAzimuth)\n"
              azimuthElementIndex += 1
          }
          var elevationElementIndex:Int = 0
          for oneValueElevation in elevation  {
              output += "\(indent) elevation[\(elevationElementIndex)]: \(oneValueElevation)\n"
              elevationElementIndex += 1
          }
          var snrElementIndex:Int = 0
          for oneValueSnr in snr  {
              output += "\(indent) snr[\(snrElementIndex)]: \(oneValueSnr)\n"
              snrElementIndex += 1
          }
          var hasAlmanacElementIndex:Int = 0
          for oneValueHasAlmanac in hasAlmanac  {
              output += "\(indent) hasAlmanac[\(hasAlmanacElementIndex)]: \(oneValueHasAlmanac)\n"
              hasAlmanacElementIndex += 1
          }
          var hasEphemerisElementIndex:Int = 0
          for oneValueHasEphemeris in hasEphemeris  {
              output += "\(indent) hasEphemeris[\(hasEphemerisElementIndex)]: \(oneValueHasEphemeris)\n"
              hasEphemerisElementIndex += 1
          }
          var usedInFixElementIndex:Int = 0
          for oneValueUsedInFix in usedInFix  {
              output += "\(indent) usedInFix[\(usedInFixElementIndex)]: \(oneValueUsedInFix)\n"
              usedInFixElementIndex += 1
          }
          output += unknownFields.getDescription(indent: indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTimeToFix {
                   hashCode = (hashCode &* 31) &+ timeToFix.hashValue
                }
                for oneValueSatellitesPrn in satellitesPrn {
                    hashCode = (hashCode &* 31) &+ oneValueSatellitesPrn.hashValue
                }
                for oneValueAzimuth in azimuth {
                    hashCode = (hashCode &* 31) &+ oneValueAzimuth.hashValue
                }
                for oneValueElevation in elevation {
                    hashCode = (hashCode &* 31) &+ oneValueElevation.hashValue
                }
                for oneValueSnr in snr {
                    hashCode = (hashCode &* 31) &+ oneValueSnr.hashValue
                }
                for oneValueHasAlmanac in hasAlmanac {
                    hashCode = (hashCode &* 31) &+ oneValueHasAlmanac.hashValue
                }
                for oneValueHasEphemeris in hasEphemeris {
                    hashCode = (hashCode &* 31) &+ oneValueHasEphemeris.hashValue
                }
                for oneValueUsedInFix in usedInFix {
                    hashCode = (hashCode &* 31) &+ oneValueUsedInFix.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          fileprivate var builderResult:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasTimeToFix:Bool {
               get {
                    return builderResult.hasTimeToFix
               }
          }
          public var timeToFix:UInt64 {
               get {
                    return builderResult.timeToFix
               }
               set (value) {
                   builderResult.hasTimeToFix = true
                   builderResult.timeToFix = value
               }
          }
          @discardableResult
          public func setTimeToFix(_ value:UInt64) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.timeToFix = value
            return self
          }
          @discardableResult
          public func clearTimeToFix() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder{
               builderResult.hasTimeToFix = false
               builderResult.timeToFix = UInt64(0)
               return self
          }
          public var satellitesPrn:Array<Int32> {
               get {
                   return builderResult.satellitesPrn
               }
               set (array) {
                   builderResult.satellitesPrn = array
               }
          }
          @discardableResult
          public func setSatellitesPrn(_ value:Array<Int32>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.satellitesPrn = value
            return self
          }
          @discardableResult
          public func clearSatellitesPrn() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
             builderResult.satellitesPrn.removeAll(keepingCapacity: false)
             return self
          }
          public var azimuth:Array<Float> {
               get {
                   return builderResult.azimuth
               }
               set (array) {
                   builderResult.azimuth = array
               }
          }
          @discardableResult
          public func setAzimuth(_ value:Array<Float>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.azimuth = value
            return self
          }
          @discardableResult
          public func clearAzimuth() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
             builderResult.azimuth.removeAll(keepingCapacity: false)
             return self
          }
          public var elevation:Array<Float> {
               get {
                   return builderResult.elevation
               }
               set (array) {
                   builderResult.elevation = array
               }
          }
          @discardableResult
          public func setElevation(_ value:Array<Float>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.elevation = value
            return self
          }
          @discardableResult
          public func clearElevation() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
             builderResult.elevation.removeAll(keepingCapacity: false)
             return self
          }
          public var snr:Array<Float> {
               get {
                   return builderResult.snr
               }
               set (array) {
                   builderResult.snr = array
               }
          }
          @discardableResult
          public func setSnr(_ value:Array<Float>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.snr = value
            return self
          }
          @discardableResult
          public func clearSnr() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
             builderResult.snr.removeAll(keepingCapacity: false)
             return self
          }
          public var hasAlmanac:Array<Bool> {
               get {
                   return builderResult.hasAlmanac
               }
               set (array) {
                   builderResult.hasAlmanac = array
               }
          }
          @discardableResult
          public func setHasAlmanac(_ value:Array<Bool>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.hasAlmanac = value
            return self
          }
          @discardableResult
          public func clearHasAlmanac() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
             builderResult.hasAlmanac.removeAll(keepingCapacity: false)
             return self
          }
          public var hasEphemeris:Array<Bool> {
               get {
                   return builderResult.hasEphemeris
               }
               set (array) {
                   builderResult.hasEphemeris = array
               }
          }
          @discardableResult
          public func setHasEphemeris(_ value:Array<Bool>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.hasEphemeris = value
            return self
          }
          @discardableResult
          public func clearHasEphemeris() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
             builderResult.hasEphemeris.removeAll(keepingCapacity: false)
             return self
          }
          public var usedInFix:Array<Bool> {
               get {
                   return builderResult.usedInFix
               }
               set (array) {
                   builderResult.usedInFix = array
               }
          }
          @discardableResult
          public func setUsedInFix(_ value:Array<Bool>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            self.usedInFix = value
            return self
          }
          @discardableResult
          public func clearUsedInFix() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
             builderResult.usedInFix.removeAll(keepingCapacity: false)
             return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          @discardableResult
          override public func clear() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.builderWithPrototype(prototype:builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo = builderResult
            return returnMe
          }
          @discardableResult
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo() {
             return self
            }
            if other.hasTimeToFix {
                 timeToFix = other.timeToFix
            }
            if !other.satellitesPrn.isEmpty {
                builderResult.satellitesPrn += other.satellitesPrn
            }
            if !other.azimuth.isEmpty {
                builderResult.azimuth += other.azimuth
            }
            if !other.elevation.isEmpty {
                builderResult.elevation += other.elevation
            }
            if !other.snr.isEmpty {
                builderResult.snr += other.snr
            }
            if !other.hasAlmanac.isEmpty {
                builderResult.hasAlmanac += other.hasAlmanac
            }
            if !other.hasEphemeris.isEmpty {
                builderResult.hasEphemeris += other.hasEphemeris
            }
            if !other.usedInFix.isEmpty {
                builderResult.usedInFix += other.usedInFix
            }
            _ = try merge(unknownField: other.unknownFields)
            return self
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
               return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
          }
          @discardableResult
          override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
              let protobufTag = try codedInputStream.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                timeToFix = try codedInputStream.readUInt64()

              case 18:
                let length = Int(try codedInputStream.readRawVarint32())
                let limit = try codedInputStream.pushLimit(byteLimit: length)
                while (codedInputStream.bytesUntilLimit() > 0) {
                  builderResult.satellitesPrn.append(try codedInputStream.readInt32())
                }
                codedInputStream.popLimit(oldLimit: limit)

              case 26:
                let length = Int(try codedInputStream.readRawVarint32())
                let limit = try codedInputStream.pushLimit(byteLimit: length)
                while (codedInputStream.bytesUntilLimit() > 0) {
                  builderResult.azimuth.append(try codedInputStream.readFloat())
                }
                codedInputStream.popLimit(oldLimit: limit)

              case 34:
                let length = Int(try codedInputStream.readRawVarint32())
                let limit = try codedInputStream.pushLimit(byteLimit: length)
                while (codedInputStream.bytesUntilLimit() > 0) {
                  builderResult.elevation.append(try codedInputStream.readFloat())
                }
                codedInputStream.popLimit(oldLimit: limit)

              case 42:
                let length = Int(try codedInputStream.readRawVarint32())
                let limit = try codedInputStream.pushLimit(byteLimit: length)
                while (codedInputStream.bytesUntilLimit() > 0) {
                  builderResult.snr.append(try codedInputStream.readFloat())
                }
                codedInputStream.popLimit(oldLimit: limit)

              case 50:
                let length = Int(try codedInputStream.readRawVarint32())
                let limit = try codedInputStream.pushLimit(byteLimit: length)
                while (codedInputStream.bytesUntilLimit() > 0) {
                  builderResult.hasAlmanac.append(try codedInputStream.readBool())
                }
                codedInputStream.popLimit(oldLimit: limit)

              case 58:
                let length = Int(try codedInputStream.readRawVarint32())
                let limit = try codedInputStream.pushLimit(byteLimit: length)
                while (codedInputStream.bytesUntilLimit() > 0) {
                  builderResult.hasEphemeris.append(try codedInputStream.readBool())
                }
                codedInputStream.popLimit(oldLimit: limit)

              case 66:
                let length = Int(try codedInputStream.readRawVarint32())
                let limit = try codedInputStream.pushLimit(byteLimit: length)
                while (codedInputStream.bytesUntilLimit() > 0) {
                  builderResult.usedInFix.append(try codedInputStream.readBool())
                }
                codedInputStream.popLimit(oldLimit: limit)

              default:
                if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder()
            if let jsonValueTimeToFix = jsonMap["timeToFix"] as? String {
              resultDecodedBuilder.timeToFix = UInt64(jsonValueTimeToFix)!
            }
            if let jsonValueSatellitesPrn = jsonMap["satellitesPrn"] as? Array<Int> {
              var jsonArraySatellitesPrn:Array<Int32> = []
              for oneValueSatellitesPrn in jsonValueSatellitesPrn {
                jsonArraySatellitesPrn.append(Int32(oneValueSatellitesPrn))
              }
              resultDecodedBuilder.satellitesPrn = jsonArraySatellitesPrn
            }
            if let jsonValueAzimuth = jsonMap["azimuth"] as? Array<Float> {
              var jsonArrayAzimuth:Array<Float> = []
              for oneValueAzimuth in jsonValueAzimuth {
                jsonArrayAzimuth.append(Float(oneValueAzimuth))
              }
              resultDecodedBuilder.azimuth = jsonArrayAzimuth
            }
            if let jsonValueElevation = jsonMap["elevation"] as? Array<Float> {
              var jsonArrayElevation:Array<Float> = []
              for oneValueElevation in jsonValueElevation {
                jsonArrayElevation.append(Float(oneValueElevation))
              }
              resultDecodedBuilder.elevation = jsonArrayElevation
            }
            if let jsonValueSnr = jsonMap["snr"] as? Array<Float> {
              var jsonArraySnr:Array<Float> = []
              for oneValueSnr in jsonValueSnr {
                jsonArraySnr.append(Float(oneValueSnr))
              }
              resultDecodedBuilder.snr = jsonArraySnr
            }
            if let jsonValueHasAlmanac = jsonMap["hasAlmanac"] as? Array<Bool> {
              var jsonArrayHasAlmanac:Array<Bool> = []
              for oneValueHasAlmanac in jsonValueHasAlmanac {
                jsonArrayHasAlmanac.append(oneValueHasAlmanac)
              }
              resultDecodedBuilder.hasAlmanac = jsonArrayHasAlmanac
            }
            if let jsonValueHasEphemeris = jsonMap["hasEphemeris"] as? Array<Bool> {
              var jsonArrayHasEphemeris:Array<Bool> = []
              for oneValueHasEphemeris in jsonValueHasEphemeris {
                jsonArrayHasEphemeris.append(oneValueHasEphemeris)
              }
              resultDecodedBuilder.hasEphemeris = jsonArrayHasEphemeris
            }
            if let jsonValueUsedInFix = jsonMap["usedInFix"] as? Array<Bool> {
              var jsonArrayUsedInFix:Array<Bool> = []
              for oneValueUsedInFix in jsonValueUsedInFix {
                jsonArrayUsedInFix.append(oneValueUsedInFix)
              }
              resultDecodedBuilder.usedInFix = jsonArrayUsedInFix
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public fileprivate(set) var field1:Array<Pogoprotos.Networking.Envelopes.UnknownMessage>  = Array<Pogoprotos.Networking.Envelopes.UnknownMessage>()
    public fileprivate(set) var timestampMsSinceStart:Int64 = Int64(0)
    public fileprivate(set) var hasTimestampMsSinceStart:Bool = false

    public fileprivate(set) var field3:String = ""
    public fileprivate(set) var hasField3:Bool = false

    public fileprivate(set) var locationUpdates:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate>  = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate>()
    public fileprivate(set) var androidGpsInfo:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo>  = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo>()
    public fileprivate(set) var field6:Array<Pogoprotos.Networking.Envelopes.UnknownMessage>  = Array<Pogoprotos.Networking.Envelopes.UnknownMessage>()
    public fileprivate(set) var sensorUpdates:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate>  = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate>()
    public fileprivate(set) var deviceInfo:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo!
    public fileprivate(set) var hasDeviceInfo:Bool = false
    public fileprivate(set) var iosDeviceInfo:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo!
    public fileprivate(set) var hasIosDeviceInfo:Bool = false
    // Hashed location using the auth token as the seed (hashed auth token -> location hash seed)
    public fileprivate(set) var locationHashByTokenSeed:Int32 = Int32(0)
    public fileprivate(set) var hasLocationHashByTokenSeed:Bool = false

    public fileprivate(set) var field11:Bool = false
    public fileprivate(set) var hasField11:Bool = false

    public fileprivate(set) var field12:Bool = false
    public fileprivate(set) var hasField12:Bool = false

    public fileprivate(set) var field13:Int32 = Int32(0)
    public fileprivate(set) var hasField13:Bool = false

    public fileprivate(set) var field14:Int32 = Int32(0)
    public fileprivate(set) var hasField14:Bool = false

    public fileprivate(set) var field15:String = ""
    public fileprivate(set) var hasField15:Bool = false

    public fileprivate(set) var field16:Int32 = Int32(0)
    public fileprivate(set) var hasField16:Bool = false

    public fileprivate(set) var field17:String = ""
    public fileprivate(set) var hasField17:Bool = false

    public fileprivate(set) var field18:String = ""
    public fileprivate(set) var hasField18:Bool = false

    public fileprivate(set) var field19:Bool = false
    public fileprivate(set) var hasField19:Bool = false

    public fileprivate(set) var locationHash:Int32 = Int32(0)
    public fileprivate(set) var hasLocationHash:Bool = false

    public fileprivate(set) var field21:Bool = false
    public fileprivate(set) var hasField21:Bool = false

    // replay check - Changes every 5 minutes or so. Generation unknown but pointed to by 0001B8614
    public fileprivate(set) var field22:Data = Data()
    public fileprivate(set) var hasField22:Bool = false

    public fileprivate(set) var epochTimestampMs:UInt64 = UInt64(0)
    public fileprivate(set) var hasEpochTimestampMs:Bool = false

    // xxHash64 of the requests being sent with this agglom
    public fileprivate(set) var requestHashes:Array<Int64> = Array<Int64>()
    private var requestHashesMemoizedSerializedSize:Int32 = -1
    public fileprivate(set) var field25:UInt64 = UInt64(0)
    public fileprivate(set) var hasField25:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      for oneElementField1 in field1 {
          try codedOutputStream.writeMessage(fieldNumber: 1, value:oneElementField1)
      }
      if hasTimestampMsSinceStart {
        try codedOutputStream.writeInt64(fieldNumber: 2, value:timestampMsSinceStart)
      }
      if hasField3 {
        try codedOutputStream.writeString(fieldNumber: 3, value:field3)
      }
      for oneElementLocationUpdates in locationUpdates {
          try codedOutputStream.writeMessage(fieldNumber: 4, value:oneElementLocationUpdates)
      }
      for oneElementAndroidGpsInfo in androidGpsInfo {
          try codedOutputStream.writeMessage(fieldNumber: 5, value:oneElementAndroidGpsInfo)
      }
      for oneElementField6 in field6 {
          try codedOutputStream.writeMessage(fieldNumber: 6, value:oneElementField6)
      }
      for oneElementSensorUpdates in sensorUpdates {
          try codedOutputStream.writeMessage(fieldNumber: 7, value:oneElementSensorUpdates)
      }
      if hasDeviceInfo {
        try codedOutputStream.writeMessage(fieldNumber: 8, value:deviceInfo)
      }
      if hasIosDeviceInfo {
        try codedOutputStream.writeMessage(fieldNumber: 9, value:iosDeviceInfo)
      }
      if hasLocationHashByTokenSeed {
        try codedOutputStream.writeInt32(fieldNumber: 10, value:locationHashByTokenSeed)
      }
      if hasField11 {
        try codedOutputStream.writeBool(fieldNumber: 11, value:field11)
      }
      if hasField12 {
        try codedOutputStream.writeBool(fieldNumber: 12, value:field12)
      }
      if hasField13 {
        try codedOutputStream.writeInt32(fieldNumber: 13, value:field13)
      }
      if hasField14 {
        try codedOutputStream.writeInt32(fieldNumber: 14, value:field14)
      }
      if hasField15 {
        try codedOutputStream.writeString(fieldNumber: 15, value:field15)
      }
      if hasField16 {
        try codedOutputStream.writeInt32(fieldNumber: 16, value:field16)
      }
      if hasField17 {
        try codedOutputStream.writeString(fieldNumber: 17, value:field17)
      }
      if hasField18 {
        try codedOutputStream.writeString(fieldNumber: 18, value:field18)
      }
      if hasField19 {
        try codedOutputStream.writeBool(fieldNumber: 19, value:field19)
      }
      if hasLocationHash {
        try codedOutputStream.writeInt32(fieldNumber: 20, value:locationHash)
      }
      if hasField21 {
        try codedOutputStream.writeBool(fieldNumber: 21, value:field21)
      }
      if hasField22 {
        try codedOutputStream.writeData(fieldNumber: 22, value:field22)
      }
      if hasEpochTimestampMs {
        try codedOutputStream.writeUInt64(fieldNumber: 23, value:epochTimestampMs)
      }
      if !requestHashes.isEmpty {
        try codedOutputStream.writeRawVarint32(value: 194)
        try codedOutputStream.writeRawVarint32(value: requestHashesMemoizedSerializedSize)
        for oneValuerequestHashes in requestHashes {
          try codedOutputStream.writeInt64NoTag(value: oneValuerequestHashes)
        }
      }
      if hasField25 {
        try codedOutputStream.writeUInt64(fieldNumber: 25, value:field25)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementField1 in field1 {
          serialize_size += oneElementField1.computeMessageSize(fieldNumber: 1)
      }
      if hasTimestampMsSinceStart {
        serialize_size += timestampMsSinceStart.computeInt64Size(fieldNumber: 2)
      }
      if hasField3 {
        serialize_size += field3.computeStringSize(fieldNumber: 3)
      }
      for oneElementLocationUpdates in locationUpdates {
          serialize_size += oneElementLocationUpdates.computeMessageSize(fieldNumber: 4)
      }
      for oneElementAndroidGpsInfo in androidGpsInfo {
          serialize_size += oneElementAndroidGpsInfo.computeMessageSize(fieldNumber: 5)
      }
      for oneElementField6 in field6 {
          serialize_size += oneElementField6.computeMessageSize(fieldNumber: 6)
      }
      for oneElementSensorUpdates in sensorUpdates {
          serialize_size += oneElementSensorUpdates.computeMessageSize(fieldNumber: 7)
      }
      if hasDeviceInfo {
          if let varSizedeviceInfo = deviceInfo?.computeMessageSize(fieldNumber: 8) {
              serialize_size += varSizedeviceInfo
          }
      }
      if hasIosDeviceInfo {
          if let varSizeiosDeviceInfo = iosDeviceInfo?.computeMessageSize(fieldNumber: 9) {
              serialize_size += varSizeiosDeviceInfo
          }
      }
      if hasLocationHashByTokenSeed {
        serialize_size += locationHashByTokenSeed.computeInt32Size(fieldNumber: 10)
      }
      if hasField11 {
        serialize_size += field11.computeBoolSize(fieldNumber: 11)
      }
      if hasField12 {
        serialize_size += field12.computeBoolSize(fieldNumber: 12)
      }
      if hasField13 {
        serialize_size += field13.computeInt32Size(fieldNumber: 13)
      }
      if hasField14 {
        serialize_size += field14.computeInt32Size(fieldNumber: 14)
      }
      if hasField15 {
        serialize_size += field15.computeStringSize(fieldNumber: 15)
      }
      if hasField16 {
        serialize_size += field16.computeInt32Size(fieldNumber: 16)
      }
      if hasField17 {
        serialize_size += field17.computeStringSize(fieldNumber: 17)
      }
      if hasField18 {
        serialize_size += field18.computeStringSize(fieldNumber: 18)
      }
      if hasField19 {
        serialize_size += field19.computeBoolSize(fieldNumber: 19)
      }
      if hasLocationHash {
        serialize_size += locationHash.computeInt32Size(fieldNumber: 20)
      }
      if hasField21 {
        serialize_size += field21.computeBoolSize(fieldNumber: 21)
      }
      if hasField22 {
        serialize_size += field22.computeDataSize(fieldNumber: 22)
      }
      if hasEpochTimestampMs {
        serialize_size += epochTimestampMs.computeUInt64Size(fieldNumber: 23)
      }
      var dataSizeRequestHashes:Int32 = 0
      for oneValuerequestHashes in requestHashes {
          dataSizeRequestHashes += oneValuerequestHashes.computeInt64SizeNoTag()
      }
      serialize_size += dataSizeRequestHashes
      if !requestHashes.isEmpty {
        serialize_size += 2
        serialize_size += dataSizeRequestHashes.computeInt32SizeNoTag()
      }
      requestHashesMemoizedSerializedSize = dataSizeRequestHashes
      if hasField25 {
        serialize_size += field25.computeUInt64Size(fieldNumber: 25)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
      return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
      return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
      return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if !field1.isEmpty {
        var jsonArrayField1:Array<Dictionary<String,Any>> = []
          for oneValueField1 in field1 {
            let ecodedMessageField1 = try oneValueField1.encode()
            jsonArrayField1.append(ecodedMessageField1)
          }
        jsonMap["field1"] = jsonArrayField1
      }
      if hasTimestampMsSinceStart {
        jsonMap["timestampMsSinceStart"] = "\(timestampMsSinceStart)"
      }
      if hasField3 {
        jsonMap["field3"] = field3
      }
      if !locationUpdates.isEmpty {
        var jsonArrayLocationUpdates:Array<Dictionary<String,Any>> = []
          for oneValueLocationUpdates in locationUpdates {
            let ecodedMessageLocationUpdates = try oneValueLocationUpdates.encode()
            jsonArrayLocationUpdates.append(ecodedMessageLocationUpdates)
          }
        jsonMap["locationUpdates"] = jsonArrayLocationUpdates
      }
      if !androidGpsInfo.isEmpty {
        var jsonArrayAndroidGpsInfo:Array<Dictionary<String,Any>> = []
          for oneValueAndroidGpsInfo in androidGpsInfo {
            let ecodedMessageAndroidGpsInfo = try oneValueAndroidGpsInfo.encode()
            jsonArrayAndroidGpsInfo.append(ecodedMessageAndroidGpsInfo)
          }
        jsonMap["androidGpsInfo"] = jsonArrayAndroidGpsInfo
      }
      if !field6.isEmpty {
        var jsonArrayField6:Array<Dictionary<String,Any>> = []
          for oneValueField6 in field6 {
            let ecodedMessageField6 = try oneValueField6.encode()
            jsonArrayField6.append(ecodedMessageField6)
          }
        jsonMap["field6"] = jsonArrayField6
      }
      if !sensorUpdates.isEmpty {
        var jsonArraySensorUpdates:Array<Dictionary<String,Any>> = []
          for oneValueSensorUpdates in sensorUpdates {
            let ecodedMessageSensorUpdates = try oneValueSensorUpdates.encode()
            jsonArraySensorUpdates.append(ecodedMessageSensorUpdates)
          }
        jsonMap["sensorUpdates"] = jsonArraySensorUpdates
      }
      if hasDeviceInfo {
        jsonMap["deviceInfo"] = try deviceInfo.encode()
      }
      if hasIosDeviceInfo {
        jsonMap["iosDeviceInfo"] = try iosDeviceInfo.encode()
      }
      if hasLocationHashByTokenSeed {
        jsonMap["locationHashByTokenSeed"] = Int(locationHashByTokenSeed)
      }
      if hasField11 {
        jsonMap["field11"] = field11
      }
      if hasField12 {
        jsonMap["field12"] = field12
      }
      if hasField13 {
        jsonMap["field13"] = Int(field13)
      }
      if hasField14 {
        jsonMap["field14"] = Int(field14)
      }
      if hasField15 {
        jsonMap["field15"] = field15
      }
      if hasField16 {
        jsonMap["field16"] = Int(field16)
      }
      if hasField17 {
        jsonMap["field17"] = field17
      }
      if hasField18 {
        jsonMap["field18"] = field18
      }
      if hasField19 {
        jsonMap["field19"] = field19
      }
      if hasLocationHash {
        jsonMap["locationHash"] = Int(locationHash)
      }
      if hasField21 {
        jsonMap["field21"] = field21
      }
      if hasField22 {
        jsonMap["field22"] = field22.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
      }
      if hasEpochTimestampMs {
        jsonMap["epochTimestampMs"] = "\(epochTimestampMs)"
      }
      if !requestHashes.isEmpty {
        var jsonArrayRequestHashes:Array<String> = []
          for oneValueRequestHashes in requestHashes {
            jsonArrayRequestHashes.append("\(oneValueRequestHashes)")
          }
        jsonMap["requestHashes"] = jsonArrayRequestHashes
      }
      if hasField25 {
        jsonMap["field25"] = "\(field25)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
      return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
      return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var field1ElementIndex:Int = 0
      for oneElementField1 in field1 {
          output += "\(indent) field1[\(field1ElementIndex)] {\n"
          output += try oneElementField1.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          field1ElementIndex += 1
      }
      if hasTimestampMsSinceStart {
        output += "\(indent) timestampMsSinceStart: \(timestampMsSinceStart) \n"
      }
      if hasField3 {
        output += "\(indent) field3: \(field3) \n"
      }
      var locationUpdatesElementIndex:Int = 0
      for oneElementLocationUpdates in locationUpdates {
          output += "\(indent) locationUpdates[\(locationUpdatesElementIndex)] {\n"
          output += try oneElementLocationUpdates.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          locationUpdatesElementIndex += 1
      }
      var androidGpsInfoElementIndex:Int = 0
      for oneElementAndroidGpsInfo in androidGpsInfo {
          output += "\(indent) androidGpsInfo[\(androidGpsInfoElementIndex)] {\n"
          output += try oneElementAndroidGpsInfo.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          androidGpsInfoElementIndex += 1
      }
      var field6ElementIndex:Int = 0
      for oneElementField6 in field6 {
          output += "\(indent) field6[\(field6ElementIndex)] {\n"
          output += try oneElementField6.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          field6ElementIndex += 1
      }
      var sensorUpdatesElementIndex:Int = 0
      for oneElementSensorUpdates in sensorUpdates {
          output += "\(indent) sensorUpdates[\(sensorUpdatesElementIndex)] {\n"
          output += try oneElementSensorUpdates.getDescription(indent: "\(indent)  ")
          output += "\(indent)}\n"
          sensorUpdatesElementIndex += 1
      }
      if hasDeviceInfo {
        output += "\(indent) deviceInfo {\n"
        if let outDescDeviceInfo = deviceInfo {
          output += try outDescDeviceInfo.getDescription(indent: "\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasIosDeviceInfo {
        output += "\(indent) iosDeviceInfo {\n"
        if let outDescIosDeviceInfo = iosDeviceInfo {
          output += try outDescIosDeviceInfo.getDescription(indent: "\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLocationHashByTokenSeed {
        output += "\(indent) locationHashByTokenSeed: \(locationHashByTokenSeed) \n"
      }
      if hasField11 {
        output += "\(indent) field11: \(field11) \n"
      }
      if hasField12 {
        output += "\(indent) field12: \(field12) \n"
      }
      if hasField13 {
        output += "\(indent) field13: \(field13) \n"
      }
      if hasField14 {
        output += "\(indent) field14: \(field14) \n"
      }
      if hasField15 {
        output += "\(indent) field15: \(field15) \n"
      }
      if hasField16 {
        output += "\(indent) field16: \(field16) \n"
      }
      if hasField17 {
        output += "\(indent) field17: \(field17) \n"
      }
      if hasField18 {
        output += "\(indent) field18: \(field18) \n"
      }
      if hasField19 {
        output += "\(indent) field19: \(field19) \n"
      }
      if hasLocationHash {
        output += "\(indent) locationHash: \(locationHash) \n"
      }
      if hasField21 {
        output += "\(indent) field21: \(field21) \n"
      }
      if hasField22 {
        output += "\(indent) field22: \(field22) \n"
      }
      if hasEpochTimestampMs {
        output += "\(indent) epochTimestampMs: \(epochTimestampMs) \n"
      }
      var requestHashesElementIndex:Int = 0
      for oneValueRequestHashes in requestHashes  {
          output += "\(indent) requestHashes[\(requestHashesElementIndex)]: \(oneValueRequestHashes)\n"
          requestHashesElementIndex += 1
      }
      if hasField25 {
        output += "\(indent) field25: \(field25) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementField1 in field1 {
                hashCode = (hashCode &* 31) &+ oneElementField1.hashValue
            }
            if hasTimestampMsSinceStart {
               hashCode = (hashCode &* 31) &+ timestampMsSinceStart.hashValue
            }
            if hasField3 {
               hashCode = (hashCode &* 31) &+ field3.hashValue
            }
            for oneElementLocationUpdates in locationUpdates {
                hashCode = (hashCode &* 31) &+ oneElementLocationUpdates.hashValue
            }
            for oneElementAndroidGpsInfo in androidGpsInfo {
                hashCode = (hashCode &* 31) &+ oneElementAndroidGpsInfo.hashValue
            }
            for oneElementField6 in field6 {
                hashCode = (hashCode &* 31) &+ oneElementField6.hashValue
            }
            for oneElementSensorUpdates in sensorUpdates {
                hashCode = (hashCode &* 31) &+ oneElementSensorUpdates.hashValue
            }
            if hasDeviceInfo {
                if let hashValuedeviceInfo = deviceInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedeviceInfo
                }
            }
            if hasIosDeviceInfo {
                if let hashValueiosDeviceInfo = iosDeviceInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueiosDeviceInfo
                }
            }
            if hasLocationHashByTokenSeed {
               hashCode = (hashCode &* 31) &+ locationHashByTokenSeed.hashValue
            }
            if hasField11 {
               hashCode = (hashCode &* 31) &+ field11.hashValue
            }
            if hasField12 {
               hashCode = (hashCode &* 31) &+ field12.hashValue
            }
            if hasField13 {
               hashCode = (hashCode &* 31) &+ field13.hashValue
            }
            if hasField14 {
               hashCode = (hashCode &* 31) &+ field14.hashValue
            }
            if hasField15 {
               hashCode = (hashCode &* 31) &+ field15.hashValue
            }
            if hasField16 {
               hashCode = (hashCode &* 31) &+ field16.hashValue
            }
            if hasField17 {
               hashCode = (hashCode &* 31) &+ field17.hashValue
            }
            if hasField18 {
               hashCode = (hashCode &* 31) &+ field18.hashValue
            }
            if hasField19 {
               hashCode = (hashCode &* 31) &+ field19.hashValue
            }
            if hasLocationHash {
               hashCode = (hashCode &* 31) &+ locationHash.hashValue
            }
            if hasField21 {
               hashCode = (hashCode &* 31) &+ field21.hashValue
            }
            if hasField22 {
               hashCode = (hashCode &* 31) &+ field22.hashValue
            }
            if hasEpochTimestampMs {
               hashCode = (hashCode &* 31) &+ epochTimestampMs.hashValue
            }
            for oneValueRequestHashes in requestHashes {
                hashCode = (hashCode &* 31) &+ oneValueRequestHashes.hashValue
            }
            if hasField25 {
               hashCode = (hashCode &* 31) &+ field25.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.SignalAgglomUpdates"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var field1:Array<Pogoprotos.Networking.Envelopes.UnknownMessage> {
           get {
               return builderResult.field1
           }
           set (value) {
               builderResult.field1 = value
           }
      }
      @discardableResult
      public func setField1(_ value:Array<Pogoprotos.Networking.Envelopes.UnknownMessage>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field1 = value
        return self
      }
      @discardableResult
      public func clearField1() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        builderResult.field1.removeAll(keepingCapacity: false)
        return self
      }
      public var hasTimestampMsSinceStart:Bool {
           get {
                return builderResult.hasTimestampMsSinceStart
           }
      }
      public var timestampMsSinceStart:Int64 {
           get {
                return builderResult.timestampMsSinceStart
           }
           set (value) {
               builderResult.hasTimestampMsSinceStart = true
               builderResult.timestampMsSinceStart = value
           }
      }
      @discardableResult
      public func setTimestampMsSinceStart(_ value:Int64) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.timestampMsSinceStart = value
        return self
      }
      @discardableResult
      public func clearTimestampMsSinceStart() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasTimestampMsSinceStart = false
           builderResult.timestampMsSinceStart = Int64(0)
           return self
      }
      public var hasField3:Bool {
           get {
                return builderResult.hasField3
           }
      }
      public var field3:String {
           get {
                return builderResult.field3
           }
           set (value) {
               builderResult.hasField3 = true
               builderResult.field3 = value
           }
      }
      @discardableResult
      public func setField3(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field3 = value
        return self
      }
      @discardableResult
      public func clearField3() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField3 = false
           builderResult.field3 = ""
           return self
      }
      public var locationUpdates:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate> {
           get {
               return builderResult.locationUpdates
           }
           set (value) {
               builderResult.locationUpdates = value
           }
      }
      @discardableResult
      public func setLocationUpdates(_ value:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.locationUpdates = value
        return self
      }
      @discardableResult
      public func clearLocationUpdates() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        builderResult.locationUpdates.removeAll(keepingCapacity: false)
        return self
      }
      public var androidGpsInfo:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo> {
           get {
               return builderResult.androidGpsInfo
           }
           set (value) {
               builderResult.androidGpsInfo = value
           }
      }
      @discardableResult
      public func setAndroidGpsInfo(_ value:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.androidGpsInfo = value
        return self
      }
      @discardableResult
      public func clearAndroidGpsInfo() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        builderResult.androidGpsInfo.removeAll(keepingCapacity: false)
        return self
      }
      public var field6:Array<Pogoprotos.Networking.Envelopes.UnknownMessage> {
           get {
               return builderResult.field6
           }
           set (value) {
               builderResult.field6 = value
           }
      }
      @discardableResult
      public func setField6(_ value:Array<Pogoprotos.Networking.Envelopes.UnknownMessage>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field6 = value
        return self
      }
      @discardableResult
      public func clearField6() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        builderResult.field6.removeAll(keepingCapacity: false)
        return self
      }
      public var sensorUpdates:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate> {
           get {
               return builderResult.sensorUpdates
           }
           set (value) {
               builderResult.sensorUpdates = value
           }
      }
      @discardableResult
      public func setSensorUpdates(_ value:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.sensorUpdates = value
        return self
      }
      @discardableResult
      public func clearSensorUpdates() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        builderResult.sensorUpdates.removeAll(keepingCapacity: false)
        return self
      }
      public var hasDeviceInfo:Bool {
           get {
               return builderResult.hasDeviceInfo
           }
      }
      public var deviceInfo:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo! {
           get {
               if deviceInfoBuilder_ != nil {
                  builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
               }
               return builderResult.deviceInfo
           }
           set (value) {
               builderResult.hasDeviceInfo = true
               builderResult.deviceInfo = value
           }
      }
      fileprivate var deviceInfoBuilder_:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder! {
           didSet {
              builderResult.hasDeviceInfo = true
           }
      }
      public func getDeviceInfoBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder {
        if deviceInfoBuilder_ == nil {
           deviceInfoBuilder_ = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder()
           builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
           if deviceInfo != nil {
              try! deviceInfoBuilder_.mergeFrom(other: deviceInfo)
           }
        }
        return deviceInfoBuilder_
      }
      @discardableResult
      public func setDeviceInfo(_ value:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo!) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.deviceInfo = value
        return self
      }
      @discardableResult
      public func mergeDeviceInfo(value:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        if builderResult.hasDeviceInfo {
          builderResult.deviceInfo = try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.builderWithPrototype(prototype:builderResult.deviceInfo).mergeFrom(other: value).buildPartial()
        } else {
          builderResult.deviceInfo = value
        }
        builderResult.hasDeviceInfo = true
        return self
      }
      @discardableResult
      public func clearDeviceInfo() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        deviceInfoBuilder_ = nil
        builderResult.hasDeviceInfo = false
        builderResult.deviceInfo = nil
        return self
      }
      public var hasIosDeviceInfo:Bool {
           get {
               return builderResult.hasIosDeviceInfo
           }
      }
      public var iosDeviceInfo:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo! {
           get {
               if iosDeviceInfoBuilder_ != nil {
                  builderResult.iosDeviceInfo = iosDeviceInfoBuilder_.getMessage()
               }
               return builderResult.iosDeviceInfo
           }
           set (value) {
               builderResult.hasIosDeviceInfo = true
               builderResult.iosDeviceInfo = value
           }
      }
      fileprivate var iosDeviceInfoBuilder_:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder! {
           didSet {
              builderResult.hasIosDeviceInfo = true
           }
      }
      public func getIosDeviceInfoBuilder() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder {
        if iosDeviceInfoBuilder_ == nil {
           iosDeviceInfoBuilder_ = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder()
           builderResult.iosDeviceInfo = iosDeviceInfoBuilder_.getMessage()
           if iosDeviceInfo != nil {
              try! iosDeviceInfoBuilder_.mergeFrom(other: iosDeviceInfo)
           }
        }
        return iosDeviceInfoBuilder_
      }
      @discardableResult
      public func setIosDeviceInfo(_ value:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo!) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.iosDeviceInfo = value
        return self
      }
      @discardableResult
      public func mergeIosDeviceInfo(value:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        if builderResult.hasIosDeviceInfo {
          builderResult.iosDeviceInfo = try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.builderWithPrototype(prototype:builderResult.iosDeviceInfo).mergeFrom(other: value).buildPartial()
        } else {
          builderResult.iosDeviceInfo = value
        }
        builderResult.hasIosDeviceInfo = true
        return self
      }
      @discardableResult
      public func clearIosDeviceInfo() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        iosDeviceInfoBuilder_ = nil
        builderResult.hasIosDeviceInfo = false
        builderResult.iosDeviceInfo = nil
        return self
      }
      public var hasLocationHashByTokenSeed:Bool {
           get {
                return builderResult.hasLocationHashByTokenSeed
           }
      }
      public var locationHashByTokenSeed:Int32 {
           get {
                return builderResult.locationHashByTokenSeed
           }
           set (value) {
               builderResult.hasLocationHashByTokenSeed = true
               builderResult.locationHashByTokenSeed = value
           }
      }
      @discardableResult
      public func setLocationHashByTokenSeed(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.locationHashByTokenSeed = value
        return self
      }
      @discardableResult
      public func clearLocationHashByTokenSeed() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasLocationHashByTokenSeed = false
           builderResult.locationHashByTokenSeed = Int32(0)
           return self
      }
      public var hasField11:Bool {
           get {
                return builderResult.hasField11
           }
      }
      public var field11:Bool {
           get {
                return builderResult.field11
           }
           set (value) {
               builderResult.hasField11 = true
               builderResult.field11 = value
           }
      }
      @discardableResult
      public func setField11(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field11 = value
        return self
      }
      @discardableResult
      public func clearField11() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField11 = false
           builderResult.field11 = false
           return self
      }
      public var hasField12:Bool {
           get {
                return builderResult.hasField12
           }
      }
      public var field12:Bool {
           get {
                return builderResult.field12
           }
           set (value) {
               builderResult.hasField12 = true
               builderResult.field12 = value
           }
      }
      @discardableResult
      public func setField12(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field12 = value
        return self
      }
      @discardableResult
      public func clearField12() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField12 = false
           builderResult.field12 = false
           return self
      }
      public var hasField13:Bool {
           get {
                return builderResult.hasField13
           }
      }
      public var field13:Int32 {
           get {
                return builderResult.field13
           }
           set (value) {
               builderResult.hasField13 = true
               builderResult.field13 = value
           }
      }
      @discardableResult
      public func setField13(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field13 = value
        return self
      }
      @discardableResult
      public func clearField13() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField13 = false
           builderResult.field13 = Int32(0)
           return self
      }
      public var hasField14:Bool {
           get {
                return builderResult.hasField14
           }
      }
      public var field14:Int32 {
           get {
                return builderResult.field14
           }
           set (value) {
               builderResult.hasField14 = true
               builderResult.field14 = value
           }
      }
      @discardableResult
      public func setField14(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field14 = value
        return self
      }
      @discardableResult
      public func clearField14() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField14 = false
           builderResult.field14 = Int32(0)
           return self
      }
      public var hasField15:Bool {
           get {
                return builderResult.hasField15
           }
      }
      public var field15:String {
           get {
                return builderResult.field15
           }
           set (value) {
               builderResult.hasField15 = true
               builderResult.field15 = value
           }
      }
      @discardableResult
      public func setField15(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field15 = value
        return self
      }
      @discardableResult
      public func clearField15() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField15 = false
           builderResult.field15 = ""
           return self
      }
      public var hasField16:Bool {
           get {
                return builderResult.hasField16
           }
      }
      public var field16:Int32 {
           get {
                return builderResult.field16
           }
           set (value) {
               builderResult.hasField16 = true
               builderResult.field16 = value
           }
      }
      @discardableResult
      public func setField16(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field16 = value
        return self
      }
      @discardableResult
      public func clearField16() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField16 = false
           builderResult.field16 = Int32(0)
           return self
      }
      public var hasField17:Bool {
           get {
                return builderResult.hasField17
           }
      }
      public var field17:String {
           get {
                return builderResult.field17
           }
           set (value) {
               builderResult.hasField17 = true
               builderResult.field17 = value
           }
      }
      @discardableResult
      public func setField17(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field17 = value
        return self
      }
      @discardableResult
      public func clearField17() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField17 = false
           builderResult.field17 = ""
           return self
      }
      public var hasField18:Bool {
           get {
                return builderResult.hasField18
           }
      }
      public var field18:String {
           get {
                return builderResult.field18
           }
           set (value) {
               builderResult.hasField18 = true
               builderResult.field18 = value
           }
      }
      @discardableResult
      public func setField18(_ value:String) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field18 = value
        return self
      }
      @discardableResult
      public func clearField18() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField18 = false
           builderResult.field18 = ""
           return self
      }
      public var hasField19:Bool {
           get {
                return builderResult.hasField19
           }
      }
      public var field19:Bool {
           get {
                return builderResult.field19
           }
           set (value) {
               builderResult.hasField19 = true
               builderResult.field19 = value
           }
      }
      @discardableResult
      public func setField19(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field19 = value
        return self
      }
      @discardableResult
      public func clearField19() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField19 = false
           builderResult.field19 = false
           return self
      }
      public var hasLocationHash:Bool {
           get {
                return builderResult.hasLocationHash
           }
      }
      public var locationHash:Int32 {
           get {
                return builderResult.locationHash
           }
           set (value) {
               builderResult.hasLocationHash = true
               builderResult.locationHash = value
           }
      }
      @discardableResult
      public func setLocationHash(_ value:Int32) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.locationHash = value
        return self
      }
      @discardableResult
      public func clearLocationHash() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasLocationHash = false
           builderResult.locationHash = Int32(0)
           return self
      }
      public var hasField21:Bool {
           get {
                return builderResult.hasField21
           }
      }
      public var field21:Bool {
           get {
                return builderResult.field21
           }
           set (value) {
               builderResult.hasField21 = true
               builderResult.field21 = value
           }
      }
      @discardableResult
      public func setField21(_ value:Bool) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field21 = value
        return self
      }
      @discardableResult
      public func clearField21() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField21 = false
           builderResult.field21 = false
           return self
      }
      public var hasField22:Bool {
           get {
                return builderResult.hasField22
           }
      }
      public var field22:Data {
           get {
                return builderResult.field22
           }
           set (value) {
               builderResult.hasField22 = true
               builderResult.field22 = value
           }
      }
      @discardableResult
      public func setField22(_ value:Data) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field22 = value
        return self
      }
      @discardableResult
      public func clearField22() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField22 = false
           builderResult.field22 = Data()
           return self
      }
      public var hasEpochTimestampMs:Bool {
           get {
                return builderResult.hasEpochTimestampMs
           }
      }
      public var epochTimestampMs:UInt64 {
           get {
                return builderResult.epochTimestampMs
           }
           set (value) {
               builderResult.hasEpochTimestampMs = true
               builderResult.epochTimestampMs = value
           }
      }
      @discardableResult
      public func setEpochTimestampMs(_ value:UInt64) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.epochTimestampMs = value
        return self
      }
      @discardableResult
      public func clearEpochTimestampMs() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasEpochTimestampMs = false
           builderResult.epochTimestampMs = UInt64(0)
           return self
      }
      public var requestHashes:Array<Int64> {
           get {
               return builderResult.requestHashes
           }
           set (array) {
               builderResult.requestHashes = array
           }
      }
      @discardableResult
      public func setRequestHashes(_ value:Array<Int64>) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.requestHashes = value
        return self
      }
      @discardableResult
      public func clearRequestHashes() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
         builderResult.requestHashes.removeAll(keepingCapacity: false)
         return self
      }
      public var hasField25:Bool {
           get {
                return builderResult.hasField25
           }
      }
      public var field25:UInt64 {
           get {
                return builderResult.field25
           }
           set (value) {
               builderResult.hasField25 = true
               builderResult.field25 = value
           }
      }
      @discardableResult
      public func setField25(_ value:UInt64) -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        self.field25 = value
        return self
      }
      @discardableResult
      public func clearField25() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder{
           builderResult.hasField25 = false
           builderResult.field25 = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
        let returnMe:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        if other == Pogoprotos.Networking.Envelopes.SignalAgglomUpdates() {
         return self
        }
        if !other.field1.isEmpty  {
           builderResult.field1 += other.field1
        }
        if other.hasTimestampMsSinceStart {
             timestampMsSinceStart = other.timestampMsSinceStart
        }
        if other.hasField3 {
             field3 = other.field3
        }
        if !other.locationUpdates.isEmpty  {
           builderResult.locationUpdates += other.locationUpdates
        }
        if !other.androidGpsInfo.isEmpty  {
           builderResult.androidGpsInfo += other.androidGpsInfo
        }
        if !other.field6.isEmpty  {
           builderResult.field6 += other.field6
        }
        if !other.sensorUpdates.isEmpty  {
           builderResult.sensorUpdates += other.sensorUpdates
        }
        if (other.hasDeviceInfo) {
            try mergeDeviceInfo(value: other.deviceInfo)
        }
        if (other.hasIosDeviceInfo) {
            try mergeIosDeviceInfo(value: other.iosDeviceInfo)
        }
        if other.hasLocationHashByTokenSeed {
             locationHashByTokenSeed = other.locationHashByTokenSeed
        }
        if other.hasField11 {
             field11 = other.field11
        }
        if other.hasField12 {
             field12 = other.field12
        }
        if other.hasField13 {
             field13 = other.field13
        }
        if other.hasField14 {
             field14 = other.field14
        }
        if other.hasField15 {
             field15 = other.field15
        }
        if other.hasField16 {
             field16 = other.field16
        }
        if other.hasField17 {
             field17 = other.field17
        }
        if other.hasField18 {
             field18 = other.field18
        }
        if other.hasField19 {
             field19 = other.field19
        }
        if other.hasLocationHash {
             locationHash = other.locationHash
        }
        if other.hasField21 {
             field21 = other.field21
        }
        if other.hasField22 {
             field22 = other.field22
        }
        if other.hasEpochTimestampMs {
             epochTimestampMs = other.epochTimestampMs
        }
        if !other.requestHashes.isEmpty {
            builderResult.requestHashes += other.requestHashes
        }
        if other.hasField25 {
             field25 = other.field25
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder = Pogoprotos.Networking.Envelopes.UnknownMessage.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            field1.append(subBuilder.buildPartial())

          case 16:
            timestampMsSinceStart = try codedInputStream.readInt64()

          case 26:
            field3 = try codedInputStream.readString()

          case 34:
            let subBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            locationUpdates.append(subBuilder.buildPartial())

          case 42:
            let subBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            androidGpsInfo.append(subBuilder.buildPartial())

          case 50:
            let subBuilder = Pogoprotos.Networking.Envelopes.UnknownMessage.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            field6.append(subBuilder.buildPartial())

          case 58:
            let subBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder()
            try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
            sensorUpdates.append(subBuilder.buildPartial())

          case 66:
            let subBuilder:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder()
            if hasDeviceInfo {
              try subBuilder.mergeFrom(other: deviceInfo)
            }
            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
            deviceInfo = subBuilder.buildPartial()

          case 74:
            let subBuilder:Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder()
            if hasIosDeviceInfo {
              try subBuilder.mergeFrom(other: iosDeviceInfo)
            }
            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
            iosDeviceInfo = subBuilder.buildPartial()

          case 80:
            locationHashByTokenSeed = try codedInputStream.readInt32()

          case 88:
            field11 = try codedInputStream.readBool()

          case 96:
            field12 = try codedInputStream.readBool()

          case 104:
            field13 = try codedInputStream.readInt32()

          case 112:
            field14 = try codedInputStream.readInt32()

          case 122:
            field15 = try codedInputStream.readString()

          case 128:
            field16 = try codedInputStream.readInt32()

          case 138:
            field17 = try codedInputStream.readString()

          case 146:
            field18 = try codedInputStream.readString()

          case 152:
            field19 = try codedInputStream.readBool()

          case 160:
            locationHash = try codedInputStream.readInt32()

          case 168:
            field21 = try codedInputStream.readBool()

          case 178:
            field22 = try codedInputStream.readData()

          case 184:
            epochTimestampMs = try codedInputStream.readUInt64()

          case 194:
            let length = Int(try codedInputStream.readRawVarint32())
            let limit = try codedInputStream.pushLimit(byteLimit: length)
            while (codedInputStream.bytesUntilLimit() > 0) {
              builderResult.requestHashes.append(try codedInputStream.readInt64())
            }
            codedInputStream.popLimit(oldLimit: limit)

          case 200:
            field25 = try codedInputStream.readUInt64()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder()
        if let jsonValueField1 = jsonMap["field1"] as? Array<Dictionary<String,Any>> {
          var jsonArrayField1:Array<Pogoprotos.Networking.Envelopes.UnknownMessage> = []
          for oneValueField1 in jsonValueField1 {
            let messageFromStringField1 = try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder.decodeToBuilder(jsonMap:oneValueField1).build()

            jsonArrayField1.append(messageFromStringField1)
          }
          resultDecodedBuilder.field1 = jsonArrayField1
        }
        if let jsonValueTimestampMsSinceStart = jsonMap["timestampMsSinceStart"] as? String {
          resultDecodedBuilder.timestampMsSinceStart = Int64(jsonValueTimestampMsSinceStart)!
        }
        if let jsonValueField3 = jsonMap["field3"] as? String {
          resultDecodedBuilder.field3 = jsonValueField3
        }
        if let jsonValueLocationUpdates = jsonMap["locationUpdates"] as? Array<Dictionary<String,Any>> {
          var jsonArrayLocationUpdates:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate> = []
          for oneValueLocationUpdates in jsonValueLocationUpdates {
            let messageFromStringLocationUpdates = try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder.decodeToBuilder(jsonMap:oneValueLocationUpdates).build()

            jsonArrayLocationUpdates.append(messageFromStringLocationUpdates)
          }
          resultDecodedBuilder.locationUpdates = jsonArrayLocationUpdates
        }
        if let jsonValueAndroidGpsInfo = jsonMap["androidGpsInfo"] as? Array<Dictionary<String,Any>> {
          var jsonArrayAndroidGpsInfo:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo> = []
          for oneValueAndroidGpsInfo in jsonValueAndroidGpsInfo {
            let messageFromStringAndroidGpsInfo = try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder.decodeToBuilder(jsonMap:oneValueAndroidGpsInfo).build()

            jsonArrayAndroidGpsInfo.append(messageFromStringAndroidGpsInfo)
          }
          resultDecodedBuilder.androidGpsInfo = jsonArrayAndroidGpsInfo
        }
        if let jsonValueField6 = jsonMap["field6"] as? Array<Dictionary<String,Any>> {
          var jsonArrayField6:Array<Pogoprotos.Networking.Envelopes.UnknownMessage> = []
          for oneValueField6 in jsonValueField6 {
            let messageFromStringField6 = try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder.decodeToBuilder(jsonMap:oneValueField6).build()

            jsonArrayField6.append(messageFromStringField6)
          }
          resultDecodedBuilder.field6 = jsonArrayField6
        }
        if let jsonValueSensorUpdates = jsonMap["sensorUpdates"] as? Array<Dictionary<String,Any>> {
          var jsonArraySensorUpdates:Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate> = []
          for oneValueSensorUpdates in jsonValueSensorUpdates {
            let messageFromStringSensorUpdates = try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder.decodeToBuilder(jsonMap:oneValueSensorUpdates).build()

            jsonArraySensorUpdates.append(messageFromStringSensorUpdates)
          }
          resultDecodedBuilder.sensorUpdates = jsonArraySensorUpdates
        }
        if let jsonValueDeviceInfo = jsonMap["deviceInfo"] as? Dictionary<String,Any> {
          resultDecodedBuilder.deviceInfo = try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder.decodeToBuilder(jsonMap:jsonValueDeviceInfo).build()

        }
        if let jsonValueIosDeviceInfo = jsonMap["iosDeviceInfo"] as? Dictionary<String,Any> {
          resultDecodedBuilder.iosDeviceInfo = try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder.decodeToBuilder(jsonMap:jsonValueIosDeviceInfo).build()

        }
        if let jsonValueLocationHashByTokenSeed = jsonMap["locationHashByTokenSeed"] as? Int {
          resultDecodedBuilder.locationHashByTokenSeed = Int32(jsonValueLocationHashByTokenSeed)
        }
        if let jsonValueField11 = jsonMap["field11"] as? Bool {
          resultDecodedBuilder.field11 = jsonValueField11
        }
        if let jsonValueField12 = jsonMap["field12"] as? Bool {
          resultDecodedBuilder.field12 = jsonValueField12
        }
        if let jsonValueField13 = jsonMap["field13"] as? Int {
          resultDecodedBuilder.field13 = Int32(jsonValueField13)
        }
        if let jsonValueField14 = jsonMap["field14"] as? Int {
          resultDecodedBuilder.field14 = Int32(jsonValueField14)
        }
        if let jsonValueField15 = jsonMap["field15"] as? String {
          resultDecodedBuilder.field15 = jsonValueField15
        }
        if let jsonValueField16 = jsonMap["field16"] as? Int {
          resultDecodedBuilder.field16 = Int32(jsonValueField16)
        }
        if let jsonValueField17 = jsonMap["field17"] as? String {
          resultDecodedBuilder.field17 = jsonValueField17
        }
        if let jsonValueField18 = jsonMap["field18"] as? String {
          resultDecodedBuilder.field18 = jsonValueField18
        }
        if let jsonValueField19 = jsonMap["field19"] as? Bool {
          resultDecodedBuilder.field19 = jsonValueField19
        }
        if let jsonValueLocationHash = jsonMap["locationHash"] as? Int {
          resultDecodedBuilder.locationHash = Int32(jsonValueLocationHash)
        }
        if let jsonValueField21 = jsonMap["field21"] as? Bool {
          resultDecodedBuilder.field21 = jsonValueField21
        }
        if let jsonValueField22 = jsonMap["field22"] as? String {
          resultDecodedBuilder.field22 = Data(base64Encoded:jsonValueField22, options: Data.Base64DecodingOptions(rawValue:0))!
        }
        if let jsonValueEpochTimestampMs = jsonMap["epochTimestampMs"] as? String {
          resultDecodedBuilder.epochTimestampMs = UInt64(jsonValueEpochTimestampMs)!
        }
        if let jsonValueRequestHashes = jsonMap["requestHashes"] as? Array<String> {
          var jsonArrayRequestHashes:Array<Int64> = []
          for oneValueRequestHashes in jsonValueRequestHashes {
            jsonArrayRequestHashes.append(Int64(oneValueRequestHashes)!)
          }
          resultDecodedBuilder.requestHashes = jsonArrayRequestHashes
        }
        if let jsonValueField25 = jsonMap["field25"] as? String {
          resultDecodedBuilder.field25 = UInt64(jsonValueField25)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  // Just a junk message to denote that we don't currently know what message something is.
  final public class UnknownMessage : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Envelopes.UnknownMessage, rhs: Pogoprotos.Networking.Envelopes.UnknownMessage) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
      return Pogoprotos.Networking.Envelopes.UnknownMessage.classBuilder() as! Pogoprotos.Networking.Envelopes.UnknownMessage.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.UnknownMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.UnknownMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Envelopes.UnknownMessage.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
      return try Pogoprotos.Networking.Envelopes.UnknownMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.UnknownMessage) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
      return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      let jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
      return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
      return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.UnknownMessage"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.UnknownMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Envelopes.UnknownMessage = Pogoprotos.Networking.Envelopes.UnknownMessage()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.UnknownMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.UnknownMessage()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
        return try Pogoprotos.Networking.Envelopes.UnknownMessage.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.UnknownMessage {
        let returnMe:Pogoprotos.Networking.Envelopes.UnknownMessage = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.UnknownMessage) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
        if other == Pogoprotos.Networking.Envelopes.UnknownMessage() {
         return self
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.UnknownMessage.Builder()
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Networking.Envelopes.AuthTicket: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.AuthTicket> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.AuthTicket>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket? {
    return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
    return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
    return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
    return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
    return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
    return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
    return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.RequestEnvelope: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope? {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo? {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt? {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest? {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest {
    return try Pogoprotos.Networking.Envelopes.RequestEnvelope.PlatformRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.ResponseEnvelope: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope? {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse? {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse {
    return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.PlatformResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.SignalAgglomUpdates: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates? {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate? {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.LocationUpdate.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo? {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.IosdeviceInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate? {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.SensorUpdate.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo? {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.DeviceInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo? {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo {
    return try Pogoprotos.Networking.Envelopes.SignalAgglomUpdates.AndroidGpsInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Envelopes.UnknownMessage: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Envelopes.UnknownMessage> {
    var mergedArray = Array<Pogoprotos.Networking.Envelopes.UnknownMessage>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage? {
    return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
    return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
    return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
    return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
    return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
    return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.UnknownMessage {
    return try Pogoprotos.Networking.Envelopes.UnknownMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
