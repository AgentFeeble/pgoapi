// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Networking.Envelopes.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public func == (lhs: Pogoprotos.Networking.Envelopes.AuthTicket, rhs: Pogoprotos.Networking.Envelopes.AuthTicket) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStart == rhs.hasStart) && (!lhs.hasStart || lhs.start == rhs.start)
  fieldCheck = fieldCheck && (lhs.hasExpireTimestampMs == rhs.hasExpireTimestampMs) && (!lhs.hasExpireTimestampMs || lhs.expireTimestampMs == rhs.expireTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasEnd == rhs.hasEnd) && (!lhs.hasEnd || lhs.end == rhs.end)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  fieldCheck = fieldCheck && (lhs.requests == rhs.requests)
  fieldCheck = fieldCheck && (lhs.unknown6 == rhs.unknown6)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
  fieldCheck = fieldCheck && (lhs.hasAuthInfo == rhs.hasAuthInfo) && (!lhs.hasAuthInfo || lhs.authInfo == rhs.authInfo)
  fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
  fieldCheck = fieldCheck && (lhs.hasUnknown12 == rhs.hasUnknown12) && (!lhs.hasUnknown12 || lhs.unknown12 == rhs.unknown12)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasContents == rhs.hasContents) && (!lhs.hasContents || lhs.contents == rhs.contents)
  fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope, rhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  fieldCheck = fieldCheck && (lhs.hasApiUrl == rhs.hasApiUrl) && (!lhs.hasApiUrl || lhs.apiUrl == rhs.apiUrl)
  fieldCheck = fieldCheck && (lhs.unknown6 == rhs.unknown6)
  fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
  fieldCheck = fieldCheck && (lhs.returns == rhs.returns)
  fieldCheck = fieldCheck && (lhs.hasError == rhs.hasError) && (!lhs.hasError || lhs.error == rhs.error)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7, rhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUnknown71 == rhs.hasUnknown71) && (!lhs.hasUnknown71 || lhs.unknown71 == rhs.unknown71)
  fieldCheck = fieldCheck && (lhs.hasUnknown72 == rhs.hasUnknown72) && (!lhs.hasUnknown72 || lhs.unknown72 == rhs.unknown72)
  fieldCheck = fieldCheck && (lhs.hasUnknown73 == rhs.hasUnknown73) && (!lhs.hasUnknown73 || lhs.unknown73 == rhs.unknown73)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6, rhs: Pogoprotos.Networking.Envelopes.Unknown6) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRequestType == rhs.hasRequestType) && (!lhs.hasRequestType || lhs.requestType == rhs.requestType)
  fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6.Unknown2, rhs: Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUnknown1 == rhs.hasUnknown1) && (!lhs.hasUnknown1 || lhs.unknown1 == rhs.unknown1)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResponseType == rhs.hasResponseType) && (!lhs.hasResponseType || lhs.responseType == rhs.responseType)
  fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUnknown1 == rhs.hasUnknown1) && (!lhs.hasUnknown1 || lhs.unknown1 == rhs.unknown1)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.playerCurrencies == rhs.playerCurrencies)
  fieldCheck = fieldCheck && (lhs.hasUnknown4 == rhs.hasUnknown4) && (!lhs.hasUnknown4 || lhs.unknown4 == rhs.unknown4)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasIsIap == rhs.hasIsIap) && (!lhs.hasIsIap || lhs.isIap == rhs.isIap)
  fieldCheck = fieldCheck && (lhs.hasCurrencyToBuy == rhs.hasCurrencyToBuy) && (!lhs.hasCurrencyToBuy || lhs.currencyToBuy == rhs.currencyToBuy)
  fieldCheck = fieldCheck && (lhs.hasYieldsCurrency == rhs.hasYieldsCurrency) && (!lhs.hasYieldsCurrency || lhs.yieldsCurrency == rhs.yieldsCurrency)
  fieldCheck = fieldCheck && (lhs.hasYieldsItem == rhs.hasYieldsItem) && (!lhs.hasYieldsItem || lhs.yieldsItem == rhs.yieldsItem)
  fieldCheck = fieldCheck && (lhs.tags == rhs.tags)
  fieldCheck = fieldCheck && (lhs.hasUnknown7 == rhs.hasUnknown7) && (!lhs.hasUnknown7 || lhs.unknown7 == rhs.unknown7)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Envelopes {
  public struct PogoprotosNetworkingEnvelopesRoot {
    public static var sharedInstance : PogoprotosNetworkingEnvelopesRoot {
     struct Static {
         static let instance : PogoprotosNetworkingEnvelopesRoot = PogoprotosNetworkingEnvelopesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Networking.Requests.PogoprotosNetworkingRequestsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.PogoprotosInventoryItemRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AuthTicket : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasStart:Bool = false
    public private(set) var start:NSData = NSData()

    public private(set) var hasExpireTimestampMs:Bool = false
    public private(set) var expireTimestampMs:UInt64 = UInt64(0)

    public private(set) var hasEnd:Bool = false
    public private(set) var end:NSData = NSData()

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStart {
        try output.writeData(1, value:start)
      }
      if hasExpireTimestampMs {
        try output.writeUInt64(2, value:expireTimestampMs)
      }
      if hasEnd {
        try output.writeData(3, value:end)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStart {
        serialize_size += start.computeDataSize(1)
      }
      if hasExpireTimestampMs {
        serialize_size += expireTimestampMs.computeUInt64Size(2)
      }
      if hasEnd {
        serialize_size += end.computeDataSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.AuthTicket> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.AuthTicket>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket? {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStart {
        jsonMap["start"] = start.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      if hasExpireTimestampMs {
        jsonMap["expireTimestampMs"] = "\(expireTimestampMs)"
      }
      if hasEnd {
        jsonMap["end"] = end.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStart {
        output += "\(indent) start: \(start) \n"
      }
      if hasExpireTimestampMs {
        output += "\(indent) expireTimestampMs: \(expireTimestampMs) \n"
      }
      if hasEnd {
        output += "\(indent) end: \(end) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStart {
               hashCode = (hashCode &* 31) &+ start.hashValue
            }
            if hasExpireTimestampMs {
               hashCode = (hashCode &* 31) &+ expireTimestampMs.hashValue
            }
            if hasEnd {
               hashCode = (hashCode &* 31) &+ end.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.AuthTicket.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.AuthTicket = Pogoprotos.Networking.Envelopes.AuthTicket()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.AuthTicket {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStart:Bool {
           get {
                return builderResult.hasStart
           }
      }
      public var start:NSData {
           get {
                return builderResult.start
           }
           set (value) {
               builderResult.hasStart = true
               builderResult.start = value
           }
      }
      public func setStart(value:NSData) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.start = value
        return self
      }
      public func clearStart() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasStart = false
           builderResult.start = NSData()
           return self
      }
      public var hasExpireTimestampMs:Bool {
           get {
                return builderResult.hasExpireTimestampMs
           }
      }
      public var expireTimestampMs:UInt64 {
           get {
                return builderResult.expireTimestampMs
           }
           set (value) {
               builderResult.hasExpireTimestampMs = true
               builderResult.expireTimestampMs = value
           }
      }
      public func setExpireTimestampMs(value:UInt64) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.expireTimestampMs = value
        return self
      }
      public func clearExpireTimestampMs() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasExpireTimestampMs = false
           builderResult.expireTimestampMs = UInt64(0)
           return self
      }
      public var hasEnd:Bool {
           get {
                return builderResult.hasEnd
           }
      }
      public var end:NSData {
           get {
                return builderResult.end
           }
           set (value) {
               builderResult.hasEnd = true
               builderResult.end = value
           }
      }
      public func setEnd(value:NSData) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.end = value
        return self
      }
      public func clearEnd() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasEnd = false
           builderResult.end = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.AuthTicket()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.AuthTicket {
        let returnMe:Pogoprotos.Networking.Envelopes.AuthTicket = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if other == Pogoprotos.Networking.Envelopes.AuthTicket() {
         return self
        }
        if other.hasStart {
             start = other.start
        }
        if other.hasExpireTimestampMs {
             expireTimestampMs = other.expireTimestampMs
        }
        if other.hasEnd {
             end = other.end
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            start = try input.readData()

          case 16:
            expireTimestampMs = try input.readUInt64()

          case 26:
            end = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
        if let jsonValueStart = jsonMap["start"] as? String {
          resultDecodedBuilder.start = NSData(base64EncodedString:jsonValueStart, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        if let jsonValueExpireTimestampMs = jsonMap["expireTimestampMs"] as? String {
          resultDecodedBuilder.expireTimestampMs = UInt64(jsonValueExpireTimestampMs)!
        }
        if let jsonValueEnd = jsonMap["end"] as? String {
          resultDecodedBuilder.end = NSData(base64EncodedString:jsonValueEnd, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class RequestEnvelope : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class AuthInfo : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final public class Jwt : GeneratedMessage, GeneratedMessageProtocol {
            public private(set) var hasContents:Bool = false
            public private(set) var contents:String = ""

            public private(set) var hasUnknown2:Bool = false
            public private(set) var unknown2:Int32 = Int32(0)

            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
              if hasContents {
                try output.writeString(1, value:contents)
              }
              if hasUnknown2 {
                try output.writeInt32(2, value:unknown2)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasContents {
                serialize_size += contents.computeStringSize(1)
              }
              if hasUnknown2 {
                serialize_size += unknown2.computeInt32Size(2)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt> {
              var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt? {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            override public class func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            override public func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(self)
            }
            public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(prototype)
            }
            override public func encode() throws -> Dictionary<String,AnyObject> {
              guard isInitialized() else {
                throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
              }

              var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
              if hasContents {
                jsonMap["contents"] = contents
              }
              if hasUnknown2 {
                jsonMap["unknown2"] = NSNumber(int:unknown2)
              }
              return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonMap).build()
            }
            override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.fromJSONToBuilder(data).build()
            }
            override public func getDescription(indent:String) throws -> String {
              var output = ""
              if hasContents {
                output += "\(indent) contents: \(contents) \n"
              }
              if hasUnknown2 {
                output += "\(indent) unknown2: \(unknown2) \n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasContents {
                       hashCode = (hashCode &* 31) &+ contents.hashValue
                    }
                    if hasUnknown2 {
                       hashCode = (hashCode &* 31) &+ unknown2.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            override public func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
              public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasContents:Bool {
                   get {
                        return builderResult.hasContents
                   }
              }
              public var contents:String {
                   get {
                        return builderResult.contents
                   }
                   set (value) {
                       builderResult.hasContents = true
                       builderResult.contents = value
                   }
              }
              public func setContents(value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.contents = value
                return self
              }
              public func clearContents() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasContents = false
                   builderResult.contents = ""
                   return self
              }
              public var hasUnknown2:Bool {
                   get {
                        return builderResult.hasUnknown2
                   }
              }
              public var unknown2:Int32 {
                   get {
                        return builderResult.unknown2
                   }
                   set (value) {
                       builderResult.hasUnknown2 = true
                       builderResult.unknown2 = value
                   }
              }
              public func setUnknown2(value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.unknown2 = value
                return self
              }
              public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasUnknown2 = false
                   builderResult.unknown2 = Int32(0)
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
                return self
              }
              override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(builderResult)
              }
              override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = builderResult
                return returnMe
              }
              public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt() {
                 return self
                }
                if other.hasContents {
                     contents = other.contents
                }
                if other.hasUnknown2 {
                     unknown2 = other.unknown2
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 10:
                    contents = try input.readString()

                  case 16:
                    unknown2 = try input.readInt32()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
              override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if let jsonValueContents = jsonMap["contents"] as? String {
                  resultDecodedBuilder.contents = jsonValueContents
                }
                if let jsonValueUnknown2 = jsonMap["unknown2"] as? NSNumber {
                  resultDecodedBuilder.unknown2 = jsonValueUnknown2.intValue
                }
                return resultDecodedBuilder
              }
              override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                  throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                }
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsDataCast)
              }
            }

          }

        //Nested type declaration end

        public private(set) var hasProvider:Bool = false
        public private(set) var provider:String = ""

        public private(set) var hasToken:Bool = false
        public private(set) var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasProvider {
            try output.writeString(1, value:provider)
          }
          if hasToken {
            try output.writeMessage(2, value:token)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasProvider {
            serialize_size += provider.computeStringSize(1)
          }
          if hasToken {
              if let varSizetoken = token?.computeMessageSize(2) {
                  serialize_size += varSizetoken
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo? {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasProvider {
            jsonMap["provider"] = provider
          }
          if hasToken {
            jsonMap["token"] = try token.encode()
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasProvider {
            output += "\(indent) provider: \(provider) \n"
          }
          if hasToken {
            output += "\(indent) token {\n"
            if let outDescToken = token {
              output += try outDescToken.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasProvider {
                   hashCode = (hashCode &* 31) &+ provider.hashValue
                }
                if hasToken {
                    if let hashValuetoken = token?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetoken
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasProvider:Bool {
               get {
                    return builderResult.hasProvider
               }
          }
          public var provider:String {
               get {
                    return builderResult.provider
               }
               set (value) {
                   builderResult.hasProvider = true
                   builderResult.provider = value
               }
          }
          public func setProvider(value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.provider = value
            return self
          }
          public func clearProvider() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder{
               builderResult.hasProvider = false
               builderResult.provider = ""
               return self
          }
          public var hasToken:Bool {
               get {
                   return builderResult.hasToken
               }
          }
          public var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt! {
               get {
                   if tokenBuilder_ != nil {
                      builderResult.token = tokenBuilder_.getMessage()
                   }
                   return builderResult.token
               }
               set (value) {
                   builderResult.hasToken = true
                   builderResult.token = value
               }
          }
          private var tokenBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder! {
               didSet {
                  builderResult.hasToken = true
               }
          }
          public func getTokenBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
            if tokenBuilder_ == nil {
               tokenBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
               builderResult.token = tokenBuilder_.getMessage()
               if token != nil {
                  try! tokenBuilder_.mergeFrom(token)
               }
            }
            return tokenBuilder_
          }
          public func setToken(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.token = value
            return self
          }
          public func mergeToken(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if builderResult.hasToken {
              builderResult.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(builderResult.token).mergeFrom(value).buildPartial()
            } else {
              builderResult.token = value
            }
            builderResult.hasToken = true
            return self
          }
          public func clearToken() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            tokenBuilder_ = nil
            builderResult.hasToken = false
            builderResult.token = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo() {
             return self
            }
            if other.hasProvider {
                 provider = other.provider
            }
            if (other.hasToken) {
                try mergeToken(other.token)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                provider = try input.readString()

              case 18:
                let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if hasToken {
                  try subBuilder.mergeFrom(token)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                token = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if let jsonValueProvider = jsonMap["provider"] as? String {
              resultDecodedBuilder.provider = jsonValueProvider
            }
            if let jsonValueToken = jsonMap["token"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonValueToken).build()

            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public private(set) var hasStatusCode:Bool = false
    public private(set) var statusCode:Int32 = Int32(0)

    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:UInt64 = UInt64(0)

    public private(set) var requests:Array<Pogoprotos.Networking.Requests.Request>  = Array<Pogoprotos.Networking.Requests.Request>()
    public private(set) var unknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6>  = Array<Pogoprotos.Networking.Envelopes.Unknown6>()
    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    public private(set) var hasAltitude:Bool = false
    public private(set) var altitude:Double = Double(0)

    public private(set) var hasAuthInfo:Bool = false
    public private(set) var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!
    public private(set) var hasAuthTicket:Bool = false
    public private(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public private(set) var hasUnknown12:Bool = false
    public private(set) var unknown12:Int64 = Int64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStatusCode {
        try output.writeInt32(1, value:statusCode)
      }
      if hasRequestId {
        try output.writeUInt64(3, value:requestId)
      }
      for oneElementRequests in requests {
          try output.writeMessage(4, value:oneElementRequests)
      }
      for oneElementUnknown6 in unknown6 {
          try output.writeMessage(6, value:oneElementUnknown6)
      }
      if hasLatitude {
        try output.writeDouble(7, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(8, value:longitude)
      }
      if hasAltitude {
        try output.writeDouble(9, value:altitude)
      }
      if hasAuthInfo {
        try output.writeMessage(10, value:authInfo)
      }
      if hasAuthTicket {
        try output.writeMessage(11, value:authTicket)
      }
      if hasUnknown12 {
        try output.writeInt64(12, value:unknown12)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStatusCode {
        serialize_size += statusCode.computeInt32Size(1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(3)
      }
      for oneElementRequests in requests {
          serialize_size += oneElementRequests.computeMessageSize(4)
      }
      for oneElementUnknown6 in unknown6 {
          serialize_size += oneElementUnknown6.computeMessageSize(6)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(7)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(8)
      }
      if hasAltitude {
        serialize_size += altitude.computeDoubleSize(9)
      }
      if hasAuthInfo {
          if let varSizeauthInfo = authInfo?.computeMessageSize(10) {
              serialize_size += varSizeauthInfo
          }
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(11) {
              serialize_size += varSizeauthTicket
          }
      }
      if hasUnknown12 {
        serialize_size += unknown12.computeInt64Size(12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope? {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStatusCode {
        jsonMap["statusCode"] = NSNumber(int:statusCode)
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if !requests.isEmpty {
        var jsonArrayRequests:Array<Dictionary<String,AnyObject>> = []
          for oneValueRequests in requests {
            let ecodedMessageRequests = try oneValueRequests.encode()
            jsonArrayRequests += [ecodedMessageRequests]
          }
        jsonMap["requests"] = jsonArrayRequests
      }
      if !unknown6.isEmpty {
        var jsonArrayUnknown6:Array<Dictionary<String,AnyObject>> = []
          for oneValueUnknown6 in unknown6 {
            let ecodedMessageUnknown6 = try oneValueUnknown6.encode()
            jsonArrayUnknown6 += [ecodedMessageUnknown6]
          }
        jsonMap["unknown6"] = jsonArrayUnknown6
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasAltitude {
        jsonMap["altitude"] = NSNumber(double:altitude)
      }
      if hasAuthInfo {
        jsonMap["authInfo"] = try authInfo.encode()
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if hasUnknown12 {
        jsonMap["unknown12"] = "\(unknown12)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStatusCode {
        output += "\(indent) statusCode: \(statusCode) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      var requestsElementIndex:Int = 0
      for oneElementRequests in requests {
          output += "\(indent) requests[\(requestsElementIndex)] {\n"
          output += try oneElementRequests.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          requestsElementIndex += 1
      }
      var unknown6ElementIndex:Int = 0
      for oneElementUnknown6 in unknown6 {
          output += "\(indent) unknown6[\(unknown6ElementIndex)] {\n"
          output += try oneElementUnknown6.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          unknown6ElementIndex += 1
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasAltitude {
        output += "\(indent) altitude: \(altitude) \n"
      }
      if hasAuthInfo {
        output += "\(indent) authInfo {\n"
        if let outDescAuthInfo = authInfo {
          output += try outDescAuthInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasUnknown12 {
        output += "\(indent) unknown12: \(unknown12) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ statusCode.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            for oneElementRequests in requests {
                hashCode = (hashCode &* 31) &+ oneElementRequests.hashValue
            }
            for oneElementUnknown6 in unknown6 {
                hashCode = (hashCode &* 31) &+ oneElementUnknown6.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasAltitude {
               hashCode = (hashCode &* 31) &+ altitude.hashValue
            }
            if hasAuthInfo {
                if let hashValueauthInfo = authInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthInfo
                }
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            if hasUnknown12 {
               hashCode = (hashCode &* 31) &+ unknown12.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.RequestEnvelope.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope = Pogoprotos.Networking.Envelopes.RequestEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStatusCode:Bool {
           get {
                return builderResult.hasStatusCode
           }
      }
      public var statusCode:Int32 {
           get {
                return builderResult.statusCode
           }
           set (value) {
               builderResult.hasStatusCode = true
               builderResult.statusCode = value
           }
      }
      public func setStatusCode(value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.statusCode = value
        return self
      }
      public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasStatusCode = false
           builderResult.statusCode = Int32(0)
           return self
      }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      public func setRequestId(value:UInt64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requestId = value
        return self
      }
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var requests:Array<Pogoprotos.Networking.Requests.Request> {
           get {
               return builderResult.requests
           }
           set (value) {
               builderResult.requests = value
           }
      }
      public func setRequests(value:Array<Pogoprotos.Networking.Requests.Request>) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requests = value
        return self
      }
      public func clearRequests() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult.requests.removeAll(keepCapacity: false)
        return self
      }
      public var unknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6> {
           get {
               return builderResult.unknown6
           }
           set (value) {
               builderResult.unknown6 = value
           }
      }
      public func setUnknown6(value:Array<Pogoprotos.Networking.Envelopes.Unknown6>) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.unknown6 = value
        return self
      }
      public func clearUnknown6() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult.unknown6.removeAll(keepCapacity: false)
        return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasAltitude:Bool {
           get {
                return builderResult.hasAltitude
           }
      }
      public var altitude:Double {
           get {
                return builderResult.altitude
           }
           set (value) {
               builderResult.hasAltitude = true
               builderResult.altitude = value
           }
      }
      public func setAltitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.altitude = value
        return self
      }
      public func clearAltitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasAltitude = false
           builderResult.altitude = Double(0)
           return self
      }
      public var hasAuthInfo:Bool {
           get {
               return builderResult.hasAuthInfo
           }
      }
      public var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo! {
           get {
               if authInfoBuilder_ != nil {
                  builderResult.authInfo = authInfoBuilder_.getMessage()
               }
               return builderResult.authInfo
           }
           set (value) {
               builderResult.hasAuthInfo = true
               builderResult.authInfo = value
           }
      }
      private var authInfoBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder! {
           didSet {
              builderResult.hasAuthInfo = true
           }
      }
      public func getAuthInfoBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
        if authInfoBuilder_ == nil {
           authInfoBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
           builderResult.authInfo = authInfoBuilder_.getMessage()
           if authInfo != nil {
              try! authInfoBuilder_.mergeFrom(authInfo)
           }
        }
        return authInfoBuilder_
      }
      public func setAuthInfo(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authInfo = value
        return self
      }
      public func mergeAuthInfo(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthInfo {
          builderResult.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(builderResult.authInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.authInfo = value
        }
        builderResult.hasAuthInfo = true
        return self
      }
      public func clearAuthInfo() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authInfoBuilder_ = nil
        builderResult.hasAuthInfo = false
        builderResult.authInfo = nil
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      private var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(authTicket)
           }
        }
        return authTicketBuilder_
      }
      public func setAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authTicket = value
        return self
      }
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult.authTicket).mergeFrom(value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var hasUnknown12:Bool {
           get {
                return builderResult.hasUnknown12
           }
      }
      public var unknown12:Int64 {
           get {
                return builderResult.unknown12
           }
           set (value) {
               builderResult.hasUnknown12 = true
               builderResult.unknown12 = value
           }
      }
      public func setUnknown12(value:Int64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.unknown12 = value
        return self
      }
      public func clearUnknown12() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasUnknown12 = false
           builderResult.unknown12 = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.RequestEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if !other.requests.isEmpty  {
           builderResult.requests += other.requests
        }
        if !other.unknown6.isEmpty  {
           builderResult.unknown6 += other.unknown6
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasAltitude {
             altitude = other.altitude
        }
        if (other.hasAuthInfo) {
            try mergeAuthInfo(other.authInfo)
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(other.authTicket)
        }
        if other.hasUnknown12 {
             unknown12 = other.unknown12
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            statusCode = try input.readInt32()

          case 24:
            requestId = try input.readUInt64()

          case 34:
            let subBuilder = Pogoprotos.Networking.Requests.Request.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            requests += [subBuilder.buildPartial()]

          case 50:
            let subBuilder = Pogoprotos.Networking.Envelopes.Unknown6.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            unknown6 += [subBuilder.buildPartial()]

          case 57:
            latitude = try input.readDouble()

          case 65:
            longitude = try input.readDouble()

          case 73:
            altitude = try input.readDouble()

          case 82:
            let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if hasAuthInfo {
              try subBuilder.mergeFrom(authInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authInfo = subBuilder.buildPartial()

          case 90:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(authTicket)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 96:
            unknown12 = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? NSNumber {
          resultDecodedBuilder.statusCode = jsonValueStatusCode.intValue
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueRequests = jsonMap["requests"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayRequests:Array<Pogoprotos.Networking.Requests.Request> = []
          for oneValueRequests in jsonValueRequests {
            let messageFromStringRequests = try Pogoprotos.Networking.Requests.Request.Builder.decodeToBuilder(oneValueRequests).build()

            jsonArrayRequests += [messageFromStringRequests]
          }
          resultDecodedBuilder.requests = jsonArrayRequests
        }
        if let jsonValueUnknown6 = jsonMap["unknown6"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayUnknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6> = []
          for oneValueUnknown6 in jsonValueUnknown6 {
            let messageFromStringUnknown6 = try Pogoprotos.Networking.Envelopes.Unknown6.Builder.decodeToBuilder(oneValueUnknown6).build()

            jsonArrayUnknown6 += [messageFromStringUnknown6]
          }
          resultDecodedBuilder.unknown6 = jsonArrayUnknown6
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueAltitude = jsonMap["altitude"] as? NSNumber {
          resultDecodedBuilder.altitude = jsonValueAltitude.doubleValue
        }
        if let jsonValueAuthInfo = jsonMap["authInfo"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonValueAuthInfo).build()

        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonValueAuthTicket).build()

        }
        if let jsonValueUnknown12 = jsonMap["unknown12"] as? String {
          resultDecodedBuilder.unknown12 = Int64(jsonValueUnknown12)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class ResponseEnvelope : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Unknown7 : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasUnknown71:Bool = false
        public private(set) var unknown71:NSData = NSData()

        public private(set) var hasUnknown72:Bool = false
        public private(set) var unknown72:Int64 = Int64(0)

        public private(set) var hasUnknown73:Bool = false
        public private(set) var unknown73:NSData = NSData()

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUnknown71 {
            try output.writeData(1, value:unknown71)
          }
          if hasUnknown72 {
            try output.writeInt64(2, value:unknown72)
          }
          if hasUnknown73 {
            try output.writeData(3, value:unknown73)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUnknown71 {
            serialize_size += unknown71.computeDataSize(1)
          }
          if hasUnknown72 {
            serialize_size += unknown72.computeInt64Size(2)
          }
          if hasUnknown73 {
            serialize_size += unknown73.computeDataSize(3)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7? {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasUnknown71 {
            jsonMap["unknown71"] = unknown71.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          if hasUnknown72 {
            jsonMap["unknown72"] = "\(unknown72)"
          }
          if hasUnknown73 {
            jsonMap["unknown73"] = unknown73.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
          return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasUnknown71 {
            output += "\(indent) unknown71: \(unknown71) \n"
          }
          if hasUnknown72 {
            output += "\(indent) unknown72: \(unknown72) \n"
          }
          if hasUnknown73 {
            output += "\(indent) unknown73: \(unknown73) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUnknown71 {
                   hashCode = (hashCode &* 31) &+ unknown71.hashValue
                }
                if hasUnknown72 {
                   hashCode = (hashCode &* 31) &+ unknown72.hashValue
                }
                if hasUnknown73 {
                   hashCode = (hashCode &* 31) &+ unknown73.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUnknown71:Bool {
               get {
                    return builderResult.hasUnknown71
               }
          }
          public var unknown71:NSData {
               get {
                    return builderResult.unknown71
               }
               set (value) {
                   builderResult.hasUnknown71 = true
                   builderResult.unknown71 = value
               }
          }
          public func setUnknown71(value:NSData) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            self.unknown71 = value
            return self
          }
          public func clearUnknown71() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder{
               builderResult.hasUnknown71 = false
               builderResult.unknown71 = NSData()
               return self
          }
          public var hasUnknown72:Bool {
               get {
                    return builderResult.hasUnknown72
               }
          }
          public var unknown72:Int64 {
               get {
                    return builderResult.unknown72
               }
               set (value) {
                   builderResult.hasUnknown72 = true
                   builderResult.unknown72 = value
               }
          }
          public func setUnknown72(value:Int64) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            self.unknown72 = value
            return self
          }
          public func clearUnknown72() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder{
               builderResult.hasUnknown72 = false
               builderResult.unknown72 = Int64(0)
               return self
          }
          public var hasUnknown73:Bool {
               get {
                    return builderResult.hasUnknown73
               }
          }
          public var unknown73:NSData {
               get {
                    return builderResult.unknown73
               }
               set (value) {
                   builderResult.hasUnknown73 = true
                   builderResult.unknown73 = value
               }
          }
          public func setUnknown73(value:NSData) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            self.unknown73 = value
            return self
          }
          public func clearUnknown73() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder{
               builderResult.hasUnknown73 = false
               builderResult.unknown73 = NSData()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 {
            let returnMe:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            if other == Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7() {
             return self
            }
            if other.hasUnknown71 {
                 unknown71 = other.unknown71
            }
            if other.hasUnknown72 {
                 unknown72 = other.unknown72
            }
            if other.hasUnknown73 {
                 unknown73 = other.unknown73
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                unknown71 = try input.readData()

              case 16:
                unknown72 = try input.readInt64()

              case 26:
                unknown73 = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder()
            if let jsonValueUnknown71 = jsonMap["unknown71"] as? String {
              resultDecodedBuilder.unknown71 = NSData(base64EncodedString:jsonValueUnknown71, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            if let jsonValueUnknown72 = jsonMap["unknown72"] as? String {
              resultDecodedBuilder.unknown72 = Int64(jsonValueUnknown72)!
            }
            if let jsonValueUnknown73 = jsonMap["unknown73"] as? String {
              resultDecodedBuilder.unknown73 = NSData(base64EncodedString:jsonValueUnknown73, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Unknown7.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public private(set) var hasStatusCode:Bool = false
    public private(set) var statusCode:Int32 = Int32(0)

    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:UInt64 = UInt64(0)

    public private(set) var hasApiUrl:Bool = false
    public private(set) var apiUrl:String = ""

    public private(set) var unknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6Response>  = Array<Pogoprotos.Networking.Envelopes.Unknown6Response>()
    public private(set) var hasAuthTicket:Bool = false
    public private(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public private(set) var returns:Array<NSData> = Array<NSData>()
    public private(set) var hasError:Bool = false
    public private(set) var error:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStatusCode {
        try output.writeInt32(1, value:statusCode)
      }
      if hasRequestId {
        try output.writeUInt64(2, value:requestId)
      }
      if hasApiUrl {
        try output.writeString(3, value:apiUrl)
      }
      for oneElementUnknown6 in unknown6 {
          try output.writeMessage(6, value:oneElementUnknown6)
      }
      if hasAuthTicket {
        try output.writeMessage(7, value:authTicket)
      }
      if !returns.isEmpty {
        for oneValuereturns in returns {
          try output.writeData(100, value:oneValuereturns)
        }
      }
      if hasError {
        try output.writeString(101, value:error)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStatusCode {
        serialize_size += statusCode.computeInt32Size(1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(2)
      }
      if hasApiUrl {
        serialize_size += apiUrl.computeStringSize(3)
      }
      for oneElementUnknown6 in unknown6 {
          serialize_size += oneElementUnknown6.computeMessageSize(6)
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(7) {
              serialize_size += varSizeauthTicket
          }
      }
      var dataSizeReturns:Int32 = 0
      for oneValuereturns in returns {
          dataSizeReturns += oneValuereturns.computeDataSizeNoTag()
      }
      serialize_size += dataSizeReturns
      serialize_size += 2 * Int32(returns.count)
      if hasError {
        serialize_size += error.computeStringSize(101)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope? {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStatusCode {
        jsonMap["statusCode"] = NSNumber(int:statusCode)
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if hasApiUrl {
        jsonMap["apiUrl"] = apiUrl
      }
      if !unknown6.isEmpty {
        var jsonArrayUnknown6:Array<Dictionary<String,AnyObject>> = []
          for oneValueUnknown6 in unknown6 {
            let ecodedMessageUnknown6 = try oneValueUnknown6.encode()
            jsonArrayUnknown6 += [ecodedMessageUnknown6]
          }
        jsonMap["unknown6"] = jsonArrayUnknown6
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if !returns.isEmpty {
        var jsonArrayReturns:Array<String> = []
          for oneValueReturns in returns {
            jsonArrayReturns += [oneValueReturns.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))]
          }
        jsonMap["returns"] = jsonArrayReturns
      }
      if hasError {
        jsonMap["error"] = error
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStatusCode {
        output += "\(indent) statusCode: \(statusCode) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      if hasApiUrl {
        output += "\(indent) apiUrl: \(apiUrl) \n"
      }
      var unknown6ElementIndex:Int = 0
      for oneElementUnknown6 in unknown6 {
          output += "\(indent) unknown6[\(unknown6ElementIndex)] {\n"
          output += try oneElementUnknown6.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          unknown6ElementIndex += 1
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var returnsElementIndex:Int = 0
      for oneValueReturns in returns  {
          output += "\(indent) returns[\(returnsElementIndex)]: \(oneValueReturns)\n"
          returnsElementIndex += 1
      }
      if hasError {
        output += "\(indent) error: \(error) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ statusCode.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            if hasApiUrl {
               hashCode = (hashCode &* 31) &+ apiUrl.hashValue
            }
            for oneElementUnknown6 in unknown6 {
                hashCode = (hashCode &* 31) &+ oneElementUnknown6.hashValue
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            for oneValueReturns in returns {
                hashCode = (hashCode &* 31) &+ oneValueReturns.hashValue
            }
            if hasError {
               hashCode = (hashCode &* 31) &+ error.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.ResponseEnvelope.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.ResponseEnvelope = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStatusCode:Bool {
           get {
                return builderResult.hasStatusCode
           }
      }
      public var statusCode:Int32 {
           get {
                return builderResult.statusCode
           }
           set (value) {
               builderResult.hasStatusCode = true
               builderResult.statusCode = value
           }
      }
      public func setStatusCode(value:Int32) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.statusCode = value
        return self
      }
      public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasStatusCode = false
           builderResult.statusCode = Int32(0)
           return self
      }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      public func setRequestId(value:UInt64) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.requestId = value
        return self
      }
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var hasApiUrl:Bool {
           get {
                return builderResult.hasApiUrl
           }
      }
      public var apiUrl:String {
           get {
                return builderResult.apiUrl
           }
           set (value) {
               builderResult.hasApiUrl = true
               builderResult.apiUrl = value
           }
      }
      public func setApiUrl(value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.apiUrl = value
        return self
      }
      public func clearApiUrl() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasApiUrl = false
           builderResult.apiUrl = ""
           return self
      }
      public var unknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6Response> {
           get {
               return builderResult.unknown6
           }
           set (value) {
               builderResult.unknown6 = value
           }
      }
      public func setUnknown6(value:Array<Pogoprotos.Networking.Envelopes.Unknown6Response>) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.unknown6 = value
        return self
      }
      public func clearUnknown6() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        builderResult.unknown6.removeAll(keepCapacity: false)
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      private var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(authTicket)
           }
        }
        return authTicketBuilder_
      }
      public func setAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.authTicket = value
        return self
      }
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult.authTicket).mergeFrom(value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var returns:Array<NSData> {
           get {
               return builderResult.returns
           }
           set (array) {
               builderResult.returns = array
           }
      }
      public func setReturns(value:Array<NSData>) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.returns = value
        return self
      }
      public func clearReturns() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
         builderResult.returns.removeAll(keepCapacity: false)
         return self
      }
      public var hasError:Bool {
           get {
                return builderResult.hasError
           }
      }
      public var error:String {
           get {
                return builderResult.error
           }
           set (value) {
               builderResult.hasError = true
               builderResult.error = value
           }
      }
      public func setError(value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.error = value
        return self
      }
      public func clearError() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasError = false
           builderResult.error = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.ResponseEnvelope = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.ResponseEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if other.hasApiUrl {
             apiUrl = other.apiUrl
        }
        if !other.unknown6.isEmpty  {
           builderResult.unknown6 += other.unknown6
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(other.authTicket)
        }
        if !other.returns.isEmpty {
            builderResult.returns += other.returns
        }
        if other.hasError {
             error = other.error
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            statusCode = try input.readInt32()

          case 16:
            requestId = try input.readUInt64()

          case 26:
            apiUrl = try input.readString()

          case 50:
            let subBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            unknown6 += [subBuilder.buildPartial()]

          case 58:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(authTicket)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 802:
            returns += [try input.readData()]

          case 810:
            error = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? NSNumber {
          resultDecodedBuilder.statusCode = jsonValueStatusCode.intValue
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueApiUrl = jsonMap["apiUrl"] as? String {
          resultDecodedBuilder.apiUrl = jsonValueApiUrl
        }
        if let jsonValueUnknown6 = jsonMap["unknown6"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayUnknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6Response> = []
          for oneValueUnknown6 in jsonValueUnknown6 {
            let messageFromStringUnknown6 = try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.decodeToBuilder(oneValueUnknown6).build()

            jsonArrayUnknown6 += [messageFromStringUnknown6]
          }
          resultDecodedBuilder.unknown6 = jsonArrayUnknown6
        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonValueAuthTicket).build()

        }
        if let jsonValueReturns = jsonMap["returns"] as? Array<String> {
          var jsonArrayReturns:Array<NSData> = []
          for oneValueReturns in jsonValueReturns {
            jsonArrayReturns += [NSData(base64EncodedString:oneValueReturns, options: NSDataBase64DecodingOptions(rawValue:0))!]
          }
          resultDecodedBuilder.returns = jsonArrayReturns
        }
        if let jsonValueError = jsonMap["error"] as? String {
          resultDecodedBuilder.error = jsonValueError
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Unknown6 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Unknown2 : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasUnknown1:Bool = false
        public private(set) var unknown1:NSData = NSData()

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUnknown1 {
            try output.writeData(1, value:unknown1)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUnknown1 {
            serialize_size += unknown1.computeDataSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6.Unknown2> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6.Unknown2>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2? {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasUnknown1 {
            jsonMap["unknown1"] = unknown1.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasUnknown1 {
            output += "\(indent) unknown1: \(unknown1) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUnknown1 {
                   hashCode = (hashCode &* 31) &+ unknown1.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6.Unknown2"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6.Unknown2"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUnknown1:Bool {
               get {
                    return builderResult.hasUnknown1
               }
          }
          public var unknown1:NSData {
               get {
                    return builderResult.unknown1
               }
               set (value) {
                   builderResult.hasUnknown1 = true
                   builderResult.unknown1 = value
               }
          }
          public func setUnknown1(value:NSData) -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            self.unknown1 = value
            return self
          }
          public func clearUnknown1() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder{
               builderResult.hasUnknown1 = false
               builderResult.unknown1 = NSData()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
            let returnMe:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            if other == Pogoprotos.Networking.Envelopes.Unknown6.Unknown2() {
             return self
            }
            if other.hasUnknown1 {
                 unknown1 = other.unknown1
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                unknown1 = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
            if let jsonValueUnknown1 = jsonMap["unknown1"] as? String {
              resultDecodedBuilder.unknown1 = NSData(base64EncodedString:jsonValueUnknown1, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    // 5 for IAPs, 6 is unknown still
    public private(set) var hasRequestType:Bool = false
    public private(set) var requestType:Int32 = Int32(0)

    public private(set) var hasUnknown2:Bool = false
    public private(set) var unknown2:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasRequestType {
        try output.writeInt32(1, value:requestType)
      }
      if hasUnknown2 {
        try output.writeMessage(2, value:unknown2)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRequestType {
        serialize_size += requestType.computeInt32Size(1)
      }
      if hasUnknown2 {
          if let varSizeunknown2 = unknown2?.computeMessageSize(2) {
              serialize_size += varSizeunknown2
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6? {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return Pogoprotos.Networking.Envelopes.Unknown6.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasRequestType {
        jsonMap["requestType"] = NSNumber(int:requestType)
      }
      if hasUnknown2 {
        jsonMap["unknown2"] = try unknown2.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasRequestType {
        output += "\(indent) requestType: \(requestType) \n"
      }
      if hasUnknown2 {
        output += "\(indent) unknown2 {\n"
        if let outDescUnknown2 = unknown2 {
          output += try outDescUnknown2.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRequestType {
               hashCode = (hashCode &* 31) &+ requestType.hashValue
            }
            if hasUnknown2 {
                if let hashValueunknown2 = unknown2?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueunknown2
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.Unknown6.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6 = Pogoprotos.Networking.Envelopes.Unknown6()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasRequestType:Bool {
           get {
                return builderResult.hasRequestType
           }
      }
      public var requestType:Int32 {
           get {
                return builderResult.requestType
           }
           set (value) {
               builderResult.hasRequestType = true
               builderResult.requestType = value
           }
      }
      public func setRequestType(value:Int32) -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        self.requestType = value
        return self
      }
      public func clearRequestType() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder{
           builderResult.hasRequestType = false
           builderResult.requestType = Int32(0)
           return self
      }
      public var hasUnknown2:Bool {
           get {
               return builderResult.hasUnknown2
           }
      }
      public var unknown2:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2! {
           get {
               if unknown2Builder_ != nil {
                  builderResult.unknown2 = unknown2Builder_.getMessage()
               }
               return builderResult.unknown2
           }
           set (value) {
               builderResult.hasUnknown2 = true
               builderResult.unknown2 = value
           }
      }
      private var unknown2Builder_:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder! {
           didSet {
              builderResult.hasUnknown2 = true
           }
      }
      public func getUnknown2Builder() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
        if unknown2Builder_ == nil {
           unknown2Builder_ = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
           builderResult.unknown2 = unknown2Builder_.getMessage()
           if unknown2 != nil {
              try! unknown2Builder_.mergeFrom(unknown2)
           }
        }
        return unknown2Builder_
      }
      public func setUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2!) -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        self.unknown2 = value
        return self
      }
      public func mergeUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        if builderResult.hasUnknown2 {
          builderResult.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.builderWithPrototype(builderResult.unknown2).mergeFrom(value).buildPartial()
        } else {
          builderResult.unknown2 = value
        }
        builderResult.hasUnknown2 = true
        return self
      }
      public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        unknown2Builder_ = nil
        builderResult.hasUnknown2 = false
        builderResult.unknown2 = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.Unknown6()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        return try Pogoprotos.Networking.Envelopes.Unknown6.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6 {
        let returnMe:Pogoprotos.Networking.Envelopes.Unknown6 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        if other == Pogoprotos.Networking.Envelopes.Unknown6() {
         return self
        }
        if other.hasRequestType {
             requestType = other.requestType
        }
        if (other.hasUnknown2) {
            try mergeUnknown2(other.unknown2)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            requestType = try input.readInt32()

          case 18:
            let subBuilder:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
            if hasUnknown2 {
              try subBuilder.mergeFrom(unknown2)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            unknown2 = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6.Builder()
        if let jsonValueRequestType = jsonMap["requestType"] as? NSNumber {
          resultDecodedBuilder.requestType = jsonValueRequestType.intValue
        }
        if let jsonValueUnknown2 = jsonMap["unknown2"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.decodeToBuilder(jsonValueUnknown2).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.Unknown6.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Unknown6Response : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Unknown2 : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final public class StoreItem : GeneratedMessage, GeneratedMessageProtocol {


            //Nested type declaration start

              final public class Tag : GeneratedMessage, GeneratedMessageProtocol {
                public private(set) var hasKey:Bool = false
                public private(set) var key:String = ""

                public private(set) var hasValue:Bool = false
                public private(set) var value:String = ""

                required public init() {
                     super.init()
                }
                override public func isInitialized() -> Bool {
                 return true
                }
                override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
                  if hasKey {
                    try output.writeString(1, value:key)
                  }
                  if hasValue {
                    try output.writeString(2, value:value)
                  }
                  try unknownFields.writeToCodedOutputStream(output)
                }
                override public func serializedSize() -> Int32 {
                  var serialize_size:Int32 = memoizedSerializedSize
                  if serialize_size != -1 {
                   return serialize_size
                  }

                  serialize_size = 0
                  if hasKey {
                    serialize_size += key.computeStringSize(1)
                  }
                  if hasValue {
                    serialize_size += value.computeStringSize(2)
                  }
                  serialize_size += unknownFields.serializedSize()
                  memoizedSerializedSize = serialize_size
                  return serialize_size
                }
                public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag> {
                  var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>()
                  while let value = try parseFromDelimitedFromInputStream(input) {
                    mergedArray += [value]
                  }
                  return mergedArray
                }
                public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag? {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeDelimitedFromInputStream(input)?.build()
                }
                public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
                }
                public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                }
                public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromInputStream(input).build()
                }
                public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromCodedInputStream(input).build()
                }
                public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder
                }
                public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder
                }
                override public class func classBuilder() -> MessageBuilder {
                  return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                }
                override public func classBuilder() -> MessageBuilder {
                  return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                }
                public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.builderWithPrototype(self)
                }
                public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFrom(prototype)
                }
                override public func encode() throws -> Dictionary<String,AnyObject> {
                  guard isInitialized() else {
                    throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
                  }

                  var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
                  if hasKey {
                    jsonMap["key"] = key
                  }
                  if hasValue {
                    jsonMap["value"] = value
                  }
                  return jsonMap
                }
                override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.decodeToBuilder(jsonMap).build()
                }
                override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.fromJSONToBuilder(data).build()
                }
                override public func getDescription(indent:String) throws -> String {
                  var output = ""
                  if hasKey {
                    output += "\(indent) key: \(key) \n"
                  }
                  if hasValue {
                    output += "\(indent) value: \(value) \n"
                  }
                  output += unknownFields.getDescription(indent)
                  return output
                }
                override public var hashValue:Int {
                    get {
                        var hashCode:Int = 7
                        if hasKey {
                           hashCode = (hashCode &* 31) &+ key.hashValue
                        }
                        if hasValue {
                           hashCode = (hashCode &* 31) &+ value.hashValue
                        }
                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                        return hashCode
                    }
                }


                //Meta information declaration start

                override public class func className() -> String {
                    return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag"
                }
                override public func className() -> String {
                    return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag"
                }
                override public func classMetaType() -> GeneratedMessage.Type {
                    return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.self
                }
                //Meta information declaration end

                final public class Builder : GeneratedMessageBuilder {
                  private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag()
                  public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                      return builderResult
                  }

                  required override public init () {
                     super.init()
                  }
                  public var hasKey:Bool {
                       get {
                            return builderResult.hasKey
                       }
                  }
                  public var key:String {
                       get {
                            return builderResult.key
                       }
                       set (value) {
                           builderResult.hasKey = true
                           builderResult.key = value
                       }
                  }
                  public func setKey(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    self.key = value
                    return self
                  }
                  public func clearKey() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder{
                       builderResult.hasKey = false
                       builderResult.key = ""
                       return self
                  }
                  public var hasValue:Bool {
                       get {
                            return builderResult.hasValue
                       }
                  }
                  public var value:String {
                       get {
                            return builderResult.value
                       }
                       set (value) {
                           builderResult.hasValue = true
                           builderResult.value = value
                       }
                  }
                  public func setValue(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    self.value = value
                    return self
                  }
                  public func clearValue() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder{
                       builderResult.hasValue = false
                       builderResult.value = ""
                       return self
                  }
                  override public var internalGetResult:GeneratedMessage {
                       get {
                          return builderResult
                       }
                  }
                  override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag()
                    return self
                  }
                  override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.builderWithPrototype(builderResult)
                  }
                  override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                       try checkInitialized()
                       return buildPartial()
                  }
                  public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                    let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag = builderResult
                    return returnMe
                  }
                  public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    if other == Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag() {
                     return self
                    }
                    if other.hasKey {
                         key = other.key
                    }
                    if other.hasValue {
                         value = other.value
                    }
                    try mergeUnknownFields(other.unknownFields)
                    return self
                  }
                  override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                       return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                  }
                  override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                    while (true) {
                      let protobufTag = try input.readTag()
                      switch protobufTag {
                      case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                      case 10:
                        key = try input.readString()

                      case 18:
                        value = try input.readString()

                      default:
                        if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                           unknownFields = try unknownFieldsBuilder.build()
                           return self
                        }
                      }
                    }
                  }
                  override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                    if let jsonValueKey = jsonMap["key"] as? String {
                      resultDecodedBuilder.key = jsonValueKey
                    }
                    if let jsonValueValue = jsonMap["value"] as? String {
                      resultDecodedBuilder.value = jsonValueValue
                    }
                    return resultDecodedBuilder
                  }
                  override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                      throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.decodeToBuilder(jsDataCast)
                  }
                }

              }

            //Nested type declaration end

            // Internal ID (probably for Google Play/App Store) example: "pgorelease.incenseordinary.1"
            public private(set) var hasItemId:Bool = false
            public private(set) var itemId:String = ""

            // If true, this item is bought with real currency (USD, etc.) through the Play/App Store instead of Pokecoins
            public private(set) var hasIsIap:Bool = false
            public private(set) var isIap:Bool = false

            public private(set) var hasCurrencyToBuy:Bool = false
            public private(set) var currencyToBuy:Pogoprotos.Data.Player.Currency!
            public private(set) var hasYieldsCurrency:Bool = false
            public private(set) var yieldsCurrency:Pogoprotos.Data.Player.Currency!
            public private(set) var hasYieldsItem:Bool = false
            public private(set) var yieldsItem:Pogoprotos.Inventory.Item.ItemData!
            public private(set) var tags:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>  = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>()
            // Possibly something to toggle visibility in the store/purchasibility?
            public private(set) var hasUnknown7:Bool = false
            public private(set) var unknown7:Int32 = Int32(0)

            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
              if hasItemId {
                try output.writeString(1, value:itemId)
              }
              if hasIsIap {
                try output.writeBool(2, value:isIap)
              }
              if hasCurrencyToBuy {
                try output.writeMessage(3, value:currencyToBuy)
              }
              if hasYieldsCurrency {
                try output.writeMessage(4, value:yieldsCurrency)
              }
              if hasYieldsItem {
                try output.writeMessage(5, value:yieldsItem)
              }
              for oneElementTags in tags {
                  try output.writeMessage(6, value:oneElementTags)
              }
              if hasUnknown7 {
                try output.writeInt32(7, value:unknown7)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasItemId {
                serialize_size += itemId.computeStringSize(1)
              }
              if hasIsIap {
                serialize_size += isIap.computeBoolSize(2)
              }
              if hasCurrencyToBuy {
                  if let varSizecurrencyToBuy = currencyToBuy?.computeMessageSize(3) {
                      serialize_size += varSizecurrencyToBuy
                  }
              }
              if hasYieldsCurrency {
                  if let varSizeyieldsCurrency = yieldsCurrency?.computeMessageSize(4) {
                      serialize_size += varSizeyieldsCurrency
                  }
              }
              if hasYieldsItem {
                  if let varSizeyieldsItem = yieldsItem?.computeMessageSize(5) {
                      serialize_size += varSizeyieldsItem
                  }
              }
              for oneElementTags in tags {
                  serialize_size += oneElementTags.computeMessageSize(6)
              }
              if hasUnknown7 {
                serialize_size += unknown7.computeInt32Size(7)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem> {
              var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem? {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder
            }
            public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder
            }
            override public class func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
            }
            override public func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
            }
            public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.builderWithPrototype(self)
            }
            public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFrom(prototype)
            }
            override public func encode() throws -> Dictionary<String,AnyObject> {
              guard isInitialized() else {
                throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
              }

              var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
              if hasItemId {
                jsonMap["itemId"] = itemId
              }
              if hasIsIap {
                jsonMap["isIap"] = isIap
              }
              if hasCurrencyToBuy {
                jsonMap["currencyToBuy"] = try currencyToBuy.encode()
              }
              if hasYieldsCurrency {
                jsonMap["yieldsCurrency"] = try yieldsCurrency.encode()
              }
              if hasYieldsItem {
                jsonMap["yieldsItem"] = try yieldsItem.encode()
              }
              if !tags.isEmpty {
                var jsonArrayTags:Array<Dictionary<String,AnyObject>> = []
                  for oneValueTags in tags {
                    let ecodedMessageTags = try oneValueTags.encode()
                    jsonArrayTags += [ecodedMessageTags]
                  }
                jsonMap["tags"] = jsonArrayTags
              }
              if hasUnknown7 {
                jsonMap["unknown7"] = NSNumber(int:unknown7)
              }
              return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.decodeToBuilder(jsonMap).build()
            }
            override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.fromJSONToBuilder(data).build()
            }
            override public func getDescription(indent:String) throws -> String {
              var output = ""
              if hasItemId {
                output += "\(indent) itemId: \(itemId) \n"
              }
              if hasIsIap {
                output += "\(indent) isIap: \(isIap) \n"
              }
              if hasCurrencyToBuy {
                output += "\(indent) currencyToBuy {\n"
                if let outDescCurrencyToBuy = currencyToBuy {
                  output += try outDescCurrencyToBuy.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              if hasYieldsCurrency {
                output += "\(indent) yieldsCurrency {\n"
                if let outDescYieldsCurrency = yieldsCurrency {
                  output += try outDescYieldsCurrency.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              if hasYieldsItem {
                output += "\(indent) yieldsItem {\n"
                if let outDescYieldsItem = yieldsItem {
                  output += try outDescYieldsItem.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              var tagsElementIndex:Int = 0
              for oneElementTags in tags {
                  output += "\(indent) tags[\(tagsElementIndex)] {\n"
                  output += try oneElementTags.getDescription("\(indent)  ")
                  output += "\(indent)}\n"
                  tagsElementIndex += 1
              }
              if hasUnknown7 {
                output += "\(indent) unknown7: \(unknown7) \n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasItemId {
                       hashCode = (hashCode &* 31) &+ itemId.hashValue
                    }
                    if hasIsIap {
                       hashCode = (hashCode &* 31) &+ isIap.hashValue
                    }
                    if hasCurrencyToBuy {
                        if let hashValuecurrencyToBuy = currencyToBuy?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValuecurrencyToBuy
                        }
                    }
                    if hasYieldsCurrency {
                        if let hashValueyieldsCurrency = yieldsCurrency?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValueyieldsCurrency
                        }
                    }
                    if hasYieldsItem {
                        if let hashValueyieldsItem = yieldsItem?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValueyieldsItem
                        }
                    }
                    for oneElementTags in tags {
                        hashCode = (hashCode &* 31) &+ oneElementTags.hashValue
                    }
                    if hasUnknown7 {
                       hashCode = (hashCode &* 31) &+ unknown7.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem"
            }
            override public func className() -> String {
                return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem()
              public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasItemId:Bool {
                   get {
                        return builderResult.hasItemId
                   }
              }
              public var itemId:String {
                   get {
                        return builderResult.itemId
                   }
                   set (value) {
                       builderResult.hasItemId = true
                       builderResult.itemId = value
                   }
              }
              public func setItemId(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.itemId = value
                return self
              }
              public func clearItemId() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder{
                   builderResult.hasItemId = false
                   builderResult.itemId = ""
                   return self
              }
              public var hasIsIap:Bool {
                   get {
                        return builderResult.hasIsIap
                   }
              }
              public var isIap:Bool {
                   get {
                        return builderResult.isIap
                   }
                   set (value) {
                       builderResult.hasIsIap = true
                       builderResult.isIap = value
                   }
              }
              public func setIsIap(value:Bool) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.isIap = value
                return self
              }
              public func clearIsIap() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder{
                   builderResult.hasIsIap = false
                   builderResult.isIap = false
                   return self
              }
              public var hasCurrencyToBuy:Bool {
                   get {
                       return builderResult.hasCurrencyToBuy
                   }
              }
              public var currencyToBuy:Pogoprotos.Data.Player.Currency! {
                   get {
                       if currencyToBuyBuilder_ != nil {
                          builderResult.currencyToBuy = currencyToBuyBuilder_.getMessage()
                       }
                       return builderResult.currencyToBuy
                   }
                   set (value) {
                       builderResult.hasCurrencyToBuy = true
                       builderResult.currencyToBuy = value
                   }
              }
              private var currencyToBuyBuilder_:Pogoprotos.Data.Player.Currency.Builder! {
                   didSet {
                      builderResult.hasCurrencyToBuy = true
                   }
              }
              public func getCurrencyToBuyBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
                if currencyToBuyBuilder_ == nil {
                   currencyToBuyBuilder_ = Pogoprotos.Data.Player.Currency.Builder()
                   builderResult.currencyToBuy = currencyToBuyBuilder_.getMessage()
                   if currencyToBuy != nil {
                      try! currencyToBuyBuilder_.mergeFrom(currencyToBuy)
                   }
                }
                return currencyToBuyBuilder_
              }
              public func setCurrencyToBuy(value:Pogoprotos.Data.Player.Currency!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.currencyToBuy = value
                return self
              }
              public func mergeCurrencyToBuy(value:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if builderResult.hasCurrencyToBuy {
                  builderResult.currencyToBuy = try Pogoprotos.Data.Player.Currency.builderWithPrototype(builderResult.currencyToBuy).mergeFrom(value).buildPartial()
                } else {
                  builderResult.currencyToBuy = value
                }
                builderResult.hasCurrencyToBuy = true
                return self
              }
              public func clearCurrencyToBuy() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                currencyToBuyBuilder_ = nil
                builderResult.hasCurrencyToBuy = false
                builderResult.currencyToBuy = nil
                return self
              }
              public var hasYieldsCurrency:Bool {
                   get {
                       return builderResult.hasYieldsCurrency
                   }
              }
              public var yieldsCurrency:Pogoprotos.Data.Player.Currency! {
                   get {
                       if yieldsCurrencyBuilder_ != nil {
                          builderResult.yieldsCurrency = yieldsCurrencyBuilder_.getMessage()
                       }
                       return builderResult.yieldsCurrency
                   }
                   set (value) {
                       builderResult.hasYieldsCurrency = true
                       builderResult.yieldsCurrency = value
                   }
              }
              private var yieldsCurrencyBuilder_:Pogoprotos.Data.Player.Currency.Builder! {
                   didSet {
                      builderResult.hasYieldsCurrency = true
                   }
              }
              public func getYieldsCurrencyBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
                if yieldsCurrencyBuilder_ == nil {
                   yieldsCurrencyBuilder_ = Pogoprotos.Data.Player.Currency.Builder()
                   builderResult.yieldsCurrency = yieldsCurrencyBuilder_.getMessage()
                   if yieldsCurrency != nil {
                      try! yieldsCurrencyBuilder_.mergeFrom(yieldsCurrency)
                   }
                }
                return yieldsCurrencyBuilder_
              }
              public func setYieldsCurrency(value:Pogoprotos.Data.Player.Currency!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.yieldsCurrency = value
                return self
              }
              public func mergeYieldsCurrency(value:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if builderResult.hasYieldsCurrency {
                  builderResult.yieldsCurrency = try Pogoprotos.Data.Player.Currency.builderWithPrototype(builderResult.yieldsCurrency).mergeFrom(value).buildPartial()
                } else {
                  builderResult.yieldsCurrency = value
                }
                builderResult.hasYieldsCurrency = true
                return self
              }
              public func clearYieldsCurrency() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                yieldsCurrencyBuilder_ = nil
                builderResult.hasYieldsCurrency = false
                builderResult.yieldsCurrency = nil
                return self
              }
              public var hasYieldsItem:Bool {
                   get {
                       return builderResult.hasYieldsItem
                   }
              }
              public var yieldsItem:Pogoprotos.Inventory.Item.ItemData! {
                   get {
                       if yieldsItemBuilder_ != nil {
                          builderResult.yieldsItem = yieldsItemBuilder_.getMessage()
                       }
                       return builderResult.yieldsItem
                   }
                   set (value) {
                       builderResult.hasYieldsItem = true
                       builderResult.yieldsItem = value
                   }
              }
              private var yieldsItemBuilder_:Pogoprotos.Inventory.Item.ItemData.Builder! {
                   didSet {
                      builderResult.hasYieldsItem = true
                   }
              }
              public func getYieldsItemBuilder() -> Pogoprotos.Inventory.Item.ItemData.Builder {
                if yieldsItemBuilder_ == nil {
                   yieldsItemBuilder_ = Pogoprotos.Inventory.Item.ItemData.Builder()
                   builderResult.yieldsItem = yieldsItemBuilder_.getMessage()
                   if yieldsItem != nil {
                      try! yieldsItemBuilder_.mergeFrom(yieldsItem)
                   }
                }
                return yieldsItemBuilder_
              }
              public func setYieldsItem(value:Pogoprotos.Inventory.Item.ItemData!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.yieldsItem = value
                return self
              }
              public func mergeYieldsItem(value:Pogoprotos.Inventory.Item.ItemData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if builderResult.hasYieldsItem {
                  builderResult.yieldsItem = try Pogoprotos.Inventory.Item.ItemData.builderWithPrototype(builderResult.yieldsItem).mergeFrom(value).buildPartial()
                } else {
                  builderResult.yieldsItem = value
                }
                builderResult.hasYieldsItem = true
                return self
              }
              public func clearYieldsItem() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                yieldsItemBuilder_ = nil
                builderResult.hasYieldsItem = false
                builderResult.yieldsItem = nil
                return self
              }
              public var tags:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag> {
                   get {
                       return builderResult.tags
                   }
                   set (value) {
                       builderResult.tags = value
                   }
              }
              public func setTags(value:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.tags = value
                return self
              }
              public func clearTags() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                builderResult.tags.removeAll(keepCapacity: false)
                return self
              }
              public var hasUnknown7:Bool {
                   get {
                        return builderResult.hasUnknown7
                   }
              }
              public var unknown7:Int32 {
                   get {
                        return builderResult.unknown7
                   }
                   set (value) {
                       builderResult.hasUnknown7 = true
                       builderResult.unknown7 = value
                   }
              }
              public func setUnknown7(value:Int32) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.unknown7 = value
                return self
              }
              public func clearUnknown7() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder{
                   builderResult.hasUnknown7 = false
                   builderResult.unknown7 = Int32(0)
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem()
                return self
              }
              override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.builderWithPrototype(builderResult)
              }
              override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
                let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem = builderResult
                return returnMe
              }
              public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if other == Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem() {
                 return self
                }
                if other.hasItemId {
                     itemId = other.itemId
                }
                if other.hasIsIap {
                     isIap = other.isIap
                }
                if (other.hasCurrencyToBuy) {
                    try mergeCurrencyToBuy(other.currencyToBuy)
                }
                if (other.hasYieldsCurrency) {
                    try mergeYieldsCurrency(other.yieldsCurrency)
                }
                if (other.hasYieldsItem) {
                    try mergeYieldsItem(other.yieldsItem)
                }
                if !other.tags.isEmpty  {
                   builderResult.tags += other.tags
                }
                if other.hasUnknown7 {
                     unknown7 = other.unknown7
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 10:
                    itemId = try input.readString()

                  case 16:
                    isIap = try input.readBool()

                  case 26:
                    let subBuilder:Pogoprotos.Data.Player.Currency.Builder = Pogoprotos.Data.Player.Currency.Builder()
                    if hasCurrencyToBuy {
                      try subBuilder.mergeFrom(currencyToBuy)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    currencyToBuy = subBuilder.buildPartial()

                  case 34:
                    let subBuilder:Pogoprotos.Data.Player.Currency.Builder = Pogoprotos.Data.Player.Currency.Builder()
                    if hasYieldsCurrency {
                      try subBuilder.mergeFrom(yieldsCurrency)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    yieldsCurrency = subBuilder.buildPartial()

                  case 42:
                    let subBuilder:Pogoprotos.Inventory.Item.ItemData.Builder = Pogoprotos.Inventory.Item.ItemData.Builder()
                    if hasYieldsItem {
                      try subBuilder.mergeFrom(yieldsItem)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    yieldsItem = subBuilder.buildPartial()

                  case 50:
                    let subBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                    try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                    tags += [subBuilder.buildPartial()]

                  case 56:
                    unknown7 = try input.readInt32()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
              override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
                if let jsonValueItemId = jsonMap["itemId"] as? String {
                  resultDecodedBuilder.itemId = jsonValueItemId
                }
                if let jsonValueIsIap = jsonMap["isIap"] as? Bool {
                  resultDecodedBuilder.isIap = jsonValueIsIap
                }
                if let jsonValueCurrencyToBuy = jsonMap["currencyToBuy"] as? Dictionary<String,AnyObject> {
                  resultDecodedBuilder.currencyToBuy = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonValueCurrencyToBuy).build()

                }
                if let jsonValueYieldsCurrency = jsonMap["yieldsCurrency"] as? Dictionary<String,AnyObject> {
                  resultDecodedBuilder.yieldsCurrency = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonValueYieldsCurrency).build()

                }
                if let jsonValueYieldsItem = jsonMap["yieldsItem"] as? Dictionary<String,AnyObject> {
                  resultDecodedBuilder.yieldsItem = try Pogoprotos.Inventory.Item.ItemData.Builder.decodeToBuilder(jsonValueYieldsItem).build()

                }
                if let jsonValueTags = jsonMap["tags"] as? Array<Dictionary<String,AnyObject>> {
                  var jsonArrayTags:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag> = []
                  for oneValueTags in jsonValueTags {
                    let messageFromStringTags = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.decodeToBuilder(oneValueTags).build()

                    jsonArrayTags += [messageFromStringTags]
                  }
                  resultDecodedBuilder.tags = jsonArrayTags
                }
                if let jsonValueUnknown7 = jsonMap["unknown7"] as? NSNumber {
                  resultDecodedBuilder.unknown7 = jsonValueUnknown7.intValue
                }
                return resultDecodedBuilder
              }
              override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                  throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                }
                return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.decodeToBuilder(jsDataCast)
              }
            }

          }

        //Nested type declaration end

        // Maybe status? It's always 1 (success), so it's probably that.
        public private(set) var hasUnknown1:Bool = false
        public private(set) var unknown1:UInt64 = UInt64(0)

        public private(set) var items:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>  = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>()
        public private(set) var playerCurrencies:Array<Pogoprotos.Data.Player.Currency>  = Array<Pogoprotos.Data.Player.Currency>()
        // Some base64 encoded stuff...
        public private(set) var hasUnknown4:Bool = false
        public private(set) var unknown4:String = ""

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUnknown1 {
            try output.writeUInt64(1, value:unknown1)
          }
          for oneElementItems in items {
              try output.writeMessage(2, value:oneElementItems)
          }
          for oneElementPlayerCurrencies in playerCurrencies {
              try output.writeMessage(3, value:oneElementPlayerCurrencies)
          }
          if hasUnknown4 {
            try output.writeString(4, value:unknown4)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUnknown1 {
            serialize_size += unknown1.computeUInt64Size(1)
          }
          for oneElementItems in items {
              serialize_size += oneElementItems.computeMessageSize(2)
          }
          for oneElementPlayerCurrencies in playerCurrencies {
              serialize_size += oneElementPlayerCurrencies.computeMessageSize(3)
          }
          if hasUnknown4 {
            serialize_size += unknown4.computeStringSize(4)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2? {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasUnknown1 {
            jsonMap["unknown1"] = "\(unknown1)"
          }
          if !items.isEmpty {
            var jsonArrayItems:Array<Dictionary<String,AnyObject>> = []
              for oneValueItems in items {
                let ecodedMessageItems = try oneValueItems.encode()
                jsonArrayItems += [ecodedMessageItems]
              }
            jsonMap["items"] = jsonArrayItems
          }
          if !playerCurrencies.isEmpty {
            var jsonArrayPlayerCurrencies:Array<Dictionary<String,AnyObject>> = []
              for oneValuePlayerCurrencies in playerCurrencies {
                let ecodedMessagePlayerCurrencies = try oneValuePlayerCurrencies.encode()
                jsonArrayPlayerCurrencies += [ecodedMessagePlayerCurrencies]
              }
            jsonMap["playerCurrencies"] = jsonArrayPlayerCurrencies
          }
          if hasUnknown4 {
            jsonMap["unknown4"] = unknown4
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasUnknown1 {
            output += "\(indent) unknown1: \(unknown1) \n"
          }
          var itemsElementIndex:Int = 0
          for oneElementItems in items {
              output += "\(indent) items[\(itemsElementIndex)] {\n"
              output += try oneElementItems.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              itemsElementIndex += 1
          }
          var playerCurrenciesElementIndex:Int = 0
          for oneElementPlayerCurrencies in playerCurrencies {
              output += "\(indent) playerCurrencies[\(playerCurrenciesElementIndex)] {\n"
              output += try oneElementPlayerCurrencies.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              playerCurrenciesElementIndex += 1
          }
          if hasUnknown4 {
            output += "\(indent) unknown4: \(unknown4) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUnknown1 {
                   hashCode = (hashCode &* 31) &+ unknown1.hashValue
                }
                for oneElementItems in items {
                    hashCode = (hashCode &* 31) &+ oneElementItems.hashValue
                }
                for oneElementPlayerCurrencies in playerCurrencies {
                    hashCode = (hashCode &* 31) &+ oneElementPlayerCurrencies.hashValue
                }
                if hasUnknown4 {
                   hashCode = (hashCode &* 31) &+ unknown4.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUnknown1:Bool {
               get {
                    return builderResult.hasUnknown1
               }
          }
          public var unknown1:UInt64 {
               get {
                    return builderResult.unknown1
               }
               set (value) {
                   builderResult.hasUnknown1 = true
                   builderResult.unknown1 = value
               }
          }
          public func setUnknown1(value:UInt64) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.unknown1 = value
            return self
          }
          public func clearUnknown1() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder{
               builderResult.hasUnknown1 = false
               builderResult.unknown1 = UInt64(0)
               return self
          }
          public var items:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem> {
               get {
                   return builderResult.items
               }
               set (value) {
                   builderResult.items = value
               }
          }
          public func setItems(value:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.items = value
            return self
          }
          public func clearItems() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            builderResult.items.removeAll(keepCapacity: false)
            return self
          }
          public var playerCurrencies:Array<Pogoprotos.Data.Player.Currency> {
               get {
                   return builderResult.playerCurrencies
               }
               set (value) {
                   builderResult.playerCurrencies = value
               }
          }
          public func setPlayerCurrencies(value:Array<Pogoprotos.Data.Player.Currency>) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.playerCurrencies = value
            return self
          }
          public func clearPlayerCurrencies() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            builderResult.playerCurrencies.removeAll(keepCapacity: false)
            return self
          }
          public var hasUnknown4:Bool {
               get {
                    return builderResult.hasUnknown4
               }
          }
          public var unknown4:String {
               get {
                    return builderResult.unknown4
               }
               set (value) {
                   builderResult.hasUnknown4 = true
                   builderResult.unknown4 = value
               }
          }
          public func setUnknown4(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.unknown4 = value
            return self
          }
          public func clearUnknown4() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder{
               builderResult.hasUnknown4 = false
               builderResult.unknown4 = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
            let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            if other == Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2() {
             return self
            }
            if other.hasUnknown1 {
                 unknown1 = other.unknown1
            }
            if !other.items.isEmpty  {
               builderResult.items += other.items
            }
            if !other.playerCurrencies.isEmpty  {
               builderResult.playerCurrencies += other.playerCurrencies
            }
            if other.hasUnknown4 {
                 unknown4 = other.unknown4
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                unknown1 = try input.readUInt64()

              case 18:
                let subBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                items += [subBuilder.buildPartial()]

              case 26:
                let subBuilder = Pogoprotos.Data.Player.Currency.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                playerCurrencies += [subBuilder.buildPartial()]

              case 34:
                unknown4 = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
            if let jsonValueUnknown1 = jsonMap["unknown1"] as? String {
              resultDecodedBuilder.unknown1 = UInt64(jsonValueUnknown1)!
            }
            if let jsonValueItems = jsonMap["items"] as? Array<Dictionary<String,AnyObject>> {
              var jsonArrayItems:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem> = []
              for oneValueItems in jsonValueItems {
                let messageFromStringItems = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.decodeToBuilder(oneValueItems).build()

                jsonArrayItems += [messageFromStringItems]
              }
              resultDecodedBuilder.items = jsonArrayItems
            }
            if let jsonValuePlayerCurrencies = jsonMap["playerCurrencies"] as? Array<Dictionary<String,AnyObject>> {
              var jsonArrayPlayerCurrencies:Array<Pogoprotos.Data.Player.Currency> = []
              for oneValuePlayerCurrencies in jsonValuePlayerCurrencies {
                let messageFromStringPlayerCurrencies = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(oneValuePlayerCurrencies).build()

                jsonArrayPlayerCurrencies += [messageFromStringPlayerCurrencies]
              }
              resultDecodedBuilder.playerCurrencies = jsonArrayPlayerCurrencies
            }
            if let jsonValueUnknown4 = jsonMap["unknown4"] as? String {
              resultDecodedBuilder.unknown4 = jsonValueUnknown4
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    // Still don't know what 6 is, but 5 lists items available via IAPs. 
    public private(set) var hasResponseType:Bool = false
    public private(set) var responseType:Int32 = Int32(0)

    public private(set) var hasUnknown2:Bool = false
    public private(set) var unknown2:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResponseType {
        try output.writeInt32(1, value:responseType)
      }
      if hasUnknown2 {
        try output.writeMessage(2, value:unknown2)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasResponseType {
        serialize_size += responseType.computeInt32Size(1)
      }
      if hasUnknown2 {
          if let varSizeunknown2 = unknown2?.computeMessageSize(2) {
              serialize_size += varSizeunknown2
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response? {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return Pogoprotos.Networking.Envelopes.Unknown6Response.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasResponseType {
        jsonMap["responseType"] = NSNumber(int:responseType)
      }
      if hasUnknown2 {
        jsonMap["unknown2"] = try unknown2.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasResponseType {
        output += "\(indent) responseType: \(responseType) \n"
      }
      if hasUnknown2 {
        output += "\(indent) unknown2 {\n"
        if let outDescUnknown2 = unknown2 {
          output += try outDescUnknown2.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResponseType {
               hashCode = (hashCode &* 31) &+ responseType.hashValue
            }
            if hasUnknown2 {
                if let hashValueunknown2 = unknown2?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueunknown2
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6Response"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6Response"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.Unknown6Response.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response = Pogoprotos.Networking.Envelopes.Unknown6Response()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasResponseType:Bool {
           get {
                return builderResult.hasResponseType
           }
      }
      public var responseType:Int32 {
           get {
                return builderResult.responseType
           }
           set (value) {
               builderResult.hasResponseType = true
               builderResult.responseType = value
           }
      }
      public func setResponseType(value:Int32) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        self.responseType = value
        return self
      }
      public func clearResponseType() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder{
           builderResult.hasResponseType = false
           builderResult.responseType = Int32(0)
           return self
      }
      public var hasUnknown2:Bool {
           get {
               return builderResult.hasUnknown2
           }
      }
      public var unknown2:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2! {
           get {
               if unknown2Builder_ != nil {
                  builderResult.unknown2 = unknown2Builder_.getMessage()
               }
               return builderResult.unknown2
           }
           set (value) {
               builderResult.hasUnknown2 = true
               builderResult.unknown2 = value
           }
      }
      private var unknown2Builder_:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder! {
           didSet {
              builderResult.hasUnknown2 = true
           }
      }
      public func getUnknown2Builder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
        if unknown2Builder_ == nil {
           unknown2Builder_ = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
           builderResult.unknown2 = unknown2Builder_.getMessage()
           if unknown2 != nil {
              try! unknown2Builder_.mergeFrom(unknown2)
           }
        }
        return unknown2Builder_
      }
      public func setUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        self.unknown2 = value
        return self
      }
      public func mergeUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        if builderResult.hasUnknown2 {
          builderResult.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.builderWithPrototype(builderResult.unknown2).mergeFrom(value).buildPartial()
        } else {
          builderResult.unknown2 = value
        }
        builderResult.hasUnknown2 = true
        return self
      }
      public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        unknown2Builder_ = nil
        builderResult.hasUnknown2 = false
        builderResult.unknown2 = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        return try Pogoprotos.Networking.Envelopes.Unknown6Response.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response {
        let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        if other == Pogoprotos.Networking.Envelopes.Unknown6Response() {
         return self
        }
        if other.hasResponseType {
             responseType = other.responseType
        }
        if (other.hasUnknown2) {
            try mergeUnknown2(other.unknown2)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            responseType = try input.readInt32()

          case 18:
            let subBuilder:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
            if hasUnknown2 {
              try subBuilder.mergeFrom(unknown2)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            unknown2 = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
        if let jsonValueResponseType = jsonMap["responseType"] as? NSNumber {
          resultDecodedBuilder.responseType = jsonValueResponseType.intValue
        }
        if let jsonValueUnknown2 = jsonMap["unknown2"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.decodeToBuilder(jsonValueUnknown2).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
