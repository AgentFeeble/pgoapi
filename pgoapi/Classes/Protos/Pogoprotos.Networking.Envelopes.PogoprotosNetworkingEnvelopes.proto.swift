// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Networking.Envelopes.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public func == (lhs: Pogoprotos.Networking.Envelopes.AuthTicket, rhs: Pogoprotos.Networking.Envelopes.AuthTicket) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStart == rhs.hasStart) && (!lhs.hasStart || lhs.start == rhs.start)
  fieldCheck = fieldCheck && (lhs.hasExpireTimestampMs == rhs.hasExpireTimestampMs) && (!lhs.hasExpireTimestampMs || lhs.expireTimestampMs == rhs.expireTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasEnd == rhs.hasEnd) && (!lhs.hasEnd || lhs.end == rhs.end)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  fieldCheck = fieldCheck && (lhs.requests == rhs.requests)
  fieldCheck = fieldCheck && (lhs.hasUnknown6 == rhs.hasUnknown6) && (!lhs.hasUnknown6 || lhs.unknown6 == rhs.unknown6)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
  fieldCheck = fieldCheck && (lhs.hasAuthInfo == rhs.hasAuthInfo) && (!lhs.hasAuthInfo || lhs.authInfo == rhs.authInfo)
  fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
  fieldCheck = fieldCheck && (lhs.hasUnknown12 == rhs.hasUnknown12) && (!lhs.hasUnknown12 || lhs.unknown12 == rhs.unknown12)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt, rhs: Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasContents == rhs.hasContents) && (!lhs.hasContents || lhs.contents == rhs.contents)
  fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope, rhs: Pogoprotos.Networking.Envelopes.ResponseEnvelope) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStatusCode == rhs.hasStatusCode) && (!lhs.hasStatusCode || lhs.statusCode == rhs.statusCode)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  fieldCheck = fieldCheck && (lhs.hasApiUrl == rhs.hasApiUrl) && (!lhs.hasApiUrl || lhs.apiUrl == rhs.apiUrl)
  fieldCheck = fieldCheck && (lhs.unknown6 == rhs.unknown6)
  fieldCheck = fieldCheck && (lhs.hasAuthTicket == rhs.hasAuthTicket) && (!lhs.hasAuthTicket || lhs.authTicket == rhs.authTicket)
  fieldCheck = fieldCheck && (lhs.returns == rhs.returns)
  fieldCheck = fieldCheck && (lhs.hasError == rhs.hasError) && (!lhs.hasError || lhs.error == rhs.error)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Signature, rhs: Pogoprotos.Networking.Envelopes.Signature) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTimestampSinceStart == rhs.hasTimestampSinceStart) && (!lhs.hasTimestampSinceStart || lhs.timestampSinceStart == rhs.timestampSinceStart)
  fieldCheck = fieldCheck && (lhs.locationFix == rhs.locationFix)
  fieldCheck = fieldCheck && (lhs.hasGpsInfo == rhs.hasGpsInfo) && (!lhs.hasGpsInfo || lhs.gpsInfo == rhs.gpsInfo)
  fieldCheck = fieldCheck && (lhs.hasSensorInfo == rhs.hasSensorInfo) && (!lhs.hasSensorInfo || lhs.sensorInfo == rhs.sensorInfo)
  fieldCheck = fieldCheck && (lhs.hasDeviceInfo == rhs.hasDeviceInfo) && (!lhs.hasDeviceInfo || lhs.deviceInfo == rhs.deviceInfo)
  fieldCheck = fieldCheck && (lhs.hasActivityStatus == rhs.hasActivityStatus) && (!lhs.hasActivityStatus || lhs.activityStatus == rhs.activityStatus)
  fieldCheck = fieldCheck && (lhs.hasLocationHash1 == rhs.hasLocationHash1) && (!lhs.hasLocationHash1 || lhs.locationHash1 == rhs.locationHash1)
  fieldCheck = fieldCheck && (lhs.hasLocationHash2 == rhs.hasLocationHash2) && (!lhs.hasLocationHash2 || lhs.locationHash2 == rhs.locationHash2)
  fieldCheck = fieldCheck && (lhs.hasUnknown22 == rhs.hasUnknown22) && (!lhs.hasUnknown22 || lhs.unknown22 == rhs.unknown22)
  fieldCheck = fieldCheck && (lhs.hasTimestamp == rhs.hasTimestamp) && (!lhs.hasTimestamp || lhs.timestamp == rhs.timestamp)
  fieldCheck = fieldCheck && (lhs.requestHash == rhs.requestHash)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Signature.LocationFix, rhs: Pogoprotos.Networking.Envelopes.Signature.LocationFix) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasTimestampSinceStart == rhs.hasTimestampSinceStart) && (!lhs.hasTimestampSinceStart || lhs.timestampSinceStart == rhs.timestampSinceStart)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasHorizontalAccuracy == rhs.hasHorizontalAccuracy) && (!lhs.hasHorizontalAccuracy || lhs.horizontalAccuracy == rhs.horizontalAccuracy)
  fieldCheck = fieldCheck && (lhs.hasAltitude == rhs.hasAltitude) && (!lhs.hasAltitude || lhs.altitude == rhs.altitude)
  fieldCheck = fieldCheck && (lhs.hasVerticalAccuracy == rhs.hasVerticalAccuracy) && (!lhs.hasVerticalAccuracy || lhs.verticalAccuracy == rhs.verticalAccuracy)
  fieldCheck = fieldCheck && (lhs.hasProviderStatus == rhs.hasProviderStatus) && (!lhs.hasProviderStatus || lhs.providerStatus == rhs.providerStatus)
  fieldCheck = fieldCheck && (lhs.hasFloor == rhs.hasFloor) && (!lhs.hasFloor || lhs.floor == rhs.floor)
  fieldCheck = fieldCheck && (lhs.hasLocationType == rhs.hasLocationType) && (!lhs.hasLocationType || lhs.locationType == rhs.locationType)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo, rhs: Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTimeToFix == rhs.hasTimeToFix) && (!lhs.hasTimeToFix || lhs.timeToFix == rhs.timeToFix)
  fieldCheck = fieldCheck && (lhs.satellitesPrn == rhs.satellitesPrn)
  fieldCheck = fieldCheck && (lhs.snr == rhs.snr)
  fieldCheck = fieldCheck && (lhs.azimuth == rhs.azimuth)
  fieldCheck = fieldCheck && (lhs.elevation == rhs.elevation)
  fieldCheck = fieldCheck && (lhs.hasAlmanac == rhs.hasAlmanac)
  fieldCheck = fieldCheck && (lhs.hasEphemeris == rhs.hasEphemeris)
  fieldCheck = fieldCheck && (lhs.usedInFix == rhs.usedInFix)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Signature.SensorInfo, rhs: Pogoprotos.Networking.Envelopes.Signature.SensorInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTimestampSnapshot == rhs.hasTimestampSnapshot) && (!lhs.hasTimestampSnapshot || lhs.timestampSnapshot == rhs.timestampSnapshot)
  fieldCheck = fieldCheck && (lhs.hasMagnetometerX == rhs.hasMagnetometerX) && (!lhs.hasMagnetometerX || lhs.magnetometerX == rhs.magnetometerX)
  fieldCheck = fieldCheck && (lhs.hasMagnetometerY == rhs.hasMagnetometerY) && (!lhs.hasMagnetometerY || lhs.magnetometerY == rhs.magnetometerY)
  fieldCheck = fieldCheck && (lhs.hasMagnetometerZ == rhs.hasMagnetometerZ) && (!lhs.hasMagnetometerZ || lhs.magnetometerZ == rhs.magnetometerZ)
  fieldCheck = fieldCheck && (lhs.hasAngleNormalizedX == rhs.hasAngleNormalizedX) && (!lhs.hasAngleNormalizedX || lhs.angleNormalizedX == rhs.angleNormalizedX)
  fieldCheck = fieldCheck && (lhs.hasAngleNormalizedY == rhs.hasAngleNormalizedY) && (!lhs.hasAngleNormalizedY || lhs.angleNormalizedY == rhs.angleNormalizedY)
  fieldCheck = fieldCheck && (lhs.hasAngleNormalizedZ == rhs.hasAngleNormalizedZ) && (!lhs.hasAngleNormalizedZ || lhs.angleNormalizedZ == rhs.angleNormalizedZ)
  fieldCheck = fieldCheck && (lhs.hasAccelRawX == rhs.hasAccelRawX) && (!lhs.hasAccelRawX || lhs.accelRawX == rhs.accelRawX)
  fieldCheck = fieldCheck && (lhs.hasAccelRawY == rhs.hasAccelRawY) && (!lhs.hasAccelRawY || lhs.accelRawY == rhs.accelRawY)
  fieldCheck = fieldCheck && (lhs.hasAccelRawZ == rhs.hasAccelRawZ) && (!lhs.hasAccelRawZ || lhs.accelRawZ == rhs.accelRawZ)
  fieldCheck = fieldCheck && (lhs.hasGyroscopeRawX == rhs.hasGyroscopeRawX) && (!lhs.hasGyroscopeRawX || lhs.gyroscopeRawX == rhs.gyroscopeRawX)
  fieldCheck = fieldCheck && (lhs.hasGyroscopeRawY == rhs.hasGyroscopeRawY) && (!lhs.hasGyroscopeRawY || lhs.gyroscopeRawY == rhs.gyroscopeRawY)
  fieldCheck = fieldCheck && (lhs.hasGyroscopeRawZ == rhs.hasGyroscopeRawZ) && (!lhs.hasGyroscopeRawZ || lhs.gyroscopeRawZ == rhs.gyroscopeRawZ)
  fieldCheck = fieldCheck && (lhs.hasAccelNormalizedX == rhs.hasAccelNormalizedX) && (!lhs.hasAccelNormalizedX || lhs.accelNormalizedX == rhs.accelNormalizedX)
  fieldCheck = fieldCheck && (lhs.hasAccelNormalizedY == rhs.hasAccelNormalizedY) && (!lhs.hasAccelNormalizedY || lhs.accelNormalizedY == rhs.accelNormalizedY)
  fieldCheck = fieldCheck && (lhs.hasAccelNormalizedZ == rhs.hasAccelNormalizedZ) && (!lhs.hasAccelNormalizedZ || lhs.accelNormalizedZ == rhs.accelNormalizedZ)
  fieldCheck = fieldCheck && (lhs.hasAccelerometerAxes == rhs.hasAccelerometerAxes) && (!lhs.hasAccelerometerAxes || lhs.accelerometerAxes == rhs.accelerometerAxes)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Signature.DeviceInfo, rhs: Pogoprotos.Networking.Envelopes.Signature.DeviceInfo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasDeviceId == rhs.hasDeviceId) && (!lhs.hasDeviceId || lhs.deviceId == rhs.deviceId)
  fieldCheck = fieldCheck && (lhs.hasAndroidBoardName == rhs.hasAndroidBoardName) && (!lhs.hasAndroidBoardName || lhs.androidBoardName == rhs.androidBoardName)
  fieldCheck = fieldCheck && (lhs.hasAndroidBootloader == rhs.hasAndroidBootloader) && (!lhs.hasAndroidBootloader || lhs.androidBootloader == rhs.androidBootloader)
  fieldCheck = fieldCheck && (lhs.hasDeviceBrand == rhs.hasDeviceBrand) && (!lhs.hasDeviceBrand || lhs.deviceBrand == rhs.deviceBrand)
  fieldCheck = fieldCheck && (lhs.hasDeviceModel == rhs.hasDeviceModel) && (!lhs.hasDeviceModel || lhs.deviceModel == rhs.deviceModel)
  fieldCheck = fieldCheck && (lhs.hasDeviceModelIdentifier == rhs.hasDeviceModelIdentifier) && (!lhs.hasDeviceModelIdentifier || lhs.deviceModelIdentifier == rhs.deviceModelIdentifier)
  fieldCheck = fieldCheck && (lhs.hasDeviceModelBoot == rhs.hasDeviceModelBoot) && (!lhs.hasDeviceModelBoot || lhs.deviceModelBoot == rhs.deviceModelBoot)
  fieldCheck = fieldCheck && (lhs.hasHardwareManufacturer == rhs.hasHardwareManufacturer) && (!lhs.hasHardwareManufacturer || lhs.hardwareManufacturer == rhs.hardwareManufacturer)
  fieldCheck = fieldCheck && (lhs.hasHardwareModel == rhs.hasHardwareModel) && (!lhs.hasHardwareModel || lhs.hardwareModel == rhs.hardwareModel)
  fieldCheck = fieldCheck && (lhs.hasFirmwareBrand == rhs.hasFirmwareBrand) && (!lhs.hasFirmwareBrand || lhs.firmwareBrand == rhs.firmwareBrand)
  fieldCheck = fieldCheck && (lhs.hasFirmwareTags == rhs.hasFirmwareTags) && (!lhs.hasFirmwareTags || lhs.firmwareTags == rhs.firmwareTags)
  fieldCheck = fieldCheck && (lhs.hasFirmwareType == rhs.hasFirmwareType) && (!lhs.hasFirmwareType || lhs.firmwareType == rhs.firmwareType)
  fieldCheck = fieldCheck && (lhs.hasFirmwareFingerprint == rhs.hasFirmwareFingerprint) && (!lhs.hasFirmwareFingerprint || lhs.firmwareFingerprint == rhs.firmwareFingerprint)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Signature.ActivityStatus, rhs: Pogoprotos.Networking.Envelopes.Signature.ActivityStatus) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStartTimeMs == rhs.hasStartTimeMs) && (!lhs.hasStartTimeMs || lhs.startTimeMs == rhs.startTimeMs)
  fieldCheck = fieldCheck && (lhs.hasUnknownStatus == rhs.hasUnknownStatus) && (!lhs.hasUnknownStatus || lhs.unknownStatus == rhs.unknownStatus)
  fieldCheck = fieldCheck && (lhs.hasWalking == rhs.hasWalking) && (!lhs.hasWalking || lhs.walking == rhs.walking)
  fieldCheck = fieldCheck && (lhs.hasRunning == rhs.hasRunning) && (!lhs.hasRunning || lhs.running == rhs.running)
  fieldCheck = fieldCheck && (lhs.hasStationary == rhs.hasStationary) && (!lhs.hasStationary || lhs.stationary == rhs.stationary)
  fieldCheck = fieldCheck && (lhs.hasAutomotive == rhs.hasAutomotive) && (!lhs.hasAutomotive || lhs.automotive == rhs.automotive)
  fieldCheck = fieldCheck && (lhs.hasTilting == rhs.hasTilting) && (!lhs.hasTilting || lhs.tilting == rhs.tilting)
  fieldCheck = fieldCheck && (lhs.hasCycling == rhs.hasCycling) && (!lhs.hasCycling || lhs.cycling == rhs.cycling)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6, rhs: Pogoprotos.Networking.Envelopes.Unknown6) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRequestType == rhs.hasRequestType) && (!lhs.hasRequestType || lhs.requestType == rhs.requestType)
  fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6.Unknown2, rhs: Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEncryptedSignature == rhs.hasEncryptedSignature) && (!lhs.hasEncryptedSignature || lhs.encryptedSignature == rhs.encryptedSignature)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasResponseType == rhs.hasResponseType) && (!lhs.hasResponseType || lhs.responseType == rhs.responseType)
  fieldCheck = fieldCheck && (lhs.hasUnknown2 == rhs.hasUnknown2) && (!lhs.hasUnknown2 || lhs.unknown2 == rhs.unknown2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUnknown1 == rhs.hasUnknown1) && (!lhs.hasUnknown1 || lhs.unknown1 == rhs.unknown1)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.playerCurrencies == rhs.playerCurrencies)
  fieldCheck = fieldCheck && (lhs.hasUnknown4 == rhs.hasUnknown4) && (!lhs.hasUnknown4 || lhs.unknown4 == rhs.unknown4)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
  fieldCheck = fieldCheck && (lhs.hasIsIap == rhs.hasIsIap) && (!lhs.hasIsIap || lhs.isIap == rhs.isIap)
  fieldCheck = fieldCheck && (lhs.hasCurrencyToBuy == rhs.hasCurrencyToBuy) && (!lhs.hasCurrencyToBuy || lhs.currencyToBuy == rhs.currencyToBuy)
  fieldCheck = fieldCheck && (lhs.hasYieldsCurrency == rhs.hasYieldsCurrency) && (!lhs.hasYieldsCurrency || lhs.yieldsCurrency == rhs.yieldsCurrency)
  fieldCheck = fieldCheck && (lhs.hasYieldsItem == rhs.hasYieldsItem) && (!lhs.hasYieldsItem || lhs.yieldsItem == rhs.yieldsItem)
  fieldCheck = fieldCheck && (lhs.tags == rhs.tags)
  fieldCheck = fieldCheck && (lhs.hasUnknown7 == rhs.hasUnknown7) && (!lhs.hasUnknown7 || lhs.unknown7 == rhs.unknown7)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag, rhs: Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Networking.Envelopes {
  public struct PogoprotosNetworkingEnvelopesRoot {
    public static var sharedInstance : PogoprotosNetworkingEnvelopesRoot {
     struct Static {
         static let instance : PogoprotosNetworkingEnvelopesRoot = PogoprotosNetworkingEnvelopesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Networking.Requests.PogoprotosNetworkingRequestsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.Player.PogoprotosDataPlayerRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Inventory.Item.PogoprotosInventoryItemRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AuthTicket : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasStart:Bool = false
    public private(set) var start:NSData = NSData()

    public private(set) var hasExpireTimestampMs:Bool = false
    public private(set) var expireTimestampMs:UInt64 = UInt64(0)

    public private(set) var hasEnd:Bool = false
    public private(set) var end:NSData = NSData()

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStart {
        try output.writeData(1, value:start)
      }
      if hasExpireTimestampMs {
        try output.writeUInt64(2, value:expireTimestampMs)
      }
      if hasEnd {
        try output.writeData(3, value:end)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStart {
        serialize_size += start.computeDataSize(1)
      }
      if hasExpireTimestampMs {
        serialize_size += expireTimestampMs.computeUInt64Size(2)
      }
      if hasEnd {
        serialize_size += end.computeDataSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.AuthTicket> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.AuthTicket>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket? {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.AuthTicket.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStart {
        jsonMap["start"] = start.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      if hasExpireTimestampMs {
        jsonMap["expireTimestampMs"] = "\(expireTimestampMs)"
      }
      if hasEnd {
        jsonMap["end"] = end.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
      return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStart {
        output += "\(indent) start: \(start) \n"
      }
      if hasExpireTimestampMs {
        output += "\(indent) expireTimestampMs: \(expireTimestampMs) \n"
      }
      if hasEnd {
        output += "\(indent) end: \(end) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStart {
               hashCode = (hashCode &* 31) &+ start.hashValue
            }
            if hasExpireTimestampMs {
               hashCode = (hashCode &* 31) &+ expireTimestampMs.hashValue
            }
            if hasEnd {
               hashCode = (hashCode &* 31) &+ end.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.AuthTicket"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.AuthTicket.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.AuthTicket = Pogoprotos.Networking.Envelopes.AuthTicket()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.AuthTicket {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStart:Bool {
           get {
                return builderResult.hasStart
           }
      }
      public var start:NSData {
           get {
                return builderResult.start
           }
           set (value) {
               builderResult.hasStart = true
               builderResult.start = value
           }
      }
      public func setStart(value:NSData) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.start = value
        return self
      }
      public func clearStart() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasStart = false
           builderResult.start = NSData()
           return self
      }
      public var hasExpireTimestampMs:Bool {
           get {
                return builderResult.hasExpireTimestampMs
           }
      }
      public var expireTimestampMs:UInt64 {
           get {
                return builderResult.expireTimestampMs
           }
           set (value) {
               builderResult.hasExpireTimestampMs = true
               builderResult.expireTimestampMs = value
           }
      }
      public func setExpireTimestampMs(value:UInt64) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.expireTimestampMs = value
        return self
      }
      public func clearExpireTimestampMs() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasExpireTimestampMs = false
           builderResult.expireTimestampMs = UInt64(0)
           return self
      }
      public var hasEnd:Bool {
           get {
                return builderResult.hasEnd
           }
      }
      public var end:NSData {
           get {
                return builderResult.end
           }
           set (value) {
               builderResult.hasEnd = true
               builderResult.end = value
           }
      }
      public func setEnd(value:NSData) -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        self.end = value
        return self
      }
      public func clearEnd() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder{
           builderResult.hasEnd = false
           builderResult.end = NSData()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.AuthTicket()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        return try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.AuthTicket {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.AuthTicket {
        let returnMe:Pogoprotos.Networking.Envelopes.AuthTicket = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if other == Pogoprotos.Networking.Envelopes.AuthTicket() {
         return self
        }
        if other.hasStart {
             start = other.start
        }
        if other.hasExpireTimestampMs {
             expireTimestampMs = other.expireTimestampMs
        }
        if other.hasEnd {
             end = other.end
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            start = try input.readData()

          case 16:
            expireTimestampMs = try input.readUInt64()

          case 26:
            end = try input.readData()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
        if let jsonValueStart = jsonMap["start"] as? String {
          resultDecodedBuilder.start = NSData(base64EncodedString:jsonValueStart, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        if let jsonValueExpireTimestampMs = jsonMap["expireTimestampMs"] as? String {
          resultDecodedBuilder.expireTimestampMs = UInt64(jsonValueExpireTimestampMs)!
        }
        if let jsonValueEnd = jsonMap["end"] as? String {
          resultDecodedBuilder.end = NSData(base64EncodedString:jsonValueEnd, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class RequestEnvelope : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class AuthInfo : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final public class Jwt : GeneratedMessage, GeneratedMessageProtocol {
            public private(set) var hasContents:Bool = false
            public private(set) var contents:String = ""

            public private(set) var hasUnknown2:Bool = false
            public private(set) var unknown2:Int32 = Int32(0)

            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
              if hasContents {
                try output.writeString(1, value:contents)
              }
              if hasUnknown2 {
                try output.writeInt32(2, value:unknown2)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasContents {
                serialize_size += contents.computeStringSize(1)
              }
              if hasUnknown2 {
                serialize_size += unknown2.computeInt32Size(2)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt> {
              var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt? {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder
            }
            override public class func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            override public func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
            }
            public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(self)
            }
            public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder().mergeFrom(prototype)
            }
            override public func encode() throws -> Dictionary<String,AnyObject> {
              guard isInitialized() else {
                throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
              }

              var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
              if hasContents {
                jsonMap["contents"] = contents
              }
              if hasUnknown2 {
                jsonMap["unknown2"] = NSNumber(int:unknown2)
              }
              return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonMap).build()
            }
            override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
              return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.fromJSONToBuilder(data).build()
            }
            override public func getDescription(indent:String) throws -> String {
              var output = ""
              if hasContents {
                output += "\(indent) contents: \(contents) \n"
              }
              if hasUnknown2 {
                output += "\(indent) unknown2: \(unknown2) \n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasContents {
                       hashCode = (hashCode &* 31) &+ contents.hashValue
                    }
                    if hasUnknown2 {
                       hashCode = (hashCode &* 31) &+ unknown2.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            override public func className() -> String {
                return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
              public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasContents:Bool {
                   get {
                        return builderResult.hasContents
                   }
              }
              public var contents:String {
                   get {
                        return builderResult.contents
                   }
                   set (value) {
                       builderResult.hasContents = true
                       builderResult.contents = value
                   }
              }
              public func setContents(value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.contents = value
                return self
              }
              public func clearContents() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasContents = false
                   builderResult.contents = ""
                   return self
              }
              public var hasUnknown2:Bool {
                   get {
                        return builderResult.hasUnknown2
                   }
              }
              public var unknown2:Int32 {
                   get {
                        return builderResult.unknown2
                   }
                   set (value) {
                       builderResult.hasUnknown2 = true
                       builderResult.unknown2 = value
                   }
              }
              public func setUnknown2(value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                self.unknown2 = value
                return self
              }
              public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder{
                   builderResult.hasUnknown2 = false
                   builderResult.unknown2 = Int32(0)
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt()
                return self
              }
              override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(builderResult)
              }
              override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt {
                let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt = builderResult
                return returnMe
              }
              public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt() {
                 return self
                }
                if other.hasContents {
                     contents = other.contents
                }
                if other.hasUnknown2 {
                     unknown2 = other.unknown2
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 10:
                    contents = try input.readString()

                  case 16:
                    unknown2 = try input.readInt32()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
              override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if let jsonValueContents = jsonMap["contents"] as? String {
                  resultDecodedBuilder.contents = jsonValueContents
                }
                if let jsonValueUnknown2 = jsonMap["unknown2"] as? NSNumber {
                  resultDecodedBuilder.unknown2 = jsonValueUnknown2.intValue
                }
                return resultDecodedBuilder
              }
              override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
                let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                  throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                }
                return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsDataCast)
              }
            }

          }

        //Nested type declaration end

        public private(set) var hasProvider:Bool = false
        public private(set) var provider:String = ""

        public private(set) var hasToken:Bool = false
        public private(set) var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasProvider {
            try output.writeString(1, value:provider)
          }
          if hasToken {
            try output.writeMessage(2, value:token)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasProvider {
            serialize_size += provider.computeStringSize(1)
          }
          if hasToken {
              if let varSizetoken = token?.computeMessageSize(2) {
                  serialize_size += varSizetoken
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo? {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasProvider {
            jsonMap["provider"] = provider
          }
          if hasToken {
            jsonMap["token"] = try token.encode()
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
          return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasProvider {
            output += "\(indent) provider: \(provider) \n"
          }
          if hasToken {
            output += "\(indent) token {\n"
            if let outDescToken = token {
              output += try outDescToken.getDescription("\(indent)  ")
            }
            output += "\(indent) }\n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasProvider {
                   hashCode = (hashCode &* 31) &+ provider.hashValue
                }
                if hasToken {
                    if let hashValuetoken = token?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValuetoken
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasProvider:Bool {
               get {
                    return builderResult.hasProvider
               }
          }
          public var provider:String {
               get {
                    return builderResult.provider
               }
               set (value) {
                   builderResult.hasProvider = true
                   builderResult.provider = value
               }
          }
          public func setProvider(value:String) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.provider = value
            return self
          }
          public func clearProvider() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder{
               builderResult.hasProvider = false
               builderResult.provider = ""
               return self
          }
          public var hasToken:Bool {
               get {
                   return builderResult.hasToken
               }
          }
          public var token:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt! {
               get {
                   if tokenBuilder_ != nil {
                      builderResult.token = tokenBuilder_.getMessage()
                   }
                   return builderResult.token
               }
               set (value) {
                   builderResult.hasToken = true
                   builderResult.token = value
               }
          }
          private var tokenBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder! {
               didSet {
                  builderResult.hasToken = true
               }
          }
          public func getTokenBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder {
            if tokenBuilder_ == nil {
               tokenBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
               builderResult.token = tokenBuilder_.getMessage()
               if token != nil {
                  try! tokenBuilder_.mergeFrom(token)
               }
            }
            return tokenBuilder_
          }
          public func setToken(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            self.token = value
            return self
          }
          public func mergeToken(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if builderResult.hasToken {
              builderResult.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.builderWithPrototype(builderResult.token).mergeFrom(value).buildPartial()
            } else {
              builderResult.token = value
            }
            builderResult.hasToken = true
            return self
          }
          public func clearToken() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            tokenBuilder_ = nil
            builderResult.hasToken = false
            builderResult.token = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo() {
             return self
            }
            if other.hasProvider {
                 provider = other.provider
            }
            if (other.hasToken) {
                try mergeToken(other.token)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                provider = try input.readString()

              case 18:
                let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder()
                if hasToken {
                  try subBuilder.mergeFrom(token)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                token = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if let jsonValueProvider = jsonMap["provider"] as? String {
              resultDecodedBuilder.provider = jsonValueProvider
            }
            if let jsonValueToken = jsonMap["token"] as? Dictionary<String,AnyObject> {
              resultDecodedBuilder.token = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Jwt.Builder.decodeToBuilder(jsonValueToken).build()

            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public private(set) var hasStatusCode:Bool = false
    public private(set) var statusCode:Int32 = Int32(0)

    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:UInt64 = UInt64(0)

    public private(set) var requests:Array<Pogoprotos.Networking.Requests.Request>  = Array<Pogoprotos.Networking.Requests.Request>()
    public private(set) var hasUnknown6:Bool = false
    public private(set) var unknown6:Pogoprotos.Networking.Envelopes.Unknown6!
    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    public private(set) var hasAltitude:Bool = false
    public private(set) var altitude:Double = Double(0)

    public private(set) var hasAuthInfo:Bool = false
    public private(set) var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!
    public private(set) var hasAuthTicket:Bool = false
    public private(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public private(set) var hasUnknown12:Bool = false
    public private(set) var unknown12:Int64 = Int64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStatusCode {
        try output.writeInt32(1, value:statusCode)
      }
      if hasRequestId {
        try output.writeUInt64(3, value:requestId)
      }
      for oneElementRequests in requests {
          try output.writeMessage(4, value:oneElementRequests)
      }
      if hasUnknown6 {
        try output.writeMessage(6, value:unknown6)
      }
      if hasLatitude {
        try output.writeDouble(7, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(8, value:longitude)
      }
      if hasAltitude {
        try output.writeDouble(9, value:altitude)
      }
      if hasAuthInfo {
        try output.writeMessage(10, value:authInfo)
      }
      if hasAuthTicket {
        try output.writeMessage(11, value:authTicket)
      }
      if hasUnknown12 {
        try output.writeInt64(12, value:unknown12)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStatusCode {
        serialize_size += statusCode.computeInt32Size(1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(3)
      }
      for oneElementRequests in requests {
          serialize_size += oneElementRequests.computeMessageSize(4)
      }
      if hasUnknown6 {
          if let varSizeunknown6 = unknown6?.computeMessageSize(6) {
              serialize_size += varSizeunknown6
          }
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(7)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(8)
      }
      if hasAltitude {
        serialize_size += altitude.computeDoubleSize(9)
      }
      if hasAuthInfo {
          if let varSizeauthInfo = authInfo?.computeMessageSize(10) {
              serialize_size += varSizeauthInfo
          }
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(11) {
              serialize_size += varSizeauthTicket
          }
      }
      if hasUnknown12 {
        serialize_size += unknown12.computeInt64Size(12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.RequestEnvelope> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.RequestEnvelope>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope? {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStatusCode {
        jsonMap["statusCode"] = NSNumber(int:statusCode)
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if !requests.isEmpty {
        var jsonArrayRequests:Array<Dictionary<String,AnyObject>> = []
          for oneValueRequests in requests {
            let ecodedMessageRequests = try oneValueRequests.encode()
            jsonArrayRequests += [ecodedMessageRequests]
          }
        jsonMap["requests"] = jsonArrayRequests
      }
      if hasUnknown6 {
        jsonMap["unknown6"] = try unknown6.encode()
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasAltitude {
        jsonMap["altitude"] = NSNumber(double:altitude)
      }
      if hasAuthInfo {
        jsonMap["authInfo"] = try authInfo.encode()
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if hasUnknown12 {
        jsonMap["unknown12"] = "\(unknown12)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
      return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStatusCode {
        output += "\(indent) statusCode: \(statusCode) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      var requestsElementIndex:Int = 0
      for oneElementRequests in requests {
          output += "\(indent) requests[\(requestsElementIndex)] {\n"
          output += try oneElementRequests.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          requestsElementIndex += 1
      }
      if hasUnknown6 {
        output += "\(indent) unknown6 {\n"
        if let outDescUnknown6 = unknown6 {
          output += try outDescUnknown6.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasAltitude {
        output += "\(indent) altitude: \(altitude) \n"
      }
      if hasAuthInfo {
        output += "\(indent) authInfo {\n"
        if let outDescAuthInfo = authInfo {
          output += try outDescAuthInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasUnknown12 {
        output += "\(indent) unknown12: \(unknown12) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ statusCode.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            for oneElementRequests in requests {
                hashCode = (hashCode &* 31) &+ oneElementRequests.hashValue
            }
            if hasUnknown6 {
                if let hashValueunknown6 = unknown6?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueunknown6
                }
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasAltitude {
               hashCode = (hashCode &* 31) &+ altitude.hashValue
            }
            if hasAuthInfo {
                if let hashValueauthInfo = authInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthInfo
                }
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            if hasUnknown12 {
               hashCode = (hashCode &* 31) &+ unknown12.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.RequestEnvelope"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.RequestEnvelope.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.RequestEnvelope = Pogoprotos.Networking.Envelopes.RequestEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStatusCode:Bool {
           get {
                return builderResult.hasStatusCode
           }
      }
      public var statusCode:Int32 {
           get {
                return builderResult.statusCode
           }
           set (value) {
               builderResult.hasStatusCode = true
               builderResult.statusCode = value
           }
      }
      public func setStatusCode(value:Int32) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.statusCode = value
        return self
      }
      public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasStatusCode = false
           builderResult.statusCode = Int32(0)
           return self
      }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      public func setRequestId(value:UInt64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requestId = value
        return self
      }
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var requests:Array<Pogoprotos.Networking.Requests.Request> {
           get {
               return builderResult.requests
           }
           set (value) {
               builderResult.requests = value
           }
      }
      public func setRequests(value:Array<Pogoprotos.Networking.Requests.Request>) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.requests = value
        return self
      }
      public func clearRequests() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult.requests.removeAll(keepCapacity: false)
        return self
      }
      public var hasUnknown6:Bool {
           get {
               return builderResult.hasUnknown6
           }
      }
      public var unknown6:Pogoprotos.Networking.Envelopes.Unknown6! {
           get {
               if unknown6Builder_ != nil {
                  builderResult.unknown6 = unknown6Builder_.getMessage()
               }
               return builderResult.unknown6
           }
           set (value) {
               builderResult.hasUnknown6 = true
               builderResult.unknown6 = value
           }
      }
      private var unknown6Builder_:Pogoprotos.Networking.Envelopes.Unknown6.Builder! {
           didSet {
              builderResult.hasUnknown6 = true
           }
      }
      public func getUnknown6Builder() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        if unknown6Builder_ == nil {
           unknown6Builder_ = Pogoprotos.Networking.Envelopes.Unknown6.Builder()
           builderResult.unknown6 = unknown6Builder_.getMessage()
           if unknown6 != nil {
              try! unknown6Builder_.mergeFrom(unknown6)
           }
        }
        return unknown6Builder_
      }
      public func setUnknown6(value:Pogoprotos.Networking.Envelopes.Unknown6!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.unknown6 = value
        return self
      }
      public func mergeUnknown6(value:Pogoprotos.Networking.Envelopes.Unknown6) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasUnknown6 {
          builderResult.unknown6 = try Pogoprotos.Networking.Envelopes.Unknown6.builderWithPrototype(builderResult.unknown6).mergeFrom(value).buildPartial()
        } else {
          builderResult.unknown6 = value
        }
        builderResult.hasUnknown6 = true
        return self
      }
      public func clearUnknown6() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        unknown6Builder_ = nil
        builderResult.hasUnknown6 = false
        builderResult.unknown6 = nil
        return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasAltitude:Bool {
           get {
                return builderResult.hasAltitude
           }
      }
      public var altitude:Double {
           get {
                return builderResult.altitude
           }
           set (value) {
               builderResult.hasAltitude = true
               builderResult.altitude = value
           }
      }
      public func setAltitude(value:Double) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.altitude = value
        return self
      }
      public func clearAltitude() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasAltitude = false
           builderResult.altitude = Double(0)
           return self
      }
      public var hasAuthInfo:Bool {
           get {
               return builderResult.hasAuthInfo
           }
      }
      public var authInfo:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo! {
           get {
               if authInfoBuilder_ != nil {
                  builderResult.authInfo = authInfoBuilder_.getMessage()
               }
               return builderResult.authInfo
           }
           set (value) {
               builderResult.hasAuthInfo = true
               builderResult.authInfo = value
           }
      }
      private var authInfoBuilder_:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder! {
           didSet {
              builderResult.hasAuthInfo = true
           }
      }
      public func getAuthInfoBuilder() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder {
        if authInfoBuilder_ == nil {
           authInfoBuilder_ = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
           builderResult.authInfo = authInfoBuilder_.getMessage()
           if authInfo != nil {
              try! authInfoBuilder_.mergeFrom(authInfo)
           }
        }
        return authInfoBuilder_
      }
      public func setAuthInfo(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authInfo = value
        return self
      }
      public func mergeAuthInfo(value:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthInfo {
          builderResult.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.builderWithPrototype(builderResult.authInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.authInfo = value
        }
        builderResult.hasAuthInfo = true
        return self
      }
      public func clearAuthInfo() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authInfoBuilder_ = nil
        builderResult.hasAuthInfo = false
        builderResult.authInfo = nil
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      private var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(authTicket)
           }
        }
        return authTicketBuilder_
      }
      public func setAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.authTicket = value
        return self
      }
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult.authTicket).mergeFrom(value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var hasUnknown12:Bool {
           get {
                return builderResult.hasUnknown12
           }
      }
      public var unknown12:Int64 {
           get {
                return builderResult.unknown12
           }
           set (value) {
               builderResult.hasUnknown12 = true
               builderResult.unknown12 = value
           }
      }
      public func setUnknown12(value:Int64) -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        self.unknown12 = value
        return self
      }
      public func clearUnknown12() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder{
           builderResult.hasUnknown12 = false
           builderResult.unknown12 = Int64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.RequestEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.RequestEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.RequestEnvelope = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.RequestEnvelope) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.RequestEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if !other.requests.isEmpty  {
           builderResult.requests += other.requests
        }
        if (other.hasUnknown6) {
            try mergeUnknown6(other.unknown6)
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasAltitude {
             altitude = other.altitude
        }
        if (other.hasAuthInfo) {
            try mergeAuthInfo(other.authInfo)
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(other.authTicket)
        }
        if other.hasUnknown12 {
             unknown12 = other.unknown12
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            statusCode = try input.readInt32()

          case 24:
            requestId = try input.readUInt64()

          case 34:
            let subBuilder = Pogoprotos.Networking.Requests.Request.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            requests += [subBuilder.buildPartial()]

          case 50:
            let subBuilder:Pogoprotos.Networking.Envelopes.Unknown6.Builder = Pogoprotos.Networking.Envelopes.Unknown6.Builder()
            if hasUnknown6 {
              try subBuilder.mergeFrom(unknown6)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            unknown6 = subBuilder.buildPartial()

          case 57:
            latitude = try input.readDouble()

          case 65:
            longitude = try input.readDouble()

          case 73:
            altitude = try input.readDouble()

          case 82:
            let subBuilder:Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder = Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder()
            if hasAuthInfo {
              try subBuilder.mergeFrom(authInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authInfo = subBuilder.buildPartial()

          case 90:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(authTicket)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 96:
            unknown12 = try input.readInt64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? NSNumber {
          resultDecodedBuilder.statusCode = jsonValueStatusCode.intValue
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueRequests = jsonMap["requests"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayRequests:Array<Pogoprotos.Networking.Requests.Request> = []
          for oneValueRequests in jsonValueRequests {
            let messageFromStringRequests = try Pogoprotos.Networking.Requests.Request.Builder.decodeToBuilder(oneValueRequests).build()

            jsonArrayRequests += [messageFromStringRequests]
          }
          resultDecodedBuilder.requests = jsonArrayRequests
        }
        if let jsonValueUnknown6 = jsonMap["unknown6"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.unknown6 = try Pogoprotos.Networking.Envelopes.Unknown6.Builder.decodeToBuilder(jsonValueUnknown6).build()

        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueAltitude = jsonMap["altitude"] as? NSNumber {
          resultDecodedBuilder.altitude = jsonValueAltitude.doubleValue
        }
        if let jsonValueAuthInfo = jsonMap["authInfo"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authInfo = try Pogoprotos.Networking.Envelopes.RequestEnvelope.AuthInfo.Builder.decodeToBuilder(jsonValueAuthInfo).build()

        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonValueAuthTicket).build()

        }
        if let jsonValueUnknown12 = jsonMap["unknown12"] as? String {
          resultDecodedBuilder.unknown12 = Int64(jsonValueUnknown12)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.RequestEnvelope.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class ResponseEnvelope : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasStatusCode:Bool = false
    public private(set) var statusCode:Int32 = Int32(0)

    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:UInt64 = UInt64(0)

    public private(set) var hasApiUrl:Bool = false
    public private(set) var apiUrl:String = ""

    public private(set) var unknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6Response>  = Array<Pogoprotos.Networking.Envelopes.Unknown6Response>()
    public private(set) var hasAuthTicket:Bool = false
    public private(set) var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket!
    public private(set) var returns:Array<NSData> = Array<NSData>()
    public private(set) var hasError:Bool = false
    public private(set) var error:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStatusCode {
        try output.writeInt32(1, value:statusCode)
      }
      if hasRequestId {
        try output.writeUInt64(2, value:requestId)
      }
      if hasApiUrl {
        try output.writeString(3, value:apiUrl)
      }
      for oneElementUnknown6 in unknown6 {
          try output.writeMessage(6, value:oneElementUnknown6)
      }
      if hasAuthTicket {
        try output.writeMessage(7, value:authTicket)
      }
      if !returns.isEmpty {
        for oneValuereturns in returns {
          try output.writeData(100, value:oneValuereturns)
        }
      }
      if hasError {
        try output.writeString(101, value:error)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStatusCode {
        serialize_size += statusCode.computeInt32Size(1)
      }
      if hasRequestId {
        serialize_size += requestId.computeUInt64Size(2)
      }
      if hasApiUrl {
        serialize_size += apiUrl.computeStringSize(3)
      }
      for oneElementUnknown6 in unknown6 {
          serialize_size += oneElementUnknown6.computeMessageSize(6)
      }
      if hasAuthTicket {
          if let varSizeauthTicket = authTicket?.computeMessageSize(7) {
              serialize_size += varSizeauthTicket
          }
      }
      var dataSizeReturns:Int32 = 0
      for oneValuereturns in returns {
          dataSizeReturns += oneValuereturns.computeDataSizeNoTag()
      }
      serialize_size += dataSizeReturns
      serialize_size += 2 * Int32(returns.count)
      if hasError {
        serialize_size += error.computeStringSize(101)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.ResponseEnvelope>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope? {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStatusCode {
        jsonMap["statusCode"] = NSNumber(int:statusCode)
      }
      if hasRequestId {
        jsonMap["requestId"] = "\(requestId)"
      }
      if hasApiUrl {
        jsonMap["apiUrl"] = apiUrl
      }
      if !unknown6.isEmpty {
        var jsonArrayUnknown6:Array<Dictionary<String,AnyObject>> = []
          for oneValueUnknown6 in unknown6 {
            let ecodedMessageUnknown6 = try oneValueUnknown6.encode()
            jsonArrayUnknown6 += [ecodedMessageUnknown6]
          }
        jsonMap["unknown6"] = jsonArrayUnknown6
      }
      if hasAuthTicket {
        jsonMap["authTicket"] = try authTicket.encode()
      }
      if !returns.isEmpty {
        var jsonArrayReturns:Array<String> = []
          for oneValueReturns in returns {
            jsonArrayReturns += [oneValueReturns.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))]
          }
        jsonMap["returns"] = jsonArrayReturns
      }
      if hasError {
        jsonMap["error"] = error
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
      return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStatusCode {
        output += "\(indent) statusCode: \(statusCode) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      if hasApiUrl {
        output += "\(indent) apiUrl: \(apiUrl) \n"
      }
      var unknown6ElementIndex:Int = 0
      for oneElementUnknown6 in unknown6 {
          output += "\(indent) unknown6[\(unknown6ElementIndex)] {\n"
          output += try oneElementUnknown6.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          unknown6ElementIndex += 1
      }
      if hasAuthTicket {
        output += "\(indent) authTicket {\n"
        if let outDescAuthTicket = authTicket {
          output += try outDescAuthTicket.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var returnsElementIndex:Int = 0
      for oneValueReturns in returns  {
          output += "\(indent) returns[\(returnsElementIndex)]: \(oneValueReturns)\n"
          returnsElementIndex += 1
      }
      if hasError {
        output += "\(indent) error: \(error) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStatusCode {
               hashCode = (hashCode &* 31) &+ statusCode.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            if hasApiUrl {
               hashCode = (hashCode &* 31) &+ apiUrl.hashValue
            }
            for oneElementUnknown6 in unknown6 {
                hashCode = (hashCode &* 31) &+ oneElementUnknown6.hashValue
            }
            if hasAuthTicket {
                if let hashValueauthTicket = authTicket?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueauthTicket
                }
            }
            for oneValueReturns in returns {
                hashCode = (hashCode &* 31) &+ oneValueReturns.hashValue
            }
            if hasError {
               hashCode = (hashCode &* 31) &+ error.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.ResponseEnvelope"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.ResponseEnvelope.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.ResponseEnvelope = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStatusCode:Bool {
           get {
                return builderResult.hasStatusCode
           }
      }
      public var statusCode:Int32 {
           get {
                return builderResult.statusCode
           }
           set (value) {
               builderResult.hasStatusCode = true
               builderResult.statusCode = value
           }
      }
      public func setStatusCode(value:Int32) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.statusCode = value
        return self
      }
      public func clearStatusCode() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasStatusCode = false
           builderResult.statusCode = Int32(0)
           return self
      }
      public var hasRequestId:Bool {
           get {
                return builderResult.hasRequestId
           }
      }
      public var requestId:UInt64 {
           get {
                return builderResult.requestId
           }
           set (value) {
               builderResult.hasRequestId = true
               builderResult.requestId = value
           }
      }
      public func setRequestId(value:UInt64) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.requestId = value
        return self
      }
      public func clearRequestId() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasRequestId = false
           builderResult.requestId = UInt64(0)
           return self
      }
      public var hasApiUrl:Bool {
           get {
                return builderResult.hasApiUrl
           }
      }
      public var apiUrl:String {
           get {
                return builderResult.apiUrl
           }
           set (value) {
               builderResult.hasApiUrl = true
               builderResult.apiUrl = value
           }
      }
      public func setApiUrl(value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.apiUrl = value
        return self
      }
      public func clearApiUrl() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasApiUrl = false
           builderResult.apiUrl = ""
           return self
      }
      public var unknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6Response> {
           get {
               return builderResult.unknown6
           }
           set (value) {
               builderResult.unknown6 = value
           }
      }
      public func setUnknown6(value:Array<Pogoprotos.Networking.Envelopes.Unknown6Response>) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.unknown6 = value
        return self
      }
      public func clearUnknown6() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        builderResult.unknown6.removeAll(keepCapacity: false)
        return self
      }
      public var hasAuthTicket:Bool {
           get {
               return builderResult.hasAuthTicket
           }
      }
      public var authTicket:Pogoprotos.Networking.Envelopes.AuthTicket! {
           get {
               if authTicketBuilder_ != nil {
                  builderResult.authTicket = authTicketBuilder_.getMessage()
               }
               return builderResult.authTicket
           }
           set (value) {
               builderResult.hasAuthTicket = true
               builderResult.authTicket = value
           }
      }
      private var authTicketBuilder_:Pogoprotos.Networking.Envelopes.AuthTicket.Builder! {
           didSet {
              builderResult.hasAuthTicket = true
           }
      }
      public func getAuthTicketBuilder() -> Pogoprotos.Networking.Envelopes.AuthTicket.Builder {
        if authTicketBuilder_ == nil {
           authTicketBuilder_ = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
           builderResult.authTicket = authTicketBuilder_.getMessage()
           if authTicket != nil {
              try! authTicketBuilder_.mergeFrom(authTicket)
           }
        }
        return authTicketBuilder_
      }
      public func setAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket!) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.authTicket = value
        return self
      }
      public func mergeAuthTicket(value:Pogoprotos.Networking.Envelopes.AuthTicket) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if builderResult.hasAuthTicket {
          builderResult.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.builderWithPrototype(builderResult.authTicket).mergeFrom(value).buildPartial()
        } else {
          builderResult.authTicket = value
        }
        builderResult.hasAuthTicket = true
        return self
      }
      public func clearAuthTicket() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        authTicketBuilder_ = nil
        builderResult.hasAuthTicket = false
        builderResult.authTicket = nil
        return self
      }
      public var returns:Array<NSData> {
           get {
               return builderResult.returns
           }
           set (array) {
               builderResult.returns = array
           }
      }
      public func setReturns(value:Array<NSData>) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.returns = value
        return self
      }
      public func clearReturns() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
         builderResult.returns.removeAll(keepCapacity: false)
         return self
      }
      public var hasError:Bool {
           get {
                return builderResult.hasError
           }
      }
      public var error:String {
           get {
                return builderResult.error
           }
           set (value) {
               builderResult.hasError = true
               builderResult.error = value
           }
      }
      public func setError(value:String) -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        self.error = value
        return self
      }
      public func clearError() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder{
           builderResult.hasError = false
           builderResult.error = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.ResponseEnvelope()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.ResponseEnvelope {
        let returnMe:Pogoprotos.Networking.Envelopes.ResponseEnvelope = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.ResponseEnvelope) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        if other == Pogoprotos.Networking.Envelopes.ResponseEnvelope() {
         return self
        }
        if other.hasStatusCode {
             statusCode = other.statusCode
        }
        if other.hasRequestId {
             requestId = other.requestId
        }
        if other.hasApiUrl {
             apiUrl = other.apiUrl
        }
        if !other.unknown6.isEmpty  {
           builderResult.unknown6 += other.unknown6
        }
        if (other.hasAuthTicket) {
            try mergeAuthTicket(other.authTicket)
        }
        if !other.returns.isEmpty {
            builderResult.returns += other.returns
        }
        if other.hasError {
             error = other.error
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            statusCode = try input.readInt32()

          case 16:
            requestId = try input.readUInt64()

          case 26:
            apiUrl = try input.readString()

          case 50:
            let subBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            unknown6 += [subBuilder.buildPartial()]

          case 58:
            let subBuilder:Pogoprotos.Networking.Envelopes.AuthTicket.Builder = Pogoprotos.Networking.Envelopes.AuthTicket.Builder()
            if hasAuthTicket {
              try subBuilder.mergeFrom(authTicket)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            authTicket = subBuilder.buildPartial()

          case 802:
            returns += [try input.readData()]

          case 810:
            error = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder()
        if let jsonValueStatusCode = jsonMap["statusCode"] as? NSNumber {
          resultDecodedBuilder.statusCode = jsonValueStatusCode.intValue
        }
        if let jsonValueRequestId = jsonMap["requestId"] as? String {
          resultDecodedBuilder.requestId = UInt64(jsonValueRequestId)!
        }
        if let jsonValueApiUrl = jsonMap["apiUrl"] as? String {
          resultDecodedBuilder.apiUrl = jsonValueApiUrl
        }
        if let jsonValueUnknown6 = jsonMap["unknown6"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayUnknown6:Array<Pogoprotos.Networking.Envelopes.Unknown6Response> = []
          for oneValueUnknown6 in jsonValueUnknown6 {
            let messageFromStringUnknown6 = try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.decodeToBuilder(oneValueUnknown6).build()

            jsonArrayUnknown6 += [messageFromStringUnknown6]
          }
          resultDecodedBuilder.unknown6 = jsonArrayUnknown6
        }
        if let jsonValueAuthTicket = jsonMap["authTicket"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.authTicket = try Pogoprotos.Networking.Envelopes.AuthTicket.Builder.decodeToBuilder(jsonValueAuthTicket).build()

        }
        if let jsonValueReturns = jsonMap["returns"] as? Array<String> {
          var jsonArrayReturns:Array<NSData> = []
          for oneValueReturns in jsonValueReturns {
            jsonArrayReturns += [NSData(base64EncodedString:oneValueReturns, options: NSDataBase64DecodingOptions(rawValue:0))!]
          }
          resultDecodedBuilder.returns = jsonArrayReturns
        }
        if let jsonValueError = jsonMap["error"] as? String {
          resultDecodedBuilder.error = jsonValueError
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.ResponseEnvelope.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Signature : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class LocationFix : GeneratedMessage, GeneratedMessageProtocol {
        // "network", "gps", "fused", possibly others
        public private(set) var hasProvider:Bool = false
        public private(set) var provider:String = ""

        // in ms
        public private(set) var hasTimestampSinceStart:Bool = false
        public private(set) var timestampSinceStart:UInt64 = UInt64(0)

        public private(set) var hasLatitude:Bool = false
        public private(set) var latitude:Float = Float(0)

        public private(set) var hasLongitude:Bool = false
        public private(set) var longitude:Float = Float(0)

        // ??? shows up in struct, dunno where these go
        // float device_speed;
        // float device_course;
        public private(set) var hasHorizontalAccuracy:Bool = false
        public private(set) var horizontalAccuracy:Float = Float(0)

        public private(set) var hasAltitude:Bool = false
        public private(set) var altitude:Float = Float(0)

        // iOS only? (range seems to be ~10-12)
        public private(set) var hasVerticalAccuracy:Bool = false
        public private(set) var verticalAccuracy:Float = Float(0)

        // Usually 3 (possibly GPS status: 1 = no fix, 2 = acquiring/inaccurate, 3 = fix acquired)
        public private(set) var hasProviderStatus:Bool = false
        public private(set) var providerStatus:UInt64 = UInt64(0)

        // On iOS there are some LocationFixes with unk26=1 and everything else empty
        public private(set) var hasFloor:Bool = false
        public private(set) var floor:UInt32 = UInt32(0)

        // Always 1 (if there is data at all)
        public private(set) var hasLocationType:Bool = false
        public private(set) var locationType:UInt64 = UInt64(0)

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasProvider {
            try output.writeString(1, value:provider)
          }
          if hasTimestampSinceStart {
            try output.writeUInt64(2, value:timestampSinceStart)
          }
          if hasLatitude {
            try output.writeFloat(13, value:latitude)
          }
          if hasLongitude {
            try output.writeFloat(14, value:longitude)
          }
          if hasHorizontalAccuracy {
            try output.writeFloat(20, value:horizontalAccuracy)
          }
          if hasAltitude {
            try output.writeFloat(21, value:altitude)
          }
          if hasVerticalAccuracy {
            try output.writeFloat(22, value:verticalAccuracy)
          }
          if hasProviderStatus {
            try output.writeUInt64(26, value:providerStatus)
          }
          if hasFloor {
            try output.writeUInt32(27, value:floor)
          }
          if hasLocationType {
            try output.writeUInt64(28, value:locationType)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasProvider {
            serialize_size += provider.computeStringSize(1)
          }
          if hasTimestampSinceStart {
            serialize_size += timestampSinceStart.computeUInt64Size(2)
          }
          if hasLatitude {
            serialize_size += latitude.computeFloatSize(13)
          }
          if hasLongitude {
            serialize_size += longitude.computeFloatSize(14)
          }
          if hasHorizontalAccuracy {
            serialize_size += horizontalAccuracy.computeFloatSize(20)
          }
          if hasAltitude {
            serialize_size += altitude.computeFloatSize(21)
          }
          if hasVerticalAccuracy {
            serialize_size += verticalAccuracy.computeFloatSize(22)
          }
          if hasProviderStatus {
            serialize_size += providerStatus.computeUInt64Size(26)
          }
          if hasFloor {
            serialize_size += floor.computeUInt32Size(27)
          }
          if hasLocationType {
            serialize_size += locationType.computeUInt64Size(28)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Signature.LocationFix> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Signature.LocationFix>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix? {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
          return Pogoprotos.Networking.Envelopes.Signature.LocationFix.classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Signature.LocationFix) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasProvider {
            jsonMap["provider"] = provider
          }
          if hasTimestampSinceStart {
            jsonMap["timestampSinceStart"] = "\(timestampSinceStart)"
          }
          if hasLatitude {
            jsonMap["latitude"] = NSNumber(float:latitude)
          }
          if hasLongitude {
            jsonMap["longitude"] = NSNumber(float:longitude)
          }
          if hasHorizontalAccuracy {
            jsonMap["horizontalAccuracy"] = NSNumber(float:horizontalAccuracy)
          }
          if hasAltitude {
            jsonMap["altitude"] = NSNumber(float:altitude)
          }
          if hasVerticalAccuracy {
            jsonMap["verticalAccuracy"] = NSNumber(float:verticalAccuracy)
          }
          if hasProviderStatus {
            jsonMap["providerStatus"] = "\(providerStatus)"
          }
          if hasFloor {
            jsonMap["floor"] = NSNumber(unsignedInt:floor)
          }
          if hasLocationType {
            jsonMap["locationType"] = "\(locationType)"
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
          return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasProvider {
            output += "\(indent) provider: \(provider) \n"
          }
          if hasTimestampSinceStart {
            output += "\(indent) timestampSinceStart: \(timestampSinceStart) \n"
          }
          if hasLatitude {
            output += "\(indent) latitude: \(latitude) \n"
          }
          if hasLongitude {
            output += "\(indent) longitude: \(longitude) \n"
          }
          if hasHorizontalAccuracy {
            output += "\(indent) horizontalAccuracy: \(horizontalAccuracy) \n"
          }
          if hasAltitude {
            output += "\(indent) altitude: \(altitude) \n"
          }
          if hasVerticalAccuracy {
            output += "\(indent) verticalAccuracy: \(verticalAccuracy) \n"
          }
          if hasProviderStatus {
            output += "\(indent) providerStatus: \(providerStatus) \n"
          }
          if hasFloor {
            output += "\(indent) floor: \(floor) \n"
          }
          if hasLocationType {
            output += "\(indent) locationType: \(locationType) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasProvider {
                   hashCode = (hashCode &* 31) &+ provider.hashValue
                }
                if hasTimestampSinceStart {
                   hashCode = (hashCode &* 31) &+ timestampSinceStart.hashValue
                }
                if hasLatitude {
                   hashCode = (hashCode &* 31) &+ latitude.hashValue
                }
                if hasLongitude {
                   hashCode = (hashCode &* 31) &+ longitude.hashValue
                }
                if hasHorizontalAccuracy {
                   hashCode = (hashCode &* 31) &+ horizontalAccuracy.hashValue
                }
                if hasAltitude {
                   hashCode = (hashCode &* 31) &+ altitude.hashValue
                }
                if hasVerticalAccuracy {
                   hashCode = (hashCode &* 31) &+ verticalAccuracy.hashValue
                }
                if hasProviderStatus {
                   hashCode = (hashCode &* 31) &+ providerStatus.hashValue
                }
                if hasFloor {
                   hashCode = (hashCode &* 31) &+ floor.hashValue
                }
                if hasLocationType {
                   hashCode = (hashCode &* 31) &+ locationType.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.LocationFix"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.LocationFix"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Signature.LocationFix.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Signature.LocationFix = Pogoprotos.Networking.Envelopes.Signature.LocationFix()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasProvider:Bool {
               get {
                    return builderResult.hasProvider
               }
          }
          public var provider:String {
               get {
                    return builderResult.provider
               }
               set (value) {
                   builderResult.hasProvider = true
                   builderResult.provider = value
               }
          }
          public func setProvider(value:String) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.provider = value
            return self
          }
          public func clearProvider() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasProvider = false
               builderResult.provider = ""
               return self
          }
          public var hasTimestampSinceStart:Bool {
               get {
                    return builderResult.hasTimestampSinceStart
               }
          }
          public var timestampSinceStart:UInt64 {
               get {
                    return builderResult.timestampSinceStart
               }
               set (value) {
                   builderResult.hasTimestampSinceStart = true
                   builderResult.timestampSinceStart = value
               }
          }
          public func setTimestampSinceStart(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.timestampSinceStart = value
            return self
          }
          public func clearTimestampSinceStart() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasTimestampSinceStart = false
               builderResult.timestampSinceStart = UInt64(0)
               return self
          }
          public var hasLatitude:Bool {
               get {
                    return builderResult.hasLatitude
               }
          }
          public var latitude:Float {
               get {
                    return builderResult.latitude
               }
               set (value) {
                   builderResult.hasLatitude = true
                   builderResult.latitude = value
               }
          }
          public func setLatitude(value:Float) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.latitude = value
            return self
          }
          public func clearLatitude() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasLatitude = false
               builderResult.latitude = Float(0)
               return self
          }
          public var hasLongitude:Bool {
               get {
                    return builderResult.hasLongitude
               }
          }
          public var longitude:Float {
               get {
                    return builderResult.longitude
               }
               set (value) {
                   builderResult.hasLongitude = true
                   builderResult.longitude = value
               }
          }
          public func setLongitude(value:Float) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.longitude = value
            return self
          }
          public func clearLongitude() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasLongitude = false
               builderResult.longitude = Float(0)
               return self
          }
          public var hasHorizontalAccuracy:Bool {
               get {
                    return builderResult.hasHorizontalAccuracy
               }
          }
          public var horizontalAccuracy:Float {
               get {
                    return builderResult.horizontalAccuracy
               }
               set (value) {
                   builderResult.hasHorizontalAccuracy = true
                   builderResult.horizontalAccuracy = value
               }
          }
          public func setHorizontalAccuracy(value:Float) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.horizontalAccuracy = value
            return self
          }
          public func clearHorizontalAccuracy() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasHorizontalAccuracy = false
               builderResult.horizontalAccuracy = Float(0)
               return self
          }
          public var hasAltitude:Bool {
               get {
                    return builderResult.hasAltitude
               }
          }
          public var altitude:Float {
               get {
                    return builderResult.altitude
               }
               set (value) {
                   builderResult.hasAltitude = true
                   builderResult.altitude = value
               }
          }
          public func setAltitude(value:Float) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.altitude = value
            return self
          }
          public func clearAltitude() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasAltitude = false
               builderResult.altitude = Float(0)
               return self
          }
          public var hasVerticalAccuracy:Bool {
               get {
                    return builderResult.hasVerticalAccuracy
               }
          }
          public var verticalAccuracy:Float {
               get {
                    return builderResult.verticalAccuracy
               }
               set (value) {
                   builderResult.hasVerticalAccuracy = true
                   builderResult.verticalAccuracy = value
               }
          }
          public func setVerticalAccuracy(value:Float) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.verticalAccuracy = value
            return self
          }
          public func clearVerticalAccuracy() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasVerticalAccuracy = false
               builderResult.verticalAccuracy = Float(0)
               return self
          }
          public var hasProviderStatus:Bool {
               get {
                    return builderResult.hasProviderStatus
               }
          }
          public var providerStatus:UInt64 {
               get {
                    return builderResult.providerStatus
               }
               set (value) {
                   builderResult.hasProviderStatus = true
                   builderResult.providerStatus = value
               }
          }
          public func setProviderStatus(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.providerStatus = value
            return self
          }
          public func clearProviderStatus() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasProviderStatus = false
               builderResult.providerStatus = UInt64(0)
               return self
          }
          public var hasFloor:Bool {
               get {
                    return builderResult.hasFloor
               }
          }
          public var floor:UInt32 {
               get {
                    return builderResult.floor
               }
               set (value) {
                   builderResult.hasFloor = true
                   builderResult.floor = value
               }
          }
          public func setFloor(value:UInt32) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.floor = value
            return self
          }
          public func clearFloor() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasFloor = false
               builderResult.floor = UInt32(0)
               return self
          }
          public var hasLocationType:Bool {
               get {
                    return builderResult.hasLocationType
               }
          }
          public var locationType:UInt64 {
               get {
                    return builderResult.locationType
               }
               set (value) {
                   builderResult.hasLocationType = true
                   builderResult.locationType = value
               }
          }
          public func setLocationType(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            self.locationType = value
            return self
          }
          public func clearLocationType() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder{
               builderResult.hasLocationType = false
               builderResult.locationType = UInt64(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Signature.LocationFix()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Signature.LocationFix {
            let returnMe:Pogoprotos.Networking.Envelopes.Signature.LocationFix = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Signature.LocationFix) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            if other == Pogoprotos.Networking.Envelopes.Signature.LocationFix() {
             return self
            }
            if other.hasProvider {
                 provider = other.provider
            }
            if other.hasTimestampSinceStart {
                 timestampSinceStart = other.timestampSinceStart
            }
            if other.hasLatitude {
                 latitude = other.latitude
            }
            if other.hasLongitude {
                 longitude = other.longitude
            }
            if other.hasHorizontalAccuracy {
                 horizontalAccuracy = other.horizontalAccuracy
            }
            if other.hasAltitude {
                 altitude = other.altitude
            }
            if other.hasVerticalAccuracy {
                 verticalAccuracy = other.verticalAccuracy
            }
            if other.hasProviderStatus {
                 providerStatus = other.providerStatus
            }
            if other.hasFloor {
                 floor = other.floor
            }
            if other.hasLocationType {
                 locationType = other.locationType
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                provider = try input.readString()

              case 16:
                timestampSinceStart = try input.readUInt64()

              case 109:
                latitude = try input.readFloat()

              case 117:
                longitude = try input.readFloat()

              case 165:
                horizontalAccuracy = try input.readFloat()

              case 173:
                altitude = try input.readFloat()

              case 181:
                verticalAccuracy = try input.readFloat()

              case 208:
                providerStatus = try input.readUInt64()

              case 216:
                floor = try input.readUInt32()

              case 224:
                locationType = try input.readUInt64()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder()
            if let jsonValueProvider = jsonMap["provider"] as? String {
              resultDecodedBuilder.provider = jsonValueProvider
            }
            if let jsonValueTimestampSinceStart = jsonMap["timestampSinceStart"] as? String {
              resultDecodedBuilder.timestampSinceStart = UInt64(jsonValueTimestampSinceStart)!
            }
            if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
              resultDecodedBuilder.latitude = jsonValueLatitude.floatValue
            }
            if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
              resultDecodedBuilder.longitude = jsonValueLongitude.floatValue
            }
            if let jsonValueHorizontalAccuracy = jsonMap["horizontalAccuracy"] as? NSNumber {
              resultDecodedBuilder.horizontalAccuracy = jsonValueHorizontalAccuracy.floatValue
            }
            if let jsonValueAltitude = jsonMap["altitude"] as? NSNumber {
              resultDecodedBuilder.altitude = jsonValueAltitude.floatValue
            }
            if let jsonValueVerticalAccuracy = jsonMap["verticalAccuracy"] as? NSNumber {
              resultDecodedBuilder.verticalAccuracy = jsonValueVerticalAccuracy.floatValue
            }
            if let jsonValueProviderStatus = jsonMap["providerStatus"] as? String {
              resultDecodedBuilder.providerStatus = UInt64(jsonValueProviderStatus)!
            }
            if let jsonValueFloor = jsonMap["floor"] as? NSNumber {
              resultDecodedBuilder.floor = jsonValueFloor.unsignedIntValue
            }
            if let jsonValueLocationType = jsonMap["locationType"] as? String {
              resultDecodedBuilder.locationType = UInt64(jsonValueLocationType)!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      // don't really care about this since we're not using it
      final public class AndroidGpsInfo : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasTimeToFix:Bool = false
        public private(set) var timeToFix:UInt64 = UInt64(0)

        public private(set) var satellitesPrn:Array<Int32> = Array<Int32>()
        private var satellitesPrnMemoizedSerializedSize:Int32 = -1
        public private(set) var snr:Array<Float> = Array<Float>()
        private var snrMemoizedSerializedSize:Int32 = -1
        public private(set) var azimuth:Array<Float> = Array<Float>()
        private var azimuthMemoizedSerializedSize:Int32 = -1
        public private(set) var elevation:Array<Float> = Array<Float>()
        private var elevationMemoizedSerializedSize:Int32 = -1
        public private(set) var hasAlmanac:Array<Bool> = Array<Bool>()
        private var hasAlmanacMemoizedSerializedSize:Int32 = -1
        public private(set) var hasEphemeris:Array<Bool> = Array<Bool>()
        private var hasEphemerisMemoizedSerializedSize:Int32 = -1
        public private(set) var usedInFix:Array<Bool> = Array<Bool>()
        private var usedInFixMemoizedSerializedSize:Int32 = -1
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasTimeToFix {
            try output.writeUInt64(1, value:timeToFix)
          }
          if !satellitesPrn.isEmpty {
            try output.writeRawVarint32(18)
            try output.writeRawVarint32(satellitesPrnMemoizedSerializedSize)
            for oneValuesatellitesPrn in satellitesPrn {
              try output.writeInt32NoTag(oneValuesatellitesPrn)
            }
          }
          if !snr.isEmpty {
            try output.writeRawVarint32(26)
            try output.writeRawVarint32(snrMemoizedSerializedSize)
            for oneValuesnr in snr {
              try output.writeFloatNoTag(oneValuesnr)
            }
          }
          if !azimuth.isEmpty {
            try output.writeRawVarint32(34)
            try output.writeRawVarint32(azimuthMemoizedSerializedSize)
            for oneValueazimuth in azimuth {
              try output.writeFloatNoTag(oneValueazimuth)
            }
          }
          if !elevation.isEmpty {
            try output.writeRawVarint32(42)
            try output.writeRawVarint32(elevationMemoizedSerializedSize)
            for oneValueelevation in elevation {
              try output.writeFloatNoTag(oneValueelevation)
            }
          }
          if !hasAlmanac.isEmpty {
            try output.writeRawVarint32(50)
            try output.writeRawVarint32(hasAlmanacMemoizedSerializedSize)
            for oneValuehasAlmanac in hasAlmanac {
              try output.writeBoolNoTag(oneValuehasAlmanac)
            }
          }
          if !hasEphemeris.isEmpty {
            try output.writeRawVarint32(58)
            try output.writeRawVarint32(hasEphemerisMemoizedSerializedSize)
            for oneValuehasEphemeris in hasEphemeris {
              try output.writeBoolNoTag(oneValuehasEphemeris)
            }
          }
          if !usedInFix.isEmpty {
            try output.writeRawVarint32(66)
            try output.writeRawVarint32(usedInFixMemoizedSerializedSize)
            for oneValueusedInFix in usedInFix {
              try output.writeBoolNoTag(oneValueusedInFix)
            }
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasTimeToFix {
            serialize_size += timeToFix.computeUInt64Size(1)
          }
          var dataSizeSatellitesPrn:Int32 = 0
          for oneValuesatellitesPrn in satellitesPrn {
              dataSizeSatellitesPrn += oneValuesatellitesPrn.computeInt32SizeNoTag()
          }
          serialize_size += dataSizeSatellitesPrn
          if !satellitesPrn.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeSatellitesPrn.computeInt32SizeNoTag()
          }
          satellitesPrnMemoizedSerializedSize = dataSizeSatellitesPrn
          var dataSizeSnr:Int32 = 0
          dataSizeSnr = 4 * Int32(snr.count)
          serialize_size += dataSizeSnr
          if !snr.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeSnr.computeInt32SizeNoTag()
          }
          snrMemoizedSerializedSize = dataSizeSnr
          var dataSizeAzimuth:Int32 = 0
          dataSizeAzimuth = 4 * Int32(azimuth.count)
          serialize_size += dataSizeAzimuth
          if !azimuth.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeAzimuth.computeInt32SizeNoTag()
          }
          azimuthMemoizedSerializedSize = dataSizeAzimuth
          var dataSizeElevation:Int32 = 0
          dataSizeElevation = 4 * Int32(elevation.count)
          serialize_size += dataSizeElevation
          if !elevation.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeElevation.computeInt32SizeNoTag()
          }
          elevationMemoizedSerializedSize = dataSizeElevation
          var dataSizeHasAlmanac:Int32 = 0
          dataSizeHasAlmanac = 1 * Int32(hasAlmanac.count)
          serialize_size += dataSizeHasAlmanac
          if !hasAlmanac.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeHasAlmanac.computeInt32SizeNoTag()
          }
          hasAlmanacMemoizedSerializedSize = dataSizeHasAlmanac
          var dataSizeHasEphemeris:Int32 = 0
          dataSizeHasEphemeris = 1 * Int32(hasEphemeris.count)
          serialize_size += dataSizeHasEphemeris
          if !hasEphemeris.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeHasEphemeris.computeInt32SizeNoTag()
          }
          hasEphemerisMemoizedSerializedSize = dataSizeHasEphemeris
          var dataSizeUsedInFix:Int32 = 0
          dataSizeUsedInFix = 1 * Int32(usedInFix.count)
          serialize_size += dataSizeUsedInFix
          if !usedInFix.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeUsedInFix.computeInt32SizeNoTag()
          }
          usedInFixMemoizedSerializedSize = dataSizeUsedInFix
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo? {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
          return Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasTimeToFix {
            jsonMap["timeToFix"] = "\(timeToFix)"
          }
          if !satellitesPrn.isEmpty {
            var jsonArraySatellitesPrn:Array<NSNumber> = []
              for oneValueSatellitesPrn in satellitesPrn {
                jsonArraySatellitesPrn += [NSNumber(int:oneValueSatellitesPrn)]
              }
            jsonMap["satellitesPrn"] = jsonArraySatellitesPrn
          }
          if !snr.isEmpty {
            var jsonArraySnr:Array<NSNumber> = []
              for oneValueSnr in snr {
                jsonArraySnr += [NSNumber(float:oneValueSnr)]
              }
            jsonMap["snr"] = jsonArraySnr
          }
          if !azimuth.isEmpty {
            var jsonArrayAzimuth:Array<NSNumber> = []
              for oneValueAzimuth in azimuth {
                jsonArrayAzimuth += [NSNumber(float:oneValueAzimuth)]
              }
            jsonMap["azimuth"] = jsonArrayAzimuth
          }
          if !elevation.isEmpty {
            var jsonArrayElevation:Array<NSNumber> = []
              for oneValueElevation in elevation {
                jsonArrayElevation += [NSNumber(float:oneValueElevation)]
              }
            jsonMap["elevation"] = jsonArrayElevation
          }
          if !hasAlmanac.isEmpty {
            jsonMap["hasAlmanac"] = hasAlmanac
          }
          if !hasEphemeris.isEmpty {
            jsonMap["hasEphemeris"] = hasEphemeris
          }
          if !usedInFix.isEmpty {
            jsonMap["usedInFix"] = usedInFix
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasTimeToFix {
            output += "\(indent) timeToFix: \(timeToFix) \n"
          }
          var satellitesPrnElementIndex:Int = 0
          for oneValueSatellitesPrn in satellitesPrn  {
              output += "\(indent) satellitesPrn[\(satellitesPrnElementIndex)]: \(oneValueSatellitesPrn)\n"
              satellitesPrnElementIndex += 1
          }
          var snrElementIndex:Int = 0
          for oneValueSnr in snr  {
              output += "\(indent) snr[\(snrElementIndex)]: \(oneValueSnr)\n"
              snrElementIndex += 1
          }
          var azimuthElementIndex:Int = 0
          for oneValueAzimuth in azimuth  {
              output += "\(indent) azimuth[\(azimuthElementIndex)]: \(oneValueAzimuth)\n"
              azimuthElementIndex += 1
          }
          var elevationElementIndex:Int = 0
          for oneValueElevation in elevation  {
              output += "\(indent) elevation[\(elevationElementIndex)]: \(oneValueElevation)\n"
              elevationElementIndex += 1
          }
          var hasAlmanacElementIndex:Int = 0
          for oneValueHasAlmanac in hasAlmanac  {
              output += "\(indent) hasAlmanac[\(hasAlmanacElementIndex)]: \(oneValueHasAlmanac)\n"
              hasAlmanacElementIndex += 1
          }
          var hasEphemerisElementIndex:Int = 0
          for oneValueHasEphemeris in hasEphemeris  {
              output += "\(indent) hasEphemeris[\(hasEphemerisElementIndex)]: \(oneValueHasEphemeris)\n"
              hasEphemerisElementIndex += 1
          }
          var usedInFixElementIndex:Int = 0
          for oneValueUsedInFix in usedInFix  {
              output += "\(indent) usedInFix[\(usedInFixElementIndex)]: \(oneValueUsedInFix)\n"
              usedInFixElementIndex += 1
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTimeToFix {
                   hashCode = (hashCode &* 31) &+ timeToFix.hashValue
                }
                for oneValueSatellitesPrn in satellitesPrn {
                    hashCode = (hashCode &* 31) &+ oneValueSatellitesPrn.hashValue
                }
                for oneValueSnr in snr {
                    hashCode = (hashCode &* 31) &+ oneValueSnr.hashValue
                }
                for oneValueAzimuth in azimuth {
                    hashCode = (hashCode &* 31) &+ oneValueAzimuth.hashValue
                }
                for oneValueElevation in elevation {
                    hashCode = (hashCode &* 31) &+ oneValueElevation.hashValue
                }
                for oneValueHasAlmanac in hasAlmanac {
                    hashCode = (hashCode &* 31) &+ oneValueHasAlmanac.hashValue
                }
                for oneValueHasEphemeris in hasEphemeris {
                    hashCode = (hashCode &* 31) &+ oneValueHasEphemeris.hashValue
                }
                for oneValueUsedInFix in usedInFix {
                    hashCode = (hashCode &* 31) &+ oneValueUsedInFix.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo = Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasTimeToFix:Bool {
               get {
                    return builderResult.hasTimeToFix
               }
          }
          public var timeToFix:UInt64 {
               get {
                    return builderResult.timeToFix
               }
               set (value) {
                   builderResult.hasTimeToFix = true
                   builderResult.timeToFix = value
               }
          }
          public func setTimeToFix(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.timeToFix = value
            return self
          }
          public func clearTimeToFix() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder{
               builderResult.hasTimeToFix = false
               builderResult.timeToFix = UInt64(0)
               return self
          }
          public var satellitesPrn:Array<Int32> {
               get {
                   return builderResult.satellitesPrn
               }
               set (array) {
                   builderResult.satellitesPrn = array
               }
          }
          public func setSatellitesPrn(value:Array<Int32>) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.satellitesPrn = value
            return self
          }
          public func clearSatellitesPrn() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
             builderResult.satellitesPrn.removeAll(keepCapacity: false)
             return self
          }
          public var snr:Array<Float> {
               get {
                   return builderResult.snr
               }
               set (array) {
                   builderResult.snr = array
               }
          }
          public func setSnr(value:Array<Float>) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.snr = value
            return self
          }
          public func clearSnr() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
             builderResult.snr.removeAll(keepCapacity: false)
             return self
          }
          public var azimuth:Array<Float> {
               get {
                   return builderResult.azimuth
               }
               set (array) {
                   builderResult.azimuth = array
               }
          }
          public func setAzimuth(value:Array<Float>) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.azimuth = value
            return self
          }
          public func clearAzimuth() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
             builderResult.azimuth.removeAll(keepCapacity: false)
             return self
          }
          public var elevation:Array<Float> {
               get {
                   return builderResult.elevation
               }
               set (array) {
                   builderResult.elevation = array
               }
          }
          public func setElevation(value:Array<Float>) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.elevation = value
            return self
          }
          public func clearElevation() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
             builderResult.elevation.removeAll(keepCapacity: false)
             return self
          }
          public var hasAlmanac:Array<Bool> {
               get {
                   return builderResult.hasAlmanac
               }
               set (array) {
                   builderResult.hasAlmanac = array
               }
          }
          public func setHasAlmanac(value:Array<Bool>) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.hasAlmanac = value
            return self
          }
          public func clearHasAlmanac() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
             builderResult.hasAlmanac.removeAll(keepCapacity: false)
             return self
          }
          public var hasEphemeris:Array<Bool> {
               get {
                   return builderResult.hasEphemeris
               }
               set (array) {
                   builderResult.hasEphemeris = array
               }
          }
          public func setHasEphemeris(value:Array<Bool>) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.hasEphemeris = value
            return self
          }
          public func clearHasEphemeris() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
             builderResult.hasEphemeris.removeAll(keepCapacity: false)
             return self
          }
          public var usedInFix:Array<Bool> {
               get {
                   return builderResult.usedInFix
               }
               set (array) {
                   builderResult.usedInFix = array
               }
          }
          public func setUsedInFix(value:Array<Bool>) -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            self.usedInFix = value
            return self
          }
          public func clearUsedInFix() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
             builderResult.usedInFix.removeAll(keepCapacity: false)
             return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo() {
             return self
            }
            if other.hasTimeToFix {
                 timeToFix = other.timeToFix
            }
            if !other.satellitesPrn.isEmpty {
                builderResult.satellitesPrn += other.satellitesPrn
            }
            if !other.snr.isEmpty {
                builderResult.snr += other.snr
            }
            if !other.azimuth.isEmpty {
                builderResult.azimuth += other.azimuth
            }
            if !other.elevation.isEmpty {
                builderResult.elevation += other.elevation
            }
            if !other.hasAlmanac.isEmpty {
                builderResult.hasAlmanac += other.hasAlmanac
            }
            if !other.hasEphemeris.isEmpty {
                builderResult.hasEphemeris += other.hasEphemeris
            }
            if !other.usedInFix.isEmpty {
                builderResult.usedInFix += other.usedInFix
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                timeToFix = try input.readUInt64()

              case 18:
                let length:Int32 = try input.readRawVarint32()
                let limit:Int32 = try input.pushLimit(length)
                while (input.bytesUntilLimit() > 0) {
                  builderResult.satellitesPrn += [try input.readInt32()]
                }
                input.popLimit(limit)

              case 26:
                let length:Int32 = try input.readRawVarint32()
                let limit:Int32 = try input.pushLimit(length)
                while (input.bytesUntilLimit() > 0) {
                  builderResult.snr += [try input.readFloat()]
                }
                input.popLimit(limit)

              case 34:
                let length:Int32 = try input.readRawVarint32()
                let limit:Int32 = try input.pushLimit(length)
                while (input.bytesUntilLimit() > 0) {
                  builderResult.azimuth += [try input.readFloat()]
                }
                input.popLimit(limit)

              case 42:
                let length:Int32 = try input.readRawVarint32()
                let limit:Int32 = try input.pushLimit(length)
                while (input.bytesUntilLimit() > 0) {
                  builderResult.elevation += [try input.readFloat()]
                }
                input.popLimit(limit)

              case 50:
                let length:Int32 = try input.readRawVarint32()
                let limit:Int32 = try input.pushLimit(length)
                while (input.bytesUntilLimit() > 0) {
                  builderResult.hasAlmanac += [try input.readBool()]
                }
                input.popLimit(limit)

              case 58:
                let length:Int32 = try input.readRawVarint32()
                let limit:Int32 = try input.pushLimit(length)
                while (input.bytesUntilLimit() > 0) {
                  builderResult.hasEphemeris += [try input.readBool()]
                }
                input.popLimit(limit)

              case 66:
                let length:Int32 = try input.readRawVarint32()
                let limit:Int32 = try input.pushLimit(length)
                while (input.bytesUntilLimit() > 0) {
                  builderResult.usedInFix += [try input.readBool()]
                }
                input.popLimit(limit)

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder()
            if let jsonValueTimeToFix = jsonMap["timeToFix"] as? String {
              resultDecodedBuilder.timeToFix = UInt64(jsonValueTimeToFix)!
            }
            if let jsonValueSatellitesPrn = jsonMap["satellitesPrn"] as? Array<NSNumber> {
              var jsonArraySatellitesPrn:Array<Int32> = []
              for oneValueSatellitesPrn in jsonValueSatellitesPrn {
                jsonArraySatellitesPrn += [oneValueSatellitesPrn.intValue]
              }
              resultDecodedBuilder.satellitesPrn = jsonArraySatellitesPrn
            }
            if let jsonValueSnr = jsonMap["snr"] as? Array<NSNumber> {
              var jsonArraySnr:Array<Float> = []
              for oneValueSnr in jsonValueSnr {
                jsonArraySnr += [oneValueSnr.floatValue]
              }
              resultDecodedBuilder.snr = jsonArraySnr
            }
            if let jsonValueAzimuth = jsonMap["azimuth"] as? Array<NSNumber> {
              var jsonArrayAzimuth:Array<Float> = []
              for oneValueAzimuth in jsonValueAzimuth {
                jsonArrayAzimuth += [oneValueAzimuth.floatValue]
              }
              resultDecodedBuilder.azimuth = jsonArrayAzimuth
            }
            if let jsonValueElevation = jsonMap["elevation"] as? Array<NSNumber> {
              var jsonArrayElevation:Array<Float> = []
              for oneValueElevation in jsonValueElevation {
                jsonArrayElevation += [oneValueElevation.floatValue]
              }
              resultDecodedBuilder.elevation = jsonArrayElevation
            }
            if let jsonValueHasAlmanac = jsonMap["hasAlmanac"] as? Array<Bool> {
              resultDecodedBuilder.hasAlmanac = jsonValueHasAlmanac
            }
            if let jsonValueHasEphemeris = jsonMap["hasEphemeris"] as? Array<Bool> {
              resultDecodedBuilder.hasEphemeris = jsonValueHasEphemeris
            }
            if let jsonValueUsedInFix = jsonMap["usedInFix"] as? Array<Bool> {
              resultDecodedBuilder.usedInFix = jsonValueUsedInFix
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class SensorInfo : GeneratedMessage, GeneratedMessageProtocol {
        // in ms
        public private(set) var hasTimestampSnapshot:Bool = false
        public private(set) var timestampSnapshot:UInt64 = UInt64(0)

        public private(set) var hasMagnetometerX:Bool = false
        public private(set) var magnetometerX:Double = Double(0)

        public private(set) var hasMagnetometerY:Bool = false
        public private(set) var magnetometerY:Double = Double(0)

        public private(set) var hasMagnetometerZ:Bool = false
        public private(set) var magnetometerZ:Double = Double(0)

        public private(set) var hasAngleNormalizedX:Bool = false
        public private(set) var angleNormalizedX:Double = Double(0)

        public private(set) var hasAngleNormalizedY:Bool = false
        public private(set) var angleNormalizedY:Double = Double(0)

        public private(set) var hasAngleNormalizedZ:Bool = false
        public private(set) var angleNormalizedZ:Double = Double(0)

        public private(set) var hasAccelRawX:Bool = false
        public private(set) var accelRawX:Double = Double(0)

        public private(set) var hasAccelRawY:Bool = false
        public private(set) var accelRawY:Double = Double(0)

        public private(set) var hasAccelRawZ:Bool = false
        public private(set) var accelRawZ:Double = Double(0)

        public private(set) var hasGyroscopeRawX:Bool = false
        public private(set) var gyroscopeRawX:Double = Double(0)

        public private(set) var hasGyroscopeRawY:Bool = false
        public private(set) var gyroscopeRawY:Double = Double(0)

        public private(set) var hasGyroscopeRawZ:Bool = false
        public private(set) var gyroscopeRawZ:Double = Double(0)

        public private(set) var hasAccelNormalizedX:Bool = false
        public private(set) var accelNormalizedX:Double = Double(0)

        public private(set) var hasAccelNormalizedY:Bool = false
        public private(set) var accelNormalizedY:Double = Double(0)

        public private(set) var hasAccelNormalizedZ:Bool = false
        public private(set) var accelNormalizedZ:Double = Double(0)

        // Always 3
        public private(set) var hasAccelerometerAxes:Bool = false
        public private(set) var accelerometerAxes:UInt64 = UInt64(0)

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasTimestampSnapshot {
            try output.writeUInt64(1, value:timestampSnapshot)
          }
          if hasMagnetometerX {
            try output.writeDouble(3, value:magnetometerX)
          }
          if hasMagnetometerY {
            try output.writeDouble(4, value:magnetometerY)
          }
          if hasMagnetometerZ {
            try output.writeDouble(5, value:magnetometerZ)
          }
          if hasAngleNormalizedX {
            try output.writeDouble(6, value:angleNormalizedX)
          }
          if hasAngleNormalizedY {
            try output.writeDouble(7, value:angleNormalizedY)
          }
          if hasAngleNormalizedZ {
            try output.writeDouble(8, value:angleNormalizedZ)
          }
          if hasAccelRawX {
            try output.writeDouble(10, value:accelRawX)
          }
          if hasAccelRawY {
            try output.writeDouble(11, value:accelRawY)
          }
          if hasAccelRawZ {
            try output.writeDouble(12, value:accelRawZ)
          }
          if hasGyroscopeRawX {
            try output.writeDouble(13, value:gyroscopeRawX)
          }
          if hasGyroscopeRawY {
            try output.writeDouble(14, value:gyroscopeRawY)
          }
          if hasGyroscopeRawZ {
            try output.writeDouble(15, value:gyroscopeRawZ)
          }
          if hasAccelNormalizedX {
            try output.writeDouble(16, value:accelNormalizedX)
          }
          if hasAccelNormalizedY {
            try output.writeDouble(17, value:accelNormalizedY)
          }
          if hasAccelNormalizedZ {
            try output.writeDouble(18, value:accelNormalizedZ)
          }
          if hasAccelerometerAxes {
            try output.writeUInt64(19, value:accelerometerAxes)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasTimestampSnapshot {
            serialize_size += timestampSnapshot.computeUInt64Size(1)
          }
          if hasMagnetometerX {
            serialize_size += magnetometerX.computeDoubleSize(3)
          }
          if hasMagnetometerY {
            serialize_size += magnetometerY.computeDoubleSize(4)
          }
          if hasMagnetometerZ {
            serialize_size += magnetometerZ.computeDoubleSize(5)
          }
          if hasAngleNormalizedX {
            serialize_size += angleNormalizedX.computeDoubleSize(6)
          }
          if hasAngleNormalizedY {
            serialize_size += angleNormalizedY.computeDoubleSize(7)
          }
          if hasAngleNormalizedZ {
            serialize_size += angleNormalizedZ.computeDoubleSize(8)
          }
          if hasAccelRawX {
            serialize_size += accelRawX.computeDoubleSize(10)
          }
          if hasAccelRawY {
            serialize_size += accelRawY.computeDoubleSize(11)
          }
          if hasAccelRawZ {
            serialize_size += accelRawZ.computeDoubleSize(12)
          }
          if hasGyroscopeRawX {
            serialize_size += gyroscopeRawX.computeDoubleSize(13)
          }
          if hasGyroscopeRawY {
            serialize_size += gyroscopeRawY.computeDoubleSize(14)
          }
          if hasGyroscopeRawZ {
            serialize_size += gyroscopeRawZ.computeDoubleSize(15)
          }
          if hasAccelNormalizedX {
            serialize_size += accelNormalizedX.computeDoubleSize(16)
          }
          if hasAccelNormalizedY {
            serialize_size += accelNormalizedY.computeDoubleSize(17)
          }
          if hasAccelNormalizedZ {
            serialize_size += accelNormalizedZ.computeDoubleSize(18)
          }
          if hasAccelerometerAxes {
            serialize_size += accelerometerAxes.computeUInt64Size(19)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Signature.SensorInfo> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Signature.SensorInfo>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo? {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
          return Pogoprotos.Networking.Envelopes.Signature.SensorInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Signature.SensorInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasTimestampSnapshot {
            jsonMap["timestampSnapshot"] = "\(timestampSnapshot)"
          }
          if hasMagnetometerX {
            jsonMap["magnetometerX"] = NSNumber(double:magnetometerX)
          }
          if hasMagnetometerY {
            jsonMap["magnetometerY"] = NSNumber(double:magnetometerY)
          }
          if hasMagnetometerZ {
            jsonMap["magnetometerZ"] = NSNumber(double:magnetometerZ)
          }
          if hasAngleNormalizedX {
            jsonMap["angleNormalizedX"] = NSNumber(double:angleNormalizedX)
          }
          if hasAngleNormalizedY {
            jsonMap["angleNormalizedY"] = NSNumber(double:angleNormalizedY)
          }
          if hasAngleNormalizedZ {
            jsonMap["angleNormalizedZ"] = NSNumber(double:angleNormalizedZ)
          }
          if hasAccelRawX {
            jsonMap["accelRawX"] = NSNumber(double:accelRawX)
          }
          if hasAccelRawY {
            jsonMap["accelRawY"] = NSNumber(double:accelRawY)
          }
          if hasAccelRawZ {
            jsonMap["accelRawZ"] = NSNumber(double:accelRawZ)
          }
          if hasGyroscopeRawX {
            jsonMap["gyroscopeRawX"] = NSNumber(double:gyroscopeRawX)
          }
          if hasGyroscopeRawY {
            jsonMap["gyroscopeRawY"] = NSNumber(double:gyroscopeRawY)
          }
          if hasGyroscopeRawZ {
            jsonMap["gyroscopeRawZ"] = NSNumber(double:gyroscopeRawZ)
          }
          if hasAccelNormalizedX {
            jsonMap["accelNormalizedX"] = NSNumber(double:accelNormalizedX)
          }
          if hasAccelNormalizedY {
            jsonMap["accelNormalizedY"] = NSNumber(double:accelNormalizedY)
          }
          if hasAccelNormalizedZ {
            jsonMap["accelNormalizedZ"] = NSNumber(double:accelNormalizedZ)
          }
          if hasAccelerometerAxes {
            jsonMap["accelerometerAxes"] = "\(accelerometerAxes)"
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasTimestampSnapshot {
            output += "\(indent) timestampSnapshot: \(timestampSnapshot) \n"
          }
          if hasMagnetometerX {
            output += "\(indent) magnetometerX: \(magnetometerX) \n"
          }
          if hasMagnetometerY {
            output += "\(indent) magnetometerY: \(magnetometerY) \n"
          }
          if hasMagnetometerZ {
            output += "\(indent) magnetometerZ: \(magnetometerZ) \n"
          }
          if hasAngleNormalizedX {
            output += "\(indent) angleNormalizedX: \(angleNormalizedX) \n"
          }
          if hasAngleNormalizedY {
            output += "\(indent) angleNormalizedY: \(angleNormalizedY) \n"
          }
          if hasAngleNormalizedZ {
            output += "\(indent) angleNormalizedZ: \(angleNormalizedZ) \n"
          }
          if hasAccelRawX {
            output += "\(indent) accelRawX: \(accelRawX) \n"
          }
          if hasAccelRawY {
            output += "\(indent) accelRawY: \(accelRawY) \n"
          }
          if hasAccelRawZ {
            output += "\(indent) accelRawZ: \(accelRawZ) \n"
          }
          if hasGyroscopeRawX {
            output += "\(indent) gyroscopeRawX: \(gyroscopeRawX) \n"
          }
          if hasGyroscopeRawY {
            output += "\(indent) gyroscopeRawY: \(gyroscopeRawY) \n"
          }
          if hasGyroscopeRawZ {
            output += "\(indent) gyroscopeRawZ: \(gyroscopeRawZ) \n"
          }
          if hasAccelNormalizedX {
            output += "\(indent) accelNormalizedX: \(accelNormalizedX) \n"
          }
          if hasAccelNormalizedY {
            output += "\(indent) accelNormalizedY: \(accelNormalizedY) \n"
          }
          if hasAccelNormalizedZ {
            output += "\(indent) accelNormalizedZ: \(accelNormalizedZ) \n"
          }
          if hasAccelerometerAxes {
            output += "\(indent) accelerometerAxes: \(accelerometerAxes) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTimestampSnapshot {
                   hashCode = (hashCode &* 31) &+ timestampSnapshot.hashValue
                }
                if hasMagnetometerX {
                   hashCode = (hashCode &* 31) &+ magnetometerX.hashValue
                }
                if hasMagnetometerY {
                   hashCode = (hashCode &* 31) &+ magnetometerY.hashValue
                }
                if hasMagnetometerZ {
                   hashCode = (hashCode &* 31) &+ magnetometerZ.hashValue
                }
                if hasAngleNormalizedX {
                   hashCode = (hashCode &* 31) &+ angleNormalizedX.hashValue
                }
                if hasAngleNormalizedY {
                   hashCode = (hashCode &* 31) &+ angleNormalizedY.hashValue
                }
                if hasAngleNormalizedZ {
                   hashCode = (hashCode &* 31) &+ angleNormalizedZ.hashValue
                }
                if hasAccelRawX {
                   hashCode = (hashCode &* 31) &+ accelRawX.hashValue
                }
                if hasAccelRawY {
                   hashCode = (hashCode &* 31) &+ accelRawY.hashValue
                }
                if hasAccelRawZ {
                   hashCode = (hashCode &* 31) &+ accelRawZ.hashValue
                }
                if hasGyroscopeRawX {
                   hashCode = (hashCode &* 31) &+ gyroscopeRawX.hashValue
                }
                if hasGyroscopeRawY {
                   hashCode = (hashCode &* 31) &+ gyroscopeRawY.hashValue
                }
                if hasGyroscopeRawZ {
                   hashCode = (hashCode &* 31) &+ gyroscopeRawZ.hashValue
                }
                if hasAccelNormalizedX {
                   hashCode = (hashCode &* 31) &+ accelNormalizedX.hashValue
                }
                if hasAccelNormalizedY {
                   hashCode = (hashCode &* 31) &+ accelNormalizedY.hashValue
                }
                if hasAccelNormalizedZ {
                   hashCode = (hashCode &* 31) &+ accelNormalizedZ.hashValue
                }
                if hasAccelerometerAxes {
                   hashCode = (hashCode &* 31) &+ accelerometerAxes.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.SensorInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.SensorInfo"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Signature.SensorInfo.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Signature.SensorInfo = Pogoprotos.Networking.Envelopes.Signature.SensorInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasTimestampSnapshot:Bool {
               get {
                    return builderResult.hasTimestampSnapshot
               }
          }
          public var timestampSnapshot:UInt64 {
               get {
                    return builderResult.timestampSnapshot
               }
               set (value) {
                   builderResult.hasTimestampSnapshot = true
                   builderResult.timestampSnapshot = value
               }
          }
          public func setTimestampSnapshot(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.timestampSnapshot = value
            return self
          }
          public func clearTimestampSnapshot() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasTimestampSnapshot = false
               builderResult.timestampSnapshot = UInt64(0)
               return self
          }
          public var hasMagnetometerX:Bool {
               get {
                    return builderResult.hasMagnetometerX
               }
          }
          public var magnetometerX:Double {
               get {
                    return builderResult.magnetometerX
               }
               set (value) {
                   builderResult.hasMagnetometerX = true
                   builderResult.magnetometerX = value
               }
          }
          public func setMagnetometerX(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.magnetometerX = value
            return self
          }
          public func clearMagnetometerX() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasMagnetometerX = false
               builderResult.magnetometerX = Double(0)
               return self
          }
          public var hasMagnetometerY:Bool {
               get {
                    return builderResult.hasMagnetometerY
               }
          }
          public var magnetometerY:Double {
               get {
                    return builderResult.magnetometerY
               }
               set (value) {
                   builderResult.hasMagnetometerY = true
                   builderResult.magnetometerY = value
               }
          }
          public func setMagnetometerY(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.magnetometerY = value
            return self
          }
          public func clearMagnetometerY() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasMagnetometerY = false
               builderResult.magnetometerY = Double(0)
               return self
          }
          public var hasMagnetometerZ:Bool {
               get {
                    return builderResult.hasMagnetometerZ
               }
          }
          public var magnetometerZ:Double {
               get {
                    return builderResult.magnetometerZ
               }
               set (value) {
                   builderResult.hasMagnetometerZ = true
                   builderResult.magnetometerZ = value
               }
          }
          public func setMagnetometerZ(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.magnetometerZ = value
            return self
          }
          public func clearMagnetometerZ() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasMagnetometerZ = false
               builderResult.magnetometerZ = Double(0)
               return self
          }
          public var hasAngleNormalizedX:Bool {
               get {
                    return builderResult.hasAngleNormalizedX
               }
          }
          public var angleNormalizedX:Double {
               get {
                    return builderResult.angleNormalizedX
               }
               set (value) {
                   builderResult.hasAngleNormalizedX = true
                   builderResult.angleNormalizedX = value
               }
          }
          public func setAngleNormalizedX(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.angleNormalizedX = value
            return self
          }
          public func clearAngleNormalizedX() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAngleNormalizedX = false
               builderResult.angleNormalizedX = Double(0)
               return self
          }
          public var hasAngleNormalizedY:Bool {
               get {
                    return builderResult.hasAngleNormalizedY
               }
          }
          public var angleNormalizedY:Double {
               get {
                    return builderResult.angleNormalizedY
               }
               set (value) {
                   builderResult.hasAngleNormalizedY = true
                   builderResult.angleNormalizedY = value
               }
          }
          public func setAngleNormalizedY(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.angleNormalizedY = value
            return self
          }
          public func clearAngleNormalizedY() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAngleNormalizedY = false
               builderResult.angleNormalizedY = Double(0)
               return self
          }
          public var hasAngleNormalizedZ:Bool {
               get {
                    return builderResult.hasAngleNormalizedZ
               }
          }
          public var angleNormalizedZ:Double {
               get {
                    return builderResult.angleNormalizedZ
               }
               set (value) {
                   builderResult.hasAngleNormalizedZ = true
                   builderResult.angleNormalizedZ = value
               }
          }
          public func setAngleNormalizedZ(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.angleNormalizedZ = value
            return self
          }
          public func clearAngleNormalizedZ() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAngleNormalizedZ = false
               builderResult.angleNormalizedZ = Double(0)
               return self
          }
          public var hasAccelRawX:Bool {
               get {
                    return builderResult.hasAccelRawX
               }
          }
          public var accelRawX:Double {
               get {
                    return builderResult.accelRawX
               }
               set (value) {
                   builderResult.hasAccelRawX = true
                   builderResult.accelRawX = value
               }
          }
          public func setAccelRawX(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.accelRawX = value
            return self
          }
          public func clearAccelRawX() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAccelRawX = false
               builderResult.accelRawX = Double(0)
               return self
          }
          public var hasAccelRawY:Bool {
               get {
                    return builderResult.hasAccelRawY
               }
          }
          public var accelRawY:Double {
               get {
                    return builderResult.accelRawY
               }
               set (value) {
                   builderResult.hasAccelRawY = true
                   builderResult.accelRawY = value
               }
          }
          public func setAccelRawY(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.accelRawY = value
            return self
          }
          public func clearAccelRawY() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAccelRawY = false
               builderResult.accelRawY = Double(0)
               return self
          }
          public var hasAccelRawZ:Bool {
               get {
                    return builderResult.hasAccelRawZ
               }
          }
          public var accelRawZ:Double {
               get {
                    return builderResult.accelRawZ
               }
               set (value) {
                   builderResult.hasAccelRawZ = true
                   builderResult.accelRawZ = value
               }
          }
          public func setAccelRawZ(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.accelRawZ = value
            return self
          }
          public func clearAccelRawZ() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAccelRawZ = false
               builderResult.accelRawZ = Double(0)
               return self
          }
          public var hasGyroscopeRawX:Bool {
               get {
                    return builderResult.hasGyroscopeRawX
               }
          }
          public var gyroscopeRawX:Double {
               get {
                    return builderResult.gyroscopeRawX
               }
               set (value) {
                   builderResult.hasGyroscopeRawX = true
                   builderResult.gyroscopeRawX = value
               }
          }
          public func setGyroscopeRawX(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.gyroscopeRawX = value
            return self
          }
          public func clearGyroscopeRawX() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasGyroscopeRawX = false
               builderResult.gyroscopeRawX = Double(0)
               return self
          }
          public var hasGyroscopeRawY:Bool {
               get {
                    return builderResult.hasGyroscopeRawY
               }
          }
          public var gyroscopeRawY:Double {
               get {
                    return builderResult.gyroscopeRawY
               }
               set (value) {
                   builderResult.hasGyroscopeRawY = true
                   builderResult.gyroscopeRawY = value
               }
          }
          public func setGyroscopeRawY(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.gyroscopeRawY = value
            return self
          }
          public func clearGyroscopeRawY() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasGyroscopeRawY = false
               builderResult.gyroscopeRawY = Double(0)
               return self
          }
          public var hasGyroscopeRawZ:Bool {
               get {
                    return builderResult.hasGyroscopeRawZ
               }
          }
          public var gyroscopeRawZ:Double {
               get {
                    return builderResult.gyroscopeRawZ
               }
               set (value) {
                   builderResult.hasGyroscopeRawZ = true
                   builderResult.gyroscopeRawZ = value
               }
          }
          public func setGyroscopeRawZ(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.gyroscopeRawZ = value
            return self
          }
          public func clearGyroscopeRawZ() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasGyroscopeRawZ = false
               builderResult.gyroscopeRawZ = Double(0)
               return self
          }
          public var hasAccelNormalizedX:Bool {
               get {
                    return builderResult.hasAccelNormalizedX
               }
          }
          public var accelNormalizedX:Double {
               get {
                    return builderResult.accelNormalizedX
               }
               set (value) {
                   builderResult.hasAccelNormalizedX = true
                   builderResult.accelNormalizedX = value
               }
          }
          public func setAccelNormalizedX(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.accelNormalizedX = value
            return self
          }
          public func clearAccelNormalizedX() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAccelNormalizedX = false
               builderResult.accelNormalizedX = Double(0)
               return self
          }
          public var hasAccelNormalizedY:Bool {
               get {
                    return builderResult.hasAccelNormalizedY
               }
          }
          public var accelNormalizedY:Double {
               get {
                    return builderResult.accelNormalizedY
               }
               set (value) {
                   builderResult.hasAccelNormalizedY = true
                   builderResult.accelNormalizedY = value
               }
          }
          public func setAccelNormalizedY(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.accelNormalizedY = value
            return self
          }
          public func clearAccelNormalizedY() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAccelNormalizedY = false
               builderResult.accelNormalizedY = Double(0)
               return self
          }
          public var hasAccelNormalizedZ:Bool {
               get {
                    return builderResult.hasAccelNormalizedZ
               }
          }
          public var accelNormalizedZ:Double {
               get {
                    return builderResult.accelNormalizedZ
               }
               set (value) {
                   builderResult.hasAccelNormalizedZ = true
                   builderResult.accelNormalizedZ = value
               }
          }
          public func setAccelNormalizedZ(value:Double) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.accelNormalizedZ = value
            return self
          }
          public func clearAccelNormalizedZ() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAccelNormalizedZ = false
               builderResult.accelNormalizedZ = Double(0)
               return self
          }
          public var hasAccelerometerAxes:Bool {
               get {
                    return builderResult.hasAccelerometerAxes
               }
          }
          public var accelerometerAxes:UInt64 {
               get {
                    return builderResult.accelerometerAxes
               }
               set (value) {
                   builderResult.hasAccelerometerAxes = true
                   builderResult.accelerometerAxes = value
               }
          }
          public func setAccelerometerAxes(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            self.accelerometerAxes = value
            return self
          }
          public func clearAccelerometerAxes() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder{
               builderResult.hasAccelerometerAxes = false
               builderResult.accelerometerAxes = UInt64(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Signature.SensorInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.Signature.SensorInfo = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Signature.SensorInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.Signature.SensorInfo() {
             return self
            }
            if other.hasTimestampSnapshot {
                 timestampSnapshot = other.timestampSnapshot
            }
            if other.hasMagnetometerX {
                 magnetometerX = other.magnetometerX
            }
            if other.hasMagnetometerY {
                 magnetometerY = other.magnetometerY
            }
            if other.hasMagnetometerZ {
                 magnetometerZ = other.magnetometerZ
            }
            if other.hasAngleNormalizedX {
                 angleNormalizedX = other.angleNormalizedX
            }
            if other.hasAngleNormalizedY {
                 angleNormalizedY = other.angleNormalizedY
            }
            if other.hasAngleNormalizedZ {
                 angleNormalizedZ = other.angleNormalizedZ
            }
            if other.hasAccelRawX {
                 accelRawX = other.accelRawX
            }
            if other.hasAccelRawY {
                 accelRawY = other.accelRawY
            }
            if other.hasAccelRawZ {
                 accelRawZ = other.accelRawZ
            }
            if other.hasGyroscopeRawX {
                 gyroscopeRawX = other.gyroscopeRawX
            }
            if other.hasGyroscopeRawY {
                 gyroscopeRawY = other.gyroscopeRawY
            }
            if other.hasGyroscopeRawZ {
                 gyroscopeRawZ = other.gyroscopeRawZ
            }
            if other.hasAccelNormalizedX {
                 accelNormalizedX = other.accelNormalizedX
            }
            if other.hasAccelNormalizedY {
                 accelNormalizedY = other.accelNormalizedY
            }
            if other.hasAccelNormalizedZ {
                 accelNormalizedZ = other.accelNormalizedZ
            }
            if other.hasAccelerometerAxes {
                 accelerometerAxes = other.accelerometerAxes
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                timestampSnapshot = try input.readUInt64()

              case 25:
                magnetometerX = try input.readDouble()

              case 33:
                magnetometerY = try input.readDouble()

              case 41:
                magnetometerZ = try input.readDouble()

              case 49:
                angleNormalizedX = try input.readDouble()

              case 57:
                angleNormalizedY = try input.readDouble()

              case 65:
                angleNormalizedZ = try input.readDouble()

              case 81:
                accelRawX = try input.readDouble()

              case 89:
                accelRawY = try input.readDouble()

              case 97:
                accelRawZ = try input.readDouble()

              case 105:
                gyroscopeRawX = try input.readDouble()

              case 113:
                gyroscopeRawY = try input.readDouble()

              case 121:
                gyroscopeRawZ = try input.readDouble()

              case 129:
                accelNormalizedX = try input.readDouble()

              case 137:
                accelNormalizedY = try input.readDouble()

              case 145:
                accelNormalizedZ = try input.readDouble()

              case 152:
                accelerometerAxes = try input.readUInt64()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder()
            if let jsonValueTimestampSnapshot = jsonMap["timestampSnapshot"] as? String {
              resultDecodedBuilder.timestampSnapshot = UInt64(jsonValueTimestampSnapshot)!
            }
            if let jsonValueMagnetometerX = jsonMap["magnetometerX"] as? NSNumber {
              resultDecodedBuilder.magnetometerX = jsonValueMagnetometerX.doubleValue
            }
            if let jsonValueMagnetometerY = jsonMap["magnetometerY"] as? NSNumber {
              resultDecodedBuilder.magnetometerY = jsonValueMagnetometerY.doubleValue
            }
            if let jsonValueMagnetometerZ = jsonMap["magnetometerZ"] as? NSNumber {
              resultDecodedBuilder.magnetometerZ = jsonValueMagnetometerZ.doubleValue
            }
            if let jsonValueAngleNormalizedX = jsonMap["angleNormalizedX"] as? NSNumber {
              resultDecodedBuilder.angleNormalizedX = jsonValueAngleNormalizedX.doubleValue
            }
            if let jsonValueAngleNormalizedY = jsonMap["angleNormalizedY"] as? NSNumber {
              resultDecodedBuilder.angleNormalizedY = jsonValueAngleNormalizedY.doubleValue
            }
            if let jsonValueAngleNormalizedZ = jsonMap["angleNormalizedZ"] as? NSNumber {
              resultDecodedBuilder.angleNormalizedZ = jsonValueAngleNormalizedZ.doubleValue
            }
            if let jsonValueAccelRawX = jsonMap["accelRawX"] as? NSNumber {
              resultDecodedBuilder.accelRawX = jsonValueAccelRawX.doubleValue
            }
            if let jsonValueAccelRawY = jsonMap["accelRawY"] as? NSNumber {
              resultDecodedBuilder.accelRawY = jsonValueAccelRawY.doubleValue
            }
            if let jsonValueAccelRawZ = jsonMap["accelRawZ"] as? NSNumber {
              resultDecodedBuilder.accelRawZ = jsonValueAccelRawZ.doubleValue
            }
            if let jsonValueGyroscopeRawX = jsonMap["gyroscopeRawX"] as? NSNumber {
              resultDecodedBuilder.gyroscopeRawX = jsonValueGyroscopeRawX.doubleValue
            }
            if let jsonValueGyroscopeRawY = jsonMap["gyroscopeRawY"] as? NSNumber {
              resultDecodedBuilder.gyroscopeRawY = jsonValueGyroscopeRawY.doubleValue
            }
            if let jsonValueGyroscopeRawZ = jsonMap["gyroscopeRawZ"] as? NSNumber {
              resultDecodedBuilder.gyroscopeRawZ = jsonValueGyroscopeRawZ.doubleValue
            }
            if let jsonValueAccelNormalizedX = jsonMap["accelNormalizedX"] as? NSNumber {
              resultDecodedBuilder.accelNormalizedX = jsonValueAccelNormalizedX.doubleValue
            }
            if let jsonValueAccelNormalizedY = jsonMap["accelNormalizedY"] as? NSNumber {
              resultDecodedBuilder.accelNormalizedY = jsonValueAccelNormalizedY.doubleValue
            }
            if let jsonValueAccelNormalizedZ = jsonMap["accelNormalizedZ"] as? NSNumber {
              resultDecodedBuilder.accelNormalizedZ = jsonValueAccelNormalizedZ.doubleValue
            }
            if let jsonValueAccelerometerAxes = jsonMap["accelerometerAxes"] as? String {
              resultDecodedBuilder.accelerometerAxes = UInt64(jsonValueAccelerometerAxes)!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class DeviceInfo : GeneratedMessage, GeneratedMessageProtocol {
        // Hex string
        public private(set) var hasDeviceId:Bool = false
        public private(set) var deviceId:String = ""

        public private(set) var hasAndroidBoardName:Bool = false
        public private(set) var androidBoardName:String = ""

        public private(set) var hasAndroidBootloader:Bool = false
        public private(set) var androidBootloader:String = ""

        // On Android: product.brand
        public private(set) var hasDeviceBrand:Bool = false
        public private(set) var deviceBrand:String = ""

        // On Android: product.device
        public private(set) var hasDeviceModel:Bool = false
        public private(set) var deviceModel:String = ""

        // Android only, build.display.id
        public private(set) var hasDeviceModelIdentifier:Bool = false
        public private(set) var deviceModelIdentifier:String = ""

        // On Android: boot.hardware
        public private(set) var hasDeviceModelBoot:Bool = false
        public private(set) var deviceModelBoot:String = ""

        // On Android: product.manufacturer
        public private(set) var hasHardwareManufacturer:Bool = false
        public private(set) var hardwareManufacturer:String = ""

        // On Android: product.model
        public private(set) var hasHardwareModel:Bool = false
        public private(set) var hardwareModel:String = ""

        // On Android: product.name, on iOS: "iPhone OS"
        public private(set) var hasFirmwareBrand:Bool = false
        public private(set) var firmwareBrand:String = ""

        // Android only, build.tags
        public private(set) var hasFirmwareTags:Bool = false
        public private(set) var firmwareTags:String = ""

        // On Android: build.type, on iOS instead: iOS version
        public private(set) var hasFirmwareType:Bool = false
        public private(set) var firmwareType:String = ""

        // Android only, build.fingerprint
        public private(set) var hasFirmwareFingerprint:Bool = false
        public private(set) var firmwareFingerprint:String = ""

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasDeviceId {
            try output.writeString(1, value:deviceId)
          }
          if hasAndroidBoardName {
            try output.writeString(2, value:androidBoardName)
          }
          if hasAndroidBootloader {
            try output.writeString(3, value:androidBootloader)
          }
          if hasDeviceBrand {
            try output.writeString(4, value:deviceBrand)
          }
          if hasDeviceModel {
            try output.writeString(5, value:deviceModel)
          }
          if hasDeviceModelIdentifier {
            try output.writeString(6, value:deviceModelIdentifier)
          }
          if hasDeviceModelBoot {
            try output.writeString(7, value:deviceModelBoot)
          }
          if hasHardwareManufacturer {
            try output.writeString(8, value:hardwareManufacturer)
          }
          if hasHardwareModel {
            try output.writeString(9, value:hardwareModel)
          }
          if hasFirmwareBrand {
            try output.writeString(10, value:firmwareBrand)
          }
          if hasFirmwareTags {
            try output.writeString(12, value:firmwareTags)
          }
          if hasFirmwareType {
            try output.writeString(13, value:firmwareType)
          }
          if hasFirmwareFingerprint {
            try output.writeString(14, value:firmwareFingerprint)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasDeviceId {
            serialize_size += deviceId.computeStringSize(1)
          }
          if hasAndroidBoardName {
            serialize_size += androidBoardName.computeStringSize(2)
          }
          if hasAndroidBootloader {
            serialize_size += androidBootloader.computeStringSize(3)
          }
          if hasDeviceBrand {
            serialize_size += deviceBrand.computeStringSize(4)
          }
          if hasDeviceModel {
            serialize_size += deviceModel.computeStringSize(5)
          }
          if hasDeviceModelIdentifier {
            serialize_size += deviceModelIdentifier.computeStringSize(6)
          }
          if hasDeviceModelBoot {
            serialize_size += deviceModelBoot.computeStringSize(7)
          }
          if hasHardwareManufacturer {
            serialize_size += hardwareManufacturer.computeStringSize(8)
          }
          if hasHardwareModel {
            serialize_size += hardwareModel.computeStringSize(9)
          }
          if hasFirmwareBrand {
            serialize_size += firmwareBrand.computeStringSize(10)
          }
          if hasFirmwareTags {
            serialize_size += firmwareTags.computeStringSize(12)
          }
          if hasFirmwareType {
            serialize_size += firmwareType.computeStringSize(13)
          }
          if hasFirmwareFingerprint {
            serialize_size += firmwareFingerprint.computeStringSize(14)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Signature.DeviceInfo> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Signature.DeviceInfo>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo? {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
          return Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasDeviceId {
            jsonMap["deviceId"] = deviceId
          }
          if hasAndroidBoardName {
            jsonMap["androidBoardName"] = androidBoardName
          }
          if hasAndroidBootloader {
            jsonMap["androidBootloader"] = androidBootloader
          }
          if hasDeviceBrand {
            jsonMap["deviceBrand"] = deviceBrand
          }
          if hasDeviceModel {
            jsonMap["deviceModel"] = deviceModel
          }
          if hasDeviceModelIdentifier {
            jsonMap["deviceModelIdentifier"] = deviceModelIdentifier
          }
          if hasDeviceModelBoot {
            jsonMap["deviceModelBoot"] = deviceModelBoot
          }
          if hasHardwareManufacturer {
            jsonMap["hardwareManufacturer"] = hardwareManufacturer
          }
          if hasHardwareModel {
            jsonMap["hardwareModel"] = hardwareModel
          }
          if hasFirmwareBrand {
            jsonMap["firmwareBrand"] = firmwareBrand
          }
          if hasFirmwareTags {
            jsonMap["firmwareTags"] = firmwareTags
          }
          if hasFirmwareType {
            jsonMap["firmwareType"] = firmwareType
          }
          if hasFirmwareFingerprint {
            jsonMap["firmwareFingerprint"] = firmwareFingerprint
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
          return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasDeviceId {
            output += "\(indent) deviceId: \(deviceId) \n"
          }
          if hasAndroidBoardName {
            output += "\(indent) androidBoardName: \(androidBoardName) \n"
          }
          if hasAndroidBootloader {
            output += "\(indent) androidBootloader: \(androidBootloader) \n"
          }
          if hasDeviceBrand {
            output += "\(indent) deviceBrand: \(deviceBrand) \n"
          }
          if hasDeviceModel {
            output += "\(indent) deviceModel: \(deviceModel) \n"
          }
          if hasDeviceModelIdentifier {
            output += "\(indent) deviceModelIdentifier: \(deviceModelIdentifier) \n"
          }
          if hasDeviceModelBoot {
            output += "\(indent) deviceModelBoot: \(deviceModelBoot) \n"
          }
          if hasHardwareManufacturer {
            output += "\(indent) hardwareManufacturer: \(hardwareManufacturer) \n"
          }
          if hasHardwareModel {
            output += "\(indent) hardwareModel: \(hardwareModel) \n"
          }
          if hasFirmwareBrand {
            output += "\(indent) firmwareBrand: \(firmwareBrand) \n"
          }
          if hasFirmwareTags {
            output += "\(indent) firmwareTags: \(firmwareTags) \n"
          }
          if hasFirmwareType {
            output += "\(indent) firmwareType: \(firmwareType) \n"
          }
          if hasFirmwareFingerprint {
            output += "\(indent) firmwareFingerprint: \(firmwareFingerprint) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasDeviceId {
                   hashCode = (hashCode &* 31) &+ deviceId.hashValue
                }
                if hasAndroidBoardName {
                   hashCode = (hashCode &* 31) &+ androidBoardName.hashValue
                }
                if hasAndroidBootloader {
                   hashCode = (hashCode &* 31) &+ androidBootloader.hashValue
                }
                if hasDeviceBrand {
                   hashCode = (hashCode &* 31) &+ deviceBrand.hashValue
                }
                if hasDeviceModel {
                   hashCode = (hashCode &* 31) &+ deviceModel.hashValue
                }
                if hasDeviceModelIdentifier {
                   hashCode = (hashCode &* 31) &+ deviceModelIdentifier.hashValue
                }
                if hasDeviceModelBoot {
                   hashCode = (hashCode &* 31) &+ deviceModelBoot.hashValue
                }
                if hasHardwareManufacturer {
                   hashCode = (hashCode &* 31) &+ hardwareManufacturer.hashValue
                }
                if hasHardwareModel {
                   hashCode = (hashCode &* 31) &+ hardwareModel.hashValue
                }
                if hasFirmwareBrand {
                   hashCode = (hashCode &* 31) &+ firmwareBrand.hashValue
                }
                if hasFirmwareTags {
                   hashCode = (hashCode &* 31) &+ firmwareTags.hashValue
                }
                if hasFirmwareType {
                   hashCode = (hashCode &* 31) &+ firmwareType.hashValue
                }
                if hasFirmwareFingerprint {
                   hashCode = (hashCode &* 31) &+ firmwareFingerprint.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.DeviceInfo"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.DeviceInfo"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo = Pogoprotos.Networking.Envelopes.Signature.DeviceInfo()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasDeviceId:Bool {
               get {
                    return builderResult.hasDeviceId
               }
          }
          public var deviceId:String {
               get {
                    return builderResult.deviceId
               }
               set (value) {
                   builderResult.hasDeviceId = true
                   builderResult.deviceId = value
               }
          }
          public func setDeviceId(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.deviceId = value
            return self
          }
          public func clearDeviceId() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasDeviceId = false
               builderResult.deviceId = ""
               return self
          }
          public var hasAndroidBoardName:Bool {
               get {
                    return builderResult.hasAndroidBoardName
               }
          }
          public var androidBoardName:String {
               get {
                    return builderResult.androidBoardName
               }
               set (value) {
                   builderResult.hasAndroidBoardName = true
                   builderResult.androidBoardName = value
               }
          }
          public func setAndroidBoardName(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.androidBoardName = value
            return self
          }
          public func clearAndroidBoardName() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasAndroidBoardName = false
               builderResult.androidBoardName = ""
               return self
          }
          public var hasAndroidBootloader:Bool {
               get {
                    return builderResult.hasAndroidBootloader
               }
          }
          public var androidBootloader:String {
               get {
                    return builderResult.androidBootloader
               }
               set (value) {
                   builderResult.hasAndroidBootloader = true
                   builderResult.androidBootloader = value
               }
          }
          public func setAndroidBootloader(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.androidBootloader = value
            return self
          }
          public func clearAndroidBootloader() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasAndroidBootloader = false
               builderResult.androidBootloader = ""
               return self
          }
          public var hasDeviceBrand:Bool {
               get {
                    return builderResult.hasDeviceBrand
               }
          }
          public var deviceBrand:String {
               get {
                    return builderResult.deviceBrand
               }
               set (value) {
                   builderResult.hasDeviceBrand = true
                   builderResult.deviceBrand = value
               }
          }
          public func setDeviceBrand(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.deviceBrand = value
            return self
          }
          public func clearDeviceBrand() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasDeviceBrand = false
               builderResult.deviceBrand = ""
               return self
          }
          public var hasDeviceModel:Bool {
               get {
                    return builderResult.hasDeviceModel
               }
          }
          public var deviceModel:String {
               get {
                    return builderResult.deviceModel
               }
               set (value) {
                   builderResult.hasDeviceModel = true
                   builderResult.deviceModel = value
               }
          }
          public func setDeviceModel(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.deviceModel = value
            return self
          }
          public func clearDeviceModel() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasDeviceModel = false
               builderResult.deviceModel = ""
               return self
          }
          public var hasDeviceModelIdentifier:Bool {
               get {
                    return builderResult.hasDeviceModelIdentifier
               }
          }
          public var deviceModelIdentifier:String {
               get {
                    return builderResult.deviceModelIdentifier
               }
               set (value) {
                   builderResult.hasDeviceModelIdentifier = true
                   builderResult.deviceModelIdentifier = value
               }
          }
          public func setDeviceModelIdentifier(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.deviceModelIdentifier = value
            return self
          }
          public func clearDeviceModelIdentifier() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasDeviceModelIdentifier = false
               builderResult.deviceModelIdentifier = ""
               return self
          }
          public var hasDeviceModelBoot:Bool {
               get {
                    return builderResult.hasDeviceModelBoot
               }
          }
          public var deviceModelBoot:String {
               get {
                    return builderResult.deviceModelBoot
               }
               set (value) {
                   builderResult.hasDeviceModelBoot = true
                   builderResult.deviceModelBoot = value
               }
          }
          public func setDeviceModelBoot(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.deviceModelBoot = value
            return self
          }
          public func clearDeviceModelBoot() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasDeviceModelBoot = false
               builderResult.deviceModelBoot = ""
               return self
          }
          public var hasHardwareManufacturer:Bool {
               get {
                    return builderResult.hasHardwareManufacturer
               }
          }
          public var hardwareManufacturer:String {
               get {
                    return builderResult.hardwareManufacturer
               }
               set (value) {
                   builderResult.hasHardwareManufacturer = true
                   builderResult.hardwareManufacturer = value
               }
          }
          public func setHardwareManufacturer(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.hardwareManufacturer = value
            return self
          }
          public func clearHardwareManufacturer() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasHardwareManufacturer = false
               builderResult.hardwareManufacturer = ""
               return self
          }
          public var hasHardwareModel:Bool {
               get {
                    return builderResult.hasHardwareModel
               }
          }
          public var hardwareModel:String {
               get {
                    return builderResult.hardwareModel
               }
               set (value) {
                   builderResult.hasHardwareModel = true
                   builderResult.hardwareModel = value
               }
          }
          public func setHardwareModel(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.hardwareModel = value
            return self
          }
          public func clearHardwareModel() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasHardwareModel = false
               builderResult.hardwareModel = ""
               return self
          }
          public var hasFirmwareBrand:Bool {
               get {
                    return builderResult.hasFirmwareBrand
               }
          }
          public var firmwareBrand:String {
               get {
                    return builderResult.firmwareBrand
               }
               set (value) {
                   builderResult.hasFirmwareBrand = true
                   builderResult.firmwareBrand = value
               }
          }
          public func setFirmwareBrand(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.firmwareBrand = value
            return self
          }
          public func clearFirmwareBrand() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasFirmwareBrand = false
               builderResult.firmwareBrand = ""
               return self
          }
          public var hasFirmwareTags:Bool {
               get {
                    return builderResult.hasFirmwareTags
               }
          }
          public var firmwareTags:String {
               get {
                    return builderResult.firmwareTags
               }
               set (value) {
                   builderResult.hasFirmwareTags = true
                   builderResult.firmwareTags = value
               }
          }
          public func setFirmwareTags(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.firmwareTags = value
            return self
          }
          public func clearFirmwareTags() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasFirmwareTags = false
               builderResult.firmwareTags = ""
               return self
          }
          public var hasFirmwareType:Bool {
               get {
                    return builderResult.hasFirmwareType
               }
          }
          public var firmwareType:String {
               get {
                    return builderResult.firmwareType
               }
               set (value) {
                   builderResult.hasFirmwareType = true
                   builderResult.firmwareType = value
               }
          }
          public func setFirmwareType(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.firmwareType = value
            return self
          }
          public func clearFirmwareType() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasFirmwareType = false
               builderResult.firmwareType = ""
               return self
          }
          public var hasFirmwareFingerprint:Bool {
               get {
                    return builderResult.hasFirmwareFingerprint
               }
          }
          public var firmwareFingerprint:String {
               get {
                    return builderResult.firmwareFingerprint
               }
               set (value) {
                   builderResult.hasFirmwareFingerprint = true
                   builderResult.firmwareFingerprint = value
               }
          }
          public func setFirmwareFingerprint(value:String) -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            self.firmwareFingerprint = value
            return self
          }
          public func clearFirmwareFingerprint() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder{
               builderResult.hasFirmwareFingerprint = false
               builderResult.firmwareFingerprint = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Signature.DeviceInfo()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo {
            let returnMe:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            if other == Pogoprotos.Networking.Envelopes.Signature.DeviceInfo() {
             return self
            }
            if other.hasDeviceId {
                 deviceId = other.deviceId
            }
            if other.hasAndroidBoardName {
                 androidBoardName = other.androidBoardName
            }
            if other.hasAndroidBootloader {
                 androidBootloader = other.androidBootloader
            }
            if other.hasDeviceBrand {
                 deviceBrand = other.deviceBrand
            }
            if other.hasDeviceModel {
                 deviceModel = other.deviceModel
            }
            if other.hasDeviceModelIdentifier {
                 deviceModelIdentifier = other.deviceModelIdentifier
            }
            if other.hasDeviceModelBoot {
                 deviceModelBoot = other.deviceModelBoot
            }
            if other.hasHardwareManufacturer {
                 hardwareManufacturer = other.hardwareManufacturer
            }
            if other.hasHardwareModel {
                 hardwareModel = other.hardwareModel
            }
            if other.hasFirmwareBrand {
                 firmwareBrand = other.firmwareBrand
            }
            if other.hasFirmwareTags {
                 firmwareTags = other.firmwareTags
            }
            if other.hasFirmwareType {
                 firmwareType = other.firmwareType
            }
            if other.hasFirmwareFingerprint {
                 firmwareFingerprint = other.firmwareFingerprint
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                deviceId = try input.readString()

              case 18:
                androidBoardName = try input.readString()

              case 26:
                androidBootloader = try input.readString()

              case 34:
                deviceBrand = try input.readString()

              case 42:
                deviceModel = try input.readString()

              case 50:
                deviceModelIdentifier = try input.readString()

              case 58:
                deviceModelBoot = try input.readString()

              case 66:
                hardwareManufacturer = try input.readString()

              case 74:
                hardwareModel = try input.readString()

              case 82:
                firmwareBrand = try input.readString()

              case 98:
                firmwareTags = try input.readString()

              case 106:
                firmwareType = try input.readString()

              case 114:
                firmwareFingerprint = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder()
            if let jsonValueDeviceId = jsonMap["deviceId"] as? String {
              resultDecodedBuilder.deviceId = jsonValueDeviceId
            }
            if let jsonValueAndroidBoardName = jsonMap["androidBoardName"] as? String {
              resultDecodedBuilder.androidBoardName = jsonValueAndroidBoardName
            }
            if let jsonValueAndroidBootloader = jsonMap["androidBootloader"] as? String {
              resultDecodedBuilder.androidBootloader = jsonValueAndroidBootloader
            }
            if let jsonValueDeviceBrand = jsonMap["deviceBrand"] as? String {
              resultDecodedBuilder.deviceBrand = jsonValueDeviceBrand
            }
            if let jsonValueDeviceModel = jsonMap["deviceModel"] as? String {
              resultDecodedBuilder.deviceModel = jsonValueDeviceModel
            }
            if let jsonValueDeviceModelIdentifier = jsonMap["deviceModelIdentifier"] as? String {
              resultDecodedBuilder.deviceModelIdentifier = jsonValueDeviceModelIdentifier
            }
            if let jsonValueDeviceModelBoot = jsonMap["deviceModelBoot"] as? String {
              resultDecodedBuilder.deviceModelBoot = jsonValueDeviceModelBoot
            }
            if let jsonValueHardwareManufacturer = jsonMap["hardwareManufacturer"] as? String {
              resultDecodedBuilder.hardwareManufacturer = jsonValueHardwareManufacturer
            }
            if let jsonValueHardwareModel = jsonMap["hardwareModel"] as? String {
              resultDecodedBuilder.hardwareModel = jsonValueHardwareModel
            }
            if let jsonValueFirmwareBrand = jsonMap["firmwareBrand"] as? String {
              resultDecodedBuilder.firmwareBrand = jsonValueFirmwareBrand
            }
            if let jsonValueFirmwareTags = jsonMap["firmwareTags"] as? String {
              resultDecodedBuilder.firmwareTags = jsonValueFirmwareTags
            }
            if let jsonValueFirmwareType = jsonMap["firmwareType"] as? String {
              resultDecodedBuilder.firmwareType = jsonValueFirmwareType
            }
            if let jsonValueFirmwareFingerprint = jsonMap["firmwareFingerprint"] as? String {
              resultDecodedBuilder.firmwareFingerprint = jsonValueFirmwareFingerprint
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end



    //Nested type declaration start

      final public class ActivityStatus : GeneratedMessage, GeneratedMessageProtocol {
        // all of these had 1 as their value
        public private(set) var hasStartTimeMs:Bool = false
        public private(set) var startTimeMs:UInt64 = UInt64(0)

        public private(set) var hasUnknownStatus:Bool = false
        public private(set) var unknownStatus:Bool = false

        public private(set) var hasWalking:Bool = false
        public private(set) var walking:Bool = false

        public private(set) var hasRunning:Bool = false
        public private(set) var running:Bool = false

        public private(set) var hasStationary:Bool = false
        public private(set) var stationary:Bool = false

        public private(set) var hasAutomotive:Bool = false
        public private(set) var automotive:Bool = false

        public private(set) var hasTilting:Bool = false
        public private(set) var tilting:Bool = false

        public private(set) var hasCycling:Bool = false
        public private(set) var cycling:Bool = false

        public private(set) var hasStatus:Bool = false
        public private(set) var status:NSData = NSData()

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasStartTimeMs {
            try output.writeUInt64(1, value:startTimeMs)
          }
          if hasUnknownStatus {
            try output.writeBool(2, value:unknownStatus)
          }
          if hasWalking {
            try output.writeBool(3, value:walking)
          }
          if hasRunning {
            try output.writeBool(4, value:running)
          }
          if hasStationary {
            try output.writeBool(5, value:stationary)
          }
          if hasAutomotive {
            try output.writeBool(6, value:automotive)
          }
          if hasTilting {
            try output.writeBool(7, value:tilting)
          }
          if hasCycling {
            try output.writeBool(8, value:cycling)
          }
          if hasStatus {
            try output.writeData(9, value:status)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasStartTimeMs {
            serialize_size += startTimeMs.computeUInt64Size(1)
          }
          if hasUnknownStatus {
            serialize_size += unknownStatus.computeBoolSize(2)
          }
          if hasWalking {
            serialize_size += walking.computeBoolSize(3)
          }
          if hasRunning {
            serialize_size += running.computeBoolSize(4)
          }
          if hasStationary {
            serialize_size += stationary.computeBoolSize(5)
          }
          if hasAutomotive {
            serialize_size += automotive.computeBoolSize(6)
          }
          if hasTilting {
            serialize_size += tilting.computeBoolSize(7)
          }
          if hasCycling {
            serialize_size += cycling.computeBoolSize(8)
          }
          if hasStatus {
            serialize_size += status.computeDataSize(9)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Signature.ActivityStatus> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Signature.ActivityStatus>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus? {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
          return Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasStartTimeMs {
            jsonMap["startTimeMs"] = "\(startTimeMs)"
          }
          if hasUnknownStatus {
            jsonMap["unknownStatus"] = unknownStatus
          }
          if hasWalking {
            jsonMap["walking"] = walking
          }
          if hasRunning {
            jsonMap["running"] = running
          }
          if hasStationary {
            jsonMap["stationary"] = stationary
          }
          if hasAutomotive {
            jsonMap["automotive"] = automotive
          }
          if hasTilting {
            jsonMap["tilting"] = tilting
          }
          if hasCycling {
            jsonMap["cycling"] = cycling
          }
          if hasStatus {
            jsonMap["status"] = status.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
          return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasStartTimeMs {
            output += "\(indent) startTimeMs: \(startTimeMs) \n"
          }
          if hasUnknownStatus {
            output += "\(indent) unknownStatus: \(unknownStatus) \n"
          }
          if hasWalking {
            output += "\(indent) walking: \(walking) \n"
          }
          if hasRunning {
            output += "\(indent) running: \(running) \n"
          }
          if hasStationary {
            output += "\(indent) stationary: \(stationary) \n"
          }
          if hasAutomotive {
            output += "\(indent) automotive: \(automotive) \n"
          }
          if hasTilting {
            output += "\(indent) tilting: \(tilting) \n"
          }
          if hasCycling {
            output += "\(indent) cycling: \(cycling) \n"
          }
          if hasStatus {
            output += "\(indent) status: \(status) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasStartTimeMs {
                   hashCode = (hashCode &* 31) &+ startTimeMs.hashValue
                }
                if hasUnknownStatus {
                   hashCode = (hashCode &* 31) &+ unknownStatus.hashValue
                }
                if hasWalking {
                   hashCode = (hashCode &* 31) &+ walking.hashValue
                }
                if hasRunning {
                   hashCode = (hashCode &* 31) &+ running.hashValue
                }
                if hasStationary {
                   hashCode = (hashCode &* 31) &+ stationary.hashValue
                }
                if hasAutomotive {
                   hashCode = (hashCode &* 31) &+ automotive.hashValue
                }
                if hasTilting {
                   hashCode = (hashCode &* 31) &+ tilting.hashValue
                }
                if hasCycling {
                   hashCode = (hashCode &* 31) &+ cycling.hashValue
                }
                if hasStatus {
                   hashCode = (hashCode &* 31) &+ status.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.ActivityStatus"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Signature.ActivityStatus"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus = Pogoprotos.Networking.Envelopes.Signature.ActivityStatus()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasStartTimeMs:Bool {
               get {
                    return builderResult.hasStartTimeMs
               }
          }
          public var startTimeMs:UInt64 {
               get {
                    return builderResult.startTimeMs
               }
               set (value) {
                   builderResult.hasStartTimeMs = true
                   builderResult.startTimeMs = value
               }
          }
          public func setStartTimeMs(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.startTimeMs = value
            return self
          }
          public func clearStartTimeMs() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasStartTimeMs = false
               builderResult.startTimeMs = UInt64(0)
               return self
          }
          public var hasUnknownStatus:Bool {
               get {
                    return builderResult.hasUnknownStatus
               }
          }
          public var unknownStatus:Bool {
               get {
                    return builderResult.unknownStatus
               }
               set (value) {
                   builderResult.hasUnknownStatus = true
                   builderResult.unknownStatus = value
               }
          }
          public func setUnknownStatus(value:Bool) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.unknownStatus = value
            return self
          }
          public func clearUnknownStatus() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasUnknownStatus = false
               builderResult.unknownStatus = false
               return self
          }
          public var hasWalking:Bool {
               get {
                    return builderResult.hasWalking
               }
          }
          public var walking:Bool {
               get {
                    return builderResult.walking
               }
               set (value) {
                   builderResult.hasWalking = true
                   builderResult.walking = value
               }
          }
          public func setWalking(value:Bool) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.walking = value
            return self
          }
          public func clearWalking() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasWalking = false
               builderResult.walking = false
               return self
          }
          public var hasRunning:Bool {
               get {
                    return builderResult.hasRunning
               }
          }
          public var running:Bool {
               get {
                    return builderResult.running
               }
               set (value) {
                   builderResult.hasRunning = true
                   builderResult.running = value
               }
          }
          public func setRunning(value:Bool) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.running = value
            return self
          }
          public func clearRunning() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasRunning = false
               builderResult.running = false
               return self
          }
          public var hasStationary:Bool {
               get {
                    return builderResult.hasStationary
               }
          }
          public var stationary:Bool {
               get {
                    return builderResult.stationary
               }
               set (value) {
                   builderResult.hasStationary = true
                   builderResult.stationary = value
               }
          }
          public func setStationary(value:Bool) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.stationary = value
            return self
          }
          public func clearStationary() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasStationary = false
               builderResult.stationary = false
               return self
          }
          public var hasAutomotive:Bool {
               get {
                    return builderResult.hasAutomotive
               }
          }
          public var automotive:Bool {
               get {
                    return builderResult.automotive
               }
               set (value) {
                   builderResult.hasAutomotive = true
                   builderResult.automotive = value
               }
          }
          public func setAutomotive(value:Bool) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.automotive = value
            return self
          }
          public func clearAutomotive() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasAutomotive = false
               builderResult.automotive = false
               return self
          }
          public var hasTilting:Bool {
               get {
                    return builderResult.hasTilting
               }
          }
          public var tilting:Bool {
               get {
                    return builderResult.tilting
               }
               set (value) {
                   builderResult.hasTilting = true
                   builderResult.tilting = value
               }
          }
          public func setTilting(value:Bool) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.tilting = value
            return self
          }
          public func clearTilting() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasTilting = false
               builderResult.tilting = false
               return self
          }
          public var hasCycling:Bool {
               get {
                    return builderResult.hasCycling
               }
          }
          public var cycling:Bool {
               get {
                    return builderResult.cycling
               }
               set (value) {
                   builderResult.hasCycling = true
                   builderResult.cycling = value
               }
          }
          public func setCycling(value:Bool) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.cycling = value
            return self
          }
          public func clearCycling() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasCycling = false
               builderResult.cycling = false
               return self
          }
          public var hasStatus:Bool {
               get {
                    return builderResult.hasStatus
               }
          }
          public var status:NSData {
               get {
                    return builderResult.status
               }
               set (value) {
                   builderResult.hasStatus = true
                   builderResult.status = value
               }
          }
          public func setStatus(value:NSData) -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            self.status = value
            return self
          }
          public func clearStatus() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder{
               builderResult.hasStatus = false
               builderResult.status = NSData()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Signature.ActivityStatus()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus {
            let returnMe:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            if other == Pogoprotos.Networking.Envelopes.Signature.ActivityStatus() {
             return self
            }
            if other.hasStartTimeMs {
                 startTimeMs = other.startTimeMs
            }
            if other.hasUnknownStatus {
                 unknownStatus = other.unknownStatus
            }
            if other.hasWalking {
                 walking = other.walking
            }
            if other.hasRunning {
                 running = other.running
            }
            if other.hasStationary {
                 stationary = other.stationary
            }
            if other.hasAutomotive {
                 automotive = other.automotive
            }
            if other.hasTilting {
                 tilting = other.tilting
            }
            if other.hasCycling {
                 cycling = other.cycling
            }
            if other.hasStatus {
                 status = other.status
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                startTimeMs = try input.readUInt64()

              case 16:
                unknownStatus = try input.readBool()

              case 24:
                walking = try input.readBool()

              case 32:
                running = try input.readBool()

              case 40:
                stationary = try input.readBool()

              case 48:
                automotive = try input.readBool()

              case 56:
                tilting = try input.readBool()

              case 64:
                cycling = try input.readBool()

              case 74:
                status = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder()
            if let jsonValueStartTimeMs = jsonMap["startTimeMs"] as? String {
              resultDecodedBuilder.startTimeMs = UInt64(jsonValueStartTimeMs)!
            }
            if let jsonValueUnknownStatus = jsonMap["unknownStatus"] as? Bool {
              resultDecodedBuilder.unknownStatus = jsonValueUnknownStatus
            }
            if let jsonValueWalking = jsonMap["walking"] as? Bool {
              resultDecodedBuilder.walking = jsonValueWalking
            }
            if let jsonValueRunning = jsonMap["running"] as? Bool {
              resultDecodedBuilder.running = jsonValueRunning
            }
            if let jsonValueStationary = jsonMap["stationary"] as? Bool {
              resultDecodedBuilder.stationary = jsonValueStationary
            }
            if let jsonValueAutomotive = jsonMap["automotive"] as? Bool {
              resultDecodedBuilder.automotive = jsonValueAutomotive
            }
            if let jsonValueTilting = jsonMap["tilting"] as? Bool {
              resultDecodedBuilder.tilting = jsonValueTilting
            }
            if let jsonValueCycling = jsonMap["cycling"] as? Bool {
              resultDecodedBuilder.cycling = jsonValueCycling
            }
            if let jsonValueStatus = jsonMap["status"] as? String {
              resultDecodedBuilder.status = NSData(base64EncodedString:jsonValueStatus, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    // in ms
    public private(set) var hasTimestampSinceStart:Bool = false
    public private(set) var timestampSinceStart:UInt64 = UInt64(0)

    public private(set) var locationFix:Array<Pogoprotos.Networking.Envelopes.Signature.LocationFix>  = Array<Pogoprotos.Networking.Envelopes.Signature.LocationFix>()
    public private(set) var hasGpsInfo:Bool = false
    public private(set) var gpsInfo:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo!
    public private(set) var hasSensorInfo:Bool = false
    public private(set) var sensorInfo:Pogoprotos.Networking.Envelopes.Signature.SensorInfo!
    public private(set) var hasDeviceInfo:Bool = false
    public private(set) var deviceInfo:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo!
    public private(set) var hasActivityStatus:Bool = false
    public private(set) var activityStatus:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus!
    // Location1 hashed based on the auth_token - xxHash32
    public private(set) var hasLocationHash1:Bool = false
    public private(set) var locationHash1:UInt32 = UInt32(0)

    // Location2 hashed based on the auth_token - xxHash32
    public private(set) var hasLocationHash2:Bool = false
    public private(set) var locationHash2:UInt32 = UInt32(0)

    // possibly replay check. Generation unknown but pointed to by 0001B8614
    public private(set) var hasUnknown22:Bool = false
    public private(set) var unknown22:NSData = NSData()

    // epoch timestamp in ms
    public private(set) var hasTimestamp:Bool = false
    public private(set) var timestamp:UInt64 = UInt64(0)

    // hashes of each request message in a hashArray - xxhash64
    public private(set) var requestHash:Array<UInt64> = Array<UInt64>()
    private var requestHashMemoizedSerializedSize:Int32 = -1
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTimestampSinceStart {
        try output.writeUInt64(2, value:timestampSinceStart)
      }
      for oneElementLocationFix in locationFix {
          try output.writeMessage(4, value:oneElementLocationFix)
      }
      if hasGpsInfo {
        try output.writeMessage(5, value:gpsInfo)
      }
      if hasSensorInfo {
        try output.writeMessage(7, value:sensorInfo)
      }
      if hasDeviceInfo {
        try output.writeMessage(8, value:deviceInfo)
      }
      if hasActivityStatus {
        try output.writeMessage(9, value:activityStatus)
      }
      if hasLocationHash1 {
        try output.writeUInt32(10, value:locationHash1)
      }
      if hasLocationHash2 {
        try output.writeUInt32(20, value:locationHash2)
      }
      if hasUnknown22 {
        try output.writeData(22, value:unknown22)
      }
      if hasTimestamp {
        try output.writeUInt64(23, value:timestamp)
      }
      if !requestHash.isEmpty {
        try output.writeRawVarint32(194)
        try output.writeRawVarint32(requestHashMemoizedSerializedSize)
        for oneValuerequestHash in requestHash {
          try output.writeUInt64NoTag(oneValuerequestHash)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasTimestampSinceStart {
        serialize_size += timestampSinceStart.computeUInt64Size(2)
      }
      for oneElementLocationFix in locationFix {
          serialize_size += oneElementLocationFix.computeMessageSize(4)
      }
      if hasGpsInfo {
          if let varSizegpsInfo = gpsInfo?.computeMessageSize(5) {
              serialize_size += varSizegpsInfo
          }
      }
      if hasSensorInfo {
          if let varSizesensorInfo = sensorInfo?.computeMessageSize(7) {
              serialize_size += varSizesensorInfo
          }
      }
      if hasDeviceInfo {
          if let varSizedeviceInfo = deviceInfo?.computeMessageSize(8) {
              serialize_size += varSizedeviceInfo
          }
      }
      if hasActivityStatus {
          if let varSizeactivityStatus = activityStatus?.computeMessageSize(9) {
              serialize_size += varSizeactivityStatus
          }
      }
      if hasLocationHash1 {
        serialize_size += locationHash1.computeUInt32Size(10)
      }
      if hasLocationHash2 {
        serialize_size += locationHash2.computeUInt32Size(20)
      }
      if hasUnknown22 {
        serialize_size += unknown22.computeDataSize(22)
      }
      if hasTimestamp {
        serialize_size += timestamp.computeUInt64Size(23)
      }
      var dataSizeRequestHash:Int32 = 0
      for oneValuerequestHash in requestHash {
          dataSizeRequestHash += oneValuerequestHash.computeUInt64SizeNoTag()
      }
      serialize_size += dataSizeRequestHash
      if !requestHash.isEmpty {
        serialize_size += 2
        serialize_size += dataSizeRequestHash.computeInt32SizeNoTag()
      }
      requestHashMemoizedSerializedSize = dataSizeRequestHash
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Signature> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.Signature>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature? {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
      return Pogoprotos.Networking.Envelopes.Signature.classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.Signature.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Signature.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Signature.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
      return try Pogoprotos.Networking.Envelopes.Signature.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Signature) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasTimestampSinceStart {
        jsonMap["timestampSinceStart"] = "\(timestampSinceStart)"
      }
      if !locationFix.isEmpty {
        var jsonArrayLocationFix:Array<Dictionary<String,AnyObject>> = []
          for oneValueLocationFix in locationFix {
            let ecodedMessageLocationFix = try oneValueLocationFix.encode()
            jsonArrayLocationFix += [ecodedMessageLocationFix]
          }
        jsonMap["locationFix"] = jsonArrayLocationFix
      }
      if hasGpsInfo {
        jsonMap["gpsInfo"] = try gpsInfo.encode()
      }
      if hasSensorInfo {
        jsonMap["sensorInfo"] = try sensorInfo.encode()
      }
      if hasDeviceInfo {
        jsonMap["deviceInfo"] = try deviceInfo.encode()
      }
      if hasActivityStatus {
        jsonMap["activityStatus"] = try activityStatus.encode()
      }
      if hasLocationHash1 {
        jsonMap["locationHash1"] = NSNumber(unsignedInt:locationHash1)
      }
      if hasLocationHash2 {
        jsonMap["locationHash2"] = NSNumber(unsignedInt:locationHash2)
      }
      if hasUnknown22 {
        jsonMap["unknown22"] = unknown22.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
      }
      if hasTimestamp {
        jsonMap["timestamp"] = "\(timestamp)"
      }
      if !requestHash.isEmpty {
        var jsonArrayRequestHash:Array<String> = []
          for oneValueRequestHash in requestHash {
            jsonArrayRequestHash += ["\(oneValueRequestHash)"]
          }
        jsonMap["requestHash"] = jsonArrayRequestHash
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature {
      return try Pogoprotos.Networking.Envelopes.Signature.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasTimestampSinceStart {
        output += "\(indent) timestampSinceStart: \(timestampSinceStart) \n"
      }
      var locationFixElementIndex:Int = 0
      for oneElementLocationFix in locationFix {
          output += "\(indent) locationFix[\(locationFixElementIndex)] {\n"
          output += try oneElementLocationFix.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          locationFixElementIndex += 1
      }
      if hasGpsInfo {
        output += "\(indent) gpsInfo {\n"
        if let outDescGpsInfo = gpsInfo {
          output += try outDescGpsInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasSensorInfo {
        output += "\(indent) sensorInfo {\n"
        if let outDescSensorInfo = sensorInfo {
          output += try outDescSensorInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasDeviceInfo {
        output += "\(indent) deviceInfo {\n"
        if let outDescDeviceInfo = deviceInfo {
          output += try outDescDeviceInfo.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasActivityStatus {
        output += "\(indent) activityStatus {\n"
        if let outDescActivityStatus = activityStatus {
          output += try outDescActivityStatus.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasLocationHash1 {
        output += "\(indent) locationHash1: \(locationHash1) \n"
      }
      if hasLocationHash2 {
        output += "\(indent) locationHash2: \(locationHash2) \n"
      }
      if hasUnknown22 {
        output += "\(indent) unknown22: \(unknown22) \n"
      }
      if hasTimestamp {
        output += "\(indent) timestamp: \(timestamp) \n"
      }
      var requestHashElementIndex:Int = 0
      for oneValueRequestHash in requestHash  {
          output += "\(indent) requestHash[\(requestHashElementIndex)]: \(oneValueRequestHash)\n"
          requestHashElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTimestampSinceStart {
               hashCode = (hashCode &* 31) &+ timestampSinceStart.hashValue
            }
            for oneElementLocationFix in locationFix {
                hashCode = (hashCode &* 31) &+ oneElementLocationFix.hashValue
            }
            if hasGpsInfo {
                if let hashValuegpsInfo = gpsInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegpsInfo
                }
            }
            if hasSensorInfo {
                if let hashValuesensorInfo = sensorInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesensorInfo
                }
            }
            if hasDeviceInfo {
                if let hashValuedeviceInfo = deviceInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedeviceInfo
                }
            }
            if hasActivityStatus {
                if let hashValueactivityStatus = activityStatus?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueactivityStatus
                }
            }
            if hasLocationHash1 {
               hashCode = (hashCode &* 31) &+ locationHash1.hashValue
            }
            if hasLocationHash2 {
               hashCode = (hashCode &* 31) &+ locationHash2.hashValue
            }
            if hasUnknown22 {
               hashCode = (hashCode &* 31) &+ unknown22.hashValue
            }
            if hasTimestamp {
               hashCode = (hashCode &* 31) &+ timestamp.hashValue
            }
            for oneValueRequestHash in requestHash {
                hashCode = (hashCode &* 31) &+ oneValueRequestHash.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Signature"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Signature"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.Signature.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.Signature = Pogoprotos.Networking.Envelopes.Signature()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.Signature {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasTimestampSinceStart:Bool {
           get {
                return builderResult.hasTimestampSinceStart
           }
      }
      public var timestampSinceStart:UInt64 {
           get {
                return builderResult.timestampSinceStart
           }
           set (value) {
               builderResult.hasTimestampSinceStart = true
               builderResult.timestampSinceStart = value
           }
      }
      public func setTimestampSinceStart(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.timestampSinceStart = value
        return self
      }
      public func clearTimestampSinceStart() -> Pogoprotos.Networking.Envelopes.Signature.Builder{
           builderResult.hasTimestampSinceStart = false
           builderResult.timestampSinceStart = UInt64(0)
           return self
      }
      public var locationFix:Array<Pogoprotos.Networking.Envelopes.Signature.LocationFix> {
           get {
               return builderResult.locationFix
           }
           set (value) {
               builderResult.locationFix = value
           }
      }
      public func setLocationFix(value:Array<Pogoprotos.Networking.Envelopes.Signature.LocationFix>) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.locationFix = value
        return self
      }
      public func clearLocationFix() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        builderResult.locationFix.removeAll(keepCapacity: false)
        return self
      }
      public var hasGpsInfo:Bool {
           get {
               return builderResult.hasGpsInfo
           }
      }
      public var gpsInfo:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo! {
           get {
               if gpsInfoBuilder_ != nil {
                  builderResult.gpsInfo = gpsInfoBuilder_.getMessage()
               }
               return builderResult.gpsInfo
           }
           set (value) {
               builderResult.hasGpsInfo = true
               builderResult.gpsInfo = value
           }
      }
      private var gpsInfoBuilder_:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder! {
           didSet {
              builderResult.hasGpsInfo = true
           }
      }
      public func getGpsInfoBuilder() -> Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder {
        if gpsInfoBuilder_ == nil {
           gpsInfoBuilder_ = Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder()
           builderResult.gpsInfo = gpsInfoBuilder_.getMessage()
           if gpsInfo != nil {
              try! gpsInfoBuilder_.mergeFrom(gpsInfo)
           }
        }
        return gpsInfoBuilder_
      }
      public func setGpsInfo(value:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo!) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.gpsInfo = value
        return self
      }
      public func mergeGpsInfo(value:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        if builderResult.hasGpsInfo {
          builderResult.gpsInfo = try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.builderWithPrototype(builderResult.gpsInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.gpsInfo = value
        }
        builderResult.hasGpsInfo = true
        return self
      }
      public func clearGpsInfo() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        gpsInfoBuilder_ = nil
        builderResult.hasGpsInfo = false
        builderResult.gpsInfo = nil
        return self
      }
      public var hasSensorInfo:Bool {
           get {
               return builderResult.hasSensorInfo
           }
      }
      public var sensorInfo:Pogoprotos.Networking.Envelopes.Signature.SensorInfo! {
           get {
               if sensorInfoBuilder_ != nil {
                  builderResult.sensorInfo = sensorInfoBuilder_.getMessage()
               }
               return builderResult.sensorInfo
           }
           set (value) {
               builderResult.hasSensorInfo = true
               builderResult.sensorInfo = value
           }
      }
      private var sensorInfoBuilder_:Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder! {
           didSet {
              builderResult.hasSensorInfo = true
           }
      }
      public func getSensorInfoBuilder() -> Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder {
        if sensorInfoBuilder_ == nil {
           sensorInfoBuilder_ = Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder()
           builderResult.sensorInfo = sensorInfoBuilder_.getMessage()
           if sensorInfo != nil {
              try! sensorInfoBuilder_.mergeFrom(sensorInfo)
           }
        }
        return sensorInfoBuilder_
      }
      public func setSensorInfo(value:Pogoprotos.Networking.Envelopes.Signature.SensorInfo!) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.sensorInfo = value
        return self
      }
      public func mergeSensorInfo(value:Pogoprotos.Networking.Envelopes.Signature.SensorInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        if builderResult.hasSensorInfo {
          builderResult.sensorInfo = try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.builderWithPrototype(builderResult.sensorInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.sensorInfo = value
        }
        builderResult.hasSensorInfo = true
        return self
      }
      public func clearSensorInfo() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        sensorInfoBuilder_ = nil
        builderResult.hasSensorInfo = false
        builderResult.sensorInfo = nil
        return self
      }
      public var hasDeviceInfo:Bool {
           get {
               return builderResult.hasDeviceInfo
           }
      }
      public var deviceInfo:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo! {
           get {
               if deviceInfoBuilder_ != nil {
                  builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
               }
               return builderResult.deviceInfo
           }
           set (value) {
               builderResult.hasDeviceInfo = true
               builderResult.deviceInfo = value
           }
      }
      private var deviceInfoBuilder_:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder! {
           didSet {
              builderResult.hasDeviceInfo = true
           }
      }
      public func getDeviceInfoBuilder() -> Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder {
        if deviceInfoBuilder_ == nil {
           deviceInfoBuilder_ = Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder()
           builderResult.deviceInfo = deviceInfoBuilder_.getMessage()
           if deviceInfo != nil {
              try! deviceInfoBuilder_.mergeFrom(deviceInfo)
           }
        }
        return deviceInfoBuilder_
      }
      public func setDeviceInfo(value:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo!) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.deviceInfo = value
        return self
      }
      public func mergeDeviceInfo(value:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        if builderResult.hasDeviceInfo {
          builderResult.deviceInfo = try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.builderWithPrototype(builderResult.deviceInfo).mergeFrom(value).buildPartial()
        } else {
          builderResult.deviceInfo = value
        }
        builderResult.hasDeviceInfo = true
        return self
      }
      public func clearDeviceInfo() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        deviceInfoBuilder_ = nil
        builderResult.hasDeviceInfo = false
        builderResult.deviceInfo = nil
        return self
      }
      public var hasActivityStatus:Bool {
           get {
               return builderResult.hasActivityStatus
           }
      }
      public var activityStatus:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus! {
           get {
               if activityStatusBuilder_ != nil {
                  builderResult.activityStatus = activityStatusBuilder_.getMessage()
               }
               return builderResult.activityStatus
           }
           set (value) {
               builderResult.hasActivityStatus = true
               builderResult.activityStatus = value
           }
      }
      private var activityStatusBuilder_:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder! {
           didSet {
              builderResult.hasActivityStatus = true
           }
      }
      public func getActivityStatusBuilder() -> Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder {
        if activityStatusBuilder_ == nil {
           activityStatusBuilder_ = Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder()
           builderResult.activityStatus = activityStatusBuilder_.getMessage()
           if activityStatus != nil {
              try! activityStatusBuilder_.mergeFrom(activityStatus)
           }
        }
        return activityStatusBuilder_
      }
      public func setActivityStatus(value:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus!) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.activityStatus = value
        return self
      }
      public func mergeActivityStatus(value:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        if builderResult.hasActivityStatus {
          builderResult.activityStatus = try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.builderWithPrototype(builderResult.activityStatus).mergeFrom(value).buildPartial()
        } else {
          builderResult.activityStatus = value
        }
        builderResult.hasActivityStatus = true
        return self
      }
      public func clearActivityStatus() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        activityStatusBuilder_ = nil
        builderResult.hasActivityStatus = false
        builderResult.activityStatus = nil
        return self
      }
      public var hasLocationHash1:Bool {
           get {
                return builderResult.hasLocationHash1
           }
      }
      public var locationHash1:UInt32 {
           get {
                return builderResult.locationHash1
           }
           set (value) {
               builderResult.hasLocationHash1 = true
               builderResult.locationHash1 = value
           }
      }
      public func setLocationHash1(value:UInt32) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.locationHash1 = value
        return self
      }
      public func clearLocationHash1() -> Pogoprotos.Networking.Envelopes.Signature.Builder{
           builderResult.hasLocationHash1 = false
           builderResult.locationHash1 = UInt32(0)
           return self
      }
      public var hasLocationHash2:Bool {
           get {
                return builderResult.hasLocationHash2
           }
      }
      public var locationHash2:UInt32 {
           get {
                return builderResult.locationHash2
           }
           set (value) {
               builderResult.hasLocationHash2 = true
               builderResult.locationHash2 = value
           }
      }
      public func setLocationHash2(value:UInt32) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.locationHash2 = value
        return self
      }
      public func clearLocationHash2() -> Pogoprotos.Networking.Envelopes.Signature.Builder{
           builderResult.hasLocationHash2 = false
           builderResult.locationHash2 = UInt32(0)
           return self
      }
      public var hasUnknown22:Bool {
           get {
                return builderResult.hasUnknown22
           }
      }
      public var unknown22:NSData {
           get {
                return builderResult.unknown22
           }
           set (value) {
               builderResult.hasUnknown22 = true
               builderResult.unknown22 = value
           }
      }
      public func setUnknown22(value:NSData) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.unknown22 = value
        return self
      }
      public func clearUnknown22() -> Pogoprotos.Networking.Envelopes.Signature.Builder{
           builderResult.hasUnknown22 = false
           builderResult.unknown22 = NSData()
           return self
      }
      public var hasTimestamp:Bool {
           get {
                return builderResult.hasTimestamp
           }
      }
      public var timestamp:UInt64 {
           get {
                return builderResult.timestamp
           }
           set (value) {
               builderResult.hasTimestamp = true
               builderResult.timestamp = value
           }
      }
      public func setTimestamp(value:UInt64) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.timestamp = value
        return self
      }
      public func clearTimestamp() -> Pogoprotos.Networking.Envelopes.Signature.Builder{
           builderResult.hasTimestamp = false
           builderResult.timestamp = UInt64(0)
           return self
      }
      public var requestHash:Array<UInt64> {
           get {
               return builderResult.requestHash
           }
           set (array) {
               builderResult.requestHash = array
           }
      }
      public func setRequestHash(value:Array<UInt64>) -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        self.requestHash = value
        return self
      }
      public func clearRequestHash() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
         builderResult.requestHash.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.Signature()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        return try Pogoprotos.Networking.Envelopes.Signature.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.Signature {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.Signature {
        let returnMe:Pogoprotos.Networking.Envelopes.Signature = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Signature) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        if other == Pogoprotos.Networking.Envelopes.Signature() {
         return self
        }
        if other.hasTimestampSinceStart {
             timestampSinceStart = other.timestampSinceStart
        }
        if !other.locationFix.isEmpty  {
           builderResult.locationFix += other.locationFix
        }
        if (other.hasGpsInfo) {
            try mergeGpsInfo(other.gpsInfo)
        }
        if (other.hasSensorInfo) {
            try mergeSensorInfo(other.sensorInfo)
        }
        if (other.hasDeviceInfo) {
            try mergeDeviceInfo(other.deviceInfo)
        }
        if (other.hasActivityStatus) {
            try mergeActivityStatus(other.activityStatus)
        }
        if other.hasLocationHash1 {
             locationHash1 = other.locationHash1
        }
        if other.hasLocationHash2 {
             locationHash2 = other.locationHash2
        }
        if other.hasUnknown22 {
             unknown22 = other.unknown22
        }
        if other.hasTimestamp {
             timestamp = other.timestamp
        }
        if !other.requestHash.isEmpty {
            builderResult.requestHash += other.requestHash
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 16:
            timestampSinceStart = try input.readUInt64()

          case 34:
            let subBuilder = Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            locationFix += [subBuilder.buildPartial()]

          case 42:
            let subBuilder:Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder = Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder()
            if hasGpsInfo {
              try subBuilder.mergeFrom(gpsInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            gpsInfo = subBuilder.buildPartial()

          case 58:
            let subBuilder:Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder = Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder()
            if hasSensorInfo {
              try subBuilder.mergeFrom(sensorInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sensorInfo = subBuilder.buildPartial()

          case 66:
            let subBuilder:Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder = Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder()
            if hasDeviceInfo {
              try subBuilder.mergeFrom(deviceInfo)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            deviceInfo = subBuilder.buildPartial()

          case 74:
            let subBuilder:Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder = Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder()
            if hasActivityStatus {
              try subBuilder.mergeFrom(activityStatus)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            activityStatus = subBuilder.buildPartial()

          case 80:
            locationHash1 = try input.readUInt32()

          case 160:
            locationHash2 = try input.readUInt32()

          case 178:
            unknown22 = try input.readData()

          case 184:
            timestamp = try input.readUInt64()

          case 194:
            let length:Int32 = try input.readRawVarint32()
            let limit:Int32 = try input.pushLimit(length)
            while (input.bytesUntilLimit() > 0) {
              builderResult.requestHash += [try input.readUInt64()]
            }
            input.popLimit(limit)

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Signature.Builder()
        if let jsonValueTimestampSinceStart = jsonMap["timestampSinceStart"] as? String {
          resultDecodedBuilder.timestampSinceStart = UInt64(jsonValueTimestampSinceStart)!
        }
        if let jsonValueLocationFix = jsonMap["locationFix"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayLocationFix:Array<Pogoprotos.Networking.Envelopes.Signature.LocationFix> = []
          for oneValueLocationFix in jsonValueLocationFix {
            let messageFromStringLocationFix = try Pogoprotos.Networking.Envelopes.Signature.LocationFix.Builder.decodeToBuilder(oneValueLocationFix).build()

            jsonArrayLocationFix += [messageFromStringLocationFix]
          }
          resultDecodedBuilder.locationFix = jsonArrayLocationFix
        }
        if let jsonValueGpsInfo = jsonMap["gpsInfo"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.gpsInfo = try Pogoprotos.Networking.Envelopes.Signature.AndroidGpsInfo.Builder.decodeToBuilder(jsonValueGpsInfo).build()

        }
        if let jsonValueSensorInfo = jsonMap["sensorInfo"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.sensorInfo = try Pogoprotos.Networking.Envelopes.Signature.SensorInfo.Builder.decodeToBuilder(jsonValueSensorInfo).build()

        }
        if let jsonValueDeviceInfo = jsonMap["deviceInfo"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.deviceInfo = try Pogoprotos.Networking.Envelopes.Signature.DeviceInfo.Builder.decodeToBuilder(jsonValueDeviceInfo).build()

        }
        if let jsonValueActivityStatus = jsonMap["activityStatus"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.activityStatus = try Pogoprotos.Networking.Envelopes.Signature.ActivityStatus.Builder.decodeToBuilder(jsonValueActivityStatus).build()

        }
        if let jsonValueLocationHash1 = jsonMap["locationHash1"] as? NSNumber {
          resultDecodedBuilder.locationHash1 = jsonValueLocationHash1.unsignedIntValue
        }
        if let jsonValueLocationHash2 = jsonMap["locationHash2"] as? NSNumber {
          resultDecodedBuilder.locationHash2 = jsonValueLocationHash2.unsignedIntValue
        }
        if let jsonValueUnknown22 = jsonMap["unknown22"] as? String {
          resultDecodedBuilder.unknown22 = NSData(base64EncodedString:jsonValueUnknown22, options: NSDataBase64DecodingOptions(rawValue:0))!
        }
        if let jsonValueTimestamp = jsonMap["timestamp"] as? String {
          resultDecodedBuilder.timestamp = UInt64(jsonValueTimestamp)!
        }
        if let jsonValueRequestHash = jsonMap["requestHash"] as? Array<String> {
          var jsonArrayRequestHash:Array<UInt64> = []
          for oneValueRequestHash in jsonValueRequestHash {
            jsonArrayRequestHash += [UInt64(oneValueRequestHash)!]
          }
          resultDecodedBuilder.requestHash = jsonArrayRequestHash
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Signature.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.Signature.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Unknown6 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Unknown2 : GeneratedMessage, GeneratedMessageProtocol {
        // This are the bytes of POGOProtos/Networking/Envelopes/Signature.proto encrypted.
        public private(set) var hasEncryptedSignature:Bool = false
        public private(set) var encryptedSignature:NSData = NSData()

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasEncryptedSignature {
            try output.writeData(1, value:encryptedSignature)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasEncryptedSignature {
            serialize_size += encryptedSignature.computeDataSize(1)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6.Unknown2> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6.Unknown2>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2? {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasEncryptedSignature {
            jsonMap["encryptedSignature"] = encryptedSignature.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasEncryptedSignature {
            output += "\(indent) encryptedSignature: \(encryptedSignature) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasEncryptedSignature {
                   hashCode = (hashCode &* 31) &+ encryptedSignature.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6.Unknown2"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6.Unknown2"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasEncryptedSignature:Bool {
               get {
                    return builderResult.hasEncryptedSignature
               }
          }
          public var encryptedSignature:NSData {
               get {
                    return builderResult.encryptedSignature
               }
               set (value) {
                   builderResult.hasEncryptedSignature = true
                   builderResult.encryptedSignature = value
               }
          }
          public func setEncryptedSignature(value:NSData) -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            self.encryptedSignature = value
            return self
          }
          public func clearEncryptedSignature() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder{
               builderResult.hasEncryptedSignature = false
               builderResult.encryptedSignature = NSData()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 {
            let returnMe:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            if other == Pogoprotos.Networking.Envelopes.Unknown6.Unknown2() {
             return self
            }
            if other.hasEncryptedSignature {
                 encryptedSignature = other.encryptedSignature
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10:
                encryptedSignature = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
            if let jsonValueEncryptedSignature = jsonMap["encryptedSignature"] as? String {
              resultDecodedBuilder.encryptedSignature = NSData(base64EncodedString:jsonValueEncryptedSignature, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    // 5 for IAPs, 6 is unknown still
    public private(set) var hasRequestType:Bool = false
    public private(set) var requestType:Int32 = Int32(0)

    public private(set) var hasUnknown2:Bool = false
    public private(set) var unknown2:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasRequestType {
        try output.writeInt32(1, value:requestType)
      }
      if hasUnknown2 {
        try output.writeMessage(2, value:unknown2)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasRequestType {
        serialize_size += requestType.computeInt32Size(1)
      }
      if hasUnknown2 {
          if let varSizeunknown2 = unknown2?.computeMessageSize(2) {
              serialize_size += varSizeunknown2
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6? {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return Pogoprotos.Networking.Envelopes.Unknown6.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasRequestType {
        jsonMap["requestType"] = NSNumber(int:requestType)
      }
      if hasUnknown2 {
        jsonMap["unknown2"] = try unknown2.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
      return try Pogoprotos.Networking.Envelopes.Unknown6.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasRequestType {
        output += "\(indent) requestType: \(requestType) \n"
      }
      if hasUnknown2 {
        output += "\(indent) unknown2 {\n"
        if let outDescUnknown2 = unknown2 {
          output += try outDescUnknown2.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasRequestType {
               hashCode = (hashCode &* 31) &+ requestType.hashValue
            }
            if hasUnknown2 {
                if let hashValueunknown2 = unknown2?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueunknown2
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.Unknown6.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6 = Pogoprotos.Networking.Envelopes.Unknown6()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasRequestType:Bool {
           get {
                return builderResult.hasRequestType
           }
      }
      public var requestType:Int32 {
           get {
                return builderResult.requestType
           }
           set (value) {
               builderResult.hasRequestType = true
               builderResult.requestType = value
           }
      }
      public func setRequestType(value:Int32) -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        self.requestType = value
        return self
      }
      public func clearRequestType() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder{
           builderResult.hasRequestType = false
           builderResult.requestType = Int32(0)
           return self
      }
      public var hasUnknown2:Bool {
           get {
               return builderResult.hasUnknown2
           }
      }
      public var unknown2:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2! {
           get {
               if unknown2Builder_ != nil {
                  builderResult.unknown2 = unknown2Builder_.getMessage()
               }
               return builderResult.unknown2
           }
           set (value) {
               builderResult.hasUnknown2 = true
               builderResult.unknown2 = value
           }
      }
      private var unknown2Builder_:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder! {
           didSet {
              builderResult.hasUnknown2 = true
           }
      }
      public func getUnknown2Builder() -> Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder {
        if unknown2Builder_ == nil {
           unknown2Builder_ = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
           builderResult.unknown2 = unknown2Builder_.getMessage()
           if unknown2 != nil {
              try! unknown2Builder_.mergeFrom(unknown2)
           }
        }
        return unknown2Builder_
      }
      public func setUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2!) -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        self.unknown2 = value
        return self
      }
      public func mergeUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        if builderResult.hasUnknown2 {
          builderResult.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.builderWithPrototype(builderResult.unknown2).mergeFrom(value).buildPartial()
        } else {
          builderResult.unknown2 = value
        }
        builderResult.hasUnknown2 = true
        return self
      }
      public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        unknown2Builder_ = nil
        builderResult.hasUnknown2 = false
        builderResult.unknown2 = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.Unknown6()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        return try Pogoprotos.Networking.Envelopes.Unknown6.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6 {
        let returnMe:Pogoprotos.Networking.Envelopes.Unknown6 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        if other == Pogoprotos.Networking.Envelopes.Unknown6() {
         return self
        }
        if other.hasRequestType {
             requestType = other.requestType
        }
        if (other.hasUnknown2) {
            try mergeUnknown2(other.unknown2)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            requestType = try input.readInt32()

          case 18:
            let subBuilder:Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder = Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder()
            if hasUnknown2 {
              try subBuilder.mergeFrom(unknown2)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            unknown2 = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6.Builder()
        if let jsonValueRequestType = jsonMap["requestType"] as? NSNumber {
          resultDecodedBuilder.requestType = jsonValueRequestType.intValue
        }
        if let jsonValueUnknown2 = jsonMap["unknown2"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6.Unknown2.Builder.decodeToBuilder(jsonValueUnknown2).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.Unknown6.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class Unknown6Response : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Unknown2 : GeneratedMessage, GeneratedMessageProtocol {


        //Nested type declaration start

          final public class StoreItem : GeneratedMessage, GeneratedMessageProtocol {


            //Nested type declaration start

              final public class Tag : GeneratedMessage, GeneratedMessageProtocol {
                public private(set) var hasKey:Bool = false
                public private(set) var key:String = ""

                public private(set) var hasValue:Bool = false
                public private(set) var value:String = ""

                required public init() {
                     super.init()
                }
                override public func isInitialized() -> Bool {
                 return true
                }
                override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
                  if hasKey {
                    try output.writeString(1, value:key)
                  }
                  if hasValue {
                    try output.writeString(2, value:value)
                  }
                  try unknownFields.writeToCodedOutputStream(output)
                }
                override public func serializedSize() -> Int32 {
                  var serialize_size:Int32 = memoizedSerializedSize
                  if serialize_size != -1 {
                   return serialize_size
                  }

                  serialize_size = 0
                  if hasKey {
                    serialize_size += key.computeStringSize(1)
                  }
                  if hasValue {
                    serialize_size += value.computeStringSize(2)
                  }
                  serialize_size += unknownFields.serializedSize()
                  memoizedSerializedSize = serialize_size
                  return serialize_size
                }
                public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag> {
                  var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>()
                  while let value = try parseFromDelimitedFromInputStream(input) {
                    mergedArray += [value]
                  }
                  return mergedArray
                }
                public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag? {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeDelimitedFromInputStream(input)?.build()
                }
                public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
                }
                public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                }
                public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromInputStream(input).build()
                }
                public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromCodedInputStream(input).build()
                }
                public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder
                }
                public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder
                }
                override public class func classBuilder() -> MessageBuilder {
                  return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                }
                override public func classBuilder() -> MessageBuilder {
                  return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                }
                public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.builderWithPrototype(self)
                }
                public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder().mergeFrom(prototype)
                }
                override public func encode() throws -> Dictionary<String,AnyObject> {
                  guard isInitialized() else {
                    throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
                  }

                  var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
                  if hasKey {
                    jsonMap["key"] = key
                  }
                  if hasValue {
                    jsonMap["value"] = value
                  }
                  return jsonMap
                }
                override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.decodeToBuilder(jsonMap).build()
                }
                override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                  return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.fromJSONToBuilder(data).build()
                }
                override public func getDescription(indent:String) throws -> String {
                  var output = ""
                  if hasKey {
                    output += "\(indent) key: \(key) \n"
                  }
                  if hasValue {
                    output += "\(indent) value: \(value) \n"
                  }
                  output += unknownFields.getDescription(indent)
                  return output
                }
                override public var hashValue:Int {
                    get {
                        var hashCode:Int = 7
                        if hasKey {
                           hashCode = (hashCode &* 31) &+ key.hashValue
                        }
                        if hasValue {
                           hashCode = (hashCode &* 31) &+ value.hashValue
                        }
                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                        return hashCode
                    }
                }


                //Meta information declaration start

                override public class func className() -> String {
                    return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag"
                }
                override public func className() -> String {
                    return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag"
                }
                override public func classMetaType() -> GeneratedMessage.Type {
                    return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.self
                }
                //Meta information declaration end

                final public class Builder : GeneratedMessageBuilder {
                  private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag()
                  public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                      return builderResult
                  }

                  required override public init () {
                     super.init()
                  }
                  public var hasKey:Bool {
                       get {
                            return builderResult.hasKey
                       }
                  }
                  public var key:String {
                       get {
                            return builderResult.key
                       }
                       set (value) {
                           builderResult.hasKey = true
                           builderResult.key = value
                       }
                  }
                  public func setKey(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    self.key = value
                    return self
                  }
                  public func clearKey() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder{
                       builderResult.hasKey = false
                       builderResult.key = ""
                       return self
                  }
                  public var hasValue:Bool {
                       get {
                            return builderResult.hasValue
                       }
                  }
                  public var value:String {
                       get {
                            return builderResult.value
                       }
                       set (value) {
                           builderResult.hasValue = true
                           builderResult.value = value
                       }
                  }
                  public func setValue(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    self.value = value
                    return self
                  }
                  public func clearValue() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder{
                       builderResult.hasValue = false
                       builderResult.value = ""
                       return self
                  }
                  override public var internalGetResult:GeneratedMessage {
                       get {
                          return builderResult
                       }
                  }
                  override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag()
                    return self
                  }
                  override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.builderWithPrototype(builderResult)
                  }
                  override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                       try checkInitialized()
                       return buildPartial()
                  }
                  public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag {
                    let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag = builderResult
                    return returnMe
                  }
                  public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    if other == Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag() {
                     return self
                    }
                    if other.hasKey {
                         key = other.key
                    }
                    if other.hasValue {
                         value = other.value
                    }
                    try mergeUnknownFields(other.unknownFields)
                    return self
                  }
                  override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                       return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                  }
                  override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                    while (true) {
                      let protobufTag = try input.readTag()
                      switch protobufTag {
                      case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                      case 10:
                        key = try input.readString()

                      case 18:
                        value = try input.readString()

                      default:
                        if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                           unknownFields = try unknownFieldsBuilder.build()
                           return self
                        }
                      }
                    }
                  }
                  override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                    if let jsonValueKey = jsonMap["key"] as? String {
                      resultDecodedBuilder.key = jsonValueKey
                    }
                    if let jsonValueValue = jsonMap["value"] as? String {
                      resultDecodedBuilder.value = jsonValueValue
                    }
                    return resultDecodedBuilder
                  }
                  override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder {
                    let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                      throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                    }
                    return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.decodeToBuilder(jsDataCast)
                  }
                }

              }

            //Nested type declaration end

            // Internal ID (probably for Google Play/App Store) example: "pgorelease.incenseordinary.1"
            public private(set) var hasItemId:Bool = false
            public private(set) var itemId:String = ""

            // If true, this item is bought with real currency (USD, etc.) through the Play/App Store instead of Pokecoins
            public private(set) var hasIsIap:Bool = false
            public private(set) var isIap:Bool = false

            public private(set) var hasCurrencyToBuy:Bool = false
            public private(set) var currencyToBuy:Pogoprotos.Data.Player.Currency!
            public private(set) var hasYieldsCurrency:Bool = false
            public private(set) var yieldsCurrency:Pogoprotos.Data.Player.Currency!
            public private(set) var hasYieldsItem:Bool = false
            public private(set) var yieldsItem:Pogoprotos.Inventory.Item.ItemData!
            public private(set) var tags:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>  = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>()
            // Possibly something to toggle visibility in the store/purchasibility?
            public private(set) var hasUnknown7:Bool = false
            public private(set) var unknown7:Int32 = Int32(0)

            required public init() {
                 super.init()
            }
            override public func isInitialized() -> Bool {
             return true
            }
            override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
              if hasItemId {
                try output.writeString(1, value:itemId)
              }
              if hasIsIap {
                try output.writeBool(2, value:isIap)
              }
              if hasCurrencyToBuy {
                try output.writeMessage(3, value:currencyToBuy)
              }
              if hasYieldsCurrency {
                try output.writeMessage(4, value:yieldsCurrency)
              }
              if hasYieldsItem {
                try output.writeMessage(5, value:yieldsItem)
              }
              for oneElementTags in tags {
                  try output.writeMessage(6, value:oneElementTags)
              }
              if hasUnknown7 {
                try output.writeInt32(7, value:unknown7)
              }
              try unknownFields.writeToCodedOutputStream(output)
            }
            override public func serializedSize() -> Int32 {
              var serialize_size:Int32 = memoizedSerializedSize
              if serialize_size != -1 {
               return serialize_size
              }

              serialize_size = 0
              if hasItemId {
                serialize_size += itemId.computeStringSize(1)
              }
              if hasIsIap {
                serialize_size += isIap.computeBoolSize(2)
              }
              if hasCurrencyToBuy {
                  if let varSizecurrencyToBuy = currencyToBuy?.computeMessageSize(3) {
                      serialize_size += varSizecurrencyToBuy
                  }
              }
              if hasYieldsCurrency {
                  if let varSizeyieldsCurrency = yieldsCurrency?.computeMessageSize(4) {
                      serialize_size += varSizeyieldsCurrency
                  }
              }
              if hasYieldsItem {
                  if let varSizeyieldsItem = yieldsItem?.computeMessageSize(5) {
                      serialize_size += varSizeyieldsItem
                  }
              }
              for oneElementTags in tags {
                  serialize_size += oneElementTags.computeMessageSize(6)
              }
              if hasUnknown7 {
                serialize_size += unknown7.computeInt32Size(7)
              }
              serialize_size += unknownFields.serializedSize()
              memoizedSerializedSize = serialize_size
              return serialize_size
            }
            public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem> {
              var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>()
              while let value = try parseFromDelimitedFromInputStream(input) {
                mergedArray += [value]
              }
              return mergedArray
            }
            public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem? {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeDelimitedFromInputStream(input)?.build()
            }
            public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
            }
            public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromInputStream(input).build()
            }
            public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromCodedInputStream(input).build()
            }
            public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder
            }
            public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder
            }
            override public class func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
            }
            override public func classBuilder() -> MessageBuilder {
              return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
            }
            public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.builderWithPrototype(self)
            }
            public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder().mergeFrom(prototype)
            }
            override public func encode() throws -> Dictionary<String,AnyObject> {
              guard isInitialized() else {
                throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
              }

              var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
              if hasItemId {
                jsonMap["itemId"] = itemId
              }
              if hasIsIap {
                jsonMap["isIap"] = isIap
              }
              if hasCurrencyToBuy {
                jsonMap["currencyToBuy"] = try currencyToBuy.encode()
              }
              if hasYieldsCurrency {
                jsonMap["yieldsCurrency"] = try yieldsCurrency.encode()
              }
              if hasYieldsItem {
                jsonMap["yieldsItem"] = try yieldsItem.encode()
              }
              if !tags.isEmpty {
                var jsonArrayTags:Array<Dictionary<String,AnyObject>> = []
                  for oneValueTags in tags {
                    let ecodedMessageTags = try oneValueTags.encode()
                    jsonArrayTags += [ecodedMessageTags]
                  }
                jsonMap["tags"] = jsonArrayTags
              }
              if hasUnknown7 {
                jsonMap["unknown7"] = NSNumber(int:unknown7)
              }
              return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.decodeToBuilder(jsonMap).build()
            }
            override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
              return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.fromJSONToBuilder(data).build()
            }
            override public func getDescription(indent:String) throws -> String {
              var output = ""
              if hasItemId {
                output += "\(indent) itemId: \(itemId) \n"
              }
              if hasIsIap {
                output += "\(indent) isIap: \(isIap) \n"
              }
              if hasCurrencyToBuy {
                output += "\(indent) currencyToBuy {\n"
                if let outDescCurrencyToBuy = currencyToBuy {
                  output += try outDescCurrencyToBuy.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              if hasYieldsCurrency {
                output += "\(indent) yieldsCurrency {\n"
                if let outDescYieldsCurrency = yieldsCurrency {
                  output += try outDescYieldsCurrency.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              if hasYieldsItem {
                output += "\(indent) yieldsItem {\n"
                if let outDescYieldsItem = yieldsItem {
                  output += try outDescYieldsItem.getDescription("\(indent)  ")
                }
                output += "\(indent) }\n"
              }
              var tagsElementIndex:Int = 0
              for oneElementTags in tags {
                  output += "\(indent) tags[\(tagsElementIndex)] {\n"
                  output += try oneElementTags.getDescription("\(indent)  ")
                  output += "\(indent)}\n"
                  tagsElementIndex += 1
              }
              if hasUnknown7 {
                output += "\(indent) unknown7: \(unknown7) \n"
              }
              output += unknownFields.getDescription(indent)
              return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasItemId {
                       hashCode = (hashCode &* 31) &+ itemId.hashValue
                    }
                    if hasIsIap {
                       hashCode = (hashCode &* 31) &+ isIap.hashValue
                    }
                    if hasCurrencyToBuy {
                        if let hashValuecurrencyToBuy = currencyToBuy?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValuecurrencyToBuy
                        }
                    }
                    if hasYieldsCurrency {
                        if let hashValueyieldsCurrency = yieldsCurrency?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValueyieldsCurrency
                        }
                    }
                    if hasYieldsItem {
                        if let hashValueyieldsItem = yieldsItem?.hashValue {
                            hashCode = (hashCode &* 31) &+ hashValueyieldsItem
                        }
                    }
                    for oneElementTags in tags {
                        hashCode = (hashCode &* 31) &+ oneElementTags.hashValue
                    }
                    if hasUnknown7 {
                       hashCode = (hashCode &* 31) &+ unknown7.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem"
            }
            override public func className() -> String {
                return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem"
            }
            override public func classMetaType() -> GeneratedMessage.Type {
                return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.self
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
              private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem()
              public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
                  return builderResult
              }

              required override public init () {
                 super.init()
              }
              public var hasItemId:Bool {
                   get {
                        return builderResult.hasItemId
                   }
              }
              public var itemId:String {
                   get {
                        return builderResult.itemId
                   }
                   set (value) {
                       builderResult.hasItemId = true
                       builderResult.itemId = value
                   }
              }
              public func setItemId(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.itemId = value
                return self
              }
              public func clearItemId() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder{
                   builderResult.hasItemId = false
                   builderResult.itemId = ""
                   return self
              }
              public var hasIsIap:Bool {
                   get {
                        return builderResult.hasIsIap
                   }
              }
              public var isIap:Bool {
                   get {
                        return builderResult.isIap
                   }
                   set (value) {
                       builderResult.hasIsIap = true
                       builderResult.isIap = value
                   }
              }
              public func setIsIap(value:Bool) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.isIap = value
                return self
              }
              public func clearIsIap() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder{
                   builderResult.hasIsIap = false
                   builderResult.isIap = false
                   return self
              }
              public var hasCurrencyToBuy:Bool {
                   get {
                       return builderResult.hasCurrencyToBuy
                   }
              }
              public var currencyToBuy:Pogoprotos.Data.Player.Currency! {
                   get {
                       if currencyToBuyBuilder_ != nil {
                          builderResult.currencyToBuy = currencyToBuyBuilder_.getMessage()
                       }
                       return builderResult.currencyToBuy
                   }
                   set (value) {
                       builderResult.hasCurrencyToBuy = true
                       builderResult.currencyToBuy = value
                   }
              }
              private var currencyToBuyBuilder_:Pogoprotos.Data.Player.Currency.Builder! {
                   didSet {
                      builderResult.hasCurrencyToBuy = true
                   }
              }
              public func getCurrencyToBuyBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
                if currencyToBuyBuilder_ == nil {
                   currencyToBuyBuilder_ = Pogoprotos.Data.Player.Currency.Builder()
                   builderResult.currencyToBuy = currencyToBuyBuilder_.getMessage()
                   if currencyToBuy != nil {
                      try! currencyToBuyBuilder_.mergeFrom(currencyToBuy)
                   }
                }
                return currencyToBuyBuilder_
              }
              public func setCurrencyToBuy(value:Pogoprotos.Data.Player.Currency!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.currencyToBuy = value
                return self
              }
              public func mergeCurrencyToBuy(value:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if builderResult.hasCurrencyToBuy {
                  builderResult.currencyToBuy = try Pogoprotos.Data.Player.Currency.builderWithPrototype(builderResult.currencyToBuy).mergeFrom(value).buildPartial()
                } else {
                  builderResult.currencyToBuy = value
                }
                builderResult.hasCurrencyToBuy = true
                return self
              }
              public func clearCurrencyToBuy() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                currencyToBuyBuilder_ = nil
                builderResult.hasCurrencyToBuy = false
                builderResult.currencyToBuy = nil
                return self
              }
              public var hasYieldsCurrency:Bool {
                   get {
                       return builderResult.hasYieldsCurrency
                   }
              }
              public var yieldsCurrency:Pogoprotos.Data.Player.Currency! {
                   get {
                       if yieldsCurrencyBuilder_ != nil {
                          builderResult.yieldsCurrency = yieldsCurrencyBuilder_.getMessage()
                       }
                       return builderResult.yieldsCurrency
                   }
                   set (value) {
                       builderResult.hasYieldsCurrency = true
                       builderResult.yieldsCurrency = value
                   }
              }
              private var yieldsCurrencyBuilder_:Pogoprotos.Data.Player.Currency.Builder! {
                   didSet {
                      builderResult.hasYieldsCurrency = true
                   }
              }
              public func getYieldsCurrencyBuilder() -> Pogoprotos.Data.Player.Currency.Builder {
                if yieldsCurrencyBuilder_ == nil {
                   yieldsCurrencyBuilder_ = Pogoprotos.Data.Player.Currency.Builder()
                   builderResult.yieldsCurrency = yieldsCurrencyBuilder_.getMessage()
                   if yieldsCurrency != nil {
                      try! yieldsCurrencyBuilder_.mergeFrom(yieldsCurrency)
                   }
                }
                return yieldsCurrencyBuilder_
              }
              public func setYieldsCurrency(value:Pogoprotos.Data.Player.Currency!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.yieldsCurrency = value
                return self
              }
              public func mergeYieldsCurrency(value:Pogoprotos.Data.Player.Currency) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if builderResult.hasYieldsCurrency {
                  builderResult.yieldsCurrency = try Pogoprotos.Data.Player.Currency.builderWithPrototype(builderResult.yieldsCurrency).mergeFrom(value).buildPartial()
                } else {
                  builderResult.yieldsCurrency = value
                }
                builderResult.hasYieldsCurrency = true
                return self
              }
              public func clearYieldsCurrency() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                yieldsCurrencyBuilder_ = nil
                builderResult.hasYieldsCurrency = false
                builderResult.yieldsCurrency = nil
                return self
              }
              public var hasYieldsItem:Bool {
                   get {
                       return builderResult.hasYieldsItem
                   }
              }
              public var yieldsItem:Pogoprotos.Inventory.Item.ItemData! {
                   get {
                       if yieldsItemBuilder_ != nil {
                          builderResult.yieldsItem = yieldsItemBuilder_.getMessage()
                       }
                       return builderResult.yieldsItem
                   }
                   set (value) {
                       builderResult.hasYieldsItem = true
                       builderResult.yieldsItem = value
                   }
              }
              private var yieldsItemBuilder_:Pogoprotos.Inventory.Item.ItemData.Builder! {
                   didSet {
                      builderResult.hasYieldsItem = true
                   }
              }
              public func getYieldsItemBuilder() -> Pogoprotos.Inventory.Item.ItemData.Builder {
                if yieldsItemBuilder_ == nil {
                   yieldsItemBuilder_ = Pogoprotos.Inventory.Item.ItemData.Builder()
                   builderResult.yieldsItem = yieldsItemBuilder_.getMessage()
                   if yieldsItem != nil {
                      try! yieldsItemBuilder_.mergeFrom(yieldsItem)
                   }
                }
                return yieldsItemBuilder_
              }
              public func setYieldsItem(value:Pogoprotos.Inventory.Item.ItemData!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.yieldsItem = value
                return self
              }
              public func mergeYieldsItem(value:Pogoprotos.Inventory.Item.ItemData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if builderResult.hasYieldsItem {
                  builderResult.yieldsItem = try Pogoprotos.Inventory.Item.ItemData.builderWithPrototype(builderResult.yieldsItem).mergeFrom(value).buildPartial()
                } else {
                  builderResult.yieldsItem = value
                }
                builderResult.hasYieldsItem = true
                return self
              }
              public func clearYieldsItem() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                yieldsItemBuilder_ = nil
                builderResult.hasYieldsItem = false
                builderResult.yieldsItem = nil
                return self
              }
              public var tags:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag> {
                   get {
                       return builderResult.tags
                   }
                   set (value) {
                       builderResult.tags = value
                   }
              }
              public func setTags(value:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag>) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.tags = value
                return self
              }
              public func clearTags() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                builderResult.tags.removeAll(keepCapacity: false)
                return self
              }
              public var hasUnknown7:Bool {
                   get {
                        return builderResult.hasUnknown7
                   }
              }
              public var unknown7:Int32 {
                   get {
                        return builderResult.unknown7
                   }
                   set (value) {
                       builderResult.hasUnknown7 = true
                       builderResult.unknown7 = value
                   }
              }
              public func setUnknown7(value:Int32) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                self.unknown7 = value
                return self
              }
              public func clearUnknown7() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder{
                   builderResult.hasUnknown7 = false
                   builderResult.unknown7 = Int32(0)
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem()
                return self
              }
              override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.builderWithPrototype(builderResult)
              }
              override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
                   try checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem {
                let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem = builderResult
                return returnMe
              }
              public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                if other == Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem() {
                 return self
                }
                if other.hasItemId {
                     itemId = other.itemId
                }
                if other.hasIsIap {
                     isIap = other.isIap
                }
                if (other.hasCurrencyToBuy) {
                    try mergeCurrencyToBuy(other.currencyToBuy)
                }
                if (other.hasYieldsCurrency) {
                    try mergeYieldsCurrency(other.yieldsCurrency)
                }
                if (other.hasYieldsItem) {
                    try mergeYieldsItem(other.yieldsItem)
                }
                if !other.tags.isEmpty  {
                   builderResult.tags += other.tags
                }
                if other.hasUnknown7 {
                     unknown7 = other.unknown7
                }
                try mergeUnknownFields(other.unknownFields)
                return self
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                   return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  let protobufTag = try input.readTag()
                  switch protobufTag {
                  case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                  case 10:
                    itemId = try input.readString()

                  case 16:
                    isIap = try input.readBool()

                  case 26:
                    let subBuilder:Pogoprotos.Data.Player.Currency.Builder = Pogoprotos.Data.Player.Currency.Builder()
                    if hasCurrencyToBuy {
                      try subBuilder.mergeFrom(currencyToBuy)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    currencyToBuy = subBuilder.buildPartial()

                  case 34:
                    let subBuilder:Pogoprotos.Data.Player.Currency.Builder = Pogoprotos.Data.Player.Currency.Builder()
                    if hasYieldsCurrency {
                      try subBuilder.mergeFrom(yieldsCurrency)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    yieldsCurrency = subBuilder.buildPartial()

                  case 42:
                    let subBuilder:Pogoprotos.Inventory.Item.ItemData.Builder = Pogoprotos.Inventory.Item.ItemData.Builder()
                    if hasYieldsItem {
                      try subBuilder.mergeFrom(yieldsItem)
                    }
                    try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    yieldsItem = subBuilder.buildPartial()

                  case 50:
                    let subBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder()
                    try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                    tags += [subBuilder.buildPartial()]

                  case 56:
                    unknown7 = try input.readInt32()

                  default:
                    if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                       unknownFields = try unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
              override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
                if let jsonValueItemId = jsonMap["itemId"] as? String {
                  resultDecodedBuilder.itemId = jsonValueItemId
                }
                if let jsonValueIsIap = jsonMap["isIap"] as? Bool {
                  resultDecodedBuilder.isIap = jsonValueIsIap
                }
                if let jsonValueCurrencyToBuy = jsonMap["currencyToBuy"] as? Dictionary<String,AnyObject> {
                  resultDecodedBuilder.currencyToBuy = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonValueCurrencyToBuy).build()

                }
                if let jsonValueYieldsCurrency = jsonMap["yieldsCurrency"] as? Dictionary<String,AnyObject> {
                  resultDecodedBuilder.yieldsCurrency = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(jsonValueYieldsCurrency).build()

                }
                if let jsonValueYieldsItem = jsonMap["yieldsItem"] as? Dictionary<String,AnyObject> {
                  resultDecodedBuilder.yieldsItem = try Pogoprotos.Inventory.Item.ItemData.Builder.decodeToBuilder(jsonValueYieldsItem).build()

                }
                if let jsonValueTags = jsonMap["tags"] as? Array<Dictionary<String,AnyObject>> {
                  var jsonArrayTags:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag> = []
                  for oneValueTags in jsonValueTags {
                    let messageFromStringTags = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Tag.Builder.decodeToBuilder(oneValueTags).build()

                    jsonArrayTags += [messageFromStringTags]
                  }
                  resultDecodedBuilder.tags = jsonArrayTags
                }
                if let jsonValueUnknown7 = jsonMap["unknown7"] as? NSNumber {
                  resultDecodedBuilder.unknown7 = jsonValueUnknown7.intValue
                }
                return resultDecodedBuilder
              }
              override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder {
                let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
                  throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
                }
                return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.decodeToBuilder(jsDataCast)
              }
            }

          }

        //Nested type declaration end

        // Maybe status? It's always 1 (success), so it's probably that.
        public private(set) var hasUnknown1:Bool = false
        public private(set) var unknown1:UInt64 = UInt64(0)

        public private(set) var items:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>  = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>()
        public private(set) var playerCurrencies:Array<Pogoprotos.Data.Player.Currency>  = Array<Pogoprotos.Data.Player.Currency>()
        // Some base64 encoded stuff...
        public private(set) var hasUnknown4:Bool = false
        public private(set) var unknown4:String = ""

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasUnknown1 {
            try output.writeUInt64(1, value:unknown1)
          }
          for oneElementItems in items {
              try output.writeMessage(2, value:oneElementItems)
          }
          for oneElementPlayerCurrencies in playerCurrencies {
              try output.writeMessage(3, value:oneElementPlayerCurrencies)
          }
          if hasUnknown4 {
            try output.writeString(4, value:unknown4)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasUnknown1 {
            serialize_size += unknown1.computeUInt64Size(1)
          }
          for oneElementItems in items {
              serialize_size += oneElementItems.computeMessageSize(2)
          }
          for oneElementPlayerCurrencies in playerCurrencies {
              serialize_size += oneElementPlayerCurrencies.computeMessageSize(3)
          }
          if hasUnknown4 {
            serialize_size += unknown4.computeStringSize(4)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2> {
          var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2? {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder
        }
        public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
        }
        public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasUnknown1 {
            jsonMap["unknown1"] = "\(unknown1)"
          }
          if !items.isEmpty {
            var jsonArrayItems:Array<Dictionary<String,AnyObject>> = []
              for oneValueItems in items {
                let ecodedMessageItems = try oneValueItems.encode()
                jsonArrayItems += [ecodedMessageItems]
              }
            jsonMap["items"] = jsonArrayItems
          }
          if !playerCurrencies.isEmpty {
            var jsonArrayPlayerCurrencies:Array<Dictionary<String,AnyObject>> = []
              for oneValuePlayerCurrencies in playerCurrencies {
                let ecodedMessagePlayerCurrencies = try oneValuePlayerCurrencies.encode()
                jsonArrayPlayerCurrencies += [ecodedMessagePlayerCurrencies]
              }
            jsonMap["playerCurrencies"] = jsonArrayPlayerCurrencies
          }
          if hasUnknown4 {
            jsonMap["unknown4"] = unknown4
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
          return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasUnknown1 {
            output += "\(indent) unknown1: \(unknown1) \n"
          }
          var itemsElementIndex:Int = 0
          for oneElementItems in items {
              output += "\(indent) items[\(itemsElementIndex)] {\n"
              output += try oneElementItems.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              itemsElementIndex += 1
          }
          var playerCurrenciesElementIndex:Int = 0
          for oneElementPlayerCurrencies in playerCurrencies {
              output += "\(indent) playerCurrencies[\(playerCurrenciesElementIndex)] {\n"
              output += try oneElementPlayerCurrencies.getDescription("\(indent)  ")
              output += "\(indent)}\n"
              playerCurrenciesElementIndex += 1
          }
          if hasUnknown4 {
            output += "\(indent) unknown4: \(unknown4) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasUnknown1 {
                   hashCode = (hashCode &* 31) &+ unknown1.hashValue
                }
                for oneElementItems in items {
                    hashCode = (hashCode &* 31) &+ oneElementItems.hashValue
                }
                for oneElementPlayerCurrencies in playerCurrencies {
                    hashCode = (hashCode &* 31) &+ oneElementPlayerCurrencies.hashValue
                }
                if hasUnknown4 {
                   hashCode = (hashCode &* 31) &+ unknown4.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2"
        }
        override public func className() -> String {
            return "Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2()
          public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasUnknown1:Bool {
               get {
                    return builderResult.hasUnknown1
               }
          }
          public var unknown1:UInt64 {
               get {
                    return builderResult.unknown1
               }
               set (value) {
                   builderResult.hasUnknown1 = true
                   builderResult.unknown1 = value
               }
          }
          public func setUnknown1(value:UInt64) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.unknown1 = value
            return self
          }
          public func clearUnknown1() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder{
               builderResult.hasUnknown1 = false
               builderResult.unknown1 = UInt64(0)
               return self
          }
          public var items:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem> {
               get {
                   return builderResult.items
               }
               set (value) {
                   builderResult.items = value
               }
          }
          public func setItems(value:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem>) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.items = value
            return self
          }
          public func clearItems() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            builderResult.items.removeAll(keepCapacity: false)
            return self
          }
          public var playerCurrencies:Array<Pogoprotos.Data.Player.Currency> {
               get {
                   return builderResult.playerCurrencies
               }
               set (value) {
                   builderResult.playerCurrencies = value
               }
          }
          public func setPlayerCurrencies(value:Array<Pogoprotos.Data.Player.Currency>) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.playerCurrencies = value
            return self
          }
          public func clearPlayerCurrencies() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            builderResult.playerCurrencies.removeAll(keepCapacity: false)
            return self
          }
          public var hasUnknown4:Bool {
               get {
                    return builderResult.hasUnknown4
               }
          }
          public var unknown4:String {
               get {
                    return builderResult.unknown4
               }
               set (value) {
                   builderResult.hasUnknown4 = true
                   builderResult.unknown4 = value
               }
          }
          public func setUnknown4(value:String) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            self.unknown4 = value
            return self
          }
          public func clearUnknown4() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder{
               builderResult.hasUnknown4 = false
               builderResult.unknown4 = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2()
            return self
          }
          override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.builderWithPrototype(builderResult)
          }
          override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 {
            let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            if other == Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2() {
             return self
            }
            if other.hasUnknown1 {
                 unknown1 = other.unknown1
            }
            if !other.items.isEmpty  {
               builderResult.items += other.items
            }
            if !other.playerCurrencies.isEmpty  {
               builderResult.playerCurrencies += other.playerCurrencies
            }
            if other.hasUnknown4 {
                 unknown4 = other.unknown4
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 8:
                unknown1 = try input.readUInt64()

              case 18:
                let subBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                items += [subBuilder.buildPartial()]

              case 26:
                let subBuilder = Pogoprotos.Data.Player.Currency.Builder()
                try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                playerCurrencies += [subBuilder.buildPartial()]

              case 34:
                unknown4 = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
            if let jsonValueUnknown1 = jsonMap["unknown1"] as? String {
              resultDecodedBuilder.unknown1 = UInt64(jsonValueUnknown1)!
            }
            if let jsonValueItems = jsonMap["items"] as? Array<Dictionary<String,AnyObject>> {
              var jsonArrayItems:Array<Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem> = []
              for oneValueItems in jsonValueItems {
                let messageFromStringItems = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.StoreItem.Builder.decodeToBuilder(oneValueItems).build()

                jsonArrayItems += [messageFromStringItems]
              }
              resultDecodedBuilder.items = jsonArrayItems
            }
            if let jsonValuePlayerCurrencies = jsonMap["playerCurrencies"] as? Array<Dictionary<String,AnyObject>> {
              var jsonArrayPlayerCurrencies:Array<Pogoprotos.Data.Player.Currency> = []
              for oneValuePlayerCurrencies in jsonValuePlayerCurrencies {
                let messageFromStringPlayerCurrencies = try Pogoprotos.Data.Player.Currency.Builder.decodeToBuilder(oneValuePlayerCurrencies).build()

                jsonArrayPlayerCurrencies += [messageFromStringPlayerCurrencies]
              }
              resultDecodedBuilder.playerCurrencies = jsonArrayPlayerCurrencies
            }
            if let jsonValueUnknown4 = jsonMap["unknown4"] as? String {
              resultDecodedBuilder.unknown4 = jsonValueUnknown4
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    // Still don't know what 6 is, but 5 lists items available via IAPs. 
    public private(set) var hasResponseType:Bool = false
    public private(set) var responseType:Int32 = Int32(0)

    public private(set) var hasUnknown2:Bool = false
    public private(set) var unknown2:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasResponseType {
        try output.writeInt32(1, value:responseType)
      }
      if hasUnknown2 {
        try output.writeMessage(2, value:unknown2)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasResponseType {
        serialize_size += responseType.computeInt32Size(1)
      }
      if hasUnknown2 {
          if let varSizeunknown2 = unknown2?.computeMessageSize(2) {
              serialize_size += varSizeunknown2
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Networking.Envelopes.Unknown6Response> {
      var mergedArray = Array<Pogoprotos.Networking.Envelopes.Unknown6Response>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response? {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Networking.Envelopes.PogoprotosNetworkingEnvelopesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return Pogoprotos.Networking.Envelopes.Unknown6Response.classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return classBuilder() as! Pogoprotos.Networking.Envelopes.Unknown6Response.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Envelopes.Unknown6Response) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasResponseType {
        jsonMap["responseType"] = NSNumber(int:responseType)
      }
      if hasUnknown2 {
        jsonMap["unknown2"] = try unknown2.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
      return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasResponseType {
        output += "\(indent) responseType: \(responseType) \n"
      }
      if hasUnknown2 {
        output += "\(indent) unknown2 {\n"
        if let outDescUnknown2 = unknown2 {
          output += try outDescUnknown2.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasResponseType {
               hashCode = (hashCode &* 31) &+ responseType.hashValue
            }
            if hasUnknown2 {
                if let hashValueunknown2 = unknown2?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueunknown2
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6Response"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Envelopes.Unknown6Response"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Networking.Envelopes.Unknown6Response.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Networking.Envelopes.Unknown6Response = Pogoprotos.Networking.Envelopes.Unknown6Response()
      public func getMessage() -> Pogoprotos.Networking.Envelopes.Unknown6Response {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasResponseType:Bool {
           get {
                return builderResult.hasResponseType
           }
      }
      public var responseType:Int32 {
           get {
                return builderResult.responseType
           }
           set (value) {
               builderResult.hasResponseType = true
               builderResult.responseType = value
           }
      }
      public func setResponseType(value:Int32) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        self.responseType = value
        return self
      }
      public func clearResponseType() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder{
           builderResult.hasResponseType = false
           builderResult.responseType = Int32(0)
           return self
      }
      public var hasUnknown2:Bool {
           get {
               return builderResult.hasUnknown2
           }
      }
      public var unknown2:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2! {
           get {
               if unknown2Builder_ != nil {
                  builderResult.unknown2 = unknown2Builder_.getMessage()
               }
               return builderResult.unknown2
           }
           set (value) {
               builderResult.hasUnknown2 = true
               builderResult.unknown2 = value
           }
      }
      private var unknown2Builder_:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder! {
           didSet {
              builderResult.hasUnknown2 = true
           }
      }
      public func getUnknown2Builder() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder {
        if unknown2Builder_ == nil {
           unknown2Builder_ = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
           builderResult.unknown2 = unknown2Builder_.getMessage()
           if unknown2 != nil {
              try! unknown2Builder_.mergeFrom(unknown2)
           }
        }
        return unknown2Builder_
      }
      public func setUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2!) -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        self.unknown2 = value
        return self
      }
      public func mergeUnknown2(value:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        if builderResult.hasUnknown2 {
          builderResult.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.builderWithPrototype(builderResult.unknown2).mergeFrom(value).buildPartial()
        } else {
          builderResult.unknown2 = value
        }
        builderResult.hasUnknown2 = true
        return self
      }
      public func clearUnknown2() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        unknown2Builder_ = nil
        builderResult.hasUnknown2 = false
        builderResult.unknown2 = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        builderResult = Pogoprotos.Networking.Envelopes.Unknown6Response()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        return try Pogoprotos.Networking.Envelopes.Unknown6Response.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Envelopes.Unknown6Response {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Envelopes.Unknown6Response {
        let returnMe:Pogoprotos.Networking.Envelopes.Unknown6Response = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Networking.Envelopes.Unknown6Response) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        if other == Pogoprotos.Networking.Envelopes.Unknown6Response() {
         return self
        }
        if other.hasResponseType {
             responseType = other.responseType
        }
        if (other.hasUnknown2) {
            try mergeUnknown2(other.unknown2)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            responseType = try input.readInt32()

          case 18:
            let subBuilder:Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder = Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder()
            if hasUnknown2 {
              try subBuilder.mergeFrom(unknown2)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            unknown2 = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Envelopes.Unknown6Response.Builder()
        if let jsonValueResponseType = jsonMap["responseType"] as? NSNumber {
          resultDecodedBuilder.responseType = jsonValueResponseType.intValue
        }
        if let jsonValueUnknown2 = jsonMap["unknown2"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.unknown2 = try Pogoprotos.Networking.Envelopes.Unknown6Response.Unknown2.Builder.decodeToBuilder(jsonValueUnknown2).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Networking.Envelopes.Unknown6Response.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Envelopes.Unknown6Response.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
