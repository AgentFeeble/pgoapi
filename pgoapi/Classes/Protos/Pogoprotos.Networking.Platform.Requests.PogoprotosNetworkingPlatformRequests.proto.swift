// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Networking.Platform.Requests.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Networking.Platform.Requests {
  public struct PogoprotosNetworkingPlatformRequestsRoot {
    public static let `default` = PogoprotosNetworkingPlatformRequestsRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class BuyItemAndroidRequest : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest, rhs: Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasBuyItemIntent == rhs.hasBuyItemIntent) && (!lhs.hasBuyItemIntent || lhs.buyItemIntent == rhs.buyItemIntent)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    // see https://developer.android.com/google/play/billing/billing_reference.html table 4
    public fileprivate(set) var buyItemIntent:String = ""
    public fileprivate(set) var hasBuyItemIntent:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasBuyItemIntent {
        try codedOutputStream.writeString(fieldNumber: 1, value:buyItemIntent)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasBuyItemIntent {
        serialize_size += buyItemIntent.computeStringSize(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
      return Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.classBuilder() as! Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
      return classBuilder() as! Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasBuyItemIntent {
        jsonMap["buyItemIntent"] = buyItemIntent
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasBuyItemIntent {
        output += "\(indent) buyItemIntent: \(buyItemIntent) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBuyItemIntent {
               hashCode = (hashCode &* 31) &+ buyItemIntent.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest = Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest()
      public func getMessage() -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasBuyItemIntent:Bool {
           get {
                return builderResult.hasBuyItemIntent
           }
      }
      public var buyItemIntent:String {
           get {
                return builderResult.buyItemIntent
           }
           set (value) {
               builderResult.hasBuyItemIntent = true
               builderResult.buyItemIntent = value
           }
      }
      @discardableResult
      public func setBuyItemIntent(_ value:String) -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
        self.buyItemIntent = value
        return self
      }
      @discardableResult
      public func clearBuyItemIntent() -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder{
           builderResult.hasBuyItemIntent = false
           builderResult.buyItemIntent = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
        builderResult = Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
        return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
        let returnMe:Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
        if other == Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest() {
         return self
        }
        if other.hasBuyItemIntent {
             buyItemIntent = other.buyItemIntent
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            buyItemIntent = try codedInputStream.readString()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder()
        if let jsonValueBuyItemIntent = jsonMap["buyItemIntent"] as? String {
          resultDecodedBuilder.buyItemIntent = jsonValueBuyItemIntent
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class BuyItemPokeCoinsRequest : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest, rhs: Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasItemId == rhs.hasItemId) && (!lhs.hasItemId || lhs.itemId == rhs.itemId)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var itemId:String = ""
    public fileprivate(set) var hasItemId:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasItemId {
        try codedOutputStream.writeString(fieldNumber: 1, value:itemId)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasItemId {
        serialize_size += itemId.computeStringSize(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
      return Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.classBuilder() as! Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
      return classBuilder() as! Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasItemId {
        jsonMap["itemId"] = itemId
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
      return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasItemId {
        output += "\(indent) itemId: \(itemId) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasItemId {
               hashCode = (hashCode &* 31) &+ itemId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest = Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest()
      public func getMessage() -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasItemId:Bool {
           get {
                return builderResult.hasItemId
           }
      }
      public var itemId:String {
           get {
                return builderResult.itemId
           }
           set (value) {
               builderResult.hasItemId = true
               builderResult.itemId = value
           }
      }
      @discardableResult
      public func setItemId(_ value:String) -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
        self.itemId = value
        return self
      }
      @discardableResult
      public func clearItemId() -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder{
           builderResult.hasItemId = false
           builderResult.itemId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
        builderResult = Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
        return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
        let returnMe:Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
        if other == Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest() {
         return self
        }
        if other.hasItemId {
             itemId = other.itemId
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            itemId = try codedInputStream.readString()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder()
        if let jsonValueItemId = jsonMap["itemId"] as? String {
          resultDecodedBuilder.itemId = jsonValueItemId
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class SendEncryptedSignatureRequest : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest, rhs: Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasEncryptedSignature == rhs.hasEncryptedSignature) && (!lhs.hasEncryptedSignature || lhs.encryptedSignature == rhs.encryptedSignature)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var encryptedSignature:Data = Data()
    public fileprivate(set) var hasEncryptedSignature:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasEncryptedSignature {
        try codedOutputStream.writeData(fieldNumber: 1, value:encryptedSignature)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEncryptedSignature {
        serialize_size += encryptedSignature.computeDataSize(fieldNumber: 1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
      return Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.classBuilder() as! Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder
    }
    public func getBuilder() -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
      return classBuilder() as! Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
      return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
      return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasEncryptedSignature {
        jsonMap["encryptedSignature"] = encryptedSignature.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
      return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
      return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEncryptedSignature {
        output += "\(indent) encryptedSignature: \(encryptedSignature) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEncryptedSignature {
               hashCode = (hashCode &* 31) &+ encryptedSignature.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest"
    }
    override public func className() -> String {
        return "Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest = Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest()
      public func getMessage() -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEncryptedSignature:Bool {
           get {
                return builderResult.hasEncryptedSignature
           }
      }
      public var encryptedSignature:Data {
           get {
                return builderResult.encryptedSignature
           }
           set (value) {
               builderResult.hasEncryptedSignature = true
               builderResult.encryptedSignature = value
           }
      }
      @discardableResult
      public func setEncryptedSignature(_ value:Data) -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
        self.encryptedSignature = value
        return self
      }
      @discardableResult
      public func clearEncryptedSignature() -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder{
           builderResult.hasEncryptedSignature = false
           builderResult.encryptedSignature = Data()
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
        builderResult = Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest()
        return self
      }
      override public func clone() throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
        return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
        let returnMe:Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
        if other == Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest() {
         return self
        }
        if other.hasEncryptedSignature {
             encryptedSignature = other.encryptedSignature
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            encryptedSignature = try codedInputStream.readData()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
        let resultDecodedBuilder = Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder()
        if let jsonValueEncryptedSignature = jsonMap["encryptedSignature"] as? String {
          resultDecodedBuilder.encryptedSignature = Data(base64Encoded:jsonValueEncryptedSignature, options: Data.Base64DecodingOptions(rawValue:0))!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest> {
    var mergedArray = Array<Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest? {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Platform.Requests.PogoprotosNetworkingPlatformRequestsRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemAndroidRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest> {
    var mergedArray = Array<Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest? {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Platform.Requests.PogoprotosNetworkingPlatformRequestsRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest {
    return try Pogoprotos.Networking.Platform.Requests.BuyItemPokeCoinsRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest> {
    var mergedArray = Array<Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest? {
    return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
    return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Networking.Platform.Requests.PogoprotosNetworkingPlatformRequestsRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
    return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
    return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
    return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
    return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest {
    return try Pogoprotos.Networking.Platform.Requests.SendEncryptedSignatureRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
