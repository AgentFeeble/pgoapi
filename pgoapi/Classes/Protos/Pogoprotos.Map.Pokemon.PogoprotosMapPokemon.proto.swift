// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Map.Pokemon.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public func == (lhs: Pogoprotos.Map.Pokemon.MapPokemon, rhs: Pogoprotos.Map.Pokemon.MapPokemon) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSpawnPointId == rhs.hasSpawnPointId) && (!lhs.hasSpawnPointId || lhs.spawnPointId == rhs.spawnPointId)
  fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasExpirationTimestampMs == rhs.hasExpirationTimestampMs) && (!lhs.hasExpirationTimestampMs || lhs.expirationTimestampMs == rhs.expirationTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Map.Pokemon.NearbyPokemon, rhs: Pogoprotos.Map.Pokemon.NearbyPokemon) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
  fieldCheck = fieldCheck && (lhs.hasDistanceInMeters == rhs.hasDistanceInMeters) && (!lhs.hasDistanceInMeters || lhs.distanceInMeters == rhs.distanceInMeters)
  fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Pogoprotos.Map.Pokemon.WildPokemon, rhs: Pogoprotos.Map.Pokemon.WildPokemon) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
  fieldCheck = fieldCheck && (lhs.hasLastModifiedTimestampMs == rhs.hasLastModifiedTimestampMs) && (!lhs.hasLastModifiedTimestampMs || lhs.lastModifiedTimestampMs == rhs.lastModifiedTimestampMs)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasSpawnPointId == rhs.hasSpawnPointId) && (!lhs.hasSpawnPointId || lhs.spawnPointId == rhs.spawnPointId)
  fieldCheck = fieldCheck && (lhs.hasPokemonData == rhs.hasPokemonData) && (!lhs.hasPokemonData || lhs.pokemonData == rhs.pokemonData)
  fieldCheck = fieldCheck && (lhs.hasTimeTillHiddenMs == rhs.hasTimeTillHiddenMs) && (!lhs.hasTimeTillHiddenMs || lhs.timeTillHiddenMs == rhs.timeTillHiddenMs)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Pogoprotos.Map.Pokemon {
  public struct PogoprotosMapPokemonRoot {
    public static var sharedInstance : PogoprotosMapPokemonRoot {
     struct Static {
         static let instance : PogoprotosMapPokemonRoot = PogoprotosMapPokemonRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Pogoprotos.Data.PogoprotosDataRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class MapPokemon : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasSpawnPointId:Bool = false
    public private(set) var spawnPointId:String = ""

    public private(set) var hasEncounterId:Bool = false
    public private(set) var encounterId:UInt64 = UInt64(0)

    public private(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasPokemonId:Bool = false
    // After this timestamp, the pokemon will be gone.
    public private(set) var hasExpirationTimestampMs:Bool = false
    public private(set) var expirationTimestampMs:Int64 = Int64(0)

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSpawnPointId {
        try output.writeString(1, value:spawnPointId)
      }
      if hasEncounterId {
        try output.writeFixed64(2, value:encounterId)
      }
      if hasPokemonId {
        try output.writeEnum(3, value:pokemonId.rawValue)
      }
      if hasExpirationTimestampMs {
        try output.writeInt64(4, value:expirationTimestampMs)
      }
      if hasLatitude {
        try output.writeDouble(5, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(6, value:longitude)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSpawnPointId {
        serialize_size += spawnPointId.computeStringSize(1)
      }
      if hasEncounterId {
        serialize_size += encounterId.computeFixed64Size(2)
      }
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(3)
      }
      if hasExpirationTimestampMs {
        serialize_size += expirationTimestampMs.computeInt64Size(4)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(5)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Map.Pokemon.MapPokemon> {
      var mergedArray = Array<Pogoprotos.Map.Pokemon.MapPokemon>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon? {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Map.Pokemon.PogoprotosMapPokemonRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return Pogoprotos.Map.Pokemon.MapPokemon.classBuilder() as! Pogoprotos.Map.Pokemon.MapPokemon.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return classBuilder() as! Pogoprotos.Map.Pokemon.MapPokemon.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Pokemon.MapPokemon.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Pokemon.MapPokemon.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.MapPokemon.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Pokemon.MapPokemon) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasSpawnPointId {
        jsonMap["spawnPointId"] = spawnPointId
      }
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasExpirationTimestampMs {
        jsonMap["expirationTimestampMs"] = "\(expirationTimestampMs)"
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSpawnPointId {
        output += "\(indent) spawnPointId: \(spawnPointId) \n"
      }
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasExpirationTimestampMs {
        output += "\(indent) expirationTimestampMs: \(expirationTimestampMs) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSpawnPointId {
               hashCode = (hashCode &* 31) &+ spawnPointId.hashValue
            }
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasExpirationTimestampMs {
               hashCode = (hashCode &* 31) &+ expirationTimestampMs.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Pokemon.MapPokemon"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Pokemon.MapPokemon"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Map.Pokemon.MapPokemon.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Map.Pokemon.MapPokemon = Pogoprotos.Map.Pokemon.MapPokemon()
      public func getMessage() -> Pogoprotos.Map.Pokemon.MapPokemon {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSpawnPointId:Bool {
           get {
                return builderResult.hasSpawnPointId
           }
      }
      public var spawnPointId:String {
           get {
                return builderResult.spawnPointId
           }
           set (value) {
               builderResult.hasSpawnPointId = true
               builderResult.spawnPointId = value
           }
      }
      public func setSpawnPointId(value:String) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.spawnPointId = value
        return self
      }
      public func clearSpawnPointId() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasSpawnPointId = false
           builderResult.spawnPointId = ""
           return self
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      public func setEncounterId(value:UInt64) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.encounterId = value
        return self
      }
      public func clearEncounterId() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
        public func setPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
          self.pokemonId = value
          return self
        }
        public func clearPokemonId() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .Missingno
           return self
        }
      public var hasExpirationTimestampMs:Bool {
           get {
                return builderResult.hasExpirationTimestampMs
           }
      }
      public var expirationTimestampMs:Int64 {
           get {
                return builderResult.expirationTimestampMs
           }
           set (value) {
               builderResult.hasExpirationTimestampMs = true
               builderResult.expirationTimestampMs = value
           }
      }
      public func setExpirationTimestampMs(value:Int64) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.expirationTimestampMs = value
        return self
      }
      public func clearExpirationTimestampMs() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasExpirationTimestampMs = false
           builderResult.expirationTimestampMs = Int64(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        builderResult = Pogoprotos.Map.Pokemon.MapPokemon()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        return try Pogoprotos.Map.Pokemon.MapPokemon.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Pokemon.MapPokemon {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Pokemon.MapPokemon {
        let returnMe:Pogoprotos.Map.Pokemon.MapPokemon = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Map.Pokemon.MapPokemon) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        if other == Pogoprotos.Map.Pokemon.MapPokemon() {
         return self
        }
        if other.hasSpawnPointId {
             spawnPointId = other.spawnPointId
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasExpirationTimestampMs {
             expirationTimestampMs = other.expirationTimestampMs
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            spawnPointId = try input.readString()

          case 17:
            encounterId = try input.readFixed64()

          case 24:
            let valueIntpokemonId = try input.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntpokemonId))
            }

          case 32:
            expirationTimestampMs = try input.readInt64()

          case 41:
            latitude = try input.readDouble()

          case 49:
            longitude = try input.readDouble()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Pokemon.MapPokemon.Builder()
        if let jsonValueSpawnPointId = jsonMap["spawnPointId"] as? String {
          resultDecodedBuilder.spawnPointId = jsonValueSpawnPointId
        }
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValuePokemonId)
        }
        if let jsonValueExpirationTimestampMs = jsonMap["expirationTimestampMs"] as? String {
          resultDecodedBuilder.expirationTimestampMs = Int64(jsonValueExpirationTimestampMs)!
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Pokemon.MapPokemon.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class NearbyPokemon : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.Missingno
    public private(set) var hasPokemonId:Bool = false
    public private(set) var hasDistanceInMeters:Bool = false
    public private(set) var distanceInMeters:Float = Float(0)

    public private(set) var hasEncounterId:Bool = false
    public private(set) var encounterId:UInt64 = UInt64(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPokemonId {
        try output.writeEnum(1, value:pokemonId.rawValue)
      }
      if hasDistanceInMeters {
        try output.writeFloat(2, value:distanceInMeters)
      }
      if hasEncounterId {
        try output.writeFixed64(3, value:encounterId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(1)
      }
      if hasDistanceInMeters {
        serialize_size += distanceInMeters.computeFloatSize(2)
      }
      if hasEncounterId {
        serialize_size += encounterId.computeFixed64Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Map.Pokemon.NearbyPokemon> {
      var mergedArray = Array<Pogoprotos.Map.Pokemon.NearbyPokemon>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon? {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Map.Pokemon.PogoprotosMapPokemonRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return Pogoprotos.Map.Pokemon.NearbyPokemon.classBuilder() as! Pogoprotos.Map.Pokemon.NearbyPokemon.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return classBuilder() as! Pogoprotos.Map.Pokemon.NearbyPokemon.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Pokemon.NearbyPokemon.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Pokemon.NearbyPokemon.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Pokemon.NearbyPokemon) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasDistanceInMeters {
        jsonMap["distanceInMeters"] = NSNumber(float:distanceInMeters)
      }
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasDistanceInMeters {
        output += "\(indent) distanceInMeters: \(distanceInMeters) \n"
      }
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasDistanceInMeters {
               hashCode = (hashCode &* 31) &+ distanceInMeters.hashValue
            }
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Pokemon.NearbyPokemon"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Pokemon.NearbyPokemon"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Map.Pokemon.NearbyPokemon.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Map.Pokemon.NearbyPokemon = Pogoprotos.Map.Pokemon.NearbyPokemon()
      public func getMessage() -> Pogoprotos.Map.Pokemon.NearbyPokemon {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
        public func setPokemonId(value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
          self.pokemonId = value
          return self
        }
        public func clearPokemonId() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .Missingno
           return self
        }
      public var hasDistanceInMeters:Bool {
           get {
                return builderResult.hasDistanceInMeters
           }
      }
      public var distanceInMeters:Float {
           get {
                return builderResult.distanceInMeters
           }
           set (value) {
               builderResult.hasDistanceInMeters = true
               builderResult.distanceInMeters = value
           }
      }
      public func setDistanceInMeters(value:Float) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        self.distanceInMeters = value
        return self
      }
      public func clearDistanceInMeters() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder{
           builderResult.hasDistanceInMeters = false
           builderResult.distanceInMeters = Float(0)
           return self
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      public func setEncounterId(value:UInt64) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        self.encounterId = value
        return self
      }
      public func clearEncounterId() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        builderResult = Pogoprotos.Map.Pokemon.NearbyPokemon()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        return try Pogoprotos.Map.Pokemon.NearbyPokemon.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Pokemon.NearbyPokemon {
        let returnMe:Pogoprotos.Map.Pokemon.NearbyPokemon = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Map.Pokemon.NearbyPokemon) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        if other == Pogoprotos.Map.Pokemon.NearbyPokemon() {
         return self
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasDistanceInMeters {
             distanceInMeters = other.distanceInMeters
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntpokemonId = try input.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntpokemonId))
            }

          case 21:
            distanceInMeters = try input.readFloat()

          case 25:
            encounterId = try input.readFixed64()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Pokemon.NearbyPokemon.Builder()
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(jsonValuePokemonId)
        }
        if let jsonValueDistanceInMeters = jsonMap["distanceInMeters"] as? NSNumber {
          resultDecodedBuilder.distanceInMeters = jsonValueDistanceInMeters.floatValue
        }
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class WildPokemon : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasEncounterId:Bool = false
    public private(set) var encounterId:UInt64 = UInt64(0)

    public private(set) var hasLastModifiedTimestampMs:Bool = false
    public private(set) var lastModifiedTimestampMs:Int64 = Int64(0)

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:Double = Double(0)

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:Double = Double(0)

    public private(set) var hasSpawnPointId:Bool = false
    public private(set) var spawnPointId:String = ""

    public private(set) var hasPokemonData:Bool = false
    public private(set) var pokemonData:Pogoprotos.Data.PokemonData!
    public private(set) var hasTimeTillHiddenMs:Bool = false
    public private(set) var timeTillHiddenMs:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasEncounterId {
        try output.writeFixed64(1, value:encounterId)
      }
      if hasLastModifiedTimestampMs {
        try output.writeInt64(2, value:lastModifiedTimestampMs)
      }
      if hasLatitude {
        try output.writeDouble(3, value:latitude)
      }
      if hasLongitude {
        try output.writeDouble(4, value:longitude)
      }
      if hasSpawnPointId {
        try output.writeString(5, value:spawnPointId)
      }
      if hasPokemonData {
        try output.writeMessage(7, value:pokemonData)
      }
      if hasTimeTillHiddenMs {
        try output.writeInt32(11, value:timeTillHiddenMs)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEncounterId {
        serialize_size += encounterId.computeFixed64Size(1)
      }
      if hasLastModifiedTimestampMs {
        serialize_size += lastModifiedTimestampMs.computeInt64Size(2)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(3)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(4)
      }
      if hasSpawnPointId {
        serialize_size += spawnPointId.computeStringSize(5)
      }
      if hasPokemonData {
          if let varSizepokemonData = pokemonData?.computeMessageSize(7) {
              serialize_size += varSizepokemonData
          }
      }
      if hasTimeTillHiddenMs {
        serialize_size += timeTillHiddenMs.computeInt32Size(11)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Pogoprotos.Map.Pokemon.WildPokemon> {
      var mergedArray = Array<Pogoprotos.Map.Pokemon.WildPokemon>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon? {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFromData(data, extensionRegistry:Pogoprotos.Map.Pokemon.PogoprotosMapPokemonRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return Pogoprotos.Map.Pokemon.WildPokemon.classBuilder() as! Pogoprotos.Map.Pokemon.WildPokemon.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return classBuilder() as! Pogoprotos.Map.Pokemon.WildPokemon.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Pokemon.WildPokemon.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Pogoprotos.Map.Pokemon.WildPokemon.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.WildPokemon.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Pokemon.WildPokemon) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      if hasLastModifiedTimestampMs {
        jsonMap["lastModifiedTimestampMs"] = "\(lastModifiedTimestampMs)"
      }
      if hasLatitude {
        jsonMap["latitude"] = NSNumber(double:latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = NSNumber(double:longitude)
      }
      if hasSpawnPointId {
        jsonMap["spawnPointId"] = spawnPointId
      }
      if hasPokemonData {
        jsonMap["pokemonData"] = try pokemonData.encode()
      }
      if hasTimeTillHiddenMs {
        jsonMap["timeTillHiddenMs"] = NSNumber(int:timeTillHiddenMs)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      if hasLastModifiedTimestampMs {
        output += "\(indent) lastModifiedTimestampMs: \(lastModifiedTimestampMs) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasSpawnPointId {
        output += "\(indent) spawnPointId: \(spawnPointId) \n"
      }
      if hasPokemonData {
        output += "\(indent) pokemonData {\n"
        if let outDescPokemonData = pokemonData {
          output += try outDescPokemonData.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasTimeTillHiddenMs {
        output += "\(indent) timeTillHiddenMs: \(timeTillHiddenMs) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            if hasLastModifiedTimestampMs {
               hashCode = (hashCode &* 31) &+ lastModifiedTimestampMs.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasSpawnPointId {
               hashCode = (hashCode &* 31) &+ spawnPointId.hashValue
            }
            if hasPokemonData {
                if let hashValuepokemonData = pokemonData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonData
                }
            }
            if hasTimeTillHiddenMs {
               hashCode = (hashCode &* 31) &+ timeTillHiddenMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Pokemon.WildPokemon"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Pokemon.WildPokemon"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Pogoprotos.Map.Pokemon.WildPokemon.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Pogoprotos.Map.Pokemon.WildPokemon = Pogoprotos.Map.Pokemon.WildPokemon()
      public func getMessage() -> Pogoprotos.Map.Pokemon.WildPokemon {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      public func setEncounterId(value:UInt64) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.encounterId = value
        return self
      }
      public func clearEncounterId() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
      public var hasLastModifiedTimestampMs:Bool {
           get {
                return builderResult.hasLastModifiedTimestampMs
           }
      }
      public var lastModifiedTimestampMs:Int64 {
           get {
                return builderResult.lastModifiedTimestampMs
           }
           set (value) {
               builderResult.hasLastModifiedTimestampMs = true
               builderResult.lastModifiedTimestampMs = value
           }
      }
      public func setLastModifiedTimestampMs(value:Int64) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.lastModifiedTimestampMs = value
        return self
      }
      public func clearLastModifiedTimestampMs() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasLastModifiedTimestampMs = false
           builderResult.lastModifiedTimestampMs = Int64(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:Double) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:Double) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasSpawnPointId:Bool {
           get {
                return builderResult.hasSpawnPointId
           }
      }
      public var spawnPointId:String {
           get {
                return builderResult.spawnPointId
           }
           set (value) {
               builderResult.hasSpawnPointId = true
               builderResult.spawnPointId = value
           }
      }
      public func setSpawnPointId(value:String) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.spawnPointId = value
        return self
      }
      public func clearSpawnPointId() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasSpawnPointId = false
           builderResult.spawnPointId = ""
           return self
      }
      public var hasPokemonData:Bool {
           get {
               return builderResult.hasPokemonData
           }
      }
      public var pokemonData:Pogoprotos.Data.PokemonData! {
           get {
               if pokemonDataBuilder_ != nil {
                  builderResult.pokemonData = pokemonDataBuilder_.getMessage()
               }
               return builderResult.pokemonData
           }
           set (value) {
               builderResult.hasPokemonData = true
               builderResult.pokemonData = value
           }
      }
      private var pokemonDataBuilder_:Pogoprotos.Data.PokemonData.Builder! {
           didSet {
              builderResult.hasPokemonData = true
           }
      }
      public func getPokemonDataBuilder() -> Pogoprotos.Data.PokemonData.Builder {
        if pokemonDataBuilder_ == nil {
           pokemonDataBuilder_ = Pogoprotos.Data.PokemonData.Builder()
           builderResult.pokemonData = pokemonDataBuilder_.getMessage()
           if pokemonData != nil {
              try! pokemonDataBuilder_.mergeFrom(pokemonData)
           }
        }
        return pokemonDataBuilder_
      }
      public func setPokemonData(value:Pogoprotos.Data.PokemonData!) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.pokemonData = value
        return self
      }
      public func mergePokemonData(value:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        if builderResult.hasPokemonData {
          builderResult.pokemonData = try Pogoprotos.Data.PokemonData.builderWithPrototype(builderResult.pokemonData).mergeFrom(value).buildPartial()
        } else {
          builderResult.pokemonData = value
        }
        builderResult.hasPokemonData = true
        return self
      }
      public func clearPokemonData() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        pokemonDataBuilder_ = nil
        builderResult.hasPokemonData = false
        builderResult.pokemonData = nil
        return self
      }
      public var hasTimeTillHiddenMs:Bool {
           get {
                return builderResult.hasTimeTillHiddenMs
           }
      }
      public var timeTillHiddenMs:Int32 {
           get {
                return builderResult.timeTillHiddenMs
           }
           set (value) {
               builderResult.hasTimeTillHiddenMs = true
               builderResult.timeTillHiddenMs = value
           }
      }
      public func setTimeTillHiddenMs(value:Int32) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.timeTillHiddenMs = value
        return self
      }
      public func clearTimeTillHiddenMs() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasTimeTillHiddenMs = false
           builderResult.timeTillHiddenMs = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        builderResult = Pogoprotos.Map.Pokemon.WildPokemon()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        return try Pogoprotos.Map.Pokemon.WildPokemon.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Pokemon.WildPokemon {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Pokemon.WildPokemon {
        let returnMe:Pogoprotos.Map.Pokemon.WildPokemon = builderResult
        return returnMe
      }
      public func mergeFrom(other:Pogoprotos.Map.Pokemon.WildPokemon) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        if other == Pogoprotos.Map.Pokemon.WildPokemon() {
         return self
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        if other.hasLastModifiedTimestampMs {
             lastModifiedTimestampMs = other.lastModifiedTimestampMs
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasSpawnPointId {
             spawnPointId = other.spawnPointId
        }
        if (other.hasPokemonData) {
            try mergePokemonData(other.pokemonData)
        }
        if other.hasTimeTillHiddenMs {
             timeTillHiddenMs = other.timeTillHiddenMs
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            encounterId = try input.readFixed64()

          case 16:
            lastModifiedTimestampMs = try input.readInt64()

          case 25:
            latitude = try input.readDouble()

          case 33:
            longitude = try input.readDouble()

          case 42:
            spawnPointId = try input.readString()

          case 58:
            let subBuilder:Pogoprotos.Data.PokemonData.Builder = Pogoprotos.Data.PokemonData.Builder()
            if hasPokemonData {
              try subBuilder.mergeFrom(pokemonData)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            pokemonData = subBuilder.buildPartial()

          case 88:
            timeTillHiddenMs = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Pokemon.WildPokemon.Builder()
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        if let jsonValueLastModifiedTimestampMs = jsonMap["lastModifiedTimestampMs"] as? String {
          resultDecodedBuilder.lastModifiedTimestampMs = Int64(jsonValueLastModifiedTimestampMs)!
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? NSNumber {
          resultDecodedBuilder.latitude = jsonValueLatitude.doubleValue
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? NSNumber {
          resultDecodedBuilder.longitude = jsonValueLongitude.doubleValue
        }
        if let jsonValueSpawnPointId = jsonMap["spawnPointId"] as? String {
          resultDecodedBuilder.spawnPointId = jsonValueSpawnPointId
        }
        if let jsonValuePokemonData = jsonMap["pokemonData"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.pokemonData = try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonValuePokemonData).build()

        }
        if let jsonValueTimeTillHiddenMs = jsonMap["timeTillHiddenMs"] as? NSNumber {
          resultDecodedBuilder.timeTillHiddenMs = jsonValueTimeTillHiddenMs.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Pokemon.WildPokemon.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
