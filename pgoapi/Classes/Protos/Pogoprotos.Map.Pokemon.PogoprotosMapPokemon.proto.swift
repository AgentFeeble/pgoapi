// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "POGOProtos.Map.Pokemon.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers

public extension Pogoprotos.Map.Pokemon {
  public struct PogoprotosMapPokemonRoot {
    public static let `default` = PogoprotosMapPokemonRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Enums.PogoprotosEnumsRoot.default.registerAllExtensions(registry: extensionRegistry)
      Pogoprotos.Data.PogoprotosDataRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
  }

  final public class MapPokemon : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Map.Pokemon.MapPokemon, rhs: Pogoprotos.Map.Pokemon.MapPokemon) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasSpawnPointId == rhs.hasSpawnPointId) && (!lhs.hasSpawnPointId || lhs.spawnPointId == rhs.spawnPointId)
      fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
      fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
      fieldCheck = fieldCheck && (lhs.hasExpirationTimestampMs == rhs.hasExpirationTimestampMs) && (!lhs.hasExpirationTimestampMs || lhs.expirationTimestampMs == rhs.expirationTimestampMs)
      fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
      fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var spawnPointId:String = ""
    public fileprivate(set) var hasSpawnPointId:Bool = false

    public fileprivate(set) var encounterId:UInt64 = UInt64(0)
    public fileprivate(set) var hasEncounterId:Bool = false

    public fileprivate(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.missingno
    public fileprivate(set) var hasPokemonId:Bool = false
    // After this timestamp, the pokemon will be gone.
    public fileprivate(set) var expirationTimestampMs:Int64 = Int64(0)
    public fileprivate(set) var hasExpirationTimestampMs:Bool = false

    public fileprivate(set) var latitude:Double = Double(0)
    public fileprivate(set) var hasLatitude:Bool = false

    public fileprivate(set) var longitude:Double = Double(0)
    public fileprivate(set) var hasLongitude:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasSpawnPointId {
        try codedOutputStream.writeString(fieldNumber: 1, value:spawnPointId)
      }
      if hasEncounterId {
        try codedOutputStream.writeFixed64(fieldNumber: 2, value:encounterId)
      }
      if hasPokemonId {
        try codedOutputStream.writeEnum(fieldNumber: 3, value:pokemonId.rawValue)
      }
      if hasExpirationTimestampMs {
        try codedOutputStream.writeInt64(fieldNumber: 4, value:expirationTimestampMs)
      }
      if hasLatitude {
        try codedOutputStream.writeDouble(fieldNumber: 5, value:latitude)
      }
      if hasLongitude {
        try codedOutputStream.writeDouble(fieldNumber: 6, value:longitude)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSpawnPointId {
        serialize_size += spawnPointId.computeStringSize(fieldNumber: 1)
      }
      if hasEncounterId {
        serialize_size += encounterId.computeFixed64Size(fieldNumber: 2)
      }
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(fieldNumber: 3)
      }
      if hasExpirationTimestampMs {
        serialize_size += expirationTimestampMs.computeInt64Size(fieldNumber: 4)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(fieldNumber: 5)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(fieldNumber: 6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return Pogoprotos.Map.Pokemon.MapPokemon.classBuilder() as! Pogoprotos.Map.Pokemon.MapPokemon.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return classBuilder() as! Pogoprotos.Map.Pokemon.MapPokemon.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Map.Pokemon.MapPokemon.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Map.Pokemon.MapPokemon.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.MapPokemon.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Pokemon.MapPokemon) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasSpawnPointId {
        jsonMap["spawnPointId"] = spawnPointId
      }
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasExpirationTimestampMs {
        jsonMap["expirationTimestampMs"] = "\(expirationTimestampMs)"
      }
      if hasLatitude {
        jsonMap["latitude"] = Double(latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = Double(longitude)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
      return try Pogoprotos.Map.Pokemon.MapPokemon.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasSpawnPointId {
        output += "\(indent) spawnPointId: \(spawnPointId) \n"
      }
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasExpirationTimestampMs {
        output += "\(indent) expirationTimestampMs: \(expirationTimestampMs) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSpawnPointId {
               hashCode = (hashCode &* 31) &+ spawnPointId.hashValue
            }
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasExpirationTimestampMs {
               hashCode = (hashCode &* 31) &+ expirationTimestampMs.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Pokemon.MapPokemon"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Pokemon.MapPokemon"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Map.Pokemon.MapPokemon = Pogoprotos.Map.Pokemon.MapPokemon()
      public func getMessage() -> Pogoprotos.Map.Pokemon.MapPokemon {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSpawnPointId:Bool {
           get {
                return builderResult.hasSpawnPointId
           }
      }
      public var spawnPointId:String {
           get {
                return builderResult.spawnPointId
           }
           set (value) {
               builderResult.hasSpawnPointId = true
               builderResult.spawnPointId = value
           }
      }
      @discardableResult
      public func setSpawnPointId(_ value:String) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.spawnPointId = value
        return self
      }
      @discardableResult
      public func clearSpawnPointId() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasSpawnPointId = false
           builderResult.spawnPointId = ""
           return self
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      @discardableResult
      public func setEncounterId(_ value:UInt64) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.encounterId = value
        return self
      }
      @discardableResult
      public func clearEncounterId() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
      @discardableResult
        public func setPokemonId(_ value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
          self.pokemonId = value
          return self
        }
      @discardableResult
        public func clearPokemonId() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .missingno
           return self
        }
      public var hasExpirationTimestampMs:Bool {
           get {
                return builderResult.hasExpirationTimestampMs
           }
      }
      public var expirationTimestampMs:Int64 {
           get {
                return builderResult.expirationTimestampMs
           }
           set (value) {
               builderResult.hasExpirationTimestampMs = true
               builderResult.expirationTimestampMs = value
           }
      }
      @discardableResult
      public func setExpirationTimestampMs(_ value:Int64) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.expirationTimestampMs = value
        return self
      }
      @discardableResult
      public func clearExpirationTimestampMs() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasExpirationTimestampMs = false
           builderResult.expirationTimestampMs = Int64(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      @discardableResult
      public func setLatitude(_ value:Double) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.latitude = value
        return self
      }
      @discardableResult
      public func clearLatitude() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      @discardableResult
      public func setLongitude(_ value:Double) -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        self.longitude = value
        return self
      }
      @discardableResult
      public func clearLongitude() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        builderResult = Pogoprotos.Map.Pokemon.MapPokemon()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        return try Pogoprotos.Map.Pokemon.MapPokemon.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Pokemon.MapPokemon {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Pokemon.MapPokemon {
        let returnMe:Pogoprotos.Map.Pokemon.MapPokemon = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Map.Pokemon.MapPokemon) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        if other == Pogoprotos.Map.Pokemon.MapPokemon() {
         return self
        }
        if other.hasSpawnPointId {
             spawnPointId = other.spawnPointId
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasExpirationTimestampMs {
             expirationTimestampMs = other.expirationTimestampMs
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            spawnPointId = try codedInputStream.readString()

          case 17:
            encounterId = try codedInputStream.readFixed64()

          case 24:
            let valueIntpokemonId = try codedInputStream.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntpokemonId))
            }

          case 32:
            expirationTimestampMs = try codedInputStream.readInt64()

          case 41:
            latitude = try codedInputStream.readDouble()

          case 49:
            longitude = try codedInputStream.readDouble()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Pokemon.MapPokemon.Builder()
        if let jsonValueSpawnPointId = jsonMap["spawnPointId"] as? String {
          resultDecodedBuilder.spawnPointId = jsonValueSpawnPointId
        }
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(str: jsonValuePokemonId)
        }
        if let jsonValueExpirationTimestampMs = jsonMap["expirationTimestampMs"] as? String {
          resultDecodedBuilder.expirationTimestampMs = Int64(jsonValueExpirationTimestampMs)!
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? Double {
          resultDecodedBuilder.latitude = Double(jsonValueLatitude)
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? Double {
          resultDecodedBuilder.longitude = Double(jsonValueLongitude)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Map.Pokemon.MapPokemon.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Pokemon.MapPokemon.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class NearbyPokemon : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Map.Pokemon.NearbyPokemon, rhs: Pogoprotos.Map.Pokemon.NearbyPokemon) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasPokemonId == rhs.hasPokemonId) && (!lhs.hasPokemonId || lhs.pokemonId == rhs.pokemonId)
      fieldCheck = fieldCheck && (lhs.hasDistanceInMeters == rhs.hasDistanceInMeters) && (!lhs.hasDistanceInMeters || lhs.distanceInMeters == rhs.distanceInMeters)
      fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
      fieldCheck = fieldCheck && (lhs.hasFortId == rhs.hasFortId) && (!lhs.hasFortId || lhs.fortId == rhs.fortId)
      fieldCheck = fieldCheck && (lhs.hasFortImageUrl == rhs.hasFortImageUrl) && (!lhs.hasFortImageUrl || lhs.fortImageUrl == rhs.fortImageUrl)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var pokemonId:Pogoprotos.Enums.PokemonId = Pogoprotos.Enums.PokemonId.missingno
    public fileprivate(set) var hasPokemonId:Bool = false
    public fileprivate(set) var distanceInMeters:Float = Float(0)
    public fileprivate(set) var hasDistanceInMeters:Bool = false

    public fileprivate(set) var encounterId:UInt64 = UInt64(0)
    public fileprivate(set) var hasEncounterId:Bool = false

    public fileprivate(set) var fortId:String = ""
    public fileprivate(set) var hasFortId:Bool = false

    public fileprivate(set) var fortImageUrl:String = ""
    public fileprivate(set) var hasFortImageUrl:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasPokemonId {
        try codedOutputStream.writeEnum(fieldNumber: 1, value:pokemonId.rawValue)
      }
      if hasDistanceInMeters {
        try codedOutputStream.writeFloat(fieldNumber: 2, value:distanceInMeters)
      }
      if hasEncounterId {
        try codedOutputStream.writeFixed64(fieldNumber: 3, value:encounterId)
      }
      if hasFortId {
        try codedOutputStream.writeString(fieldNumber: 4, value:fortId)
      }
      if hasFortImageUrl {
        try codedOutputStream.writeString(fieldNumber: 5, value:fortImageUrl)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasPokemonId) {
        serialize_size += pokemonId.rawValue.computeEnumSize(fieldNumber: 1)
      }
      if hasDistanceInMeters {
        serialize_size += distanceInMeters.computeFloatSize(fieldNumber: 2)
      }
      if hasEncounterId {
        serialize_size += encounterId.computeFixed64Size(fieldNumber: 3)
      }
      if hasFortId {
        serialize_size += fortId.computeStringSize(fieldNumber: 4)
      }
      if hasFortImageUrl {
        serialize_size += fortImageUrl.computeStringSize(fieldNumber: 5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return Pogoprotos.Map.Pokemon.NearbyPokemon.classBuilder() as! Pogoprotos.Map.Pokemon.NearbyPokemon.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return classBuilder() as! Pogoprotos.Map.Pokemon.NearbyPokemon.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Map.Pokemon.NearbyPokemon.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Map.Pokemon.NearbyPokemon.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Pokemon.NearbyPokemon) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasPokemonId {
        jsonMap["pokemonId"] = pokemonId.toString()
      }
      if hasDistanceInMeters {
        jsonMap["distanceInMeters"] = Float(distanceInMeters)
      }
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      if hasFortId {
        jsonMap["fortId"] = fortId
      }
      if hasFortImageUrl {
        jsonMap["fortImageUrl"] = fortImageUrl
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
      return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasPokemonId) {
        output += "\(indent) pokemonId: \(pokemonId.description)\n"
      }
      if hasDistanceInMeters {
        output += "\(indent) distanceInMeters: \(distanceInMeters) \n"
      }
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      if hasFortId {
        output += "\(indent) fortId: \(fortId) \n"
      }
      if hasFortImageUrl {
        output += "\(indent) fortImageUrl: \(fortImageUrl) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPokemonId {
               hashCode = (hashCode &* 31) &+ Int(pokemonId.rawValue)
            }
            if hasDistanceInMeters {
               hashCode = (hashCode &* 31) &+ distanceInMeters.hashValue
            }
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            if hasFortId {
               hashCode = (hashCode &* 31) &+ fortId.hashValue
            }
            if hasFortImageUrl {
               hashCode = (hashCode &* 31) &+ fortImageUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Pokemon.NearbyPokemon"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Pokemon.NearbyPokemon"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Map.Pokemon.NearbyPokemon = Pogoprotos.Map.Pokemon.NearbyPokemon()
      public func getMessage() -> Pogoprotos.Map.Pokemon.NearbyPokemon {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasPokemonId:Bool{
            get {
                return builderResult.hasPokemonId
            }
        }
        public var pokemonId:Pogoprotos.Enums.PokemonId {
            get {
                return builderResult.pokemonId
            }
            set (value) {
                builderResult.hasPokemonId = true
                builderResult.pokemonId = value
            }
        }
      @discardableResult
        public func setPokemonId(_ value:Pogoprotos.Enums.PokemonId) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
          self.pokemonId = value
          return self
        }
      @discardableResult
        public func clearPokemonId() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
           builderResult.hasPokemonId = false
           builderResult.pokemonId = .missingno
           return self
        }
      public var hasDistanceInMeters:Bool {
           get {
                return builderResult.hasDistanceInMeters
           }
      }
      public var distanceInMeters:Float {
           get {
                return builderResult.distanceInMeters
           }
           set (value) {
               builderResult.hasDistanceInMeters = true
               builderResult.distanceInMeters = value
           }
      }
      @discardableResult
      public func setDistanceInMeters(_ value:Float) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        self.distanceInMeters = value
        return self
      }
      @discardableResult
      public func clearDistanceInMeters() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder{
           builderResult.hasDistanceInMeters = false
           builderResult.distanceInMeters = Float(0)
           return self
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      @discardableResult
      public func setEncounterId(_ value:UInt64) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        self.encounterId = value
        return self
      }
      @discardableResult
      public func clearEncounterId() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
      public var hasFortId:Bool {
           get {
                return builderResult.hasFortId
           }
      }
      public var fortId:String {
           get {
                return builderResult.fortId
           }
           set (value) {
               builderResult.hasFortId = true
               builderResult.fortId = value
           }
      }
      @discardableResult
      public func setFortId(_ value:String) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        self.fortId = value
        return self
      }
      @discardableResult
      public func clearFortId() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder{
           builderResult.hasFortId = false
           builderResult.fortId = ""
           return self
      }
      public var hasFortImageUrl:Bool {
           get {
                return builderResult.hasFortImageUrl
           }
      }
      public var fortImageUrl:String {
           get {
                return builderResult.fortImageUrl
           }
           set (value) {
               builderResult.hasFortImageUrl = true
               builderResult.fortImageUrl = value
           }
      }
      @discardableResult
      public func setFortImageUrl(_ value:String) -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        self.fortImageUrl = value
        return self
      }
      @discardableResult
      public func clearFortImageUrl() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder{
           builderResult.hasFortImageUrl = false
           builderResult.fortImageUrl = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        builderResult = Pogoprotos.Map.Pokemon.NearbyPokemon()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        return try Pogoprotos.Map.Pokemon.NearbyPokemon.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Pokemon.NearbyPokemon {
        let returnMe:Pogoprotos.Map.Pokemon.NearbyPokemon = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Map.Pokemon.NearbyPokemon) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        if other == Pogoprotos.Map.Pokemon.NearbyPokemon() {
         return self
        }
        if other.hasPokemonId {
             pokemonId = other.pokemonId
        }
        if other.hasDistanceInMeters {
             distanceInMeters = other.distanceInMeters
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        if other.hasFortId {
             fortId = other.fortId
        }
        if other.hasFortImageUrl {
             fortImageUrl = other.fortImageUrl
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8:
            let valueIntpokemonId = try codedInputStream.readEnum()
            if let enumspokemonId = Pogoprotos.Enums.PokemonId(rawValue:valueIntpokemonId){
                 pokemonId = enumspokemonId
            } else {
                 _ = try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntpokemonId))
            }

          case 21:
            distanceInMeters = try codedInputStream.readFloat()

          case 25:
            encounterId = try codedInputStream.readFixed64()

          case 34:
            fortId = try codedInputStream.readString()

          case 42:
            fortImageUrl = try codedInputStream.readString()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Pokemon.NearbyPokemon.Builder()
        if let jsonValuePokemonId = jsonMap["pokemonId"] as? String {
          resultDecodedBuilder.pokemonId = try Pogoprotos.Enums.PokemonId.fromString(str: jsonValuePokemonId)
        }
        if let jsonValueDistanceInMeters = jsonMap["distanceInMeters"] as? Float {
          resultDecodedBuilder.distanceInMeters = Float(jsonValueDistanceInMeters)
        }
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        if let jsonValueFortId = jsonMap["fortId"] as? String {
          resultDecodedBuilder.fortId = jsonValueFortId
        }
        if let jsonValueFortImageUrl = jsonMap["fortImageUrl"] as? String {
          resultDecodedBuilder.fortImageUrl = jsonValueFortImageUrl
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

  final public class WildPokemon : GeneratedMessage {

    public static func == (lhs: Pogoprotos.Map.Pokemon.WildPokemon, rhs: Pogoprotos.Map.Pokemon.WildPokemon) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasEncounterId == rhs.hasEncounterId) && (!lhs.hasEncounterId || lhs.encounterId == rhs.encounterId)
      fieldCheck = fieldCheck && (lhs.hasLastModifiedTimestampMs == rhs.hasLastModifiedTimestampMs) && (!lhs.hasLastModifiedTimestampMs || lhs.lastModifiedTimestampMs == rhs.lastModifiedTimestampMs)
      fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
      fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
      fieldCheck = fieldCheck && (lhs.hasSpawnPointId == rhs.hasSpawnPointId) && (!lhs.hasSpawnPointId || lhs.spawnPointId == rhs.spawnPointId)
      fieldCheck = fieldCheck && (lhs.hasPokemonData == rhs.hasPokemonData) && (!lhs.hasPokemonData || lhs.pokemonData == rhs.pokemonData)
      fieldCheck = fieldCheck && (lhs.hasTimeTillHiddenMs == rhs.hasTimeTillHiddenMs) && (!lhs.hasTimeTillHiddenMs || lhs.timeTillHiddenMs == rhs.timeTillHiddenMs)
      fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      return fieldCheck
    }

    public fileprivate(set) var encounterId:UInt64 = UInt64(0)
    public fileprivate(set) var hasEncounterId:Bool = false

    public fileprivate(set) var lastModifiedTimestampMs:Int64 = Int64(0)
    public fileprivate(set) var hasLastModifiedTimestampMs:Bool = false

    public fileprivate(set) var latitude:Double = Double(0)
    public fileprivate(set) var hasLatitude:Bool = false

    public fileprivate(set) var longitude:Double = Double(0)
    public fileprivate(set) var hasLongitude:Bool = false

    public fileprivate(set) var spawnPointId:String = ""
    public fileprivate(set) var hasSpawnPointId:Bool = false

    public fileprivate(set) var pokemonData:Pogoprotos.Data.PokemonData!
    public fileprivate(set) var hasPokemonData:Bool = false
    public fileprivate(set) var timeTillHiddenMs:Int32 = Int32(0)
    public fileprivate(set) var hasTimeTillHiddenMs:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
      if hasEncounterId {
        try codedOutputStream.writeFixed64(fieldNumber: 1, value:encounterId)
      }
      if hasLastModifiedTimestampMs {
        try codedOutputStream.writeInt64(fieldNumber: 2, value:lastModifiedTimestampMs)
      }
      if hasLatitude {
        try codedOutputStream.writeDouble(fieldNumber: 3, value:latitude)
      }
      if hasLongitude {
        try codedOutputStream.writeDouble(fieldNumber: 4, value:longitude)
      }
      if hasSpawnPointId {
        try codedOutputStream.writeString(fieldNumber: 5, value:spawnPointId)
      }
      if hasPokemonData {
        try codedOutputStream.writeMessage(fieldNumber: 7, value:pokemonData)
      }
      if hasTimeTillHiddenMs {
        try codedOutputStream.writeInt32(fieldNumber: 11, value:timeTillHiddenMs)
      }
      try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasEncounterId {
        serialize_size += encounterId.computeFixed64Size(fieldNumber: 1)
      }
      if hasLastModifiedTimestampMs {
        serialize_size += lastModifiedTimestampMs.computeInt64Size(fieldNumber: 2)
      }
      if hasLatitude {
        serialize_size += latitude.computeDoubleSize(fieldNumber: 3)
      }
      if hasLongitude {
        serialize_size += longitude.computeDoubleSize(fieldNumber: 4)
      }
      if hasSpawnPointId {
        serialize_size += spawnPointId.computeStringSize(fieldNumber: 5)
      }
      if hasPokemonData {
          if let varSizepokemonData = pokemonData?.computeMessageSize(fieldNumber: 7) {
              serialize_size += varSizepokemonData
          }
      }
      if hasTimeTillHiddenMs {
        serialize_size += timeTillHiddenMs.computeInt32Size(fieldNumber: 11)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func getBuilder() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return Pogoprotos.Map.Pokemon.WildPokemon.classBuilder() as! Pogoprotos.Map.Pokemon.WildPokemon.Builder
    }
    public func getBuilder() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return classBuilder() as! Pogoprotos.Map.Pokemon.WildPokemon.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Map.Pokemon.WildPokemon.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
      return Pogoprotos.Map.Pokemon.WildPokemon.Builder()
    }
    public func toBuilder() throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.WildPokemon.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Pogoprotos.Map.Pokemon.WildPokemon) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
      guard isInitialized() else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
      if hasEncounterId {
        jsonMap["encounterId"] = "\(encounterId)"
      }
      if hasLastModifiedTimestampMs {
        jsonMap["lastModifiedTimestampMs"] = "\(lastModifiedTimestampMs)"
      }
      if hasLatitude {
        jsonMap["latitude"] = Double(latitude)
      }
      if hasLongitude {
        jsonMap["longitude"] = Double(longitude)
      }
      if hasSpawnPointId {
        jsonMap["spawnPointId"] = spawnPointId
      }
      if hasPokemonData {
        jsonMap["pokemonData"] = try pokemonData.encode()
      }
      if hasTimeTillHiddenMs {
        jsonMap["timeTillHiddenMs"] = Int(timeTillHiddenMs)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
      return try Pogoprotos.Map.Pokemon.WildPokemon.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasEncounterId {
        output += "\(indent) encounterId: \(encounterId) \n"
      }
      if hasLastModifiedTimestampMs {
        output += "\(indent) lastModifiedTimestampMs: \(lastModifiedTimestampMs) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasSpawnPointId {
        output += "\(indent) spawnPointId: \(spawnPointId) \n"
      }
      if hasPokemonData {
        output += "\(indent) pokemonData {\n"
        if let outDescPokemonData = pokemonData {
          output += try outDescPokemonData.getDescription(indent: "\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      if hasTimeTillHiddenMs {
        output += "\(indent) timeTillHiddenMs: \(timeTillHiddenMs) \n"
      }
      output += unknownFields.getDescription(indent: indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasEncounterId {
               hashCode = (hashCode &* 31) &+ encounterId.hashValue
            }
            if hasLastModifiedTimestampMs {
               hashCode = (hashCode &* 31) &+ lastModifiedTimestampMs.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasSpawnPointId {
               hashCode = (hashCode &* 31) &+ spawnPointId.hashValue
            }
            if hasPokemonData {
                if let hashValuepokemonData = pokemonData?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepokemonData
                }
            }
            if hasTimeTillHiddenMs {
               hashCode = (hashCode &* 31) &+ timeTillHiddenMs.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Pogoprotos.Map.Pokemon.WildPokemon"
    }
    override public func className() -> String {
        return "Pogoprotos.Map.Pokemon.WildPokemon"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      fileprivate var builderResult:Pogoprotos.Map.Pokemon.WildPokemon = Pogoprotos.Map.Pokemon.WildPokemon()
      public func getMessage() -> Pogoprotos.Map.Pokemon.WildPokemon {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasEncounterId:Bool {
           get {
                return builderResult.hasEncounterId
           }
      }
      public var encounterId:UInt64 {
           get {
                return builderResult.encounterId
           }
           set (value) {
               builderResult.hasEncounterId = true
               builderResult.encounterId = value
           }
      }
      @discardableResult
      public func setEncounterId(_ value:UInt64) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.encounterId = value
        return self
      }
      @discardableResult
      public func clearEncounterId() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasEncounterId = false
           builderResult.encounterId = UInt64(0)
           return self
      }
      public var hasLastModifiedTimestampMs:Bool {
           get {
                return builderResult.hasLastModifiedTimestampMs
           }
      }
      public var lastModifiedTimestampMs:Int64 {
           get {
                return builderResult.lastModifiedTimestampMs
           }
           set (value) {
               builderResult.hasLastModifiedTimestampMs = true
               builderResult.lastModifiedTimestampMs = value
           }
      }
      @discardableResult
      public func setLastModifiedTimestampMs(_ value:Int64) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.lastModifiedTimestampMs = value
        return self
      }
      @discardableResult
      public func clearLastModifiedTimestampMs() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasLastModifiedTimestampMs = false
           builderResult.lastModifiedTimestampMs = Int64(0)
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      @discardableResult
      public func setLatitude(_ value:Double) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.latitude = value
        return self
      }
      @discardableResult
      public func clearLatitude() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      @discardableResult
      public func setLongitude(_ value:Double) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.longitude = value
        return self
      }
      @discardableResult
      public func clearLongitude() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      public var hasSpawnPointId:Bool {
           get {
                return builderResult.hasSpawnPointId
           }
      }
      public var spawnPointId:String {
           get {
                return builderResult.spawnPointId
           }
           set (value) {
               builderResult.hasSpawnPointId = true
               builderResult.spawnPointId = value
           }
      }
      @discardableResult
      public func setSpawnPointId(_ value:String) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.spawnPointId = value
        return self
      }
      @discardableResult
      public func clearSpawnPointId() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasSpawnPointId = false
           builderResult.spawnPointId = ""
           return self
      }
      public var hasPokemonData:Bool {
           get {
               return builderResult.hasPokemonData
           }
      }
      public var pokemonData:Pogoprotos.Data.PokemonData! {
           get {
               if pokemonDataBuilder_ != nil {
                  builderResult.pokemonData = pokemonDataBuilder_.getMessage()
               }
               return builderResult.pokemonData
           }
           set (value) {
               builderResult.hasPokemonData = true
               builderResult.pokemonData = value
           }
      }
      fileprivate var pokemonDataBuilder_:Pogoprotos.Data.PokemonData.Builder! {
           didSet {
              builderResult.hasPokemonData = true
           }
      }
      public func getPokemonDataBuilder() -> Pogoprotos.Data.PokemonData.Builder {
        if pokemonDataBuilder_ == nil {
           pokemonDataBuilder_ = Pogoprotos.Data.PokemonData.Builder()
           builderResult.pokemonData = pokemonDataBuilder_.getMessage()
           if pokemonData != nil {
              try! pokemonDataBuilder_.mergeFrom(other: pokemonData)
           }
        }
        return pokemonDataBuilder_
      }
      @discardableResult
      public func setPokemonData(_ value:Pogoprotos.Data.PokemonData!) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.pokemonData = value
        return self
      }
      @discardableResult
      public func mergePokemonData(value:Pogoprotos.Data.PokemonData) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        if builderResult.hasPokemonData {
          builderResult.pokemonData = try Pogoprotos.Data.PokemonData.builderWithPrototype(prototype:builderResult.pokemonData).mergeFrom(other: value).buildPartial()
        } else {
          builderResult.pokemonData = value
        }
        builderResult.hasPokemonData = true
        return self
      }
      @discardableResult
      public func clearPokemonData() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        pokemonDataBuilder_ = nil
        builderResult.hasPokemonData = false
        builderResult.pokemonData = nil
        return self
      }
      public var hasTimeTillHiddenMs:Bool {
           get {
                return builderResult.hasTimeTillHiddenMs
           }
      }
      public var timeTillHiddenMs:Int32 {
           get {
                return builderResult.timeTillHiddenMs
           }
           set (value) {
               builderResult.hasTimeTillHiddenMs = true
               builderResult.timeTillHiddenMs = value
           }
      }
      @discardableResult
      public func setTimeTillHiddenMs(_ value:Int32) -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        self.timeTillHiddenMs = value
        return self
      }
      @discardableResult
      public func clearTimeTillHiddenMs() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder{
           builderResult.hasTimeTillHiddenMs = false
           builderResult.timeTillHiddenMs = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      @discardableResult
      override public func clear() -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        builderResult = Pogoprotos.Map.Pokemon.WildPokemon()
        return self
      }
      override public func clone() throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        return try Pogoprotos.Map.Pokemon.WildPokemon.builderWithPrototype(prototype:builderResult)
      }
      override public func build() throws -> Pogoprotos.Map.Pokemon.WildPokemon {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Pogoprotos.Map.Pokemon.WildPokemon {
        let returnMe:Pogoprotos.Map.Pokemon.WildPokemon = builderResult
        return returnMe
      }
      @discardableResult
      public func mergeFrom(other:Pogoprotos.Map.Pokemon.WildPokemon) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        if other == Pogoprotos.Map.Pokemon.WildPokemon() {
         return self
        }
        if other.hasEncounterId {
             encounterId = other.encounterId
        }
        if other.hasLastModifiedTimestampMs {
             lastModifiedTimestampMs = other.lastModifiedTimestampMs
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasSpawnPointId {
             spawnPointId = other.spawnPointId
        }
        if (other.hasPokemonData) {
            try mergePokemonData(value: other.pokemonData)
        }
        if other.hasTimeTillHiddenMs {
             timeTillHiddenMs = other.timeTillHiddenMs
        }
        _ = try merge(unknownField: other.unknownFields)
        return self
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
           return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
      }
      @discardableResult
      override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
        while (true) {
          let protobufTag = try codedInputStream.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 9:
            encounterId = try codedInputStream.readFixed64()

          case 16:
            lastModifiedTimestampMs = try codedInputStream.readInt64()

          case 25:
            latitude = try codedInputStream.readDouble()

          case 33:
            longitude = try codedInputStream.readDouble()

          case 42:
            spawnPointId = try codedInputStream.readString()

          case 58:
            let subBuilder:Pogoprotos.Data.PokemonData.Builder = Pogoprotos.Data.PokemonData.Builder()
            if hasPokemonData {
              try subBuilder.mergeFrom(other: pokemonData)
            }
            try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
            pokemonData = subBuilder.buildPartial()

          case 88:
            timeTillHiddenMs = try codedInputStream.readInt32()

          default:
            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        let resultDecodedBuilder = Pogoprotos.Map.Pokemon.WildPokemon.Builder()
        if let jsonValueEncounterId = jsonMap["encounterId"] as? String {
          resultDecodedBuilder.encounterId = UInt64(jsonValueEncounterId)!
        }
        if let jsonValueLastModifiedTimestampMs = jsonMap["lastModifiedTimestampMs"] as? String {
          resultDecodedBuilder.lastModifiedTimestampMs = Int64(jsonValueLastModifiedTimestampMs)!
        }
        if let jsonValueLatitude = jsonMap["latitude"] as? Double {
          resultDecodedBuilder.latitude = Double(jsonValueLatitude)
        }
        if let jsonValueLongitude = jsonMap["longitude"] as? Double {
          resultDecodedBuilder.longitude = Double(jsonValueLongitude)
        }
        if let jsonValueSpawnPointId = jsonMap["spawnPointId"] as? String {
          resultDecodedBuilder.spawnPointId = jsonValueSpawnPointId
        }
        if let jsonValuePokemonData = jsonMap["pokemonData"] as? Dictionary<String,Any> {
          resultDecodedBuilder.pokemonData = try Pogoprotos.Data.PokemonData.Builder.decodeToBuilder(jsonMap:jsonValuePokemonData).build()

        }
        if let jsonValueTimeTillHiddenMs = jsonMap["timeTillHiddenMs"] as? Int {
          resultDecodedBuilder.timeTillHiddenMs = Int32(jsonValueTimeTillHiddenMs)
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:Data) throws -> Pogoprotos.Map.Pokemon.WildPokemon.Builder {
        let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
          throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
        }
        return try Pogoprotos.Map.Pokemon.WildPokemon.Builder.decodeToBuilder(jsonMap:jsDataCast)
      }
    }

  }

}
extension Pogoprotos.Map.Pokemon.MapPokemon: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Map.Pokemon.MapPokemon> {
    var mergedArray = Array<Pogoprotos.Map.Pokemon.MapPokemon>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon? {
    return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
    return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Map.Pokemon.PogoprotosMapPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
    return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
    return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
    return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
    return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.MapPokemon {
    return try Pogoprotos.Map.Pokemon.MapPokemon.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Map.Pokemon.NearbyPokemon: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Map.Pokemon.NearbyPokemon> {
    var mergedArray = Array<Pogoprotos.Map.Pokemon.NearbyPokemon>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon? {
    return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
    return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Map.Pokemon.PogoprotosMapPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
    return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
    return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
    return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
    return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.NearbyPokemon {
    return try Pogoprotos.Map.Pokemon.NearbyPokemon.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}
extension Pogoprotos.Map.Pokemon.WildPokemon: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Pogoprotos.Map.Pokemon.WildPokemon> {
    var mergedArray = Array<Pogoprotos.Map.Pokemon.WildPokemon>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon? {
    return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
    return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(data: data, extensionRegistry:Pogoprotos.Map.Pokemon.PogoprotosMapPokemonRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
    return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
    return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
    return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
    return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Pogoprotos.Map.Pokemon.WildPokemon {
    return try Pogoprotos.Map.Pokemon.WildPokemon.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
